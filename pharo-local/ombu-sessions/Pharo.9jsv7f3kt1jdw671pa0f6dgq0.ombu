OmEntry {	#tags : {		#author : 'francoisrousseau',		#time : DateAndTime [ '2018-01-14T19:02:18.594763-05:00' ],		#prior : OmReference [ 'Pharo.1ety6epj8i5kbjcxveaa6cbgd', '5' ],		#self : OmReference [ '1' ]	},	#content : EpMonticelloVersionsLoad {		#versionNames : OrderedCollection [			'BaselineOfAltBrowser-cypress.1'		]	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1' ],		#self : OmReference [ '2' ],		#time : DateAndTime [ '2018-01-14T19:02:19.46049-05:00' ],		#trigger : @3	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'BaselineOf',				#traitCompositionSource : '{}',				#definitionSource : 'BaselineOf subclass: #BaselineOfAltBrowser\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #BaselineOfAltBrowser,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'BaselineOfAltBrowser class\r\tinstanceVariableNames: \'\''				},				#name : #'BaselineOfAltBrowser class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #BaselineOfAltBrowser,					#isMetaSide : false				},				#parent : @7,				#content : 'I give access to the AltBrowser code.\r\rMy keywords represent an attempt at tree classification. Unused now.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I give access to the AltBrowser code.\r\rMy keywords represent an attempt at tree classification. Unused now.',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2' ],		#self : OmReference [ '3' ],		#time : DateAndTime [ '2018-01-14T19:02:19.465375-05:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpCategoryAddition {		#classCategoryName : #BaselineOfAltBrowser,		#affectedPackageName : #BaselineOfAltBrowser	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '3' ],		#self : OmReference [ '4' ],		#time : DateAndTime [ '2018-01-14T19:02:19.695886-05:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'BaselineOf',				#traitCompositionSource : '{}',				#definitionSource : 'BaselineOf subclass: #BaselineOfAltBrowser\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'BaselineOfAltBrowser\''			},			#name : #BaselineOfAltBrowser,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'BaselineOfAltBrowser class\r\tinstanceVariableNames: \'\''				},				#name : #'BaselineOfAltBrowser class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #BaselineOfAltBrowser,					#isMetaSide : false				},				#parent : @8,				#content : 'I give access to the AltBrowser code.\r\rMy keywords represent an attempt at tree classification. Unused now.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #BaselineOfAltBrowser,			#package : #BaselineOfAltBrowser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '4' ],		#self : OmReference [ '5' ],		#time : DateAndTime [ '2018-01-14T19:02:19.905581-05:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'BaselineOfAltBrowser class',				#isMetaSide : true			},			#name : #catalogKeywords,			#protocol : #catalog,			#sourceCode : 'catalogKeywords\r\t^ #(#Development #\'Prefix-Alt\')',			#stamp : ' 1/14/2018 19:02:18',			#package : #BaselineOfAltBrowser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '5' ],		#self : OmReference [ '6' ],		#time : DateAndTime [ '2018-01-14T19:02:19.912309-05:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BaselineOfAltBrowser,				#isMetaSide : false			},			#name : #'baseline:',			#protocol : #baseline,			#sourceCode : 'baseline: spec\r\t<baseline>\r\tspec\r\t\tfor: #common\r\t\tdo: [ spec blessing: #baseline.\r\t\t\tspec\r\t\t\t\tpackage: \'Alt-List\';\r\t\t\t\tpackage: \'Alt-Browser\' with: [ spec requires: #(\'Alt-List\') ];\r\t\t\t\tpackage: \'Alt-TypeCheck\' with: [ spec requires: \'Alt-Browser\' ];\r\t\t\t\tpackage: \'Alt-Inspector\' with: [ spec requires: \'Alt-Browser\' ];\r\t\t\t\tpackage: \'Jejak\' with: [ spec requires: \'Alt-Browser\' ];\r\t\t\t\tpackage: \'Alt-Debugger\' with: [ spec requires: \'Alt-Browser\' ];\r\t\t\t\tgroup: \'default\'\r\t\t\t\t\twith:\r\t\t\t\t\t#(\'Alt-Browser\' \'Alt-Inspector\' \'Jejak\' \'Alt-TypeCheck\' \'Alt-Debugger\') ]',			#stamp : ' 1/14/2018 19:02:18',			#package : #BaselineOfAltBrowser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#time : DateAndTime [ '2018-01-14T19:02:24.267362-05:00' ],		#prior : OmReference [ '6' ],		#self : OmReference [ '7' ]	},	#content : EpMonticelloVersionsLoad {		#versionNames : OrderedCollection [			'Alt-List-cypress.1'		]	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '7' ],		#self : OmReference [ '8' ],		#time : DateAndTime [ '2018-01-14T19:02:24.602032-05:00' ],		#trigger : @3	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Announcement',				#traitCompositionSource : '{}',				#definitionSource : 'Announcement subclass: #AltListChanged\r\tinstanceVariableNames: \'tree\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltListChanged,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltListChanged,						#isMetaSide : false					},					#name : #tree,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltListChanged class\r\tinstanceVariableNames: \'\''				},				#name : #'AltListChanged class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltListChanged,					#isMetaSide : false				},				#parent : @7,				#content : 'Sent when a tree changes.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Sent when a tree changes.',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '8' ],		#self : OmReference [ '9' ],		#time : DateAndTime [ '2018-01-14T19:02:24.603393-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpCategoryAddition {		#classCategoryName : #Alt-List,		#affectedPackageName : #Alt-List	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '9' ],		#self : OmReference [ '10' ],		#time : DateAndTime [ '2018-01-14T19:02:24.738195-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Announcement',				#traitCompositionSource : '{}',				#definitionSource : 'Announcement subclass: #AltListChanged\r\tinstanceVariableNames: \'tree\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-List\''			},			#name : #AltListChanged,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltListChanged,						#isMetaSide : false					},					#name : #tree,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltListChanged class\r\tinstanceVariableNames: \'\''				},				#name : #'AltListChanged class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltListChanged,					#isMetaSide : false				},				#parent : @8,				#content : 'Sent when a tree changes.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-List,			#package : #Alt-List,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '10' ],		#self : OmReference [ '11' ],		#time : DateAndTime [ '2018-01-14T19:02:24.785116-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Announcement',				#traitCompositionSource : '{}',				#definitionSource : 'Announcement subclass: #AltSelectionChanged\r\tinstanceVariableNames: \'oldIndexes newIndexes oldItems newItems\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltSelectionChanged,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltSelectionChanged,						#isMetaSide : false					},					#name : #oldIndexes,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltSelectionChanged,						#isMetaSide : false					},					#name : #newIndexes,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltSelectionChanged,						#isMetaSide : false					},					#name : #oldItems,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltSelectionChanged,						#isMetaSide : false					},					#name : #newItems,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltSelectionChanged class\r\tinstanceVariableNames: \'\''				},				#name : #'AltSelectionChanged class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltSelectionChanged,					#isMetaSide : false				},				#parent : @8,				#content : 'I warn of a selection change.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I warn of a selection change.',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '11' ],		#self : OmReference [ '12' ],		#time : DateAndTime [ '2018-01-14T19:02:24.790558-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Announcement',				#traitCompositionSource : '{}',				#definitionSource : 'Announcement subclass: #AltSelectionChanged\r\tinstanceVariableNames: \'oldIndexes newIndexes oldItems newItems\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-List\''			},			#name : #AltSelectionChanged,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltSelectionChanged,						#isMetaSide : false					},					#name : #oldIndexes,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltSelectionChanged,						#isMetaSide : false					},					#name : #newIndexes,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltSelectionChanged,						#isMetaSide : false					},					#name : #oldItems,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltSelectionChanged,						#isMetaSide : false					},					#name : #newItems,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltSelectionChanged class\r\tinstanceVariableNames: \'\''				},				#name : #'AltSelectionChanged class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltSelectionChanged,					#isMetaSide : false				},				#parent : @8,				#content : 'I warn of a selection change.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-List,			#package : #Alt-List,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '12' ],		#self : OmReference [ '13' ],		#time : DateAndTime [ '2018-01-14T19:02:24.796666-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'ScrollBar',				#traitCompositionSource : '{}',				#definitionSource : 'ScrollBar subclass: #AltScrollBar\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltScrollBar,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltScrollBar class\r\tinstanceVariableNames: \'\''				},				#name : #'AltScrollBar class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltScrollBar,					#isMetaSide : false				},				#parent : @8,				#content : 'To trace some stuff.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'To trace some stuff.',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '13' ],		#self : OmReference [ '14' ],		#time : DateAndTime [ '2018-01-14T19:02:24.798166-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpCategoryAddition {		#classCategoryName : #Alt-List-Tests,		#affectedPackageName : #Alt-List	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '14' ],		#self : OmReference [ '15' ],		#time : DateAndTime [ '2018-01-14T19:02:24.80103-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'ScrollBar',				#traitCompositionSource : '{}',				#definitionSource : 'ScrollBar subclass: #AltScrollBar\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-List-Tests\''			},			#name : #AltScrollBar,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltScrollBar class\r\tinstanceVariableNames: \'\''				},				#name : #'AltScrollBar class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltScrollBar,					#isMetaSide : false				},				#parent : @8,				#content : 'To trace some stuff.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-List-Tests,			#package : #Alt-List,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '15' ],		#self : OmReference [ '16' ],		#time : DateAndTime [ '2018-01-14T19:02:24.820472-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #AltListTests\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltListTests,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltListTests class\r\tinstanceVariableNames: \'\''				},				#name : #'AltListTests class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltListTests,					#isMetaSide : false				},				#parent : @8,				#content : 'Tests for the tree and tree morph support',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Tests for the tree and tree morph support',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '16' ],		#self : OmReference [ '17' ],		#time : DateAndTime [ '2018-01-14T19:02:24.825672-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #AltListTests\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-List-Tests\''			},			#name : #AltListTests,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltListTests class\r\tinstanceVariableNames: \'\''				},				#name : #'AltListTests class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltListTests,					#isMetaSide : false				},				#parent : @8,				#content : 'Tests for the tree and tree morph support',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-List-Tests,			#package : #Alt-List,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '17' ],		#self : OmReference [ '18' ],		#time : DateAndTime [ '2018-01-14T19:02:24.831678-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Morph',				#traitCompositionSource : '{}',				#definitionSource : 'Morph subclass: #AltFenestronMorph\r\tinstanceVariableNames: \'fenestron\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltFenestronMorph,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltFenestronMorph,						#isMetaSide : false					},					#name : #fenestron,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltFenestronMorph class\r\tinstanceVariableNames: \'\''				},				#name : #'AltFenestronMorph class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltFenestronMorph,					#isMetaSide : false				},				#parent : @8,				#content : 'I represent a small viewport on a larger space, shown directly',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I represent a small viewport on a larger space, shown directly',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '18' ],		#self : OmReference [ '19' ],		#time : DateAndTime [ '2018-01-14T19:02:24.834844-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Morph',				#traitCompositionSource : '{}',				#definitionSource : 'Morph subclass: #AltFenestronMorph\r\tinstanceVariableNames: \'fenestron\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-List\''			},			#name : #AltFenestronMorph,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltFenestronMorph,						#isMetaSide : false					},					#name : #fenestron,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltFenestronMorph class\r\tinstanceVariableNames: \'\''				},				#name : #'AltFenestronMorph class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltFenestronMorph,					#isMetaSide : false				},				#parent : @8,				#content : 'I represent a small viewport on a larger space, shown directly',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-List,			#package : #Alt-List,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '19' ],		#self : OmReference [ '20' ],		#time : DateAndTime [ '2018-01-14T19:02:24.839882-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Morph',				#traitCompositionSource : '{}',				#definitionSource : 'Morph subclass: #AltListMorph\r\tinstanceVariableNames: \'model selectionModel verticalScrollBar horizontalScrollBar backgroundColor selectionColor selectedRowIndexes dropIndex viewport stepIndex motion canvas\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltListMorph,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltListMorph,						#isMetaSide : false					},					#name : #model,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltListMorph,						#isMetaSide : false					},					#name : #selectionModel,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltListMorph,						#isMetaSide : false					},					#name : #verticalScrollBar,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltListMorph,						#isMetaSide : false					},					#name : #horizontalScrollBar,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltListMorph,						#isMetaSide : false					},					#name : #backgroundColor,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltListMorph,						#isMetaSide : false					},					#name : #selectionColor,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltListMorph,						#isMetaSide : false					},					#name : #selectedRowIndexes,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltListMorph,						#isMetaSide : false					},					#name : #dropIndex,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltListMorph,						#isMetaSide : false					},					#name : #viewport,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltListMorph,						#isMetaSide : false					},					#name : #stepIndex,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltListMorph,						#isMetaSide : false					},					#name : #motion,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltListMorph,						#isMetaSide : false					},					#name : #canvas,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltListMorph class\r\tinstanceVariableNames: \'\''				},				#name : #'AltListMorph class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltListMorph,					#isMetaSide : false				},				#parent : @8,				#content : 'I\'m an implementation of a tree, in an optimised / dedicated way, reusing the fast table approach (only building and displaying the visible rows).\r\rSince I am a tree, what is indexing is dependent on how nodes in the tree are expanded or not.\r\rEverything too tree like (prior morph or whatever) won\'t exist. From the display point of view, this is a list.\r\rTwo types of refresh / updates:\r- data updates (refresh?)\r- display updates and changes\r\rThe viewport is in charge of effective display.\r\rWe optimize accesses to the model, expecting that #at: (and #size) may be expensive.\r\rThe fact that row item morphs are created only during display is... a hack around the non mastery of self changed (which is sent far too many times). Now, if the response to changed is correct (even if received multiple times), then it could.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I\'m an implementation of a tree, in an optimised / dedicated way, reusing the fast table approach (only building and displaying the visible rows).\r\rSince I am a tree, what is indexing is dependent on how nodes in the tree are expanded or not.\r\rEverything too tree like (prior morph or whatever) won\'t exist. From the display point of view, this is a list.\r\rTwo types of refresh / updates:\r- data updates (refresh?)\r- display updates and changes\r\rThe viewport is in charge of effective display.\r\rWe optimize accesses to the model, expecting that #at: (and #size) may be expensive.\r\rThe fact that row item morphs are created only during display is... a hack around the non mastery of self changed (which is sent far too many times). Now, if the response to changed is correct (even if received multiple times), then it could.',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '20' ],		#self : OmReference [ '21' ],		#time : DateAndTime [ '2018-01-14T19:02:24.843126-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Morph',				#traitCompositionSource : '{}',				#definitionSource : 'Morph subclass: #AltListMorph\r\tinstanceVariableNames: \'model selectionModel verticalScrollBar horizontalScrollBar backgroundColor selectionColor selectedRowIndexes dropIndex viewport stepIndex motion canvas\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-List\''			},			#name : #AltListMorph,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltListMorph,						#isMetaSide : false					},					#name : #model,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltListMorph,						#isMetaSide : false					},					#name : #selectionModel,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltListMorph,						#isMetaSide : false					},					#name : #verticalScrollBar,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltListMorph,						#isMetaSide : false					},					#name : #horizontalScrollBar,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltListMorph,						#isMetaSide : false					},					#name : #backgroundColor,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltListMorph,						#isMetaSide : false					},					#name : #selectionColor,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltListMorph,						#isMetaSide : false					},					#name : #selectedRowIndexes,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltListMorph,						#isMetaSide : false					},					#name : #dropIndex,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltListMorph,						#isMetaSide : false					},					#name : #viewport,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltListMorph,						#isMetaSide : false					},					#name : #stepIndex,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltListMorph,						#isMetaSide : false					},					#name : #motion,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltListMorph,						#isMetaSide : false					},					#name : #canvas,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltListMorph class\r\tinstanceVariableNames: \'\''				},				#name : #'AltListMorph class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltListMorph,					#isMetaSide : false				},				#parent : @8,				#content : 'I\'m an implementation of a tree, in an optimised / dedicated way, reusing the fast table approach (only building and displaying the visible rows).\r\rSince I am a tree, what is indexing is dependent on how nodes in the tree are expanded or not.\r\rEverything too tree like (prior morph or whatever) won\'t exist. From the display point of view, this is a list.\r\rTwo types of refresh / updates:\r- data updates (refresh?)\r- display updates and changes\r\rThe viewport is in charge of effective display.\r\rWe optimize accesses to the model, expecting that #at: (and #size) may be expensive.\r\rThe fact that row item morphs are created only during display is... a hack around the non mastery of self changed (which is sent far too many times). Now, if the response to changed is correct (even if received multiple times), then it could.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-List,			#package : #Alt-List,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '21' ],		#self : OmReference [ '22' ],		#time : DateAndTime [ '2018-01-14T19:02:24.847945-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltListMorph',				#traitCompositionSource : '{}',				#definitionSource : 'AltListMorph subclass: #AltListMorph2\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltListMorph2,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltListMorph2 class\r\tinstanceVariableNames: \'\''				},				#name : #'AltListMorph2 class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltListMorph2,					#isMetaSide : false				},				#parent : @8,				#content : 'I use a ViewportMorph2. And I trace a selection move.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I use a ViewportMorph2. And I trace a selection move.',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '22' ],		#self : OmReference [ '23' ],		#time : DateAndTime [ '2018-01-14T19:02:24.854062-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltListMorph',				#traitCompositionSource : '{}',				#definitionSource : 'AltListMorph subclass: #AltListMorph2\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-List-Tests\''			},			#name : #AltListMorph2,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltListMorph2 class\r\tinstanceVariableNames: \'\''				},				#name : #'AltListMorph2 class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltListMorph2,					#isMetaSide : false				},				#parent : @8,				#content : 'I use a ViewportMorph2. And I trace a selection move.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-List-Tests,			#package : #Alt-List,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '23' ],		#self : OmReference [ '24' ],		#time : DateAndTime [ '2018-01-14T19:02:24.858921-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltListMorph',				#traitCompositionSource : '{}',				#definitionSource : 'AltListMorph subclass: #AltListMorph3\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltListMorph3,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltListMorph3 class\r\tinstanceVariableNames: \'\''				},				#name : #'AltListMorph3 class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltListMorph3,					#isMetaSide : false				},				#parent : @8,				#content : 'For test / tracing purposes',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'For test / tracing purposes',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '24' ],		#self : OmReference [ '25' ],		#time : DateAndTime [ '2018-01-14T19:02:24.86206-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltListMorph',				#traitCompositionSource : '{}',				#definitionSource : 'AltListMorph subclass: #AltListMorph3\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-List-Tests\''			},			#name : #AltListMorph3,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltListMorph3 class\r\tinstanceVariableNames: \'\''				},				#name : #'AltListMorph3 class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltListMorph3,					#isMetaSide : false				},				#parent : @8,				#content : 'For test / tracing purposes',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-List-Tests,			#package : #Alt-List,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '25' ],		#self : OmReference [ '26' ],		#time : DateAndTime [ '2018-01-14T19:02:24.902839-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Morph',				#traitCompositionSource : '{}',				#definitionSource : 'Morph subclass: #AltListViewportMorph\r\tinstanceVariableNames: \'exposedItems topOffset bottomOffset needsRefreshRows needsRefreshItems ensureVisibleSelection cachedModelSize maximumWidth\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltListViewportMorph,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltListViewportMorph,						#isMetaSide : false					},					#name : #exposedItems,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltListViewportMorph,						#isMetaSide : false					},					#name : #topOffset,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltListViewportMorph,						#isMetaSide : false					},					#name : #bottomOffset,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltListViewportMorph,						#isMetaSide : false					},					#name : #needsRefreshRows,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltListViewportMorph,						#isMetaSide : false					},					#name : #needsRefreshItems,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltListViewportMorph,						#isMetaSide : false					},					#name : #ensureVisibleSelection,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltListViewportMorph,						#isMetaSide : false					},					#name : #cachedModelSize,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltListViewportMorph,						#isMetaSide : false					},					#name : #maximumWidth,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltListViewportMorph class\r\tinstanceVariableNames: \'\''				},				#name : #'AltListViewportMorph class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltListViewportMorph,					#isMetaSide : false				},				#parent : @8,				#content : 'I contain visible rows/items in a tree morph. \r\r* Exposed items are a dictionary index -> morph.\r* Two levels of updates: from the model (refresh) and from the view / scrollbars (changed). The latter is optimized.\r* Submorphs items building is delayed until drawing time.\r* I don\'t know in advance the item height; this is an information I never ask the model; it is provided when I get the item Morphic representation.\r* The item is in charge of setting up indentation and collapse/expand behavior, not me.\r* Offset information (both vertical and horizontal) is kept by the scrollbars.\r* My model has a list like interface (#at:, #size; #indexOf:) but I expect those operators to be expensive, so I use streams (and reverse streams) to iterate over the model.\r* When drawing myself, I block my submorphs from reporting damages since I move them around before drawing them.\r* Animation update is delayed / updated at drawing time (to try to minimize jitter?)',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I contain visible rows/items in a tree morph. \r\r* Exposed items are a dictionary index -> morph.\r* Two levels of updates: from the model (refresh) and from the view / scrollbars (changed). The latter is optimized.\r* Submorphs items building is delayed until drawing time.\r* I don\'t know in advance the item height; this is an information I never ask the model; it is provided when I get the item Morphic representation.\r* The item is in charge of setting up indentation and collapse/expand behavior, not me.\r* Offset information (both vertical and horizontal) is kept by the scrollbars.\r* My model has a list like interface (#at:, #size; #indexOf:) but I expect those operators to be expensive, so I use streams (and reverse streams) to iterate over the model.\r* When drawing myself, I block my submorphs from reporting damages since I move them around before drawing them.\r* Animation update is delayed / updated at drawing time (to try to minimize jitter?)',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '26' ],		#self : OmReference [ '27' ],		#time : DateAndTime [ '2018-01-14T19:02:24.907217-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Morph',				#traitCompositionSource : '{}',				#definitionSource : 'Morph subclass: #AltListViewportMorph\r\tinstanceVariableNames: \'exposedItems topOffset bottomOffset needsRefreshRows needsRefreshItems ensureVisibleSelection cachedModelSize maximumWidth\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-List\''			},			#name : #AltListViewportMorph,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltListViewportMorph,						#isMetaSide : false					},					#name : #exposedItems,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltListViewportMorph,						#isMetaSide : false					},					#name : #topOffset,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltListViewportMorph,						#isMetaSide : false					},					#name : #bottomOffset,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltListViewportMorph,						#isMetaSide : false					},					#name : #needsRefreshRows,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltListViewportMorph,						#isMetaSide : false					},					#name : #needsRefreshItems,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltListViewportMorph,						#isMetaSide : false					},					#name : #ensureVisibleSelection,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltListViewportMorph,						#isMetaSide : false					},					#name : #cachedModelSize,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltListViewportMorph,						#isMetaSide : false					},					#name : #maximumWidth,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltListViewportMorph class\r\tinstanceVariableNames: \'\''				},				#name : #'AltListViewportMorph class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltListViewportMorph,					#isMetaSide : false				},				#parent : @8,				#content : 'I contain visible rows/items in a tree morph. \r\r* Exposed items are a dictionary index -> morph.\r* Two levels of updates: from the model (refresh) and from the view / scrollbars (changed). The latter is optimized.\r* Submorphs items building is delayed until drawing time.\r* I don\'t know in advance the item height; this is an information I never ask the model; it is provided when I get the item Morphic representation.\r* The item is in charge of setting up indentation and collapse/expand behavior, not me.\r* Offset information (both vertical and horizontal) is kept by the scrollbars.\r* My model has a list like interface (#at:, #size; #indexOf:) but I expect those operators to be expensive, so I use streams (and reverse streams) to iterate over the model.\r* When drawing myself, I block my submorphs from reporting damages since I move them around before drawing them.\r* Animation update is delayed / updated at drawing time (to try to minimize jitter?)',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-List,			#package : #Alt-List,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '27' ],		#self : OmReference [ '28' ],		#time : DateAndTime [ '2018-01-14T19:02:24.913118-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltListViewportMorph',				#traitCompositionSource : '{}',				#definitionSource : 'AltListViewportMorph subclass: #AltListViewportMorph2\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltListViewportMorph2,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltListViewportMorph2 class\r\tinstanceVariableNames: \'\''				},				#name : #'AltListViewportMorph2 class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltListViewportMorph2,					#isMetaSide : false				},				#parent : @8,				#content : 'I use a normal change / refresh mode and I do not defer those to the #drawOn:.\r\rI\'m slower on startup / open than my ancestor, but I display faster (a bit, not by much). I do update myself a lot more when opening (and on other operations, such as opening a path in the tree) because I do an update on every changed request instead of only once displayed.\r\rOn \'Object browse\', this has a 50 ms execution cost.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I use a normal change / refresh mode and I do not defer those to the #drawOn:.\r\rI\'m slower on startup / open than my ancestor, but I display faster (a bit, not by much). I do update myself a lot more when opening (and on other operations, such as opening a path in the tree) because I do an update on every changed request instead of only once displayed.\r\rOn \'Object browse\', this has a 50 ms execution cost.',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '28' ],		#self : OmReference [ '29' ],		#time : DateAndTime [ '2018-01-14T19:02:24.918471-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltListViewportMorph',				#traitCompositionSource : '{}',				#definitionSource : 'AltListViewportMorph subclass: #AltListViewportMorph2\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-List-Tests\''			},			#name : #AltListViewportMorph2,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltListViewportMorph2 class\r\tinstanceVariableNames: \'\''				},				#name : #'AltListViewportMorph2 class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltListViewportMorph2,					#isMetaSide : false				},				#parent : @8,				#content : 'I use a normal change / refresh mode and I do not defer those to the #drawOn:.\r\rI\'m slower on startup / open than my ancestor, but I display faster (a bit, not by much). I do update myself a lot more when opening (and on other operations, such as opening a path in the tree) because I do an update on every changed request instead of only once displayed.\r\rOn \'Object browse\', this has a 50 ms execution cost.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-List-Tests,			#package : #Alt-List,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '29' ],		#self : OmReference [ '30' ],		#time : DateAndTime [ '2018-01-14T19:02:24.923438-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltListViewportMorph',				#traitCompositionSource : '{}',				#definitionSource : 'AltListViewportMorph subclass: #AltListViewportMorph3\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltListViewportMorph3,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltListViewportMorph3 class\r\tinstanceVariableNames: \'\''				},				#name : #'AltListViewportMorph3 class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltListViewportMorph3,					#isMetaSide : false				},				#parent : @8,				#content : 'For tests / traces purposes',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'For tests / traces purposes',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '30' ],		#self : OmReference [ '31' ],		#time : DateAndTime [ '2018-01-14T19:02:24.926809-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltListViewportMorph',				#traitCompositionSource : '{}',				#definitionSource : 'AltListViewportMorph subclass: #AltListViewportMorph3\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-List-Tests\''			},			#name : #AltListViewportMorph3,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltListViewportMorph3 class\r\tinstanceVariableNames: \'\''				},				#name : #'AltListViewportMorph3 class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltListViewportMorph3,					#isMetaSide : false				},				#parent : @8,				#content : 'For tests / traces purposes',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-List-Tests,			#package : #Alt-List,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '31' ],		#self : OmReference [ '32' ],		#time : DateAndTime [ '2018-01-14T19:02:24.931562-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Morph',				#traitCompositionSource : '{}',				#definitionSource : 'Morph subclass: #AltTreeItemMorph\r\tinstanceVariableNames: \'item\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltTreeItemMorph,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltTreeItemMorph,						#isMetaSide : false					},					#name : #item,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltTreeItemMorph class\r\tinstanceVariableNames: \'\''				},				#name : #'AltTreeItemMorph class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltTreeItemMorph,					#isMetaSide : false				},				#parent : @8,				#content : 'I represent a tree item. I am able to properly build a morphic representation of the item I represent, this is all.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I represent a tree item. I am able to properly build a morphic representation of the item I represent, this is all.',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '32' ],		#self : OmReference [ '33' ],		#time : DateAndTime [ '2018-01-14T19:02:24.936842-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Morph',				#traitCompositionSource : '{}',				#definitionSource : 'Morph subclass: #AltTreeItemMorph\r\tinstanceVariableNames: \'item\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-List\''			},			#name : #AltTreeItemMorph,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltTreeItemMorph,						#isMetaSide : false					},					#name : #item,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltTreeItemMorph class\r\tinstanceVariableNames: \'\''				},				#name : #'AltTreeItemMorph class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltTreeItemMorph,					#isMetaSide : false				},				#parent : @8,				#content : 'I represent a tree item. I am able to properly build a morphic representation of the item I represent, this is all.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-List,			#package : #Alt-List,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '33' ],		#self : OmReference [ '34' ],		#time : DateAndTime [ '2018-01-14T19:02:24.95103-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #AltLog\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'Log\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltLog,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltLog class\r\tinstanceVariableNames: \'\''				},				#name : #'AltLog class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltLog,					#isMetaSide : false				},				#parent : @8,				#content : 'Just to log stuff.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltLog,						#isMetaSide : false					},					#name : #Log,					#parent : @8				}			],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Just to log stuff.',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '34' ],		#self : OmReference [ '35' ],		#time : DateAndTime [ '2018-01-14T19:02:24.952494-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpCategoryAddition {		#classCategoryName : #Alt-List-Animation,		#affectedPackageName : #Alt-List	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '35' ],		#self : OmReference [ '36' ],		#time : DateAndTime [ '2018-01-14T19:02:24.957409-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #AltLog\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'Log\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-List-Animation\''			},			#name : #AltLog,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltLog class\r\tinstanceVariableNames: \'\''				},				#name : #'AltLog class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltLog,					#isMetaSide : false				},				#parent : @8,				#content : 'Just to log stuff.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltLog,						#isMetaSide : false					},					#name : #Log,					#parent : @8				}			],			#category : #Alt-List-Animation,			#package : #Alt-List,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '36' ],		#self : OmReference [ '37' ],		#time : DateAndTime [ '2018-01-14T19:02:24.96341-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #AltMotion\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltMotion,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltMotion class\r\tinstanceVariableNames: \'\''				},				#name : #'AltMotion class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltMotion,					#isMetaSide : false				},				#parent : @8,				#content : 'Base class for motions. Just defines a combining interface and the next method.\r\rAltMotion>>#step\r\tUpdate value and check that the Motion is still active or not\r\rAltMotion>>#check\r\tCheck that the motion is still active. Returns self if yes, nil if not.\r\tAllows a motion to replace itself with another...\r\rAltMotion>>#value\r\tApply the value for now in the animation.\r\t\rstep is written as value followed by check.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Base class for motions. Just defines a combining interface and the next method.\r\rAltMotion>>#step\r\tUpdate value and check that the Motion is still active or not\r\rAltMotion>>#check\r\tCheck that the motion is still active. Returns self if yes, nil if not.\r\tAllows a motion to replace itself with another...\r\rAltMotion>>#value\r\tApply the value for now in the animation.\r\t\rstep is written as value followed by check.',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '37' ],		#self : OmReference [ '38' ],		#time : DateAndTime [ '2018-01-14T19:02:24.966886-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #AltMotion\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-List-Animation\''			},			#name : #AltMotion,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltMotion class\r\tinstanceVariableNames: \'\''				},				#name : #'AltMotion class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltMotion,					#isMetaSide : false				},				#parent : @8,				#content : 'Base class for motions. Just defines a combining interface and the next method.\r\rAltMotion>>#step\r\tUpdate value and check that the Motion is still active or not\r\rAltMotion>>#check\r\tCheck that the motion is still active. Returns self if yes, nil if not.\r\tAllows a motion to replace itself with another...\r\rAltMotion>>#value\r\tApply the value for now in the animation.\r\t\rstep is written as value followed by check.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-List-Animation,			#package : #Alt-List,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '38' ],		#self : OmReference [ '39' ],		#time : DateAndTime [ '2018-01-14T19:02:24.972381-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltMotion',				#traitCompositionSource : '{}',				#definitionSource : 'AltMotion subclass: #AltOneShotMotion\r\tinstanceVariableNames: \'action\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltOneShotMotion,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltOneShotMotion,						#isMetaSide : false					},					#name : #action,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltOneShotMotion class\r\tinstanceVariableNames: \'\''				},				#name : #'AltOneShotMotion class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltOneShotMotion,					#isMetaSide : false				},				#parent : @8,				#content : 'One shot action in an animation. Done once.\r\rensure that we do this once, even if we are called or used afterwards.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'One shot action in an animation. Done once.\r\rensure that we do this once, even if we are called or used afterwards.',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '39' ],		#self : OmReference [ '40' ],		#time : DateAndTime [ '2018-01-14T19:02:24.975691-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltMotion',				#traitCompositionSource : '{}',				#definitionSource : 'AltMotion subclass: #AltOneShotMotion\r\tinstanceVariableNames: \'action\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-List-Animation\''			},			#name : #AltOneShotMotion,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltOneShotMotion,						#isMetaSide : false					},					#name : #action,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltOneShotMotion class\r\tinstanceVariableNames: \'\''				},				#name : #'AltOneShotMotion class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltOneShotMotion,					#isMetaSide : false				},				#parent : @8,				#content : 'One shot action in an animation. Done once.\r\rensure that we do this once, even if we are called or used afterwards.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-List-Animation,			#package : #Alt-List,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '40' ],		#self : OmReference [ '41' ],		#time : DateAndTime [ '2018-01-14T19:02:24.980295-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltMotion',				#traitCompositionSource : '{}',				#definitionSource : 'AltMotion subclass: #AltSequenceMotion\r\tinstanceVariableNames: \'motions\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltSequenceMotion,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltSequenceMotion,						#isMetaSide : false					},					#name : #motions,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltSequenceMotion class\r\tinstanceVariableNames: \'\''				},				#name : #'AltSequenceMotion class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltSequenceMotion,					#isMetaSide : false				},				#parent : @8,				#content : 'Combine motions into a sequence (once first one is done, remove it and switch to next one).',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Combine motions into a sequence (once first one is done, remove it and switch to next one).',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '41' ],		#self : OmReference [ '42' ],		#time : DateAndTime [ '2018-01-14T19:02:24.983642-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltMotion',				#traitCompositionSource : '{}',				#definitionSource : 'AltMotion subclass: #AltSequenceMotion\r\tinstanceVariableNames: \'motions\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-List-Animation\''			},			#name : #AltSequenceMotion,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltSequenceMotion,						#isMetaSide : false					},					#name : #motions,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltSequenceMotion class\r\tinstanceVariableNames: \'\''				},				#name : #'AltSequenceMotion class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltSequenceMotion,					#isMetaSide : false				},				#parent : @8,				#content : 'Combine motions into a sequence (once first one is done, remove it and switch to next one).',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-List-Animation,			#package : #Alt-List,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '42' ],		#self : OmReference [ '43' ],		#time : DateAndTime [ '2018-01-14T19:02:24.991604-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltMotion',				#traitCompositionSource : '{}',				#definitionSource : 'AltMotion subclass: #AltTweenMotion\r\tinstanceVariableNames: \'startTime endTime startValue endValue tween action\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltTweenMotion,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltTweenMotion,						#isMetaSide : false					},					#name : #startTime,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltTweenMotion,						#isMetaSide : false					},					#name : #endTime,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltTweenMotion,						#isMetaSide : false					},					#name : #startValue,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltTweenMotion,						#isMetaSide : false					},					#name : #endValue,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltTweenMotion,						#isMetaSide : false					},					#name : #tween,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltTweenMotion,						#isMetaSide : false					},					#name : #action,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltTweenMotion class\r\tinstanceVariableNames: \'\''				},				#name : #'AltTweenMotion class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltTweenMotion,					#isMetaSide : false				},				#parent : @8,				#content : 'This class register a motion and plan for it.\r\rIt\'s derived from the tween approach of Robert Penner.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'This class register a motion and plan for it.\r\rIt\'s derived from the tween approach of Robert Penner.',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '43' ],		#self : OmReference [ '44' ],		#time : DateAndTime [ '2018-01-14T19:02:24.995374-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltMotion',				#traitCompositionSource : '{}',				#definitionSource : 'AltMotion subclass: #AltTweenMotion\r\tinstanceVariableNames: \'startTime endTime startValue endValue tween action\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-List-Animation\''			},			#name : #AltTweenMotion,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltTweenMotion,						#isMetaSide : false					},					#name : #startTime,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltTweenMotion,						#isMetaSide : false					},					#name : #endTime,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltTweenMotion,						#isMetaSide : false					},					#name : #startValue,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltTweenMotion,						#isMetaSide : false					},					#name : #endValue,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltTweenMotion,						#isMetaSide : false					},					#name : #tween,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltTweenMotion,						#isMetaSide : false					},					#name : #action,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltTweenMotion class\r\tinstanceVariableNames: \'\''				},				#name : #'AltTweenMotion class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltTweenMotion,					#isMetaSide : false				},				#parent : @8,				#content : 'This class register a motion and plan for it.\r\rIt\'s derived from the tween approach of Robert Penner.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-List-Animation,			#package : #Alt-List,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '44' ],		#self : OmReference [ '45' ],		#time : DateAndTime [ '2018-01-14T19:02:25.000375-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #AltTreeItemModel\r\tinstanceVariableNames: \'parent item contents expanded announcer selectedItem selectedIndex\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltTreeItemModel,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltTreeItemModel,						#isMetaSide : false					},					#name : #parent,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltTreeItemModel,						#isMetaSide : false					},					#name : #item,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltTreeItemModel,						#isMetaSide : false					},					#name : #contents,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltTreeItemModel,						#isMetaSide : false					},					#name : #expanded,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltTreeItemModel,						#isMetaSide : false					},					#name : #announcer,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltTreeItemModel,						#isMetaSide : false					},					#name : #selectedItem,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltTreeItemModel,						#isMetaSide : false					},					#name : #selectedIndex,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltTreeItemModel class\r\tinstanceVariableNames: \'\''				},				#name : #'AltTreeItemModel class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltTreeItemModel,					#isMetaSide : false				},				#parent : @8,				#content : 'I\'m a graph item. I represent a tree item and I know of the parent / child relationship I have.\r\rFor convenience, tests and examples, a complete tree can be created from an array of arrays (of arrays and so on).\r\rI don\'t have the normal Model behavior, I only have an announcer.\r\rBy default, I have a hiddent root sitting at index 0 (see changes in my behavior when my parent is nil).\r\rI am polymorphic to a list: the list object itself sits as the root item (0) and all elements of the list are the [1..n] items.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I\'m a graph item. I represent a tree item and I know of the parent / child relationship I have.\r\rFor convenience, tests and examples, a complete tree can be created from an array of arrays (of arrays and so on).\r\rI don\'t have the normal Model behavior, I only have an announcer.\r\rBy default, I have a hiddent root sitting at index 0 (see changes in my behavior when my parent is nil).\r\rI am polymorphic to a list: the list object itself sits as the root item (0) and all elements of the list are the [1..n] items.',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '45' ],		#self : OmReference [ '46' ],		#time : DateAndTime [ '2018-01-14T19:02:25.004862-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #AltTreeItemModel\r\tinstanceVariableNames: \'parent item contents expanded announcer selectedItem selectedIndex\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-List\''			},			#name : #AltTreeItemModel,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltTreeItemModel,						#isMetaSide : false					},					#name : #parent,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltTreeItemModel,						#isMetaSide : false					},					#name : #item,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltTreeItemModel,						#isMetaSide : false					},					#name : #contents,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltTreeItemModel,						#isMetaSide : false					},					#name : #expanded,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltTreeItemModel,						#isMetaSide : false					},					#name : #announcer,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltTreeItemModel,						#isMetaSide : false					},					#name : #selectedItem,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltTreeItemModel,						#isMetaSide : false					},					#name : #selectedIndex,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltTreeItemModel class\r\tinstanceVariableNames: \'\''				},				#name : #'AltTreeItemModel class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltTreeItemModel,					#isMetaSide : false				},				#parent : @8,				#content : 'I\'m a graph item. I represent a tree item and I know of the parent / child relationship I have.\r\rFor convenience, tests and examples, a complete tree can be created from an array of arrays (of arrays and so on).\r\rI don\'t have the normal Model behavior, I only have an announcer.\r\rBy default, I have a hiddent root sitting at index 0 (see changes in my behavior when my parent is nil).\r\rI am polymorphic to a list: the list object itself sits as the root item (0) and all elements of the list are the [1..n] items.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-List,			#package : #Alt-List,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '46' ],		#self : OmReference [ '47' ],		#time : DateAndTime [ '2018-01-14T19:02:25.009678-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltTreeItemModel',				#traitCompositionSource : '{}',				#definitionSource : 'AltTreeItemModel subclass: #AltBlockItemExample\r\tinstanceVariableNames: \'childrenBlock\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltBlockItemExample,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltBlockItemExample,						#isMetaSide : false					},					#name : #childrenBlock,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltBlockItemExample class\r\tinstanceVariableNames: \'\''				},				#name : #'AltBlockItemExample class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltBlockItemExample,					#isMetaSide : false				},				#parent : @8,				#content : 'I have a block to create my children',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I have a block to create my children',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '47' ],		#self : OmReference [ '48' ],		#time : DateAndTime [ '2018-01-14T19:02:25.012794-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltTreeItemModel',				#traitCompositionSource : '{}',				#definitionSource : 'AltTreeItemModel subclass: #AltBlockItemExample\r\tinstanceVariableNames: \'childrenBlock\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-List-Tests\''			},			#name : #AltBlockItemExample,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltBlockItemExample,						#isMetaSide : false					},					#name : #childrenBlock,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltBlockItemExample class\r\tinstanceVariableNames: \'\''				},				#name : #'AltBlockItemExample class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltBlockItemExample,					#isMetaSide : false				},				#parent : @8,				#content : 'I have a block to create my children',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-List-Tests,			#package : #Alt-List,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '48' ],		#self : OmReference [ '49' ],		#time : DateAndTime [ '2018-01-14T19:02:25.017496-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltTreeItemModel',				#traitCompositionSource : '{}',				#definitionSource : 'AltTreeItemModel subclass: #AltRandomItemExample\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltRandomItemExample,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltRandomItemExample class\r\tinstanceVariableNames: \'\''				},				#name : #'AltRandomItemExample class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltRandomItemExample,					#isMetaSide : false				},				#parent : @8,				#content : 'This is an example item, with a morph size at random.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'This is an example item, with a morph size at random.',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '49' ],		#self : OmReference [ '50' ],		#time : DateAndTime [ '2018-01-14T19:02:25.021794-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltTreeItemModel',				#traitCompositionSource : '{}',				#definitionSource : 'AltTreeItemModel subclass: #AltRandomItemExample\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-List-Tests\''			},			#name : #AltRandomItemExample,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltRandomItemExample class\r\tinstanceVariableNames: \'\''				},				#name : #'AltRandomItemExample class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltRandomItemExample,					#isMetaSide : false				},				#parent : @8,				#content : 'This is an example item, with a morph size at random.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-List-Tests,			#package : #Alt-List,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '50' ],		#self : OmReference [ '51' ],		#time : DateAndTime [ '2018-01-14T19:02:25.03557-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltTreeItemModel',				#traitCompositionSource : '{}',				#definitionSource : 'AltTreeItemModel subclass: #AltTallItemExample\r\tinstanceVariableNames: \'height\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltTallItemExample,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltTallItemExample,						#isMetaSide : false					},					#name : #height,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltTallItemExample class\r\tinstanceVariableNames: \'\''				},				#name : #'AltTallItemExample class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltTallItemExample,					#isMetaSide : false				},				#parent : @8,				#content : 'I am an item with a specified height.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I am an item with a specified height.',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '51' ],		#self : OmReference [ '52' ],		#time : DateAndTime [ '2018-01-14T19:02:25.038665-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltTreeItemModel',				#traitCompositionSource : '{}',				#definitionSource : 'AltTreeItemModel subclass: #AltTallItemExample\r\tinstanceVariableNames: \'height\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-List-Tests\''			},			#name : #AltTallItemExample,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltTallItemExample,						#isMetaSide : false					},					#name : #height,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltTallItemExample class\r\tinstanceVariableNames: \'\''				},				#name : #'AltTallItemExample class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltTallItemExample,					#isMetaSide : false				},				#parent : @8,				#content : 'I am an item with a specified height.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-List-Tests,			#package : #Alt-List,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '52' ],		#self : OmReference [ '53' ],		#time : DateAndTime [ '2018-01-14T19:02:25.043427-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltTreeItemModel',				#traitCompositionSource : '{}',				#definitionSource : 'AltTreeItemModel subclass: #AltTextItemExample\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltTextItemExample,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltTextItemExample class\r\tinstanceVariableNames: \'\''				},				#name : #'AltTextItemExample class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltTextItemExample,					#isMetaSide : false				},				#parent : @8,				#content : 'An item representing a line of text',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'An item representing a line of text',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '53' ],		#self : OmReference [ '54' ],		#time : DateAndTime [ '2018-01-14T19:02:25.047671-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltTreeItemModel',				#traitCompositionSource : '{}',				#definitionSource : 'AltTreeItemModel subclass: #AltTextItemExample\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-List-Tests\''			},			#name : #AltTextItemExample,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltTextItemExample class\r\tinstanceVariableNames: \'\''				},				#name : #'AltTextItemExample class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltTextItemExample,					#isMetaSide : false				},				#parent : @8,				#content : 'An item representing a line of text',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-List-Tests,			#package : #Alt-List,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '54' ],		#self : OmReference [ '55' ],		#time : DateAndTime [ '2018-01-14T19:02:25.052521-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #AltTreeReadStream\r\tinstanceVariableNames: \'position item stack collection\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltTreeReadStream,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltTreeReadStream,						#isMetaSide : false					},					#name : #position,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltTreeReadStream,						#isMetaSide : false					},					#name : #item,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltTreeReadStream,						#isMetaSide : false					},					#name : #stack,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltTreeReadStream,						#isMetaSide : false					},					#name : #collection,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltTreeReadStream class\r\tinstanceVariableNames: \'\''				},				#name : #'AltTreeReadStream class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltTreeReadStream,					#isMetaSide : false				},				#parent : @8,				#content : 'A very simple read stream for a stream-like interface to the tree we use here. \r\rIt\'s an optimisation for accelerating the access to a sequence of items. But it may be perfectly overkill. Needs validation.\r\rInclude code to adapt to the fact root may not be a selectable item.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'A very simple read stream for a stream-like interface to the tree we use here. \r\rIt\'s an optimisation for accelerating the access to a sequence of items. But it may be perfectly overkill. Needs validation.\r\rInclude code to adapt to the fact root may not be a selectable item.',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '55' ],		#self : OmReference [ '56' ],		#time : DateAndTime [ '2018-01-14T19:02:25.055667-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #AltTreeReadStream\r\tinstanceVariableNames: \'position item stack collection\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-List\''			},			#name : #AltTreeReadStream,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltTreeReadStream,						#isMetaSide : false					},					#name : #position,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltTreeReadStream,						#isMetaSide : false					},					#name : #item,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltTreeReadStream,						#isMetaSide : false					},					#name : #stack,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltTreeReadStream,						#isMetaSide : false					},					#name : #collection,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltTreeReadStream class\r\tinstanceVariableNames: \'\''				},				#name : #'AltTreeReadStream class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltTreeReadStream,					#isMetaSide : false				},				#parent : @8,				#content : 'A very simple read stream for a stream-like interface to the tree we use here. \r\rIt\'s an optimisation for accelerating the access to a sequence of items. But it may be perfectly overkill. Needs validation.\r\rInclude code to adapt to the fact root may not be a selectable item.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-List,			#package : #Alt-List,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '56' ],		#self : OmReference [ '57' ],		#time : DateAndTime [ '2018-01-14T19:02:25.061536-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltTreeReadStream',				#traitCompositionSource : '{}',				#definitionSource : 'AltTreeReadStream subclass: #AltTreeReverseReadStream\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltTreeReverseReadStream,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltTreeReverseReadStream class\r\tinstanceVariableNames: \'\''				},				#name : #'AltTreeReverseReadStream class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltTreeReverseReadStream,					#isMetaSide : false				},				#parent : @8,				#content : 'Just do the iterations in reverse.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Just do the iterations in reverse.',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '57' ],		#self : OmReference [ '58' ],		#time : DateAndTime [ '2018-01-14T19:02:25.065869-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltTreeReadStream',				#traitCompositionSource : '{}',				#definitionSource : 'AltTreeReadStream subclass: #AltTreeReverseReadStream\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-List\''			},			#name : #AltTreeReverseReadStream,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltTreeReverseReadStream class\r\tinstanceVariableNames: \'\''				},				#name : #'AltTreeReverseReadStream class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltTreeReverseReadStream,					#isMetaSide : false				},				#parent : @8,				#content : 'Just do the iterations in reverse.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-List,			#package : #Alt-List,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '58' ],		#self : OmReference [ '59' ],		#time : DateAndTime [ '2018-01-14T19:02:25.408705-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltListChanged class',				#isMetaSide : true			},			#name : #'on:',			#protocol : #'instance creation',			#sourceCode : 'on: aTree\r\t^ self new tree: aTree',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '59' ],		#self : OmReference [ '60' ],		#time : DateAndTime [ '2018-01-14T19:02:25.411194-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListChanged,				#isMetaSide : false			},			#name : #tree,			#protocol : #accessing,			#sourceCode : 'tree\r\t^ tree',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '60' ],		#self : OmReference [ '61' ],		#time : DateAndTime [ '2018-01-14T19:02:25.41306-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListChanged,				#isMetaSide : false			},			#name : #'tree:',			#protocol : #accessing,			#sourceCode : 'tree: anObject\r\ttree := anObject',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '61' ],		#self : OmReference [ '62' ],		#time : DateAndTime [ '2018-01-14T19:02:25.414378-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltSelectionChanged class',				#isMetaSide : true			},			#name : #'from:to:',			#protocol : #'instance creation',			#sourceCode : 'from: oldIndexes to: newIndexes\r\t^ self new\r\t\toldIndexes: oldIndexes;\r\t\tnewIndexes: newIndexes;\r\t\tyourself',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '62' ],		#self : OmReference [ '63' ],		#time : DateAndTime [ '2018-01-14T19:02:25.415487-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltSelectionChanged,				#isMetaSide : false			},			#name : #newIndexes,			#protocol : #accessing,			#sourceCode : 'newIndexes\r\t^ newIndexes ifNil: [ newIndexes := OrderedCollection new ]',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '63' ],		#self : OmReference [ '64' ],		#time : DateAndTime [ '2018-01-14T19:02:25.416497-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltSelectionChanged,				#isMetaSide : false			},			#name : #'newIndexes:',			#protocol : #accessing,			#sourceCode : 'newIndexes: anObject\r\tnewIndexes := anObject',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '64' ],		#self : OmReference [ '65' ],		#time : DateAndTime [ '2018-01-14T19:02:25.417403-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltSelectionChanged,				#isMetaSide : false			},			#name : #newItems,			#protocol : #accessing,			#sourceCode : 'newItems\r\t^ newItems ifNil: [ newItems := OrderedCollection new ]',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '65' ],		#self : OmReference [ '66' ],		#time : DateAndTime [ '2018-01-14T19:02:25.418331-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltSelectionChanged,				#isMetaSide : false			},			#name : #oldIndexes,			#protocol : #accessing,			#sourceCode : 'oldIndexes\r\t^ oldIndexes ifNil: [ oldIndexes := OrderedCollection new ]',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '66' ],		#self : OmReference [ '67' ],		#time : DateAndTime [ '2018-01-14T19:02:25.419171-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltSelectionChanged,				#isMetaSide : false			},			#name : #'oldIndexes:',			#protocol : #accessing,			#sourceCode : 'oldIndexes: anObject\r\toldIndexes := anObject',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '67' ],		#self : OmReference [ '68' ],		#time : DateAndTime [ '2018-01-14T19:02:25.421338-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltSelectionChanged,				#isMetaSide : false			},			#name : #oldItems,			#protocol : #accessing,			#sourceCode : 'oldItems\r^oldItems ifNil: [oldItems := OrderedCollection new]',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '68' ],		#self : OmReference [ '69' ],		#time : DateAndTime [ '2018-01-14T19:02:25.42292-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Array,				#isMetaSide : false			},			#name : #asAltTree,			#protocol : #'*alt-list',			#sourceCode : 'asAltTree\r\t"Hidden root."\r\r\t^ AltTreeItemModel new\r\t\tcontents: (Array with: self asAltTreeItem);\r\t\tyourself',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '69' ],		#self : OmReference [ '70' ],		#time : DateAndTime [ '2018-01-14T19:02:25.424284-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Array,				#isMetaSide : false			},			#name : #asAltTreeItem,			#protocol : #'*alt-list',			#sourceCode : 'asAltTreeItem\r\t^ (AltTreeItemModel on: self first)\r\t\tcontents: (self allButFirst collect: [ :ci | ci asAltTreeItem ]);\r\t\tisExpanded: true;\r\t\tyourself',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '70' ],		#self : OmReference [ '71' ],		#time : DateAndTime [ '2018-01-14T19:02:25.425187-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltScrollBar,				#isMetaSide : false			},			#name : #roomToMove,			#protocol : #'as yet unclassified',			#sourceCode : 'roomToMove\r\t"Use the full area. We consider the model will not get out of hand."\r\r\t^ self totalSliderArea',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '71' ],		#self : OmReference [ '72' ],		#time : DateAndTime [ '2018-01-14T19:02:25.42617-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltScrollBar,				#isMetaSide : false			},			#name : #'setScrollValue:',			#protocol : #'as yet unclassified',			#sourceCode : 'setScrollValue: aValue\r\tsuper value: aValue',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '72' ],		#self : OmReference [ '73' ],		#time : DateAndTime [ '2018-01-14T19:02:25.427374-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltListTests class',				#isMetaSide : true			},			#name : #exampleRandomItems,			#protocol : #examples,			#sourceCode : 'exampleRandomItems\r\t"Create a large array of elements at random."\r\r\t"AltTreeTests exampleRandomItems"\r\r\t"Notes on that one:\r\t- Performance analysis on an instance of that example:\r\t\t[ self refresh. self fullDrawOn: Display getCanvas ] timeProfile\r\t- Drawing large fonts is extremely slow in LCD mode for freetype:\r\t\t422ms, 331ms in the display, 87ms refreshing the items.\r\t- Drawing in CRT mode for freetype is a lot faster, but ugly on small glyphs:\r\t\t166ms, 110ms refreshing the items, 46ms in the display.\r\tWould an optimisation on no subpixel for large fonts correct that?"\r\r\t<example>\r\t| tree morph |\r\ttree := AltRandomItemExample new.\r\ttree item: 0.\r\ttree\r\t\tcontents:\r\t\t\t((1 to: 20000)\r\t\t\t\tcollect:\r\t\t\t\t\t[ :e | AltRandomItemExample new parent: tree; item: e * (10 ** (1 to: 10) atRandom) ]).\r\ttree expand.\r\tmorph := AltListMorph new.\r\tmorph model: tree.\r\tmorph extent: 300 @ 1000.\r\tmorph openInWindow.\r\t^ morph',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '73' ],		#self : OmReference [ '74' ],		#time : DateAndTime [ '2018-01-14T19:02:25.428435-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltListTests class',				#isMetaSide : true			},			#name : #exampleSimpleTree,			#protocol : #examples,			#sourceCode : 'exampleSimpleTree\r\t"Create a simple instance of it and display it."\r\r\t"AltTreeTests exampleSimpleTree"\r\r\t<example>\r\t| tree morph |\r\ttree := #(1 #(2 4 5) 3) asAltTree.\r\tmorph := AltListMorph2 new.\r\tmorph model: tree.\r\tmorph openInWindow.\r\t^ morph',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '74' ],		#self : OmReference [ '75' ],		#time : DateAndTime [ '2018-01-14T19:02:25.429435-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltListTests class',				#isMetaSide : true			},			#name : #exampleSimpleTree2,			#protocol : #examples,			#sourceCode : 'exampleSimpleTree2\r\t"Create a simple instance of it and display it."\r\r\t"Triggers both horizontal and vertical scrollbar and shows\r\thow it gets the horizontal scrollbar wrong."\r\r\t"AltTreeTests exampleSimpleTree2"\r\r\t<example>\r\t| tree morph |\r\ttree := #(1 #(2 4 56789012345678902367) 3) asAltTree.\r\tmorph := AltListMorph2 new.\r\tmorph model: tree.\r\tmorph openInWindow.\r\t^ morph',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '75' ],		#self : OmReference [ '76' ],		#time : DateAndTime [ '2018-01-14T19:02:25.430392-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltListTests class',				#isMetaSide : true			},			#name : #exampleTallItems,			#protocol : #examples,			#sourceCode : 'exampleTallItems\r\t"Create an array of tall elements at random."\r\r\t"Notes on that one:\r\t\tSince scrolling is logical in an AltTree, there is a distortion when the row\r\t\tare tall, with a specific issue when the row is taller than the view. The\r\t\tapproach would be to have a kind of translation from pixel scrolling into\r\t\tlogical (rows) scrolling which depends of the row height."\r\r\t<example>\r\t| tree morph |\r\ttree := AltTallItemExample new.\r\ttree item: 0.\r\ttree\r\t\tcontents:\r\t\t\t((1 to: 100)\r\t\t\t\tcollect:\r\t\t\t\t\t[ :e | AltTallItemExample new parent: tree; item: e * (10 ** (1 to: 10) atRandom) ]).\r\ttree expand.\r\tmorph := AltListMorph new.\r\tmorph model: tree.\r\tmorph extent: 300 @ 200.\r\tmorph openInWindow.\r\t^ morph',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '76' ],		#self : OmReference [ '77' ],		#time : DateAndTime [ '2018-01-14T19:02:25.433058-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltListTests class',				#isMetaSide : true			},			#name : #exampleTree1,			#protocol : #examples,			#sourceCode : 'exampleTree1\r\t"AltTreeTests exampleTree1"\r\r\t"This is exactly the same example than the FT tree one."\r\r\t<example>\r\t| tree morph |\r\ttree := AltBlockItemExample new.\r\ttree\r\t\tcontents:\r\t\t\t(((ProtoObject allSubclasses reject: [ :e | e name endsWith: \'class\' ])\r\t\t\t\tsort: [ :a :b | a name < b name ])\r\t\t\t\tcollect:\r\t\t\t\t\t[ :e | \r\t\t\t\t\tAltBlockItemExample new\r\t\t\t\t\t\titem: e;\r\t\t\t\t\t\tparent: tree;\r\t\t\t\t\t\tchildrenBlock: [ :c | c subclasses sort: [ :a :b | a name < b name ] ] ]).\r\tmorph := AltListMorph new.\r\tmorph model: tree.\r\tmorph extent: 300 @ 700.\r\tmorph openInWindow.\r\t^ morph',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '77' ],		#self : OmReference [ '78' ],		#time : DateAndTime [ '2018-01-14T19:02:25.434253-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltListTests class',				#isMetaSide : true			},			#name : #exampleTree2,			#protocol : #examples,			#sourceCode : 'exampleTree2\r\t"AltTreeTests exampleTree2"\r\r\t"This one is a variant where changed is handled normally, not during drawOn: like FT does. It is slower to open, since it does at least two updates (one initial refresh and one changed). Apart from that, it is as fast as the other one."\r\r\t"Animation behavior may be a bit different / broken: it is used for experiments."\r\r\t<example>\r\t| tree morph |\r\ttree := AltBlockItemExample new.\r\ttree\r\t\tcontents:\r\t\t\t(((ProtoObject allSubclasses reject: [ :e | e name endsWith: \'class\' ])\r\t\t\t\tsort: [ :a :b | a name < b name ])\r\t\t\t\tcollect:\r\t\t\t\t\t[ :e | \r\t\t\t\t\tAltBlockItemExample new\r\t\t\t\t\t\titem: e;\r\t\t\t\t\t\tparent: tree;\r\t\t\t\t\t\tchildrenBlock: [ :c | c subclasses sort: [ :a :b | a name < b name ] ] ]).\r\tmorph := AltListMorph2 new.\r\tmorph extent: 300 @ 700.\r\tmorph model: tree.\r\tmorph openInWindow.\r\t^ morph',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '78' ],		#self : OmReference [ '79' ],		#time : DateAndTime [ '2018-01-14T19:02:25.435294-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltListTests class',				#isMetaSide : true			},			#name : #exampleTree3,			#protocol : #examples,			#sourceCode : 'exampleTree3\r\t"AltTreeTests exampleTree1"\r\r\t"This is exactly the same example than the FT tree one."\r\r\t<example>\r\t| tree morph |\r\ttree := AltBlockItemExample new.\r\ttree contents: #().\r\tmorph := AltListMorph new.\r\tmorph model: tree.\r\tmorph extent: 300 @ 700.\r\tmorph openInWindow.\r\t^ morph',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '79' ],		#self : OmReference [ '80' ],		#time : DateAndTime [ '2018-01-14T19:02:25.436427-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListTests,				#isMetaSide : false			},			#name : #testDeepEndReversedStream,			#protocol : #tests,			#sourceCode : 'testDeepEndReversedStream\r\t"Test the tree item implementation."\r\r\t| tree stream |\r\ttree := #(1 2 #(2 4 #(5 6 7))) asAltTree.\r\tstream := tree asReverseReadStream.\r\tself assert: tree size = 7.\r\tstream skip: 6.\r\tself assert: stream next item = 1.\r\tself assert: stream position = 1.\r\tself assert: stream atEnd.\r\tself assert: stream next isNil',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '80' ],		#self : OmReference [ '81' ],		#time : DateAndTime [ '2018-01-14T19:02:25.437681-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListTests,				#isMetaSide : false			},			#name : #testDeepEndStream,			#protocol : #tests,			#sourceCode : 'testDeepEndStream\r\t"Test the tree item implementation."\r\r\t| tree stream |\r\ttree := #(1 2 #(2 4 #(5 6 7))) asAltTree.\r\tstream := tree asReadStream.\r\tself assert: tree size = 7.\r\tstream skip: 6.\r\tself assert: stream next item = 7.\r\tself assert: stream position = 7.\r\tself assert: stream atEnd.\r\tself assert: stream next isNil',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '81' ],		#self : OmReference [ '82' ],		#time : DateAndTime [ '2018-01-14T19:02:25.438641-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListTests,				#isMetaSide : false			},			#name : #testItemMorph,			#protocol : #tests,			#sourceCode : 'testItemMorph\r\t"Create an individual morph."\r\r\t| tree morph |\r\ttree := #(1 #(2 4 5) 3) asAltTree.\r\tmorph := AltTreeItemMorph new.\r\tself assert: morph bounds origin = (0 @ 0).\r\tmorph item: (tree at: 2).\r\tself assert: morph left = 20.\r\tself assert: morph top = 2.\r\tself assert: morph bottom = 19',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '82' ],		#self : OmReference [ '83' ],		#time : DateAndTime [ '2018-01-14T19:02:25.439622-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListTests,				#isMetaSide : false			},			#name : #testReverseStreamAtEnd,			#protocol : #tests,			#sourceCode : 'testReverseStreamAtEnd\r\t"Test the tree item implementation."\r\r\t| tree stream |\r\ttree := #(1 #(2 #(3 #(4 #(5 #(6)))))) asAltTree.\r\tstream := tree asReverseReadStream.\r\tself assert: tree size = 6.\r\tstream skip: 1.\r\tself assert: stream atEnd not.\r\tstream skip: 4.\r\tself assert: stream atEnd not.\r\tself assert: stream next item = 1.\r\tself assert: stream atEnd.\r\tself assert: stream next isNil',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '83' ],		#self : OmReference [ '84' ],		#time : DateAndTime [ '2018-01-14T19:02:25.440577-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListTests,				#isMetaSide : false			},			#name : #testReversedStream,			#protocol : #tests,			#sourceCode : 'testReversedStream\r\t"Test the tree item implementation."\r\r\t| tree stream |\r\ttree := #(1 #(2 4 5) 3) asAltTree.\r\tstream := tree asReverseReadStream.\r\tself assert: stream next item = 3.\r\tself assert: stream position = 5.\r\tself assert: stream next parent == (tree at: 2).\r\tself assert: stream next item = 4.\r\tself assert: stream position = 3.\r\tself\r\t\tassert:\r\t\t\t(stream\r\t\t\t\tnext;\r\t\t\t\tnext) item = 1.\r\tself assert: stream atEnd.\r\tself assert: stream next isNil.\r\t(tree at: 2) collapse.\r\tstream := tree asReverseReadStream.\r\tself\r\t\tassert:\r\t\t\t(stream\r\t\t\t\tnext;\r\t\t\t\tnext;\r\t\t\t\tnext) item = 1.\r\tself assert: stream atEnd',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '84' ],		#self : OmReference [ '85' ],		#time : DateAndTime [ '2018-01-14T19:02:25.441565-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListTests,				#isMetaSide : false			},			#name : #testStream,			#protocol : #tests,			#sourceCode : 'testStream\r\t"Test the tree item implementation."\r\r\t| tree stream |\r\ttree := #(1 #(2 4 5) 3) asAltTree.\r\tstream := tree asReadStream.\r\tself assert: stream next item = 1.\r\tself assert: stream position = 1.\r\tself assert: stream next parent == (tree at: 1).\r\tself assert: stream next item = 4.\r\tself\r\t\tassert:\r\t\t\t(stream\r\t\t\t\tnext;\r\t\t\t\tnext) item = 3.\r\tself assert: stream atEnd.\r\tself assert: stream next isNil.\r\t(tree at: 2) collapse.\r\tstream := tree asReadStream.\r\tself\r\t\tassert:\r\t\t\t(stream\r\t\t\t\tnext;\r\t\t\t\tnext;\r\t\t\t\tnext) item = 3.\r\tself assert: stream atEnd',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '85' ],		#self : OmReference [ '86' ],		#time : DateAndTime [ '2018-01-14T19:02:25.443746-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListTests,				#isMetaSide : false			},			#name : #testStreamAtEnd,			#protocol : #tests,			#sourceCode : 'testStreamAtEnd\r\t"Test the tree item implementation."\r\r\t| tree stream |\r\ttree := #(1 #(2 #(3 #(4 #(5 #(6)))))) asAltTree.\r\tstream := tree asReadStream.\r\tself assert: tree size = 6.\r\tstream skip: 1.\r\tself assert: stream atEnd not.\r\tstream skip: 4.\r\tself assert: stream atEnd not.\t\r\tself assert: stream next item = 6.\r\tself assert: stream atEnd.\r\tself assert: stream next isNil',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '86' ],		#self : OmReference [ '87' ],		#time : DateAndTime [ '2018-01-14T19:02:25.444939-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListTests,				#isMetaSide : false			},			#name : #testStreamReversed,			#protocol : #tests,			#sourceCode : 'testStreamReversed\r\t"Test the tree item implementation."\r\r\t| tree stream rstream |\r\ttree := #(1 #(2 4 5) 3) asAltTree.\r\tstream := tree asReadStream.\r\tself assert: stream next item = 1.\r\tself assert: stream position = 1.\r\tself assert: stream next parent == (tree at: 1).\r\tself assert: stream next item = 4.\r\trstream := stream reversed.\r\tself\r\t\tassert:\r\t\t\t(stream\r\t\t\t\tnext;\r\t\t\t\tnext) item = 3.\r\tself assert: stream atEnd.\r\tself assert: stream next isNil.\r\tself assert: rstream next item = 4.\r\tself assert: rstream position = 3.\r\tself\r\t\tassert:\r\t\t\t(rstream\r\t\t\t\tnext;\r\t\t\t\tnext) item = 1.\r\tself assert: rstream atEnd',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '87' ],		#self : OmReference [ '88' ],		#time : DateAndTime [ '2018-01-14T19:02:25.44586-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListTests,				#isMetaSide : false			},			#name : #testStreamReversedLimits,			#protocol : #tests,			#sourceCode : 'testStreamReversedLimits\r\t"Reversing a stream at various points."\r\r\t| tree stream rstream |\r\ttree := #(1 #(2 4 5) 3) asAltTree.\r\tstream := tree asReadStream.\r\trstream := stream reversed.\r\tself assert: rstream atEnd.\r\tstream skip: 5.\r\tself assert: stream atEnd.\r\trstream := stream reversed.\r\t#(3 5 4 2 1) do: [ :i | self assert: rstream next item = i ].\r\tself assert: rstream atEnd',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '88' ],		#self : OmReference [ '89' ],		#time : DateAndTime [ '2018-01-14T19:02:25.446892-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListTests,				#isMetaSide : false			},			#name : #testTree,			#protocol : #tests,			#sourceCode : 'testTree\r\t"Test the tree item implementation."\r\r\t| tree |\r\ttree := #(1 #(2 4 5) 3) asAltTree.\r\tself assert: (tree at: 1) item = 1.\r\tself assert: (tree at: 2) parent == (tree at: 1).\r\tself assert: (tree at: 3) item = 4.\r\tself assert: (tree at: 2) hasContents.\r\tself assert: tree size = 5.\r\tself assert: (tree copyFrom: 2 to: 4) first item = 2.\r\tself assert: (tree copyFrom: 2 to: 5) last item = 3.\r\tself should: [ tree at: 0 ] raise: SubscriptOutOfBounds.\r\tself should: [ tree at: tree size + 1 ] raise: SubscriptOutOfBounds.\r\t(tree at: 2) collapse.\r\tself assert: tree size = 3.\r\tself assert: (tree at: 3) item = 3',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '89' ],		#self : OmReference [ '90' ],		#time : DateAndTime [ '2018-01-14T19:02:25.447809-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListTests,				#isMetaSide : false			},			#name : #testTreeIndexOf,			#protocol : #tests,			#sourceCode : 'testTreeIndexOf\r\t"Test the tree item implementation."\r\r\t| tree |\r\ttree := #(1 #(2 4 5) 3) asAltTree.\r\tself assert: (tree at: 1) item = 1.\r\tself assert: (tree indexOf: (tree at: 2)) = 2.\r\tself assert: (tree indexOf: (tree at: 4)) = 4',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '90' ],		#self : OmReference [ '91' ],		#time : DateAndTime [ '2018-01-14T19:02:25.448843-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListMorph,				#isMetaSide : false			},			#name : #'acceptDroppingMorph:event:',			#protocol : #'drag and drop',			#sourceCode : 'acceptDroppingMorph: aMorph event: event\r\tself model\r\t\tdropElement: aMorph passenger\r\t\tindex: ((self viewport rowIndexContainingPoint: event position) ifNil: [ 0 ]).\r\tdropIndex := nil.\r\tself refresh',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '91' ],		#self : OmReference [ '92' ],		#time : DateAndTime [ '2018-01-14T19:02:25.449817-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListMorph,				#isMetaSide : false			},			#name : #backgroundColor,			#protocol : #accessing-color,			#sourceCode : 'backgroundColor\r\t^ backgroundColor ifNil: [ Smalltalk ui theme backgroundColor ]',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '92' ],		#self : OmReference [ '93' ],		#time : DateAndTime [ '2018-01-14T19:02:25.450688-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListMorph,				#isMetaSide : false			},			#name : #'backgroundColor:',			#protocol : #accessing-color,			#sourceCode : 'backgroundColor: aColor\r\tbackgroundColor := aColor',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '93' ],		#self : OmReference [ '94' ],		#time : DateAndTime [ '2018-01-14T19:02:25.451578-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListMorph,				#isMetaSide : false			},			#name : #canvas,			#protocol : #accessing,			#sourceCode : 'canvas\r\t^ canvas',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '94' ],		#self : OmReference [ '95' ],		#time : DateAndTime [ '2018-01-14T19:02:25.452657-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListMorph,				#isMetaSide : false			},			#name : #'click:',			#protocol : #'event handling',			#sourceCode : 'click: anEvent\r\t| index |\r\tindex := self viewport rowIndexContainingPoint: anEvent cursorPoint.\r\tindex\r\t\tifNotNil: [ self selectRowIndex: index ]\r\t\tifNil: [ self selectRowIndex: 0 ].\r\t(anEvent yellowButtonPressed and: [ anEvent controlKeyPressed not ])\r\t\tifTrue: [ self showMenuForRowIndex: index ]',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '95' ],		#self : OmReference [ '96' ],		#time : DateAndTime [ '2018-01-14T19:02:25.454877-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListMorph,				#isMetaSide : false			},			#name : #clipSubmorphs,			#protocol : #accessing,			#sourceCode : 'clipSubmorphs\r\t^ true',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '96' ],		#self : OmReference [ '97' ],		#time : DateAndTime [ '2018-01-14T19:02:25.455886-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListMorph,				#isMetaSide : false			},			#name : #delete,			#protocol : #initialization,			#sourceCode : 'delete\r\tself model: nil.\r\tsuper delete',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '97' ],		#self : OmReference [ '98' ],		#time : DateAndTime [ '2018-01-14T19:02:25.456884-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListMorph,				#isMetaSide : false			},			#name : #'doubleClick:',			#protocol : #'event handling',			#sourceCode : 'doubleClick: event\r\t(self viewport rowIndexContainingPoint: event cursorPoint)\r\t\tifNotNil: [ :rowIndex | (self model at: rowIndex) doubleClickIn: self ]',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '98' ],		#self : OmReference [ '99' ],		#time : DateAndTime [ '2018-01-14T19:02:25.45786-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListMorph,				#isMetaSide : false			},			#name : #'drawSubmorphsOn:',			#protocol : #drawing,			#sourceCode : 'drawSubmorphsOn: aCanvas\r\t"Draw the focus here since we are using inset bounds\r\tfor the focus rectangle."\r\r\tsuper drawSubmorphsOn: aCanvas.\r\tself hasKeyboardFocus\r\t\tifTrue: [ self drawKeyboardFocusOn: aCanvas ]',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '99' ],		#self : OmReference [ '100' ],		#time : DateAndTime [ '2018-01-14T19:02:25.458733-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListMorph,				#isMetaSide : false			},			#name : #dropIndex,			#protocol : #accessing,			#sourceCode : 'dropIndex\r\t^ dropIndex',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '100' ],		#self : OmReference [ '101' ],		#time : DateAndTime [ '2018-01-14T19:02:25.459749-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListMorph,				#isMetaSide : false			},			#name : #ensureVisibleSelection,			#protocol : #accessing-selection,			#sourceCode : 'ensureVisibleSelection\r\t"Fairly complex. Will refactor it."\r\r\t| rowIndex |\r\tself hasSelection\r\t\tifFalse: [ ^ self ].\r\trowIndex := self selectedRowIndex.\r\tself viewport\r\t\tin:\r\t\t\t[ :v | \r\t\t\t(v isRowIndexFullyVisible: rowIndex)\r\t\t\t\tifFalse:\r\t\t\t\t\t[ v exposedItems ifNil: [ ^ self ].\r\t\t\t\t\tself moveVisibleIndexTo: rowIndex ].\r\t\t\t(v isItemFullyVisible: rowIndex)\r\t\t\t\tifFalse:\r\t\t\t\t\t[ (v exposedItems at: rowIndex ifAbsent: [ ^ self ])\r\t\t\t\t\t\tin:\r\t\t\t\t\t\t\t[ :morph | \r\t\t\t\t\t\t\t| delta |\r\t\t\t\t\t\t\tdelta := v effectiveWidth - v width.\r\t\t\t\t\t\t\tdelta isZero\r\t\t\t\t\t\t\t\tifTrue: [ ^ self ].\r\t\t\t\t\t\t\tself horizontalScrollBar\r\t\t\t\t\t\t\t\tvalue:\r\t\t\t\t\t\t\t\t\t(((morph submorphs last left - morph left asFloat) / delta min: 1.0)\r\t\t\t\t\t\t\t\t\t\tmax: 0.0) ] ] ]',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '101' ],		#self : OmReference [ '102' ],		#time : DateAndTime [ '2018-01-14T19:02:25.460636-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListMorph,				#isMetaSide : false			},			#name : #'extent:',			#protocol : #geometry,			#sourceCode : 'extent: aPoint\r\tsuper extent: aPoint.\r\tself resizeAllSubviews',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '102' ],		#self : OmReference [ '103' ],		#time : DateAndTime [ '2018-01-14T19:02:25.461551-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListMorph,				#isMetaSide : false			},			#name : #'fullDrawOn:',			#protocol : #drawing,			#sourceCode : 'fullDrawOn: aCanvas\r\t"Remember temporarily the canvas to avoid regenerating damage rectangles.\r\tThe row building process generates damage events, as well as playing with the\r\tscrollbar: just make sure we catch them when displaying (see \r\t[AltListViewportMorph>>#invalidRect:from:])."\r\r\tcanvas := aCanvas.\r\t[ super fullDrawOn: aCanvas ]\r\t\tensure: [ canvas := nil ]',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '103' ],		#self : OmReference [ '104' ],		#time : DateAndTime [ '2018-01-14T19:02:25.462437-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListMorph,				#isMetaSide : false			},			#name : #'handleDropMorph:',			#protocol : #'event handling',			#sourceCode : 'handleDropMorph: anEvent\r\tanEvent hand releaseMouseFocus: self.\r\tsuper handleDropMorph: anEvent',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '104' ],		#self : OmReference [ '105' ],		#time : DateAndTime [ '2018-01-14T19:02:25.464838-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListMorph,				#isMetaSide : false			},			#name : #'handleMouseDown:',			#protocol : #'event handling',			#sourceCode : 'handleMouseDown: anEvent\r\t"System level event handling."\r\r\tanEvent wasHandled\r\t\tifTrue: [ ^ self ].\t"not interested"\r\tanEvent hand removePendingBalloonFor: self.\r\tanEvent wasHandled: true.\r\t(anEvent controlKeyPressed\r\t\tand: [ self cmdGesturesEnabled and: [ anEvent shiftPressed ] ])\r\t\tifTrue:\r\t\t\t[ self invokeMetaMenu: anEvent.\r\t\t\t^ self eventHandler\r\t\t\t\tifNotNil: [ :handler | handler mouseDown: anEvent fromMorph: self ] ].\r\r\t"Make me modal during mouse transitions"\r\tanEvent hand newMouseFocus: self event: anEvent.\r\tanEvent blueButtonChanged\r\t\tifTrue: [ ^ self blueButtonDown: anEvent ].\r\tself mouseDown: anEvent.\r\tanEvent hand removeHaloFromClick: anEvent on: self.\r\t(self handlesMouseStillDown: anEvent)\r\t\tifTrue:\r\t\t\t[ (self world isStepping: self selector: #motionStep:)\r\t\t\t\tifFalse:\r\t\t\t\t\t[ self\r\t\t\t\t\t\tstartStepping: #handleMouseStillDown:\r\t\t\t\t\t\tat: Time millisecondClockValue + self mouseStillDownThreshold\r\t\t\t\t\t\targuments: {anEvent copy resetHandlerFields}\r\t\t\t\t\t\tstepTime: self mouseStillDownStepRate ] ]',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '105' ],		#self : OmReference [ '106' ],		#time : DateAndTime [ '2018-01-14T19:02:25.466019-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListMorph,				#isMetaSide : false			},			#name : #'handleMouseMove:',			#protocol : #'event handling',			#sourceCode : 'handleMouseMove: anEvent\r\t"Reimplemented because we really want #mouseMove when a morph is dragged around"\r\r\tanEvent wasHandled\r\t\tifTrue: [ ^ self ].\t"not interested"\r\tstepIndex := 0.\r\tanEvent anyButtonPressed\r\t\tifFalse: [ ^ self ].\r\tanEvent isDraggingEvent\r\t\tifFalse: [ ^ self ].\r\tanEvent wasHandled: true.\r\tself mouseMove: anEvent.\r\t(self handlesMouseStillDown: anEvent)\r\t\tifTrue:\r\t\t\t[ self\r\t\t\t\tstartStepping: #handleMouseStillDown:\r\t\t\t\tat: Time millisecondClockValue\r\t\t\t\targuments: {anEvent copy resetHandlerFields}\r\t\t\t\tstepTime: self mouseStillDownStepRate ]',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '106' ],		#self : OmReference [ '107' ],		#time : DateAndTime [ '2018-01-14T19:02:25.466928-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListMorph,				#isMetaSide : false			},			#name : #'handlesKeyboard:',			#protocol : #events-testing,			#sourceCode : 'handlesKeyboard: event\r\t^ true',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '107' ],		#self : OmReference [ '108' ],		#time : DateAndTime [ '2018-01-14T19:02:25.467812-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListMorph,				#isMetaSide : false			},			#name : #'handlesMouseDown:',			#protocol : #events-testing,			#sourceCode : 'handlesMouseDown: event\r\t^ true\r',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '108' ],		#self : OmReference [ '109' ],		#time : DateAndTime [ '2018-01-14T19:02:25.468676-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListMorph,				#isMetaSide : false			},			#name : #'handlesMouseOverDragging:',			#protocol : #events-testing,			#sourceCode : 'handlesMouseOverDragging: event\r\t"Yes, for mouse down highlight."\r\r\t^ true',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '109' ],		#self : OmReference [ '110' ],		#time : DateAndTime [ '2018-01-14T19:02:25.469549-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListMorph,				#isMetaSide : false			},			#name : #'handlesMouseStillDown:',			#protocol : #events-testing,			#sourceCode : 'handlesMouseStillDown: evt\r\t"Return true if the receiver wants to get repeated #mouseStillDown: messages between #mouseDown: and #mouseUp"\r\r\t^ true',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '110' ],		#self : OmReference [ '111' ],		#time : DateAndTime [ '2018-01-14T19:02:25.47044-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListMorph,				#isMetaSide : false			},			#name : #'handlesMouseWheel:',			#protocol : #events-testing,			#sourceCode : 'handlesMouseWheel: event\r\t^ true',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '111' ],		#self : OmReference [ '112' ],		#time : DateAndTime [ '2018-01-14T19:02:25.471336-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListMorph,				#isMetaSide : false			},			#name : #hasHorizontalScrollBar,			#protocol : #private-scrollbars,			#sourceCode : 'hasHorizontalScrollBar\r\t^ self viewport in: [ :v | v effectiveWidth > v width ]',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '112' ],		#self : OmReference [ '113' ],		#time : DateAndTime [ '2018-01-14T19:02:25.472391-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListMorph,				#isMetaSide : false			},			#name : #hasSelection,			#protocol : #testing,			#sourceCode : 'hasSelection\r\t^ self selectedRowIndexes notNil and: [self selectedRowIndexes notEmpty]',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '113' ],		#self : OmReference [ '114' ],		#time : DateAndTime [ '2018-01-14T19:02:25.473329-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListMorph,				#isMetaSide : false			},			#name : #hasVerticalScrollBar,			#protocol : #private-scrollbars,			#sourceCode : 'hasVerticalScrollBar\r\t"Do we need a vertical scrollbar?"\r\r\tself model ifNil: [ ^ false ].\r\tself viewport\r\t\tin:\r\t\t\t[ :v | \r\t\t\tv exposedItems ifNil: [ ^ false ].\r\t\t\t^ (v exposedItems size = v modelSize\r\t\t\t\tand: [ v effectiveHeight <= v height ]) not ]',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '114' ],		#self : OmReference [ '115' ],		#time : DateAndTime [ '2018-01-14T19:02:25.47556-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListMorph,				#isMetaSide : false			},			#name : #hideOrShowScrollBar,			#protocol : #private-scrollbars,			#sourceCode : 'hideOrShowScrollBar\r\t"To cope with some of the quirks of tbe Morphic scrollbar."\r\r\t^ self',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '115' ],		#self : OmReference [ '116' ],		#time : DateAndTime [ '2018-01-14T19:02:25.47648-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListMorph,				#isMetaSide : false			},			#name : #horizontalScrollBar,			#protocol : #private-scrollbars,			#sourceCode : 'horizontalScrollBar\r\t^ horizontalScrollBar',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '116' ],		#self : OmReference [ '117' ],		#time : DateAndTime [ '2018-01-14T19:02:25.477457-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListMorph,				#isMetaSide : false			},			#name : #horizontalScrollBarHeight,			#protocol : #private-scrollbars,			#sourceCode : 'horizontalScrollBarHeight\r\t^ self hasHorizontalScrollBar\r\t\tifTrue: [ self scrollBarThickness ]\r\t\tifFalse: [ 0 ]',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '117' ],		#self : OmReference [ '118' ],		#time : DateAndTime [ '2018-01-14T19:02:25.478409-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListMorph,				#isMetaSide : false			},			#name : #'horizontalScrollBarValue:',			#protocol : #private-scrollbars,			#sourceCode : 'horizontalScrollBarValue: aNumber\r\tmodel ifNil: [ ^ self ].\r\tself viewport changed',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '118' ],		#self : OmReference [ '119' ],		#time : DateAndTime [ '2018-01-14T19:02:25.4794-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListMorph,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\tsuper initialize.\r\tself color: self backgroundColor.\r\tself\r\t\tdragEnabled: true;\r\t\tdropEnabled: true;\r\t\tinitializeScrollBars;\r\t\tinitializeContainer;\r\t\tresizeAllSubviews',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '119' ],		#self : OmReference [ '120' ],		#time : DateAndTime [ '2018-01-14T19:02:25.480324-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListMorph,				#isMetaSide : false			},			#name : #initializeContainer,			#protocol : #initialization,			#sourceCode : 'initializeContainer\r\tviewport := AltListViewportMorph new.\r\tself addMorph: viewport',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '120' ],		#self : OmReference [ '121' ],		#time : DateAndTime [ '2018-01-14T19:02:25.481276-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListMorph,				#isMetaSide : false			},			#name : #initializeScrollBars,			#protocol : #initialization,			#sourceCode : 'initializeScrollBars\r\t"Add both a vertical scrollbar and an horizontal scrollbar."\r\r\tverticalScrollBar := ScrollBar new\r\t\tmodel: self;\r\t\tsetValueSelector: #verticalScrollBarValue:;\r\t\tyourself.\r\thorizontalScrollBar := ScrollBar new\r\t\tmodel: self;\r\t\tsetValueSelector: #horizontalScrollBarValue:;\r\t\tyourself',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '121' ],		#self : OmReference [ '122' ],		#time : DateAndTime [ '2018-01-14T19:02:25.482159-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListMorph,				#isMetaSide : false			},			#name : #isFirstSelectionVisible,			#protocol : #testing,			#sourceCode : 'isFirstSelectionVisible\r\tself hasSelection\r\t\tifFalse: [ ^ true ].\r\t^ (self viewport isRowIndexFullyVisible: self selectedRowIndex)\r\t\tand: [ self viewport isItemFullyVisible: self selectedRowIndex ]',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '122' ],		#self : OmReference [ '123' ],		#time : DateAndTime [ '2018-01-14T19:02:25.48305-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListMorph,				#isMetaSide : false			},			#name : #isHorizontalScrollBarVisible,			#protocol : #private-scrollbars,			#sourceCode : 'isHorizontalScrollBarVisible\r\t^ self submorphs includes: self horizontalScrollBar ',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '123' ],		#self : OmReference [ '124' ],		#time : DateAndTime [ '2018-01-14T19:02:25.485138-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListMorph,				#isMetaSide : false			},			#name : #isVerticalScrollBarVisible,			#protocol : #private-scrollbars,			#sourceCode : 'isVerticalScrollBarVisible\r\t^ self submorphs includes: self verticalScrollBar ',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '124' ],		#self : OmReference [ '125' ],		#time : DateAndTime [ '2018-01-14T19:02:25.486255-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListMorph,				#isMetaSide : false			},			#name : #'keyboardFocusChange:',			#protocol : #'event handling',			#sourceCode : 'keyboardFocusChange: aBoolean\r\t"The message is sent to a morph when its keyboard focus changes.\r\tUpdate for focus feedback."\r\r\tsuper keyboardFocusChange: aBoolean.\r\tself focusChanged',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '125' ],		#self : OmReference [ '126' ],		#time : DateAndTime [ '2018-01-14T19:02:25.487141-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListMorph,				#isMetaSide : false			},			#name : #model,			#protocol : #accessing,			#sourceCode : 'model\r\t^ model',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '126' ],		#self : OmReference [ '127' ],		#time : DateAndTime [ '2018-01-14T19:02:25.488136-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListMorph,				#isMetaSide : false			},			#name : #'model:',			#protocol : #initialization,			#sourceCode : 'model: anAltTreeItemModel\r\t"Announcements based. Do a reset of the positions and a refresh."\r\r\t"Need a way to fetch and position lazily the selection when starting."\r\r\tmodel ifNotNil: [ model announcer unsubscribe: self ].\r\tanAltTreeItemModel\r\t\tifNotNil: [ anAltTreeItemModel announcer\r\t\t\t\twhen: AltListChanged send: #refresh to: self;\r\t\t\t\twhen: AltSelectionChanged send: #updateSelection: to: self ].\r\tmodel := anAltTreeItemModel.\r\tself resetPosition.\r\tself refresh',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '127' ],		#self : OmReference [ '128' ],		#time : DateAndTime [ '2018-01-14T19:02:25.489-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListMorph,				#isMetaSide : false			},			#name : #motion,			#protocol : #accessing,			#sourceCode : 'motion\r\t^ motion',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '128' ],		#self : OmReference [ '129' ],		#time : DateAndTime [ '2018-01-14T19:02:25.489902-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListMorph,				#isMetaSide : false			},			#name : #'motionStep:',			#protocol : #animation,			#sourceCode : 'motionStep: event\r\t"Check that we have a motion; react to that (step) so that we move."\r\r\t(motion isNil or: [(motion := motion step) isNil ])\r\t\tifTrue: [ self stopSteppingSelector: #motionStep: ]',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '129' ],		#self : OmReference [ '130' ],		#time : DateAndTime [ '2018-01-14T19:02:25.490812-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListMorph,				#isMetaSide : false			},			#name : #'mouseDown:',			#protocol : #'event handling',			#sourceCode : 'mouseDown: anEvent\r\tself wantsKeyboardFocus\r\t\tifTrue: [ self takeKeyboardFocus ].\r\tanEvent hand newMouseFocus: self event: anEvent.\r\tanEvent hand\r\t\twaitForClicksOrDrag: self\r\t\tevent: anEvent\r\t\tselectors: #(#click: #doubleClick: #doubleClickTimeout: #startDrag:)\r\t\tthreshold: 10',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '130' ],		#self : OmReference [ '131' ],		#time : DateAndTime [ '2018-01-14T19:02:25.491716-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListMorph,				#isMetaSide : false			},			#name : #'mouseEnterDragging:',			#protocol : #'event handling',			#sourceCode : 'mouseEnterDragging: event\r\tself enabled\r\t\tifFalse: [ ^ self ].\r\tevent hand hasSubmorphs\r\t\tifFalse: [ ^ super mouseEnterDragging: event ].\r\tevent hand newMouseFocus: self',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '131' ],		#self : OmReference [ '132' ],		#time : DateAndTime [ '2018-01-14T19:02:25.492806-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListMorph,				#isMetaSide : false			},			#name : #'mouseLeaveDragging:',			#protocol : #'event handling',			#sourceCode : 'mouseLeaveDragging: event\r\t"The mouse has left with a button down."\r\r\tdropIndex := nil.\r\tevent hand releaseMouseFocus: self.\r\tevent hand hasSubmorphs\r\t\tifFalse: [ ^ super mouseLeaveDragging: event ].\t"no d&d"\r\tself refresh',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '132' ],		#self : OmReference [ '133' ],		#time : DateAndTime [ '2018-01-14T19:02:25.49379-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListMorph,				#isMetaSide : false			},			#name : #'mouseMove:',			#protocol : #'event handling',			#sourceCode : 'mouseMove: event\r\t"We consider that we reach here only if this is a drag and drop move event."\r\r\t| aMorph |\r\tevent hand hasSubmorphs\r\t\tifFalse: [ ^ false ].\r\taMorph := event hand submorphs first.\r\taMorph class == TransferMorph\r\t\tifFalse: [ ^ self ].\r\t(self viewport rowIndexContainingPoint: event position)\r\t\tifNotNil:\r\t\t\t[ :rowIndex | \r\t\t\t((self model at: rowIndex) wantsDroppedElement: aMorph passenger)\r\t\t\t\tifTrue: [ dropIndex := rowIndex ]\r\t\t\t\tifFalse: [ dropIndex := nil ].\r\t\t\tself viewport changed ]',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '133' ],		#self : OmReference [ '134' ],		#time : DateAndTime [ '2018-01-14T19:02:25.496633-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListMorph,				#isMetaSide : false			},			#name : #'mouseStillDown:',			#protocol : #'event handling',			#sourceCode : 'mouseStillDown: anEvent\r\t"Sent when we are stepping over a drag, and not moving."\r\r\t"What I would like: such a message (the stepMessage instance)\r\tto carry the stepIndex value and increment it. But the step API\r\tis not designed that way."\r\r\t| target |\r\tstepIndex := self stepIndex + 1 min: 100.\r\t(self bounds containsPoint: anEvent position)\r\t\tifTrue:\r\t\t\t[ (self verticalScrollBar value > 0\r\t\t\t\tand: [ anEvent position y <= (self top + 10) ])\r\t\t\t\tifTrue: [ ^ self verticalScrollBar scrollUp: stepIndex / 10.0 ].\r\t\t\t(self verticalScrollBar value < 1\r\t\t\t\tand:\r\t\t\t\t\t[ anEvent position y\r\t\t\t\t\t\t>= (self bottom - 10 - self horizontalScrollBarHeight) ])\r\t\t\t\tifTrue: [ ^ self verticalScrollBar scrollDown: stepIndex / 10.0 ] ].\r\tstepIndex > 25\r\t\tifTrue:\r\t\t\t[ (anEvent hand submorphs notEmpty\r\t\t\t\tand: [ anEvent hand submorphs first isSystemWindow not ])\r\t\t\t\tifTrue:\r\t\t\t\t\t[ target := self model\r\t\t\t\t\t\tat:\r\t\t\t\t\t\t\t((self viewport rowIndexContainingPoint: anEvent position)\r\t\t\t\t\t\t\t\tifNil: [ ^ self ]).\r\t\t\t\t\ttarget isExpanded\r\t\t\t\t\t\tifFalse: [ target toggleExpanded.\r\t\t\t\t\t\t\tstepIndex := 0 ] ] ]',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '134' ],		#self : OmReference [ '135' ],		#time : DateAndTime [ '2018-01-14T19:02:25.498203-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListMorph,				#isMetaSide : false			},			#name : #'mouseWheel:',			#protocol : #'event handling',			#sourceCode : 'mouseWheel: anEvent\r\t"Register a motion, merge it with previous one if one exists."\r\r\t"Motion value change: adjust to number of elements in model?"\r\r\tmodel ifNil: [ ^ self ].\r\tself hasVerticalScrollBar\r\t\tifFalse: [ ^ self ].\r\tself world\r\t\tifNotNil:\r\t\t\t[ :w | \r\t\t\t| t m d |\r\t\t\td := self viewport exposedItems size / self viewport modelSize\r\t\t\t\t* 0.5.\r\t\t\tt := Time millisecondClockValue.\r\t\t\tm := AltTweenMotion new\r\t\t\t\ttween: AltTweenMotion easeInOutCubic;\r\t\t\t\tstartTime: t;\r\t\t\t\tendTime: t + 100;\r\t\t\t\tstartValue: self verticalScrollBar value;\r\t\t\t\tendValue:\r\t\t\t\t\t((self verticalScrollBar value\r\t\t\t\t\t\t+\r\t\t\t\t\t\t\t(anEvent isUp\r\t\t\t\t\t\t\t\tifTrue: [ d negated ]\r\t\t\t\t\t\t\t\tifFalse: [ d ]) min: 1.0) max: 0.0);\r\t\t\t\taction: [ :value | self verticalScrollBar setValue: value ].\r\t\t\tmotion := motion ifNil: [ m ] ifNotNil: [ motion mergeWith: m ].\r\t\t\t(w isStepping: self selector: #motionStep:)\r\t\t\t\tifFalse:\r\t\t\t\t\t[ self\r\t\t\t\t\t\tstartStepping: #motionStep:\r\t\t\t\t\t\tat: t\r\t\t\t\t\t\targuments: {anEvent copy resetHandlerFields}\r\t\t\t\t\t\tstepTime: self mouseStillDownStepRate ] ]',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '135' ],		#self : OmReference [ '136' ],		#time : DateAndTime [ '2018-01-14T19:02:25.49938-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListMorph,				#isMetaSide : false			},			#name : #'moveSelectionIndexTo:',			#protocol : #accessing-selection,			#sourceCode : 'moveSelectionIndexTo: anIndex\r\t"Make that a motion..."\r\r\t| iMotion sMotion startValue endValue estimateTime |\r\tself hasVerticalScrollBar\r\t\tifFalse: [ ^ self selectRowIndex: anIndex ].\r\tstartValue := self verticalScrollBar value.\r\tstartValue ifNil: [ ^ self selectRowIndex: anIndex ].\r\tendValue := self viewport verticalValueForIndex: anIndex.\r\testimateTime := ((endValue - startValue) abs * 200) rounded.\r\tiMotion := AltTweenMotion new\r\t\ttween: AltTweenMotion easeInOutCubic;\r\t\tstartTime: Time millisecondClockValue;\r\t\tendTime: Time millisecondClockValue + estimateTime;\r\t\tstartValue: startValue;\r\t\tendValue: endValue;\r\t\taction: [ :value | self verticalScrollBar setValue: value ];\r\t\tyourself.\r\tsMotion := AltOneShotMotion new\r\t\taction: [ self selectRowIndex: anIndex ];\r\t\tyourself.\r\tself\r\t\tstartStepping: #motionStep:\r\t\tat: Time millisecondClockValue\r\t\targuments: (Array with: (motion := iMotion + sMotion))\r\t\tstepTime: 1',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '136' ],		#self : OmReference [ '137' ],		#time : DateAndTime [ '2018-01-14T19:02:25.500353-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListMorph,				#isMetaSide : false			},			#name : #'moveVisibleIndexTo:',			#protocol : #private,			#sourceCode : 'moveVisibleIndexTo: aNumber\r\t"I ensure that this item number is visible, and perform a refresh of subviews. \r\t Use me just in case you need to force a refresh after setting the index"\r\r\tself verticalScrollBar\r\t\tvalue: (self viewport verticalValueForIndex: aNumber).\r\tself viewport changed',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '137' ],		#self : OmReference [ '138' ],		#time : DateAndTime [ '2018-01-14T19:02:25.50145-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListMorph,				#isMetaSide : false			},			#name : #recalculateHorizontalScrollBar,			#protocol : #private-scrollbars,			#sourceCode : 'recalculateHorizontalScrollBar\r\t| interval delta eW w |\r\tmodel ifNil: [ ^ self ].\r\tself hasHorizontalScrollBar\r\t\tifFalse:\r\t\t\t[ self horizontalScrollBar\r\t\t\t\tvalue: 0;\r\t\t\t\tinterval: 0;\r\t\t\t\tscrollDelta: 0 pageDelta: 0.\r\t\t\t^ self ].\r\teW := self viewport effectiveWidth.\r\tw := self viewport width.\r\tinterval := (w / eW) asFloat.\r\tdelta := 1.0 / (eW - w).\r\tself horizontalScrollBar scrollDelta isZero\r\t\tifFalse:\r\t\t\t[ self horizontalScrollBar\r\t\t\t\tvalue:\r\t\t\t\t\tself horizontalScrollBar value / self horizontalScrollBar scrollDelta\r\t\t\t\t\t\t* delta ].\r\tself horizontalScrollBar\r\t\tinterval: interval;\r\t\tscrollDelta: delta pageDelta: interval',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '138' ],		#self : OmReference [ '139' ],		#time : DateAndTime [ '2018-01-14T19:02:25.502785-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListMorph,				#isMetaSide : false			},			#name : #recalculateVerticalScrollBar,			#protocol : #private-scrollbars,			#sourceCode : 'recalculateVerticalScrollBar\r\t"Better: account for partially visible rows."\r\r\t"Change: estimate that delta is based on rows of 24 pixels high; reduce delta if height / visibleRows > 24, and increase delta otherwise? (maintain a constant pixel-equivalent delta)."\r\r\t| interval delta pageDelta visibleRows numberOfRows |\r\tmodel ifNil: [ ^ self ].\r\tself viewport\r\t\tin: [ :v | \r\t\t\tv exposedItems ifNil: [ ^ self ].\r\t\t\tself hasVerticalScrollBar\r\t\t\t\tifFalse: [ self verticalScrollBar\r\t\t\t\t\t\tvalue: 0;\r\t\t\t\t\t\tscrollDelta: 0 pageDelta: 0.\r\t\t\t\t\t^ self ].\r\t\t\tvisibleRows := v exposedItems size asFloat\r\t\t\t\t/ (v effectiveHeight / v height asFloat).\r\t\t\tnumberOfRows := v modelSize asFloat.\r\t\t\tinterval := visibleRows / numberOfRows.\r\t\t\tdelta := 1.0 / numberOfRows / self verticalStep.\r\t\t\tpageDelta := interval max: delta.\r\t\t\tself verticalScrollBar\r\t\t\t\tscrollDelta: delta pageDelta: pageDelta;\r\t\t\t\tinterval: interval ]',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '139' ],		#self : OmReference [ '140' ],		#time : DateAndTime [ '2018-01-14T19:02:25.503761-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListMorph,				#isMetaSide : false			},			#name : #refresh,			#protocol : #updating,			#sourceCode : 'refresh\r\t"Refreshes all internal values (forces an invalidate of all subviews)"\r\r\tselectedRowIndexes := nil.\r\tself viewport refresh',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '140' ],		#self : OmReference [ '141' ],		#time : DateAndTime [ '2018-01-14T19:02:25.504651-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListMorph,				#isMetaSide : false			},			#name : #'rejectDropEvent:',			#protocol : #'event handling',			#sourceCode : 'rejectDropEvent: anEvent\r\t"We have a drop event, we may reject it. Don\'t forget to release the focus there."\r\r\tanEvent hand releaseMouseFocus: self.\r\tstepIndex := 0.\r\t^ super rejectDropEvent: anEvent',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '141' ],		#self : OmReference [ '142' ],		#time : DateAndTime [ '2018-01-14T19:02:25.505577-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListMorph,				#isMetaSide : false			},			#name : #release,			#protocol : #initialization,			#sourceCode : 'release\r\tself model: nil.\r\tsuper release',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '142' ],		#self : OmReference [ '143' ],		#time : DateAndTime [ '2018-01-14T19:02:25.507823-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListMorph,				#isMetaSide : false			},			#name : #resetPosition,			#protocol : #private,			#sourceCode : 'resetPosition\r\t"Resets all values to original value"\r\r\tself verticalScrollBar value: 0.\r\tself horizontalScrollBar value: 0',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '143' ],		#self : OmReference [ '144' ],		#time : DateAndTime [ '2018-01-14T19:02:25.508819-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListMorph,				#isMetaSide : false			},			#name : #resizeAllSubviews,			#protocol : #private,			#sourceCode : 'resizeAllSubviews\r\t"Order of each instruction is very significant."\r\r\t"Bug: if removing the horizontal scrollbar makes the vertical scrollbar unnecessary, then the order is wrong."\r\r\t"If not carefull, one can trigger an infinite loop with that."\r\r\tself resizeVerticalScrollBar.\r\tself resizeHorizontalScrollBar.\r\tself resizeViewport.\r\tself recalculateVerticalScrollBar.\r\tself recalculateHorizontalScrollBar',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '144' ],		#self : OmReference [ '145' ],		#time : DateAndTime [ '2018-01-14T19:02:25.509781-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListMorph,				#isMetaSide : false			},			#name : #resizeHorizontalScrollBar,			#protocol : #private-scrollbars,			#sourceCode : 'resizeHorizontalScrollBar\r\tself hasHorizontalScrollBar\r\t\tifTrue:\r\t\t\t[ | width height corner |\r\t\t\theight := self horizontalScrollBarHeight.\r\t\t\twidth := self bounds width - (self borderWidth * 2)\r\t\t\t\t- self verticalScrollBarWidth.\r\t\t\tcorner := self bounds bottomLeft\r\t\t\t\t- ((0 - self borderWidth) @ (height + self borderWidth)).\r\t\t\tself horizontalScrollBar bounds: (corner extent: width @ height).\r\t\t\tself isHorizontalScrollBarVisible\r\t\t\t\tifFalse: [ self addMorph: horizontalScrollBar ] ]\r\t\tifFalse:\r\t\t\t[ self isHorizontalScrollBarVisible\r\t\t\t\tifTrue: [ self removeMorph: horizontalScrollBar ] ]',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '145' ],		#self : OmReference [ '146' ],		#time : DateAndTime [ '2018-01-14T19:02:25.510794-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListMorph,				#isMetaSide : false			},			#name : #resizeVerticalScrollBar,			#protocol : #private-scrollbars,			#sourceCode : 'resizeVerticalScrollBar\r\tself hasVerticalScrollBar\r\t\tifTrue:\r\t\t\t[ | width height corner |\r\t\t\twidth := self verticalScrollBarWidth.\r\t\t\theight := self bounds height - (self borderWidth * 2)\r\t\t\t\t- self horizontalScrollBarHeight.\r\t\t\tcorner := self bounds topRight\r\t\t\t\t- ((width + self borderWidth) @ (0 - self borderWidth)).\r\t\t\tself verticalScrollBar bounds: (corner extent: width @ height).\r\t\t\tself isVerticalScrollBarVisible\r\t\t\t\tifFalse: [ self addMorph: verticalScrollBar ] ]\r\t\tifFalse:\r\t\t\t[ self isVerticalScrollBarVisible\r\t\t\t\tifTrue: [ self removeMorph: verticalScrollBar ] ]',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '146' ],		#self : OmReference [ '147' ],		#time : DateAndTime [ '2018-01-14T19:02:25.511745-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListMorph,				#isMetaSide : false			},			#name : #resizeViewport,			#protocol : #private,			#sourceCode : 'resizeViewport\r\t"Take in account effective width and height of the scrollbars (0 if hidden)."\r\r\t| width height doubleBorder |\r\tdoubleBorder := self borderWidth * 2.\r\twidth := self bounds width - doubleBorder\r\t\t- self verticalScrollBarWidth.\r\theight := self bounds height - doubleBorder\r\t\t- self horizontalScrollBarHeight.\r\tself viewport\r\t\tbounds:\r\t\t\t(self bounds topLeft + (self borderWidth @ self borderWidth)\r\t\t\t\textent: width @ height)',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '147' ],		#self : OmReference [ '148' ],		#time : DateAndTime [ '2018-01-14T19:02:25.512664-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListMorph,				#isMetaSide : false			},			#name : #scrollBarThickness,			#protocol : #private-scrollbars,			#sourceCode : 'scrollBarThickness\r\t^ self theme scrollbarThickness',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '148' ],		#self : OmReference [ '149' ],		#time : DateAndTime [ '2018-01-14T19:02:25.513567-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListMorph,				#isMetaSide : false			},			#name : #'selectRowIndex:',			#protocol : #accessing-selection,			#sourceCode : 'selectRowIndex: aNumber\r\tself model selectIndex: aNumber',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '149' ],		#self : OmReference [ '150' ],		#time : DateAndTime [ '2018-01-14T19:02:25.514639-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListMorph,				#isMetaSide : false			},			#name : #selectedRowIndex,			#protocol : #accessing-selection,			#sourceCode : 'selectedRowIndex\r\t^ self selectedRowIndexes \r\t\tifNotEmpty: [ :indexes | indexes first ]\r\t\tifEmpty: [ 0 ] ',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '150' ],		#self : OmReference [ '151' ],		#time : DateAndTime [ '2018-01-14T19:02:25.51557-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListMorph,				#isMetaSide : false			},			#name : #selectedRowIndexes,			#protocol : #accessing-selection,			#sourceCode : 'selectedRowIndexes\r\t^ selectedRowIndexes\r\t\tifNil: [ selectedRowIndexes := Array with: self model selectedIndex ]',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '151' ],		#self : OmReference [ '152' ],		#time : DateAndTime [ '2018-01-14T19:02:25.517712-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListMorph,				#isMetaSide : false			},			#name : #selectionColor,			#protocol : #accessing-color,			#sourceCode : 'selectionColor\r\t^ selectionColor ifNil: [ Smalltalk ui theme selectionColor ]',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '152' ],		#self : OmReference [ '153' ],		#time : DateAndTime [ '2018-01-14T19:02:25.51883-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListMorph,				#isMetaSide : false			},			#name : #'selectionColor:',			#protocol : #accessing-color,			#sourceCode : 'selectionColor: aColor\r\tselectionColor := aColor',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '153' ],		#self : OmReference [ '154' ],		#time : DateAndTime [ '2018-01-14T19:02:25.519776-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListMorph,				#isMetaSide : false			},			#name : #'showMenuForRowIndex:',			#protocol : #menu,			#sourceCode : 'showMenuForRowIndex: rowIndex\r\t"Menu for a 0 selection means menu on the hidden root, if this is the case."\r\r\t"I don\'t remember cases where at: 1 equal the root. Probably again a protection against empty lists."\r\r\t| menu |\r\t(self selectedRowIndex isZero\r\t\tand: [ self model size > 0 and: [ (self model at: 1) == self model ] ])\r\t\tifTrue: [ ^ self ].\r\tmenu := UIManager default newMenuIn: self for: self model.\r\tself selectedRowIndex isZero\r\t\tifTrue: [ (self model size > 0 and: [ (self model at: 1) == self model ])\r\t\t\t\tifTrue: [ ^ self ]\r\t\t\t\tifFalse: [ menu := self model buildMenu: menu ] ]\r\t\tifFalse: [ menu := (self model at: self selectedRowIndex) buildMenu: menu ].\r\tmenu invokeModal.\r\tself changed',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '154' ],		#self : OmReference [ '155' ],		#time : DateAndTime [ '2018-01-14T19:02:25.52086-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListMorph,				#isMetaSide : false			},			#name : #'startDrag:',			#protocol : #'drag and drop',			#sourceCode : 'startDrag: event\r\t"Select if not selected under that point."\r\r\t| passengers transferMorph rowIndex |\r\tevent hand hasSubmorphs\r\t\tifTrue: [ ^ self ].\r\tself dragEnabled\r\t\tifFalse: [ ^ self ].\r\tActiveHand anyButtonPressed\r\t\tifFalse: [ ^ self ].\r\trowIndex := self viewport rowIndexContainingPoint: event cursorPoint.\r\trowIndex ifNil: [ ^ self ].\r\tpassengers := Array with: (self model at: rowIndex).\r\ttransferMorph := self model transferFor: passengers from: self.\r\ttransferMorph\r\t\talign: transferMorph draggedMorph bottomLeft\r\t\twith: event position.\r\ttransferMorph dragTransferType: self model dragTransferType.\r\t[ event hand grabMorph: transferMorph ]\r\t\tensure: [ Cursor normal show ].\r\tevent hand newMouseFocus: self',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '155' ],		#self : OmReference [ '156' ],		#time : DateAndTime [ '2018-01-14T19:02:25.521765-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListMorph,				#isMetaSide : false			},			#name : #stepIndex,			#protocol : #accessing-stepping,			#sourceCode : 'stepIndex\r\t^ stepIndex ifNil: [ stepIndex := 0 ]',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '156' ],		#self : OmReference [ '157' ],		#time : DateAndTime [ '2018-01-14T19:02:25.522647-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListMorph,				#isMetaSide : false			},			#name : #takesKeyboardFocus,			#protocol : #events-testing,			#sourceCode : 'takesKeyboardFocus\r\t^ self enabled',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '157' ],		#self : OmReference [ '158' ],		#time : DateAndTime [ '2018-01-14T19:02:25.523613-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListMorph,				#isMetaSide : false			},			#name : #themeChanged,			#protocol : #accessing-theme,			#sourceCode : 'themeChanged\r\tself color: self backgroundColor.\r\tself refresh.\r\tsuper themeChanged',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '158' ],		#self : OmReference [ '159' ],		#time : DateAndTime [ '2018-01-14T19:02:25.524538-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListMorph,				#isMetaSide : false			},			#name : #'updateSelection:',			#protocol : #updating,			#sourceCode : 'updateSelection: anAltSelectionChanged\r\tanAltSelectionChanged newIndexes = self selectedRowIndexes\r\t\tifTrue: [ ^ self ].\r\tselectedRowIndexes := anAltSelectionChanged newIndexes asArray.\r\tself ensureVisibleSelection.\r\tself viewport changed',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '159' ],		#self : OmReference [ '160' ],		#time : DateAndTime [ '2018-01-14T19:02:25.525471-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListMorph,				#isMetaSide : false			},			#name : #verticalScrollBar,			#protocol : #private-scrollbars,			#sourceCode : 'verticalScrollBar\r\t^ verticalScrollBar',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '160' ],		#self : OmReference [ '161' ],		#time : DateAndTime [ '2018-01-14T19:02:25.526525-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListMorph,				#isMetaSide : false			},			#name : #'verticalScrollBarValue:',			#protocol : #private-scrollbars,			#sourceCode : 'verticalScrollBarValue: aNumber\r\tmodel ifNil: [ ^ self ].\r\tself viewport changed',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '161' ],		#self : OmReference [ '162' ],		#time : DateAndTime [ '2018-01-14T19:02:25.528823-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListMorph,				#isMetaSide : false			},			#name : #verticalScrollBarWidth,			#protocol : #private-scrollbars,			#sourceCode : 'verticalScrollBarWidth\r\tself hasVerticalScrollBar\r\t\tifFalse: [ ^ 0 ].\r\t^ self scrollBarThickness',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '162' ],		#self : OmReference [ '163' ],		#time : DateAndTime [ '2018-01-14T19:02:25.529812-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListMorph,				#isMetaSide : false			},			#name : #verticalStep,			#protocol : #private-scrollbars,			#sourceCode : 'verticalStep\r\t"Compute the step to use for scrolling: it is dependent on the row height, but must be a rounded number of steps."\r\r\t^ (((self viewport exposedItems at: self viewport baselineIndex)\r\t\theight / 24) rounded max: 1) asFloat',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '163' ],		#self : OmReference [ '164' ],		#time : DateAndTime [ '2018-01-14T19:02:25.530756-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListMorph,				#isMetaSide : false			},			#name : #viewport,			#protocol : #private,			#sourceCode : 'viewport\r\t^ viewport',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '164' ],		#self : OmReference [ '165' ],		#time : DateAndTime [ '2018-01-14T19:02:25.531684-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListMorph,				#isMetaSide : false			},			#name : #'wantsDroppedMorph:event:',			#protocol : #'drag and drop',			#sourceCode : 'wantsDroppedMorph: aMorph event: event\r\t"This is where we should release the focus?"\r\r\taMorph class == TransferMorph\r\t\tifFalse: [ ^ false ].\r\t^ (self model\r\t\tat:\r\t\t\t((self viewport rowIndexContainingPoint: event position)\r\t\t\t\tifNil: [ ^ false ])) wantsDroppedElement: aMorph passenger',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '165' ],		#self : OmReference [ '166' ],		#time : DateAndTime [ '2018-01-14T19:02:25.532653-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListMorph2,				#isMetaSide : false			},			#name : #initializeContainer,			#protocol : #accessing,			#sourceCode : 'initializeContainer\r\tviewport := AltListViewportMorph2 new.\r\tself addMorph: viewport',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '166' ],		#self : OmReference [ '167' ],		#time : DateAndTime [ '2018-01-14T19:02:25.533824-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListMorph2,				#isMetaSide : false			},			#name : #'traceMoveSelectionIndexTo:',			#protocol : #accessing,			#sourceCode : 'traceMoveSelectionIndexTo: anIndex\r\t"Make that a motion..."\r\r\t| iMotion sMotion startValue endValue estimateTime now |\r\tstartValue := self verticalScrollBar value.\r\tendValue := self viewport verticalValueForIndex: anIndex.\r\testimateTime := ((endValue - startValue) abs * 1000) rounded.\r\tnow := Time millisecondClockValue.\r\tiMotion := AltTweenMotion new\r\t\ttween: AltTweenMotion easeInOutCubic;\r\t\tstartTime: now;\r\t\tendTime: now + estimateTime;\r\t\tstartValue: startValue;\r\t\tendValue: endValue;\r\t\taction: [ :value | self verticalScrollBar setValue: value ];\r\t\tyourself.\r\tsMotion := AltOneShotMotion new\r\t\taction: [ self selectRowIndex: anIndex ];\r\t\tyourself.\r\tself\r\t\tstartStepping: #motionStep:\r\t\tat: now\r\t\targuments: (Array with: (motion := iMotion + sMotion))\r\t\tstepTime: 1.\r\tAndreasSystemProfiler spyOnWorldFor: (estimateTime + 30) / 1000.0',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '167' ],		#self : OmReference [ '168' ],		#time : DateAndTime [ '2018-01-14T19:02:25.534925-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListMorph3,				#isMetaSide : false			},			#name : #initializeContainer,			#protocol : #accessing,			#sourceCode : 'initializeContainer\r\tviewport := AltListViewportMorph3 new.\r\tself addMorph: viewport',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '168' ],		#self : OmReference [ '169' ],		#time : DateAndTime [ '2018-01-14T19:02:25.535898-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListMorph3,				#isMetaSide : false			},			#name : #initializeScrollBars,			#protocol : #accessing,			#sourceCode : 'initializeScrollBars\r\t"Add both a vertical scrollbar and an horizontal scrollbar."\r\r\tverticalScrollBar := AltScrollBar new\r\t\tmodel: self;\r\t\tsetValueSelector: #verticalScrollBarValue:;\r\t\tyourself.\r\thorizontalScrollBar := ScrollBar new\r\t\tmodel: self;\r\t\tsetValueSelector: #horizontalScrollBarValue:;\r\t\tyourself',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '169' ],		#self : OmReference [ '170' ],		#time : DateAndTime [ '2018-01-14T19:02:25.536936-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListMorph3,				#isMetaSide : false			},			#name : #recalculateVerticalScrollBar,			#protocol : #accessing,			#sourceCode : 'recalculateVerticalScrollBar\r\t"Better: account for partially visible rows."\r\r\t"Change: estimate that delta is based on rows of 24 pixels high; reduce delta if height / visibleRows > 24, and increase delta otherwise? (maintain a constant pixel-equivalent delta)."\r\r\t| interval delta pageDelta visibleRows numberOfRows |\r\tmodel ifNil: [ ^ self ].\r\tself viewport\r\t\tin: [ :v | \r\t\t\tv exposedItems ifNil: [ ^ self ].\r\t\t\tself hasVerticalScrollBar\r\t\t\t\tifFalse: [ self verticalScrollBar\r\t\t\t\t\t\tvalue: 0;\r\t\t\t\t\t\tscrollDelta: 0 pageDelta: 0.\r\t\t\t\t\t^ self ].\r\t\t\tvisibleRows := v exposedItems size asFloat\r\t\t\t\t/ (v effectiveHeight / v height asFloat).\r\t\t\tnumberOfRows := v modelSize asFloat.\r\t\t\tinterval := visibleRows / numberOfRows.\r\t\t\tdelta := 1.0 / numberOfRows / (v topRow height / 24.0).\r\t\t\tpageDelta := interval max: delta.\r\t\t\tself verticalScrollBar\r\t\t\t\tsetScrollValue: v findCurrentVerticalValue;\r\t\t\t\tscrollDelta: delta pageDelta: pageDelta;\r\t\t\t\tinterval: interval ]',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '170' ],		#self : OmReference [ '171' ],		#time : DateAndTime [ '2018-01-14T19:02:25.539254-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListMorph3,				#isMetaSide : false			},			#name : #'verticalScrollBarValue:',			#protocol : #accessing,			#sourceCode : 'verticalScrollBarValue: aNumber\r\tmodel ifNil: [ ^ self ].\r\tself viewport changed',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '171' ],		#self : OmReference [ '172' ],		#time : DateAndTime [ '2018-01-14T19:02:25.540433-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListViewportMorph,				#isMetaSide : false			},			#name : #'addRowsDown:with:cache:',			#protocol : #private,			#sourceCode : 'addRowsDown: yStart with: downStream cache: oldExposedItems\r\t"Add rows going down, increasing yDown (initial point yStart)."\r\r\t| yDown |\r\tyDown := yStart.\r\t[ yDown < self height and: [ downStream atEnd not ] ]\r\t\twhileTrue: [ | item row |\r\t\t\titem := downStream next.\r\t\t\trow := oldExposedItems\r\t\t\t\tat: downStream position\r\t\t\t\tifAbsent: [ self rowMorphForItem: item ].\r\t\t\texposedItems at: downStream position put: row.\r\t\t\tyDown := yDown + row height ].\r\t^ yDown',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '172' ],		#self : OmReference [ '173' ],		#time : DateAndTime [ '2018-01-14T19:02:25.541432-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListViewportMorph,				#isMetaSide : false			},			#name : #'addRowsUp:with:cache:',			#protocol : #private,			#sourceCode : 'addRowsUp: yStart with: upStream cache: oldExposedItems\r\t"Add rows going up, updating yUp as it goes. "\r\r\t| yUp |\r\tyUp := yStart.\r\t[ yUp > 0 and: [ upStream atEnd not ] ]\r\t\twhileTrue: [ | item row |\r\t\t\titem := upStream next.\r\t\t\trow := oldExposedItems\r\t\t\t\tat: upStream position\r\t\t\t\tifAbsent: [ self rowMorphForItem: item ].\r\t\t\texposedItems at: upStream position put: row.\r\t\t\tyUp := yUp - row height ].\r\t^ yUp',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '173' ],		#self : OmReference [ '174' ],		#time : DateAndTime [ '2018-01-14T19:02:25.542391-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListViewportMorph,				#isMetaSide : false			},			#name : #baselineIndex,			#protocol : #private,			#sourceCode : 'baselineIndex\r\t^ (self verticalValue * self modelSize) truncated + 1\r\t\tmin: self modelSize',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '174' ],		#self : OmReference [ '175' ],		#time : DateAndTime [ '2018-01-14T19:02:25.54328-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListViewportMorph,				#isMetaSide : false			},			#name : #canRefreshValues,			#protocol : #testing,			#sourceCode : 'canRefreshValues\r\tself needsRefreshItems\r\t\tifFalse: [ ^ false ].\r\tself owner ifNil: [ ^ false ].\r\tself owner model ifNil: [ ^ false ].\r\t^ true',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '175' ],		#self : OmReference [ '176' ],		#time : DateAndTime [ '2018-01-14T19:02:25.544175-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListViewportMorph,				#isMetaSide : false			},			#name : #changed,			#protocol : #updating,			#sourceCode : 'changed\r\t"Normal display change."\r\r\tself owner ifNil: [ ^ self ].\r\tself setNeedsRefreshRows.\r\tsuper changed',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '176' ],		#self : OmReference [ '177' ],		#time : DateAndTime [ '2018-01-14T19:02:25.545081-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListViewportMorph,				#isMetaSide : false			},			#name : #clearModelCachedData,			#protocol : #updating,			#sourceCode : 'clearModelCachedData\r\t"Clear all the data cached on the model."\r\r\tcachedModelSize := nil.\r\tmaximumWidth := self width',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '177' ],		#self : OmReference [ '178' ],		#time : DateAndTime [ '2018-01-14T19:02:25.545997-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListViewportMorph,				#isMetaSide : false			},			#name : #clipSubmorphs,			#protocol : #accessing,			#sourceCode : 'clipSubmorphs\r\t^ true',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '178' ],		#self : OmReference [ '179' ],		#time : DateAndTime [ '2018-01-14T19:02:25.547182-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListViewportMorph,				#isMetaSide : false			},			#name : #'drawSubmorphsOn:',			#protocol : #drawing,			#sourceCode : 'drawSubmorphsOn: canvas\r\t"Check that we have updated something one way or another before aligning / reordering our items."\r\r\t"We need to protect ourselves against spurious updates; a lot of Morphic\r\tcode call self changed like a prayer, even if apparently not needed. As in,\r\tlet\'s call changed, just, like, well, it could be needed?"\r\r\t| x y rowsToDisplay rowSubviews |\r\tself bounds ifNil: [ ^ self ].\t"Nothing to show yet"\r\tself owner ifNil: [ ^ self ].\r\tself owner model size = 0 ifTrue: [ ^ self ].\r\tself updateItemsOrRows\r\t\tifTrue:\r\t\t\t[ rowsToDisplay := self exposedItems keys asSortedCollection asArray.\t"Do not rely on exposedItems ordering"\r\t\t\trowSubviews := OrderedCollection new: rowsToDisplay size + 1.\r\t\t\tx := self left + 2 - self leftOffset.\r\t\t\ty := self top + topOffset.\r\t\t\trowsToDisplay\r\t\t\t\tdo: [ :rowIndex | \r\t\t\t\t\t| row |\r\t\t\t\t\trow := self exposedItems at: rowIndex.\r\t\t\t\t\trow privateOwner: nil.\r\t\t\t\t\trow topLeft: x @ y.\r\t\t\t\t\ty := y + row height.\r\t\t\t\t\trow privateOwner: self.\r\t\t\t\t\trowSubviews add: row ].\r\t\t\tsubmorphs := rowSubviews asArray ].\r\tsuper drawSubmorphsOn: canvas.\r\t(self exposedItems at: self owner selectedRowIndex ifAbsent: [  ])\r\t\tifNotNil: [ :selectedRow | \r\t\t\tcanvas\r\t\t\t\tframeAndFillRectangle: selectedRow bounds\r\t\t\t\tfillColor: (self owner selectionColor alpha: 0.3)\r\t\t\t\tborderWidth: 1\r\t\t\t\tborderColor: self owner selectionColor ].\r\t(self exposedItems at: self owner dropIndex ifAbsent: [  ])\r\t\tifNotNil: [ :dropRow | \r\t\t\tcanvas\r\t\t\t\tframeAndFillRectangle: dropRow bounds\r\t\t\t\tfillColor: Color transparent\r\t\t\t\tborderWidth: 1\r\t\t\t\tborderColor: self owner selectionColor ].\r\tself owner resizeAllSubviews.\t"Force a recompute / display of the scrollbars."\r\tneedsRefreshRows := false',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '179' ],		#self : OmReference [ '180' ],		#time : DateAndTime [ '2018-01-14T19:02:25.549275-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListViewportMorph,				#isMetaSide : false			},			#name : #effectiveHeight,			#protocol : #accessing,			#sourceCode : 'effectiveHeight\r\t^ bottomOffset - topOffset',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '180' ],		#self : OmReference [ '181' ],		#time : DateAndTime [ '2018-01-14T19:02:25.550455-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListViewportMorph,				#isMetaSide : false			},			#name : #effectiveWidth,			#protocol : #accessing,			#sourceCode : 'effectiveWidth\r\t"The max of both the offsetWidth and the viewport width."\r\r\tmaximumWidth ifNil: [ ^ self width ].\r\t^ maximumWidth max: self width',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '181' ],		#self : OmReference [ '182' ],		#time : DateAndTime [ '2018-01-14T19:02:25.55133-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListViewportMorph,				#isMetaSide : false			},			#name : #ensureVisibleSelection,			#protocol : #private,			#sourceCode : 'ensureVisibleSelection\r\t^ ensureVisibleSelection',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '182' ],		#self : OmReference [ '183' ],		#time : DateAndTime [ '2018-01-14T19:02:25.552214-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListViewportMorph,				#isMetaSide : false			},			#name : #exposedItems,			#protocol : #private,			#sourceCode : 'exposedItems\r\t"Answer a dictionary of rowIndex->row pairs"\r\r\t^ exposedItems',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '183' ],		#self : OmReference [ '184' ],		#time : DateAndTime [ '2018-01-14T19:02:25.553147-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListViewportMorph,				#isMetaSide : false			},			#name : #findCurrentVerticalValue,			#protocol : #private,			#sourceCode : 'findCurrentVerticalValue\r\t"Estimate what is the current vertical value given my row items."\r\r\t| n |\r\t(n := self modelSize) ifNil: [ ^ nil ].\r\t\tn = 0 ifTrue: [ ^nil ].\r\texposedItems\r\t\tifNotNil: [ :e | \r\t\t\te\r\t\t\t\tkeysAndValuesDo: [ :i :v | \r\t\t\t\t\t| k xTop xBottom |\r\t\t\t\t\txTop := (i - 1) / n * self height + self top.\r\t\t\t\t\txBottom := i / n * self height + self top.\r\t\t\t\t\tk := (v top - xTop) asFloat / (xBottom - xTop - v height).\r\t\t\t\t\t(k >= 0 and: [ k <= 1 ])\r\t\t\t\t\t\tifTrue: [ ^ (self verticalValueForIndex: i) + (k / n) ] ] ].\r\t^ nil',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '184' ],		#self : OmReference [ '185' ],		#time : DateAndTime [ '2018-01-14T19:02:25.554111-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListViewportMorph,				#isMetaSide : false			},			#name : #'getRowTop:',			#protocol : #private,			#sourceCode : 'getRowTop: rowHeight\r\t"Major change but significantly simpler overall."\r\r\t| i k xTop xBottom n |\r\tn := self modelSize.\r\ti := self baselineIndex.\r\txTop := (i - 1) / n * self height.\r\txBottom := i / n * self height.\r\tk := (self verticalValue - (self verticalValueForIndex: i)) * n.\r\t^ xTop + ((xBottom - xTop - rowHeight) * k)',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '185' ],		#self : OmReference [ '186' ],		#time : DateAndTime [ '2018-01-14T19:02:25.555019-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListViewportMorph,				#isMetaSide : false			},			#name : #hideOrShowScrollbar,			#protocol : #testing,			#sourceCode : 'hideOrShowScrollbar\r\t"To cope with some of the quirks of tbe Morphic scrollbar."\r\r\t^ self',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '186' ],		#self : OmReference [ '187' ],		#time : DateAndTime [ '2018-01-14T19:02:25.555953-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListViewportMorph,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\tsuper initialize.\r\tself eventHandler: MorphicEventHandler new.\r\tself color: Color transparent.\r\tself setNeedsRefreshItems.\r\tself setNeedsRefreshRows.\r\tself setEnsureVisibleSelection.\r\ttopOffset := 0.\r\tmaximumWidth := 0.',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '187' ],		#self : OmReference [ '188' ],		#time : DateAndTime [ '2018-01-14T19:02:25.557-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListViewportMorph,				#isMetaSide : false			},			#name : #'invalidRect:from:',			#protocol : #geometry,			#sourceCode : 'invalidRect: aRect from: aMorph\r\t"Intercept all invalidRects from submorphs while in a drawing session."\r\r\tself owner canvas ifNil: [ super invalidRect: aRect from: aMorph ]',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '188' ],		#self : OmReference [ '189' ],		#time : DateAndTime [ '2018-01-14T19:02:25.558013-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListViewportMorph,				#isMetaSide : false			},			#name : #'isItemFullyVisible:',			#protocol : #testing,			#sourceCode : 'isItemFullyVisible: rowIndex\r\t"Left to right test: does not really answer if the item is fully visible; return true if one can gain visibility by moving the item left or right."\r\r\tself exposedItems ifNil: [ ^ false ].\r\t^ (self exposedItems at: rowIndex ifAbsent: [  ])\r\t\tifNil: [ false ]\r\t\tifNotNil:\r\t\t\t[ :aMorph | \r\t\t\taMorph submorphs last\r\t\t\t\tin:\r\t\t\t\t\t[ :i | \r\t\t\t\t\t(i left >= self left and: [ i right <= self right ])\r\t\t\t\t\t\tor: [ i left < self left and: [ i right > self right ] ] ] ]',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '189' ],		#self : OmReference [ '190' ],		#time : DateAndTime [ '2018-01-14T19:02:25.560354-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListViewportMorph,				#isMetaSide : false			},			#name : #'isRowIndexFullyVisible:',			#protocol : #testing,			#sourceCode : 'isRowIndexFullyVisible: rowIndex\r\t"Answer if a row is *fully* visible. That means row is completely visible (there is \r\t not hidden part)"\r\r\tself exposedItems ifNil: [ ^ false ].\r\t^ (self exposedItems at: rowIndex ifAbsent: [  ])\r\t\tifNil: [ false ]\r\t\tifNotNil:\r\t\t\t[ :aMorph | aMorph top >= self top and: [ aMorph bottom <= self bottom ] ]',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '190' ],		#self : OmReference [ '191' ],		#time : DateAndTime [ '2018-01-14T19:02:25.561415-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListViewportMorph,				#isMetaSide : false			},			#name : #leftOffset,			#protocol : #accessing,			#sourceCode : 'leftOffset\r\t^ ((self effectiveWidth - self width)\r\t\t* self owner horizontalScrollBar value) truncated',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '191' ],		#self : OmReference [ '192' ],		#time : DateAndTime [ '2018-01-14T19:02:25.562347-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListViewportMorph,				#isMetaSide : false			},			#name : #modelSize,			#protocol : #private,			#sourceCode : 'modelSize\r\t^ cachedModelSize ifNil: [ self owner model ifNil: [ ] ifNotNil: [ cachedModelSize := self owner model size] ]',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '192' ],		#self : OmReference [ '193' ],		#time : DateAndTime [ '2018-01-14T19:02:25.56324-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListViewportMorph,				#isMetaSide : false			},			#name : #needsRefreshItems,			#protocol : #private,			#sourceCode : 'needsRefreshItems\r\t^ needsRefreshItems',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '193' ],		#self : OmReference [ '194' ],		#time : DateAndTime [ '2018-01-14T19:02:25.564134-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListViewportMorph,				#isMetaSide : false			},			#name : #needsRefreshRows,			#protocol : #private,			#sourceCode : 'needsRefreshRows\r\t^ needsRefreshRows',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '194' ],		#self : OmReference [ '195' ],		#time : DateAndTime [ '2018-01-14T19:02:25.56502-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListViewportMorph,				#isMetaSide : false			},			#name : #outerBounds,			#protocol : #geometry,			#sourceCode : 'outerBounds \r\t^ self bounds',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '195' ],		#self : OmReference [ '196' ],		#time : DateAndTime [ '2018-01-14T19:02:25.566027-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListViewportMorph,				#isMetaSide : false			},			#name : #refresh,			#protocol : #updating,			#sourceCode : 'refresh\r\t"model change triggers a refresh."\r\r\t"Try to maintain same position from top of the tree when refreshing."\r\r\tself owner ifNil: [ ^ self ].\r\tself setNeedsRefreshItems.\r\tself clearModelCachedData.\r\texposedItems\r\t\tifNotNil: [ :e | \r\t\t\tself findCurrentVerticalValue\r\t\t\t\tifNotNil: [ :c | self owner verticalScrollBar value: c ] ].\r\tsuper changed',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '196' ],		#self : OmReference [ '197' ],		#time : DateAndTime [ '2018-01-14T19:02:25.567038-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListViewportMorph,				#isMetaSide : false			},			#name : #'rowIndexContainingPoint:',			#protocol : #accessing,			#sourceCode : 'rowIndexContainingPoint: aPoint\r\t"Perfect. This code handles just like I would like it to."\r\r\tself exposedItems\r\t\tifNotNil: [ :e | \r\t\t\te\r\t\t\t\tkeysAndValuesDo: [ :rowIndex :row | \r\t\t\t\t\t(row bounds containsPoint: aPoint)\r\t\t\t\t\t\tifTrue: [ ^ rowIndex ] ] ].\r\t^ nil',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '197' ],		#self : OmReference [ '198' ],		#time : DateAndTime [ '2018-01-14T19:02:25.568064-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListViewportMorph,				#isMetaSide : false			},			#name : #'rowMorphForItem:',			#protocol : #private,			#sourceCode : 'rowMorphForItem: anItem\r\t| morph |\r\tmorph := anItem asListItemMorphIn: self.\r\tmaximumWidth := maximumWidth max: morph right + 2.\r\t^ Morph new\r\t\thResizing: #rigid;\r\t\tvResizing: #rigid;\r\t\tcolor: Color transparent;\r\t\tbounds: (0 @ 0 extent: (self width - 2 max: morph right) @ morph bottom);\r\t\taddMorph: morph;\r\t\tprivateOwner: self;\r\t\tyourself',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '198' ],		#self : OmReference [ '199' ],		#time : DateAndTime [ '2018-01-14T19:02:25.569006-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListViewportMorph,				#isMetaSide : false			},			#name : #setEnsureVisibleSelection,			#protocol : #private,			#sourceCode : 'setEnsureVisibleSelection\r\tensureVisibleSelection := true',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '199' ],		#self : OmReference [ '200' ],		#time : DateAndTime [ '2018-01-14T19:02:25.571336-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListViewportMorph,				#isMetaSide : false			},			#name : #setNeedsRefreshItems,			#protocol : #private,			#sourceCode : 'setNeedsRefreshItems\r\tneedsRefreshItems := true',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '200' ],		#self : OmReference [ '201' ],		#time : DateAndTime [ '2018-01-14T19:02:25.572281-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListViewportMorph,				#isMetaSide : false			},			#name : #setNeedsRefreshRows,			#protocol : #private,			#sourceCode : 'setNeedsRefreshRows\r\tneedsRefreshRows := true',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '201' ],		#self : OmReference [ '202' ],		#time : DateAndTime [ '2018-01-14T19:02:25.573215-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListViewportMorph,				#isMetaSide : false			},			#name : #updateItems,			#protocol : #updating,			#sourceCode : 'updateItems\r\t"This is a full update from the model. Reset all cached data."\r\r\tmaximumWidth := 0.\r\tself updateRows: SmallDictionary new',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '202' ],		#self : OmReference [ '203' ],		#time : DateAndTime [ '2018-01-14T19:02:25.574155-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListViewportMorph,				#isMetaSide : false			},			#name : #updateItemsOrRows,			#protocol : #updating,			#sourceCode : 'updateItemsOrRows\r\t"Depending on our recorded changes, update things appropriately."\r\r\t"Update items has priority, update rows comes next, answer should be\r\ttrue if an update was done, false if no update was done."\r\r\t"Selection visibility is ensured around that."\r\r\tself owner ifNil: [ ^ false ].\r\tself owner model ifNil: [ ^ false ].\r\tself owner model size = 0\r\t\tifTrue: [ ^ false ].\r\tself ensureVisibleSelection\r\t\tifTrue: [ self updateVisibleSelectionVertical ].\r\t^ self needsRefreshItems\r\t\tifTrue: [ self updateItems.\r\t\t\tself ensureVisibleSelection\r\t\t\t\tifTrue: [ self updateVisibleSelectionHorizontal.\r\t\t\t\t\tensureVisibleSelection := false ].\r\t\t\tneedsRefreshRows := needsRefreshItems := false.\r\t\t\ttrue ]\r\t\tifFalse: [ self needsRefreshRows\r\t\t\t\tifTrue: [ self updateRows.\r\t\t\t\t\tself ensureVisibleSelection\r\t\t\t\t\t\tifTrue: [ self updateVisibleSelectionHorizontal.\r\t\t\t\t\t\t\tensureVisibleSelection := false ].\r\t\t\t\t\tneedsRefreshRows := false.\r\t\t\t\t\ttrue ]\r\t\t\t\tifFalse: [ self ensureVisibleSelection\r\t\t\t\t\t\tifTrue: [ self updateVisibleSelectionHorizontal.\r\t\t\t\t\t\t\tensureVisibleSelection := false.\r\t\t\t\t\t\t\ttrue ]\r\t\t\t\t\t\tifFalse: [ false ] ] ]',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '203' ],		#self : OmReference [ '204' ],		#time : DateAndTime [ '2018-01-14T19:02:25.575117-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListViewportMorph,				#isMetaSide : false			},			#name : #updateRows,			#protocol : #updating,			#sourceCode : 'updateRows\r\t"Call with a cache of pre-existing items."\r\r\texposedItems ifNotNil: [ self updateRows: exposedItems ]',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '204' ],		#self : OmReference [ '205' ],		#time : DateAndTime [ '2018-01-14T19:02:25.576134-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListViewportMorph,				#isMetaSide : false			},			#name : #'updateRows:',			#protocol : #updating,			#sourceCode : 'updateRows: oldExposedItems\r\t"Model hasn\'t changed, just complement missing rows."\r\r\t| item index yDown yUp row upStream downStream |\r\tindex := self baselineIndex.\r\texposedItems := SmallDictionary new.\r\tupStream := self owner model asReverseReadStream\r\t\tskip: self modelSize - index;\r\t\tyourself.\r\tdownStream := self owner model asReadStream\r\t\tskip: index;\r\t\tyourself.\r\titem := upStream next.\r\trow := oldExposedItems\r\t\tat: index\r\t\tifAbsent: [ self rowMorphForItem: item ].\r\texposedItems at: index put: row.\r\tyUp := self getRowTop: row height.\r\tyDown := yUp + row height.\r\tyUp := self addRowsUp: yUp with: upStream cache: oldExposedItems.\r\tyUp > 0\r\t\tifTrue: [ yDown := yDown - yUp.\r\t\t\tyUp := 0 ].\t"Make sure there is no empty space on top."\r\tyDown := self\r\t\taddRowsDown: yDown\r\t\twith: downStream\r\t\tcache: oldExposedItems.\r\t(downStream atEnd and: [ yDown < self height ])\r\t\tifTrue:\r\t\t\t[ yUp := yUp + self height - yDown.\r\t\t\tyUp := self addRowsUp: yUp with: upStream cache: oldExposedItems.\r\t\t\tyUp > 0\r\t\t\t\tifTrue: [ yDown := yDown - yUp.\r\t\t\t\t\tyUp := 0 ] ].\r\ttopOffset := yUp.\r\tbottomOffset := yDown.\r\texposedItems values\r\t\tdo: [ :each | each width: self effectiveWidth - 2 ]',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '205' ],		#self : OmReference [ '206' ],		#time : DateAndTime [ '2018-01-14T19:02:25.577321-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListViewportMorph,				#isMetaSide : false			},			#name : #updateVisibleSelectionHorizontal,			#protocol : #updating,			#sourceCode : 'updateVisibleSelectionHorizontal\r\t"This one is done after updating the items or the rows."\r\r\t| rowIndex |\r\tself owner hasSelection\r\t\tifFalse: [ ^ self ].\r\trowIndex := self owner selectedRowIndex.\r\t(self isItemFullyVisible: rowIndex)\r\t\tifFalse:\r\t\t\t[ (self exposedItems at: rowIndex ifAbsent: [ ^ self ])\r\t\t\t\tin:\r\t\t\t\t\t[ :morph | \r\t\t\t\t\t| delta |\r\t\t\t\t\tdelta := self effectiveWidth - self width.\r\t\t\t\t\tdelta isZero\r\t\t\t\t\t\tifTrue: [ ^ self ].\r\t\t\t\t\tself owner horizontalScrollBar\r\t\t\t\t\t\tvalue:\r\t\t\t\t\t\t\t(((morph submorphs last left - morph left asFloat) / delta min: 1.0)\r\t\t\t\t\t\t\t\tmax: 0.0) ] ]',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '206' ],		#self : OmReference [ '207' ],		#time : DateAndTime [ '2018-01-14T19:02:25.578242-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListViewportMorph,				#isMetaSide : false			},			#name : #updateVisibleSelectionVertical,			#protocol : #updating,			#sourceCode : 'updateVisibleSelectionVertical\r\t"This part can be done before updating the items."\r\r\t| rowIndex |\r\tself owner hasSelection\r\t\tifFalse: [ ^ self ].\r\trowIndex := self owner selectedRowIndex.\r\t(self isRowIndexFullyVisible: rowIndex)\r\t\tifFalse: [ self owner verticalScrollBar\r\t\t\t\tvalue: (self verticalValueForIndex: rowIndex) ]',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '207' ],		#self : OmReference [ '208' ],		#time : DateAndTime [ '2018-01-14T19:02:25.579144-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListViewportMorph,				#isMetaSide : false			},			#name : #verticalValue,			#protocol : #accessing,			#sourceCode : 'verticalValue\r\t^ self owner verticalScrollBar value',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '208' ],		#self : OmReference [ '209' ],		#time : DateAndTime [ '2018-01-14T19:02:25.58143-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListViewportMorph,				#isMetaSide : false			},			#name : #'verticalValueForIndex:',			#protocol : #accessing,			#sourceCode : 'verticalValueForIndex: anIndex\r\t"Reverse the computation."\r\r\t^ ((anIndex - 1) / self modelSize) asFloat',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '209' ],		#self : OmReference [ '210' ],		#time : DateAndTime [ '2018-01-14T19:02:25.582544-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListViewportMorph2,				#isMetaSide : false			},			#name : #baselineIndex,			#protocol : #geometry,			#sourceCode : 'baselineIndex\r\t^ (self verticalValue * self modelSize) truncated + 1\r\t\tmin: self modelSize',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '210' ],		#self : OmReference [ '211' ],		#time : DateAndTime [ '2018-01-14T19:02:25.583551-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListViewportMorph2,				#isMetaSide : false			},			#name : #changed,			#protocol : #accessing,			#sourceCode : 'changed\r\t"Normal display change. I receive that when my bounds / my scrollbar have changed."\r\r\tself owner ifNil: [ ^ self ].\r\tself owner model ifNil: [ ^ self ].\r\tself updateRows.\r\tself owner\r\t\tresizeVerticalScrollBar;\r\t\tresizeHorizontalScrollBar;\r\t\trecalculateHorizontalScrollBar;\r\t\trecalculateVerticalScrollBar.\r\t^ fullBounds\r\t\tifNil: [ self invalidRect: self privateFullBounds ]\r\t\tifNotNil: [ self invalidRect: fullBounds ]',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '211' ],		#self : OmReference [ '212' ],		#time : DateAndTime [ '2018-01-14T19:02:25.584551-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListViewportMorph2,				#isMetaSide : false			},			#name : #'drawSubmorphsOn:',			#protocol : #accessing,			#sourceCode : 'drawSubmorphsOn: aCanvas\r\t| drawBlock |\r\tsubmorphs isEmpty\r\t\tifTrue: [ ^ self ].\r\tself owner motion ifNotNil: [ :aMotion | aMotion value ].\r\tdrawBlock := [ :canvas | submorphs reverseDo: [ :m | canvas fullDrawMorph: m ] ].\r\taCanvas\r\t\tclipBy: (aCanvas clipRect intersect: self clippingBounds ifNone: [ ^ self ])\r\t\tduring: drawBlock',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '212' ],		#self : OmReference [ '213' ],		#time : DateAndTime [ '2018-01-14T19:02:25.585457-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListViewportMorph2,				#isMetaSide : false			},			#name : #'getRowTop:',			#protocol : #geometry,			#sourceCode : 'getRowTop: rowHeight\r\t"Major change but significantly simpler overall."\r\r\t| i k xTop xBottom n |\r\tn := self modelSize.\r\ti := self baselineIndex.\r\txTop := (i - 1) / n * self height.\r\txBottom := i / n * self height.\r\tk := (self verticalValue - ((i - 1) / n)) * n.\r\t^ (xTop + (xBottom - xTop - rowHeight)) * k',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '213' ],		#self : OmReference [ '214' ],		#time : DateAndTime [ '2018-01-14T19:02:25.586472-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListViewportMorph2,				#isMetaSide : false			},			#name : #refresh,			#protocol : #accessing,			#sourceCode : 'refresh\r\t"model change triggers a refresh."\r\r\t"Try to maintain same position from top of the tree when refreshing."\r\r\t| oldModelSize |\r\tself owner ifNil: [ ^ self ].\r\toldModelSize := self modelSize.\r\tself clearModelCachedData.\r\tself updateItems.\r\tself owner\r\t\tresizeVerticalScrollBar;\r\t\tresizeHorizontalScrollBar;\r\t\trecalculateHorizontalScrollBar;\r\t\trecalculateVerticalScrollBar.\r\tself owner verticalScrollBar\r\t\tvalue: self verticalValue * (oldModelSize / self modelSize).\r\tsuper changed',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '214' ],		#self : OmReference [ '215' ],		#time : DateAndTime [ '2018-01-14T19:02:25.587455-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListViewportMorph2,				#isMetaSide : false			},			#name : #submorphsReorganize,			#protocol : #accessing,			#sourceCode : 'submorphsReorganize\r\t"Move the submorph handling code in its place?"\r\r\t| x y rowsToDisplay rowSubviews selectionIndex dropIndex |\r\trowsToDisplay := self exposedItems keys asSortedCollection asArray.\t"Do not rely on exposedItems ordering"\r\trowSubviews := OrderedCollection new: rowsToDisplay size + 1.\r\tx := self left + 2 - self leftOffset.\r\ty := self top + topOffset.\r\tselectionIndex := self owner selectedRowIndex.\r\tdropIndex := self owner dropIndex.\r\trowsToDisplay\r\t\tdo:\r\t\t\t[ :rowIndex | \r\t\t\t| row |\r\t\t\trow := self exposedItems at: rowIndex.\r\t\t\trow privateOwner: nil.\r\t\t\trow topLeft: x @ y.\r\t\t\ty := y + row height.\r\t\t\tselectionIndex = rowIndex\r\t\t\t\tifTrue: [ row color: self owner selectionColor ]\r\t\t\t\tifFalse: [ row color: Color transparent ].\r\t\t\tdropIndex = rowIndex\r\t\t\t\tifTrue: [ row highlightForDrop: true ]\r\t\t\t\tifFalse: [ row highlightForDrop: false ].\r\t\t\trow privateOwner: self.\r\t\t\trowSubviews add: row ].\r\tsubmorphs := rowSubviews asArray',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '215' ],		#self : OmReference [ '216' ],		#time : DateAndTime [ '2018-01-14T19:02:25.58851-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListViewportMorph2,				#isMetaSide : false			},			#name : #updateItems,			#protocol : #accessing,			#sourceCode : 'updateItems\r\t"..."\r\r\t| index iUp iDown y yDown yUp visibleHeight row delta upStream downStream |\r\tindex := self baselineIndex.\r\texposedItems := SmallDictionary new.\r\tvisibleHeight := self height.\r\tmaximumWidth := 0.\r\trow := self rowMorphForItem: (self owner model at: index).\r\texposedItems at: index put: row.\r\tyUp := self getRowTop: row height.\r\tyDown := yUp + row height.\r\tiUp := index - 1.\r\tupStream := self owner model asReverseReadStream.\r\tupStream skip: self modelSize - iUp.\r\tiDown := index.\r\tdownStream := self owner model asReadStream.\r\tdownStream skip: iDown.\r\t[ yUp > 0 and: [ upStream atEnd not ] ]\r\t\twhileTrue:\r\t\t\t[ row := self rowMorphForItem: upStream next.\r\t\t\texposedItems at: iUp put: row.\r\t\t\tyUp := yUp - row height.\r\t\t\tiUp := iUp - 1 ].\r\tyUp > 0\r\t\tifTrue: [ yDown := yDown - yUp.\r\t\t\tyUp := 0 ].\t"Make sure there is no empty space on top."\r\t[ yDown < visibleHeight and: [ downStream atEnd not ] ]\r\t\twhileTrue:\r\t\t\t[ iDown := iDown + 1.\r\t\t\trow := self rowMorphForItem: downStream next.\r\t\t\texposedItems at: iDown put: row.\r\t\t\tyDown := yDown + row height ].\r\ttopOffset := yUp.\r\tbottomOffset := yDown.\r\texposedItems values\r\t\tdo:\r\t\t\t[ :each | \r\t\t\teach privateOwner: nil.\r\t\t\teach width: self effectiveWidth - 2.\r\t\t\teach privateOwner: self ].\r\tself submorphsReorganize',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '216' ],		#self : OmReference [ '217' ],		#time : DateAndTime [ '2018-01-14T19:02:25.589692-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListViewportMorph2,				#isMetaSide : false			},			#name : #updateRows,			#protocol : #accessing,			#sourceCode : 'updateRows\r\t"..."\r\r\t| index iUp iDown y yDown yUp visibleHeight row delta oldExposedItems upStream downStream |\r\tindex := self baselineIndex.\r\toldExposedItems := exposedItems.\r\texposedItems := SmallDictionary new.\r\tvisibleHeight := self height.\r\trow := oldExposedItems\r\t\tat: index\r\t\tifAbsent: [ self rowMorphForItem: (self owner model at: index) ].\r\texposedItems at: index put: row.\r\tyUp := self getRowTop: row height.\r\tyDown := yUp + row height.\r\tiUp := index - 1.\r\tupStream := self owner model asReverseReadStream\r\t\tskip: self modelSize - iUp;\r\t\tyourself.\r\tiDown := index.\r\tdownStream := self owner model asReadStream\r\t\tskip: iDown;\r\t\tyourself.\r\t[ yUp > 0 and: [ upStream atEnd not ] ]\r\t\twhileTrue: [ | item |\r\t\t\titem := upStream next.\r\t\t\trow := oldExposedItems\r\t\t\t\tat: iUp\r\t\t\t\tifAbsent: [ self rowMorphForItem: item ].\r\t\t\texposedItems at: iUp put: row.\r\t\t\tyUp := yUp - row height.\r\t\t\tiUp := iUp - 1 ].\r\tyUp > 0\r\t\tifTrue: [ yDown := yDown - yUp.\r\t\t\tyUp := 0 ].\t"Make sure there is no empty space on top."\r\t[ yDown < visibleHeight and: [ downStream atEnd not ] ]\r\t\twhileTrue: [ | item |\r\t\t\tiDown := iDown + 1.\r\t\t\titem := downStream next.\r\t\t\trow := oldExposedItems\r\t\t\t\tat: iDown\r\t\t\t\tifAbsent: [ self rowMorphForItem: item ].\r\t\t\texposedItems at: iDown put: row.\r\t\t\tyDown := yDown + row height ].\r\ttopOffset := yUp.\r\tbottomOffset := yDown.\r\texposedItems values\r\t\tdo: [ :each | \r\t\t\teach privateOwner: nil.\r\t\t\teach width: self effectiveWidth - 2.\r\t\t\teach privateOwner: self ].\r\tself submorphsReorganize',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '217' ],		#self : OmReference [ '218' ],		#time : DateAndTime [ '2018-01-14T19:02:25.592044-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListViewportMorph3,				#isMetaSide : false			},			#name : #findCurrentVerticalValue,			#protocol : #'as yet unclassified',			#sourceCode : 'findCurrentVerticalValue\r\t"Current value is top most item, with an after comma part as a % of item above my top."\r\r\t"I reach here before my items are correctly shifted in position?"\r\r\texposedItems\r\t\tifNotNil: [ :e | \r\t\t\t| i v d |\r\t\t\ti := e keys sorted first.\r\t\t\tv := e at: i.\r\t\t\tv bottom < self top\r\t\t\t\tifTrue: [ d := (0 - v top) / v height asFloat ]\r\t\t\t\tifFalse: [ d := (self top - v top) / v height asFloat ].\r\t\t\t^ self verticalValueForIndex: i + d ].\r\t^ nil',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '218' ],		#self : OmReference [ '219' ],		#time : DateAndTime [ '2018-01-14T19:02:25.593172-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListViewportMorph3,				#isMetaSide : false			},			#name : #'getRowTop:',			#protocol : #'as yet unclassified',			#sourceCode : 'getRowTop: rowHeight\r\t"Major change but significantly simpler overall."\r\r\t| i k n |\r\tn := self modelSize.\r\ti := self baselineIndex.\r\tk := ((self verticalValueForIndex: i) - self verticalValue) * n.\r\t^ rowHeight * k',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '219' ],		#self : OmReference [ '220' ],		#time : DateAndTime [ '2018-01-14T19:02:25.594086-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListViewportMorph3,				#isMetaSide : false			},			#name : #topRow,			#protocol : #'as yet unclassified',			#sourceCode : 'topRow\r\t^ exposedItems\r\t\tifNotNil: [ :e | e at: e keys sorted first ]\r\t\tifNil: [  ]',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '220' ],		#self : OmReference [ '221' ],		#time : DateAndTime [ '2018-01-14T19:02:25.595178-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListViewportMorph3,				#isMetaSide : false			},			#name : #updateItems,			#protocol : #'as yet unclassified',			#sourceCode : 'updateItems\r\t"Found it, under certain circumstances, this code misses the fact that the bottom isn\'t at the bottom (depending on ligne progress). Overall, I think this is too complex and I need to make it simpler."\r\r\t| index iUp iDown yDown yUp visibleHeight row upStream downStream |\r\tindex := self baselineIndex.\r\texposedItems := SmallDictionary new.\r\tvisibleHeight := self height.\r\tmaximumWidth := 0.\r\trow := self rowMorphForItem: (self owner model at: index).\r\texposedItems at: index put: row.\r\tyUp := self getRowTop: row height.\r\tyDown := yUp + row height.\r\tiUp := index - 1.\r\tupStream := self owner model asReverseReadStream.\r\tupStream skip: self modelSize - iUp.\r\tiDown := index.\r\tdownStream := self owner model asReadStream.\r\tdownStream skip: iDown.\r\t[ yDown < visibleHeight and: [ downStream atEnd not ] ]\r\t\twhileTrue: [ iDown := iDown + 1.\r\t\t\trow := self rowMorphForItem: downStream next.\r\t\t\texposedItems at: iDown put: row.\r\t\t\tyDown := yDown + row height ].\r\t(downStream atEnd\r\t\tand: [ yDown < visibleHeight and: [ upStream atEnd not ] ])\r\t\tifTrue: [ yUp := yUp + visibleHeight - yDown.\r\t\t\t[ yUp > 0 and: [ upStream atEnd not ] ]\r\t\t\t\twhileTrue: [ row := self rowMorphForItem: upStream next.\r\t\t\t\t\texposedItems at: iUp put: row.\r\t\t\t\t\tyUp := yUp - row height.\r\t\t\t\t\tiUp := iUp - 1 ] ].\r\tyUp > 0\r\t\tifTrue: [ yDown := yDown - yUp.\r\t\t\tyUp := 0 ].\t"Make sure there is no empty space on top."\r\ttopOffset := yUp.\r\tbottomOffset := yDown.\r\texposedItems values\r\t\tdo: [ :each | each width: self effectiveWidth - 2 ]',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '221' ],		#self : OmReference [ '222' ],		#time : DateAndTime [ '2018-01-14T19:02:25.596254-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListViewportMorph3,				#isMetaSide : false			},			#name : #updateRows,			#protocol : #'as yet unclassified',			#sourceCode : 'updateRows\r\t"Model hasn\'t changed, just complement missing rows."\r\r\t| index iUp iDown yDown yUp visibleHeight row oldExposedItems upStream downStream |\r\tindex := self baselineIndex.\r\toldExposedItems := exposedItems.\r\texposedItems := SmallDictionary new.\r\tvisibleHeight := self height.\r\trow := oldExposedItems\r\t\tat: index\r\t\tifAbsent: [ self rowMorphForItem: (self owner model at: index) ].\r\texposedItems at: index put: row.\r\tyUp := self getRowTop: row height.\r\tyDown := yUp + row height.\r\tiUp := index - 1.\r\tupStream := self owner model asReverseReadStream\r\t\tskip: self modelSize - iUp;\r\t\tyourself.\r\tiDown := index.\r\tdownStream := self owner model asReadStream\r\t\tskip: iDown;\r\t\tyourself.\r\t[ yDown < visibleHeight and: [ downStream atEnd not ] ]\r\t\twhileTrue: [ | item |\r\t\t\tiDown := iDown + 1.\r\t\t\titem := downStream next.\r\t\t\trow := oldExposedItems\r\t\t\t\tat: iDown\r\t\t\t\tifAbsent: [ self rowMorphForItem: item ].\r\t\t\texposedItems at: iDown put: row.\r\t\t\tyDown := yDown + row height ].\r\t(downStream atEnd\r\t\tand: [ yDown < visibleHeight and: [ upStream atEnd not ] ])\r\t\tifTrue: [ yUp := yUp + visibleHeight - yDown.\r\t\t\t[ yUp > 0 and: [ upStream atEnd not ] ]\r\t\t\t\twhileTrue: [ | item |\r\t\t\t\t\titem := upStream next.\r\t\t\t\t\trow := oldExposedItems\r\t\t\t\t\t\tat: iUp\r\t\t\t\t\t\tifAbsent: [ self rowMorphForItem: item ].\r\t\t\t\t\texposedItems at: iUp put: row.\r\t\t\t\t\tyUp := yUp - row height.\r\t\t\t\t\tiUp := iUp - 1 ] ].\r\tyUp > 0\r\t\tifTrue: [ yDown := yDown - yUp.\r\t\t\tyUp := 0 ].\t"Make sure there is no empty space on top."\r\ttopOffset := yUp.\r\tbottomOffset := yDown.\r\texposedItems values\r\t\tdo: [ :each | each width: self effectiveWidth - 2 ]',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '222' ],		#self : OmReference [ '223' ],		#time : DateAndTime [ '2018-01-14T19:02:25.597129-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltListViewportMorph3,				#isMetaSide : false			},			#name : #'verticalValueForIndex:',			#protocol : #'as yet unclassified',			#sourceCode : 'verticalValueForIndex: anIndex\r\t"Reverse the computation. Correct."\r\r\t^ (anIndex - 1.0) / self modelSize',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '223' ],		#self : OmReference [ '224' ],		#time : DateAndTime [ '2018-01-14T19:02:25.598183-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTreeItemMorph,				#isMetaSide : false			},			#name : #indentStep,			#protocol : #accessing,			#sourceCode : 'indentStep\r\t"The amount of pixels to indent the tree with. Should be configurable?"\r\r\t^ 20',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '224' ],		#self : OmReference [ '225' ],		#time : DateAndTime [ '2018-01-14T19:02:25.599185-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTreeItemMorph,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\t"Create a representation of self."\r\r\tsuper initialize.\r\tself\r\t\tcolor: Color transparent;\r\t\tlayoutPolicy: TableLayout new;\r\t\tlayoutInset: 0;\r\t\tcellInset: 4 @ 0;\r\t\twrapCentering: #center;\r\t\thResizing: #shrinkWrap;\r\t\tvResizing: #shrinkWrap;\r\t\tlistDirection: #leftToRight;\r\t\tcellPositioning: #leftCenter',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '225' ],		#self : OmReference [ '226' ],		#time : DateAndTime [ '2018-01-14T19:02:25.600048-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTreeItemMorph,				#isMetaSide : false			},			#name : #item,			#protocol : #accessing,			#sourceCode : 'item\r\t^ item',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '226' ],		#self : OmReference [ '227' ],		#time : DateAndTime [ '2018-01-14T19:02:25.60245-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTreeItemMorph,				#isMetaSide : false			},			#name : #'item:',			#protocol : #accessing,			#sourceCode : 'item: anObject\r\t"Create the morph representing the item"\r\r\titem := anObject.\r\tself addMorph: item asMorph.\r\titem icon ifNotNil: [ :icon | self addMorph: icon asMorph ].\r\titem hasContents\r\t\tifTrue: [ | toggle enclosing |\r\t\t\tenclosing := Morph new.\r\t\t\tenclosing color: Color transparent.\r\t\t\ttoggle := item isExpanded\r\t\t\t\tifTrue: [ self theme treeExpandedForm asMorph ]\r\t\t\t\tifFalse: [ self theme treeUnexpandedForm asMorph ].\r\t\t\tenclosing width: toggle width.\r\t\t\tenclosing height: self submorphs first height.\r\t\t\tenclosing addMorph: toggle.\r\t\t\ttoggle center: enclosing center.\r\t\t\tenclosing on: #mouseDown send: #toggleExpanded to: item.\r\t\t\tself addMorph: enclosing ]\r\t\tifFalse: [ item couldExpand\r\t\t\t\tifTrue: [ self addMorph: (Form extent: 10 @ 9 depth: Display depth) asMorph ] ].\r\tself computeBounds.\r\tself bottom: self bottom + 2.\r\tself submorphs do: [ :e | e top: 1 ].\r\tself left: self indentStep * item depth',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '227' ],		#self : OmReference [ '228' ],		#time : DateAndTime [ '2018-01-14T19:02:25.603676-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltLog class',				#isMetaSide : true			},			#name : #log,			#protocol : #'as yet unclassified',			#sourceCode : 'log\r\t^ Log ifNil: [ Log := OrderedCollection new ]',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '228' ],		#self : OmReference [ '229' ],		#time : DateAndTime [ '2018-01-14T19:02:25.604618-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltLog class',				#isMetaSide : true			},			#name : #'log:',			#protocol : #'as yet unclassified',			#sourceCode : 'log: data\r\tself log add: Time millisecondClockValue -> data',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '229' ],		#self : OmReference [ '230' ],		#time : DateAndTime [ '2018-01-14T19:02:25.605509-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltLog class',				#isMetaSide : true			},			#name : #reset,			#protocol : #'as yet unclassified',			#sourceCode : 'reset\r\t<example>\r\tself log removeAll',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '230' ],		#self : OmReference [ '231' ],		#time : DateAndTime [ '2018-01-14T19:02:25.606401-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMotion,				#isMetaSide : false			},			#name : #'+',			#protocol : #combining,			#sourceCode : '+ anotherMotion\r\tself subclassResponsibility',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '231' ],		#self : OmReference [ '232' ],		#time : DateAndTime [ '2018-01-14T19:02:25.607342-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMotion,				#isMetaSide : false			},			#name : #check,			#protocol : #animating,			#sourceCode : 'check\r\tself subclassResponsibility',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '232' ],		#self : OmReference [ '233' ],		#time : DateAndTime [ '2018-01-14T19:02:25.608243-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMotion,				#isMetaSide : false			},			#name : #'mergeWith:',			#protocol : #combining,			#sourceCode : 'mergeWith: anotherMotion\r\t^ self + anotherMotion',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '233' ],		#self : OmReference [ '234' ],		#time : DateAndTime [ '2018-01-14T19:02:25.60913-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMotion,				#isMetaSide : false			},			#name : #step,			#protocol : #animating,			#sourceCode : 'step\r\tself value.\r\t^ self check',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '234' ],		#self : OmReference [ '235' ],		#time : DateAndTime [ '2018-01-14T19:02:25.610137-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMotion,				#isMetaSide : false			},			#name : #value,			#protocol : #animating,			#sourceCode : 'value\r\tself subclassResponsibility',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '235' ],		#self : OmReference [ '236' ],		#time : DateAndTime [ '2018-01-14T19:02:25.611099-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltOneShotMotion,				#isMetaSide : false			},			#name : #'+',			#protocol : #combining,			#sourceCode : '+ anotherMotion\r\t| a |\r\ta := AltSequenceMotion new.\r\ta motions\r\t\tadd: self;\r\t\tadd: anotherMotion.\r\t^ a',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '236' ],		#self : OmReference [ '237' ],		#time : DateAndTime [ '2018-01-14T19:02:25.61339-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltOneShotMotion,				#isMetaSide : false			},			#name : #action,			#protocol : #accessing,			#sourceCode : 'action\r\t^ action',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '237' ],		#self : OmReference [ '238' ],		#time : DateAndTime [ '2018-01-14T19:02:25.614451-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltOneShotMotion,				#isMetaSide : false			},			#name : #'action:',			#protocol : #accessing,			#sourceCode : 'action: anObject\r\taction := anObject',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '238' ],		#self : OmReference [ '239' ],		#time : DateAndTime [ '2018-01-14T19:02:25.615291-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltOneShotMotion,				#isMetaSide : false			},			#name : #check,			#protocol : #animating,			#sourceCode : 'check\r\t^ nil',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '239' ],		#self : OmReference [ '240' ],		#time : DateAndTime [ '2018-01-14T19:02:25.616188-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltOneShotMotion,				#isMetaSide : false			},			#name : #value,			#protocol : #animating,			#sourceCode : 'value\r\taction\r\t\tifNotNil: [ action value.\r\t\t\taction := nil ]',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '240' ],		#self : OmReference [ '241' ],		#time : DateAndTime [ '2018-01-14T19:02:25.617115-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltSequenceMotion,				#isMetaSide : false			},			#name : #'+',			#protocol : #combining,			#sourceCode : '+ anotherMotion\r\tself motions add: anotherMotion.\r\t^ self',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '241' ],		#self : OmReference [ '242' ],		#time : DateAndTime [ '2018-01-14T19:02:25.618047-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltSequenceMotion,				#isMetaSide : false			},			#name : #check,			#protocol : #animating,			#sourceCode : 'check\r\t"Iterate over the next step in the animation"\r\r\tmotions first check ifNil: [ motions removeFirst ].\r\tmotions isEmpty\r\t\tifTrue: [ ^ nil ].\r\t^ self',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '242' ],		#self : OmReference [ '243' ],		#time : DateAndTime [ '2018-01-14T19:02:25.619104-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltSequenceMotion,				#isMetaSide : false			},			#name : #motions,			#protocol : #accessing,			#sourceCode : 'motions\r\t^ motions ifNil: [ motions := OrderedCollection new ]',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '243' ],		#self : OmReference [ '244' ],		#time : DateAndTime [ '2018-01-14T19:02:25.619974-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltSequenceMotion,				#isMetaSide : false			},			#name : #'motions:',			#protocol : #accessing,			#sourceCode : 'motions: anObject\r\tmotions := anObject',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '244' ],		#self : OmReference [ '245' ],		#time : DateAndTime [ '2018-01-14T19:02:25.620856-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltSequenceMotion,				#isMetaSide : false			},			#name : #value,			#protocol : #animating,			#sourceCode : 'value\r\t"Value of the first item in the list of motions in the sequence."\r\r\tmotions isEmpty\r\t\tifFalse: [ motions first value ]',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '245' ],		#self : OmReference [ '246' ],		#time : DateAndTime [ '2018-01-14T19:02:25.62179-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltTweenMotion class',				#isMetaSide : true			},			#name : #easeInOutCubic,			#protocol : #tweens,			#sourceCode : 'easeInOutCubic\r\t^ [ :aTime :aDuration :aChange :anInitialValue | \r\t| t |\r\tt := aTime / (aDuration / 2.0).\r\tt < 1\r\t\tifTrue: [ aChange / 2.0 * (t ** 3) + anInitialValue ]\r\t\tifFalse: [ aChange / 2.0 * ((t - 2) ** 3 + 2) + anInitialValue ] ]\r\t"aTime is here relative to 0."',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '246' ],		#self : OmReference [ '247' ],		#time : DateAndTime [ '2018-01-14T19:02:25.62427-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltTweenMotion class',				#isMetaSide : true			},			#name : #easeInOutQuadratic,			#protocol : #tweens,			#sourceCode : 'easeInOutQuadratic\r\t^ [ :aTime :aDuration :aChange :anInitialValue | \r\t| t |\r\tt := aTime / (aDuration / 2.0).\r\tt < 1\r\t\tifTrue: [ aChange / 2.0 * t * t + anInitialValue ]\r\t\tifFalse:\r\t\t\t[ t := t - 1.\r\t\t\taChange negated / 2.0 * (t * (t - 2) - 1) + anInitialValue ] ]\r\t"aTime is here relative to 0."',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '247' ],		#self : OmReference [ '248' ],		#time : DateAndTime [ '2018-01-14T19:02:25.625365-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltTweenMotion class',				#isMetaSide : true			},			#name : #easeInOutQuartic,			#protocol : #tweens,			#sourceCode : 'easeInOutQuartic\r\t^ [ :aTime :aDuration :aChange :anInitialValue | \r\t| t |\r\tt := aTime / (aDuration / 2.0).\r\tt < 1\r\t\tifTrue: [ aChange / 2.0 * (t ** 4) + anInitialValue ]\r\t\tifFalse: [ aChange negated / 2.0 * ((t - 2) ** 4 - 2) + anInitialValue ] ]\r\t"aTime is here relative to 0."',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '248' ],		#self : OmReference [ '249' ],		#time : DateAndTime [ '2018-01-14T19:02:25.626332-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltTweenMotion class',				#isMetaSide : true			},			#name : #easeInOutQuintic,			#protocol : #tweens,			#sourceCode : 'easeInOutQuintic\r\t^ [ :aTime :aDuration :aChange :anInitialValue | \r\t| t |\r\tt := aTime / (aDuration / 2.0).\r\tt < 1\r\t\tifTrue: [ aChange / 2.0 * (t ** 5) + anInitialValue ]\r\t\tifFalse: [ aChange / 2.0 * ((t - 2) ** 5 + 2) + anInitialValue ] ]\r\t"aTime is here relative to 0."',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '249' ],		#self : OmReference [ '250' ],		#time : DateAndTime [ '2018-01-14T19:02:25.627241-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltTweenMotion class',				#isMetaSide : true			},			#name : #easeInQuadratic,			#protocol : #tweens,			#sourceCode : 'easeInQuadratic\r\t^ [ :aTime :aDuration :aChange :anInitialValue | \r\t| t |\r\tt := aTime / aDuration asFloat.\r\t^ aChange * t * t + anInitialValue ]',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '250' ],		#self : OmReference [ '251' ],		#time : DateAndTime [ '2018-01-14T19:02:25.628147-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltTweenMotion class',				#isMetaSide : true			},			#name : #easeOutQuadratic,			#protocol : #tweens,			#sourceCode : 'easeOutQuadratic\r\t^ [ :aTime :aDuration :aChange :anInitialValue | \r\t| t |\r\tt := aTime / aDuration asFloat.\r\t^ aChange negated * t * (t - 2) + anInitialValue ]',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '251' ],		#self : OmReference [ '252' ],		#time : DateAndTime [ '2018-01-14T19:02:25.629053-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTweenMotion,				#isMetaSide : false			},			#name : #'+',			#protocol : #combining,			#sourceCode : '+ anotherMotion\r\t"Add another motion as a sequence. Merging works a bit differently."\r\r\t| a |\r\ta := AltSequenceMotion new.\r\ta motions\r\t\tadd: self;\r\t\tadd: anotherMotion.\r\t^ a',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '252' ],		#self : OmReference [ '253' ],		#time : DateAndTime [ '2018-01-14T19:02:25.629938-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTweenMotion,				#isMetaSide : false			},			#name : #action,			#protocol : #accessing,			#sourceCode : 'action\r\t"Action is a block."\r\r\t^ action ifNil: [ action := [ :v |  ] ]',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '253' ],		#self : OmReference [ '254' ],		#time : DateAndTime [ '2018-01-14T19:02:25.63083-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTweenMotion,				#isMetaSide : false			},			#name : #'action:',			#protocol : #accessing,			#sourceCode : 'action: anObject\r\taction := anObject',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '254' ],		#self : OmReference [ '255' ],		#time : DateAndTime [ '2018-01-14T19:02:25.631705-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTweenMotion,				#isMetaSide : false			},			#name : #'at:',			#protocol : #animating,			#sourceCode : 'at: aTime\r\t"Return the value for that time (in milliseconds)"\r\r\t^ self\r\t\tnextValueAt: aTime - startTime\r\t\tduration: endTime - startTime\r\t\tchange: endValue - startValue\r\t\tfrom: startValue',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '255' ],		#self : OmReference [ '256' ],		#time : DateAndTime [ '2018-01-14T19:02:25.632629-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTweenMotion,				#isMetaSide : false			},			#name : #atEnd,			#protocol : #testing,			#sourceCode : 'atEnd\r\t^ Time millisecondClockValue >= endTime',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '256' ],		#self : OmReference [ '257' ],		#time : DateAndTime [ '2018-01-14T19:02:25.635052-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTweenMotion,				#isMetaSide : false			},			#name : #check,			#protocol : #animating,			#sourceCode : 'check\r\t"Check if we need to stop."\r\r\t^ self atEnd\r\t\tifTrue: [  ]\r\t\tifFalse: [ self ]',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '257' ],		#self : OmReference [ '258' ],		#time : DateAndTime [ '2018-01-14T19:02:25.636001-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTweenMotion,				#isMetaSide : false			},			#name : #endTime,			#protocol : #accessing,			#sourceCode : 'endTime\r\t^ endTime',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '258' ],		#self : OmReference [ '259' ],		#time : DateAndTime [ '2018-01-14T19:02:25.636897-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTweenMotion,				#isMetaSide : false			},			#name : #'endTime:',			#protocol : #accessing,			#sourceCode : 'endTime: anObject\r\tendTime := anObject',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '259' ],		#self : OmReference [ '260' ],		#time : DateAndTime [ '2018-01-14T19:02:25.637734-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTweenMotion,				#isMetaSide : false			},			#name : #endValue,			#protocol : #accessing,			#sourceCode : 'endValue\r\t^ endValue',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '260' ],		#self : OmReference [ '261' ],		#time : DateAndTime [ '2018-01-14T19:02:25.63861-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTweenMotion,				#isMetaSide : false			},			#name : #'endValue:',			#protocol : #accessing,			#sourceCode : 'endValue: anObject\r\tendValue := anObject',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '261' ],		#self : OmReference [ '262' ],		#time : DateAndTime [ '2018-01-14T19:02:25.639715-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTweenMotion,				#isMetaSide : false			},			#name : #'mergeWith:',			#protocol : #combining,			#sourceCode : 'mergeWith: aMotion\r\t"Special. Change target value from change sign; change time target value based on time change too."\r\r\t| s |\r\ts := (endValue - startValue)\r\t\t* (aMotion endValue - aMotion startValue).\r\ts > 0\r\t\tifTrue:\r\t\t\t[ endTime := endTime + (aMotion endTime - aMotion startTime).\r\t\t\tendValue := endValue + (aMotion endValue - aMotion startValue) ]\r\t\tifFalse:\r\t\t\t[ endTime := endTime - (aMotion endTime - aMotion startTime).\r\t\t\tendValue := endValue - (aMotion endValue - aMotion startValue) ].\r\tendTime - startTime = 0\r\t\tifTrue: [ ^ nil ].\r\tendValue := (endValue min: 1.0) max: 0.0.\r\t^ self',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '262' ],		#self : OmReference [ '263' ],		#time : DateAndTime [ '2018-01-14T19:02:25.640739-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTweenMotion,				#isMetaSide : false			},			#name : #'nextValueAt:duration:change:from:',			#protocol : #private,			#sourceCode : 'nextValueAt: msSinceStart duration: msTotalTime change: valueChange from: initialValue\r\t"Trying to document clearly the protocol used by the tween block!"\r\r\t^ self tween\r\t\tvalue: msSinceStart\r\t\tvalue: msTotalTime\r\t\tvalue: valueChange\r\t\tvalue: initialValue',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '263' ],		#self : OmReference [ '264' ],		#time : DateAndTime [ '2018-01-14T19:02:25.64167-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTweenMotion,				#isMetaSide : false			},			#name : #startTime,			#protocol : #accessing,			#sourceCode : 'startTime\r\t^ startTime',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '264' ],		#self : OmReference [ '265' ],		#time : DateAndTime [ '2018-01-14T19:02:25.642574-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTweenMotion,				#isMetaSide : false			},			#name : #'startTime:',			#protocol : #accessing,			#sourceCode : 'startTime: anObject\r\tstartTime := anObject',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '265' ],		#self : OmReference [ '266' ],		#time : DateAndTime [ '2018-01-14T19:02:25.644802-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTweenMotion,				#isMetaSide : false			},			#name : #startValue,			#protocol : #accessing,			#sourceCode : 'startValue\r\t^ startValue',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '266' ],		#self : OmReference [ '267' ],		#time : DateAndTime [ '2018-01-14T19:02:25.645941-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTweenMotion,				#isMetaSide : false			},			#name : #'startValue:',			#protocol : #accessing,			#sourceCode : 'startValue: anObject\r\tstartValue := anObject',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '267' ],		#self : OmReference [ '268' ],		#time : DateAndTime [ '2018-01-14T19:02:25.646801-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTweenMotion,				#isMetaSide : false			},			#name : #tween,			#protocol : #accessing,			#sourceCode : 'tween\r\t^ tween',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '268' ],		#self : OmReference [ '269' ],		#time : DateAndTime [ '2018-01-14T19:02:25.647706-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTweenMotion,				#isMetaSide : false			},			#name : #'tween:',			#protocol : #accessing,			#sourceCode : 'tween: aFourArgumentsBlock\r\t"Beware of the block arguments!"\r\r\ttween := aFourArgumentsBlock',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '269' ],		#self : OmReference [ '270' ],		#time : DateAndTime [ '2018-01-14T19:02:25.648632-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTweenMotion,				#isMetaSide : false			},			#name : #value,			#protocol : #animating,			#sourceCode : 'value\r\t"Do the action for now."\r\r\tself action value: (self at: Time millisecondClockValue)',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '270' ],		#self : OmReference [ '271' ],		#time : DateAndTime [ '2018-01-14T19:02:25.649594-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltBlockItemExample,				#isMetaSide : false			},			#name : #'childNodeFromItem:',			#protocol : #accessing,			#sourceCode : 'childNodeFromItem: anItem\r\t^ (self class on: anItem)\r\t\tparent: self;\r\t\tchildrenBlock: childrenBlock;\r\t\tyourself',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '271' ],		#self : OmReference [ '272' ],		#time : DateAndTime [ '2018-01-14T19:02:25.650501-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltBlockItemExample,				#isMetaSide : false			},			#name : #childrenBlock,			#protocol : #accessing,			#sourceCode : 'childrenBlock\r\t^ childrenBlock',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '272' ],		#self : OmReference [ '273' ],		#time : DateAndTime [ '2018-01-14T19:02:25.65135-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltBlockItemExample,				#isMetaSide : false			},			#name : #'childrenBlock:',			#protocol : #accessing,			#sourceCode : 'childrenBlock: anObject\r\tchildrenBlock := anObject',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '273' ],		#self : OmReference [ '274' ],		#time : DateAndTime [ '2018-01-14T19:02:25.652277-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltBlockItemExample,				#isMetaSide : false			},			#name : #childrenItems,			#protocol : #accessing,			#sourceCode : 'childrenItems\r\t^ self childrenBlock cull: item',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '274' ],		#self : OmReference [ '275' ],		#time : DateAndTime [ '2018-01-14T19:02:25.653288-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltRandomItemExample,				#isMetaSide : false			},			#name : #asMorph,			#protocol : #'user interface',			#sourceCode : 'asMorph\r\t^ super asMorph\r\t\tfont:\r\t\t\t(LogicalFont\r\t\t\t\tfamilyName: \'Source Sans Pro\'\r\t\t\t\tpointSize: (10 + 50 atRandom) rounded);\r\t\tcolor: (Color wheel: 12) atRandom;\r\t\thighlightForDrop: true;\r\t\tyourself',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '275' ],		#self : OmReference [ '276' ],		#time : DateAndTime [ '2018-01-14T19:02:25.655729-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTallItemExample,				#isMetaSide : false			},			#name : #asMorph,			#protocol : #'user interface',			#sourceCode : 'asMorph\r\t^ super asMorph\r\t\theight: self height;\r\t\tcolor: (Color wheel: 12) atRandom;\r\t\thighlightForDrop: true;\r\t\tyourself',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '276' ],		#self : OmReference [ '277' ],		#time : DateAndTime [ '2018-01-14T19:02:25.656832-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTallItemExample,				#isMetaSide : false			},			#name : #height,			#protocol : #accessing,			#sourceCode : 'height\r\t^ height ifNil: [ height := 200 ]',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '277' ],		#self : OmReference [ '278' ],		#time : DateAndTime [ '2018-01-14T19:02:25.657726-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTallItemExample,				#isMetaSide : false			},			#name : #'height:',			#protocol : #accessing,			#sourceCode : 'height: anObject\r\theight := anObject',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '278' ],		#self : OmReference [ '279' ],		#time : DateAndTime [ '2018-01-14T19:02:25.658684-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltTreeItemModel class',				#isMetaSide : true			},			#name : #'on:',			#protocol : #'instance creation',			#sourceCode : 'on: anItem\r\t^ self new\r\t\titem: anItem;\r\t\tyourself',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '279' ],		#self : OmReference [ '280' ],		#time : DateAndTime [ '2018-01-14T19:02:25.659634-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTreeItemModel,				#isMetaSide : false			},			#name : #'allButFirst:',			#protocol : #'tree accessing',			#sourceCode : 'allButFirst: n\r\t"Answer a copy of the receiver containing all but the first n\r\telements. Raise an error if there are not enough elements."\r\r\t^ self copyFrom: n + 1 to: self size',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '280' ],		#self : OmReference [ '281' ],		#time : DateAndTime [ '2018-01-14T19:02:25.660661-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTreeItemModel,				#isMetaSide : false			},			#name : #announcer,			#protocol : #accessing,			#sourceCode : 'announcer\r\t^ announcer ifNil: [ announcer := Announcer new ]',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '281' ],		#self : OmReference [ '282' ],		#time : DateAndTime [ '2018-01-14T19:02:25.661637-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTreeItemModel,				#isMetaSide : false			},			#name : #'anySatisfy:',			#protocol : #'tree accessing',			#sourceCode : 'anySatisfy: aBlock\r\t(parent notNil and: [ aBlock value: self ])\r\t\tifTrue: [ ^ true ].\r\tself contents\r\t\tdo: [ :each | \r\t\t\t(each anySatisfy: aBlock)\r\t\t\t\tifTrue: [ ^ true ] ].\r\t^ false',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '282' ],		#self : OmReference [ '283' ],		#time : DateAndTime [ '2018-01-14T19:02:25.662503-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTreeItemModel,				#isMetaSide : false			},			#name : #'asListItemMorphIn:',			#protocol : #'user interface',			#sourceCode : 'asListItemMorphIn: aAltListViewportMorph\r\t^ AltTreeItemMorph new\r\t\titem: self;\r\t\tyourself',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '283' ],		#self : OmReference [ '284' ],		#time : DateAndTime [ '2018-01-14T19:02:25.663396-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTreeItemModel,				#isMetaSide : false			},			#name : #asMorph,			#protocol : #'user interface',			#sourceCode : 'asMorph\r\t^ self item asStringMorph',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '284' ],		#self : OmReference [ '285' ],		#time : DateAndTime [ '2018-01-14T19:02:25.664274-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTreeItemModel,				#isMetaSide : false			},			#name : #asReadStream,			#protocol : #streaming,			#sourceCode : 'asReadStream\r\t^ AltTreeReadStream on: self',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '285' ],		#self : OmReference [ '286' ],		#time : DateAndTime [ '2018-01-14T19:02:25.666667-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTreeItemModel,				#isMetaSide : false			},			#name : #asReverseReadStream,			#protocol : #streaming,			#sourceCode : 'asReverseReadStream\r\t^ AltTreeReverseReadStream on: self',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '286' ],		#self : OmReference [ '287' ],		#time : DateAndTime [ '2018-01-14T19:02:25.667667-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTreeItemModel,				#isMetaSide : false			},			#name : #'at:',			#protocol : #'tree accessing',			#sourceCode : 'at: anIndex\r\t"Return a specific element."\r\r\t^ self\r\t\tat: anIndex\r\t\tifAbsent: [ SubscriptOutOfBounds signalFor: anIndex ]',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '287' ],		#self : OmReference [ '288' ],		#time : DateAndTime [ '2018-01-14T19:02:25.668578-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTreeItemModel,				#isMetaSide : false			},			#name : #'at:ifAbsent:',			#protocol : #'tree accessing',			#sourceCode : 'at: anIndex ifAbsent: aBlock\r\t"Return a specific element."\r\r\t| found count |\r\tcount := 0.\r\tfound := nil.\r\t(self\r\t\tanySatisfy:\r\t\t\t[ :e | \r\t\t\tcount := count + 1.\r\t\t\tcount == anIndex\r\t\t\t\tifTrue: [ found := e.\r\t\t\t\t\ttrue ]\r\t\t\t\tifFalse: [ false ] ])\r\t\tifTrue: [ ^ found ].\r\t^ aBlock value',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '288' ],		#self : OmReference [ '289' ],		#time : DateAndTime [ '2018-01-14T19:02:25.669475-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTreeItemModel,				#isMetaSide : false			},			#name : #'buildMenu:',			#protocol : #menu,			#sourceCode : 'buildMenu: aMenu\r\t"Just present a sample menu."\r\r\taMenu add: \'inspect\' target: self selector: #inspect.\r\t^ aMenu',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '289' ],		#self : OmReference [ '290' ],		#time : DateAndTime [ '2018-01-14T19:02:25.670387-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTreeItemModel,				#isMetaSide : false			},			#name : #changed,			#protocol : #updating,			#sourceCode : 'changed\r\t"We have to tell the parent to change. By default, at top level, trigger a refresh."\r\r\t"By default, a tree changed implies selection changes, so an AltTreeChanged may includes a selection change. My observers have to take that into account."\r\r\tparent\r\t\tifNil:\r\t\t\t[ selectedItem\r\t\t\t\tifNotNil:\r\t\t\t\t\t[ :s | \r\t\t\t\t\t| i |\r\t\t\t\t\ti := self indexOf: s.\r\t\t\t\t\ti isZero\r\t\t\t\t\t\tifTrue: [ selectedItem := nil.\r\t\t\t\t\t\t\tselectedIndex := 0 ]\r\t\t\t\t\t\tifFalse: [ selectedIndex := i ] ].\r\t\t\tself doAnnounce: (AltListChanged on: self) ]\r\t\tifNotNil: [ :p | p changed ]',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '290' ],		#self : OmReference [ '291' ],		#time : DateAndTime [ '2018-01-14T19:02:25.671243-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTreeItemModel,				#isMetaSide : false			},			#name : #'childNodeClassFromItem:',			#protocol : #private,			#sourceCode : 'childNodeClassFromItem: anItem\r\t^ self class',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '291' ],		#self : OmReference [ '292' ],		#time : DateAndTime [ '2018-01-14T19:02:25.672142-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTreeItemModel,				#isMetaSide : false			},			#name : #'childNodeFromItem:',			#protocol : #accessing,			#sourceCode : 'childNodeFromItem: anItem\r\t"Customization point: change this to set a different item model subclass."\r\r\t^ self class on: anItem',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '292' ],		#self : OmReference [ '293' ],		#time : DateAndTime [ '2018-01-14T19:02:25.673021-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTreeItemModel,				#isMetaSide : false			},			#name : #childrenItems,			#protocol : #accessing,			#sourceCode : 'childrenItems\r\t"Customization point: change this to adapt to a different number of items."\r\r\t^ #()',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '293' ],		#self : OmReference [ '294' ],		#time : DateAndTime [ '2018-01-14T19:02:25.673917-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTreeItemModel,				#isMetaSide : false			},			#name : #collapse,			#protocol : #'user interface',			#sourceCode : 'collapse\r\t"Will handle the selection here."\r\r\t"There is a need to check in the model if one can change the selection."\r\r\tself isExpanded\r\t\tifTrue: [ self toggleExpanded ]',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '294' ],		#self : OmReference [ '295' ],		#time : DateAndTime [ '2018-01-14T19:02:25.676233-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTreeItemModel,				#isMetaSide : false			},			#name : #contents,			#protocol : #accessing,			#sourceCode : 'contents\r\t^ self isExpanded\r\t\tifFalse: [ ^ #() ]\r\t\tifTrue: [ contents\r\t\t\t\tifNil: [ self\r\t\t\t\t\t\tcontents:\r\t\t\t\t\t\t\t(self childrenItems collect: [ :ci | self childNodeFromItem: ci ]) ] ]',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '295' ],		#self : OmReference [ '296' ],		#time : DateAndTime [ '2018-01-14T19:02:25.677416-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTreeItemModel,				#isMetaSide : false			},			#name : #'contents:',			#protocol : #accessing,			#sourceCode : 'contents: anArrayOfObjects\r\t"When contents are added, set the parent link as well."\r\r\tcontents := anArrayOfObjects.\r\tanArrayOfObjects ifNotNil: [anArrayOfObjects do: [ :e | e parent: self ] ].\r\t^ contents',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '296' ],		#self : OmReference [ '297' ],		#time : DateAndTime [ '2018-01-14T19:02:25.678326-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTreeItemModel,				#isMetaSide : false			},			#name : #'copyFrom:to:',			#protocol : #'tree accessing',			#sourceCode : 'copyFrom: startIndex to: stopIndex\r\t"Return a subset of that collection, not a subtree."\r\r\t| found count |\r\tcount := 0.\r\tfound := OrderedCollection new: stopIndex - startIndex + 1.\r\tself\r\t\tanySatisfy:\r\t\t\t[ :e | \r\t\t\tcount := count + 1.\r\t\t\tcount >= startIndex\r\t\t\t\tifTrue: [ found add: e ].\r\t\t\tcount >= stopIndex ].\r\t^ found',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '297' ],		#self : OmReference [ '298' ],		#time : DateAndTime [ '2018-01-14T19:02:25.67923-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTreeItemModel,				#isMetaSide : false			},			#name : #couldExpand,			#protocol : #testing,			#sourceCode : 'couldExpand\r\t^ true',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '298' ],		#self : OmReference [ '299' ],		#time : DateAndTime [ '2018-01-14T19:02:25.68011-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTreeItemModel,				#isMetaSide : false			},			#name : #depth,			#protocol : #'tree accessing',			#sourceCode : 'depth\r\t"Depth in the tree."\r\r\t^ parent ifNil: [ -1 ] ifNotNil: [ parent depth + 1 ]',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '299' ],		#self : OmReference [ '300' ],		#time : DateAndTime [ '2018-01-14T19:02:25.681144-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTreeItemModel,				#isMetaSide : false			},			#name : #'doAnnounce:',			#protocol : #updating,			#sourceCode : 'doAnnounce: anEvent\r\t"Only announce if we have an announcer..."\r\r\tannouncer ifNotNil: [ :a | a announce: anEvent ]',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '300' ],		#self : OmReference [ '301' ],		#time : DateAndTime [ '2018-01-14T19:02:25.682062-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTreeItemModel,				#isMetaSide : false			},			#name : #'doubleClickIn:',			#protocol : #'user interface',			#sourceCode : 'doubleClickIn: aTreeMorph\r\t"Ok, double click. I\'m unable to directly do that in the item morph and the tree morph is handling it, so it is catched here."\r\r\t"by default, toggle expanded state."\r\r\tself toggleExpanded',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '301' ],		#self : OmReference [ '302' ],		#time : DateAndTime [ '2018-01-14T19:02:25.683131-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTreeItemModel,				#isMetaSide : false			},			#name : #expand,			#protocol : #'user interface',			#sourceCode : 'expand\r\tself isExpanded\r\t\tifFalse: [ self toggleExpanded ]',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '302' ],		#self : OmReference [ '303' ],		#time : DateAndTime [ '2018-01-14T19:02:25.684063-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTreeItemModel,				#isMetaSide : false			},			#name : #'first:',			#protocol : #'tree accessing',			#sourceCode : 'first: n\r\t"Answer the first n elements of the receiver.\r\tRaise an error if there are not enough elements."\r\r\t^ self copyFrom: 1 to: n',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '303' ],		#self : OmReference [ '304' ],		#time : DateAndTime [ '2018-01-14T19:02:25.684925-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTreeItemModel,				#isMetaSide : false			},			#name : #hasContents,			#protocol : #testing,			#sourceCode : 'hasContents\r\t"Review this test."\r\r\t^ (contents notNil and: [ contents notEmpty ])\r\t\tor: [ self childrenItems notEmpty ]',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '304' ],		#self : OmReference [ '305' ],		#time : DateAndTime [ '2018-01-14T19:02:25.687295-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTreeItemModel,				#isMetaSide : false			},			#name : #icon,			#protocol : #accessing,			#sourceCode : 'icon\r\t^ nil',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '305' ],		#self : OmReference [ '306' ],		#time : DateAndTime [ '2018-01-14T19:02:25.688386-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTreeItemModel,				#isMetaSide : false			},			#name : #'indexOf:',			#protocol : #'tree accessing',			#sourceCode : 'indexOf: anItemModel\r\t"Return the index of a model."\r\r\t| i |\r\tparent ifNotNil: [ ^ parent indexOf: anItemModel ].\r\ti := 0.\r\t(self\r\t\tanySatisfy: [ :each | \r\t\t\ti := i + 1.\r\t\t\teach == anItemModel ])\r\t\tifTrue: [ ^ i ].\r\t^ 0',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '306' ],		#self : OmReference [ '307' ],		#time : DateAndTime [ '2018-01-14T19:02:25.68927-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTreeItemModel,				#isMetaSide : false			},			#name : #isExpanded,			#protocol : #testing,			#sourceCode : 'isExpanded\r\t^ parent\r\t\tifNil: [ true ]\r\t\tifNotNil: [ expanded ifNil: [ expanded := false ] ]',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '307' ],		#self : OmReference [ '308' ],		#time : DateAndTime [ '2018-01-14T19:02:25.690165-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTreeItemModel,				#isMetaSide : false			},			#name : #'isExpanded:',			#protocol : #accessing,			#sourceCode : 'isExpanded: aBoolean\r\texpanded := aBoolean',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '308' ],		#self : OmReference [ '309' ],		#time : DateAndTime [ '2018-01-14T19:02:25.691052-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTreeItemModel,				#isMetaSide : false			},			#name : #item,			#protocol : #accessing,			#sourceCode : 'item\r\t^ item',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '309' ],		#self : OmReference [ '310' ],		#time : DateAndTime [ '2018-01-14T19:02:25.691972-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTreeItemModel,				#isMetaSide : false			},			#name : #'item:',			#protocol : #accessing,			#sourceCode : 'item: anObject\r\titem := anObject',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '310' ],		#self : OmReference [ '311' ],		#time : DateAndTime [ '2018-01-14T19:02:25.692872-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTreeItemModel,				#isMetaSide : false			},			#name : #parent,			#protocol : #accessing,			#sourceCode : 'parent\r\t^ parent',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '311' ],		#self : OmReference [ '312' ],		#time : DateAndTime [ '2018-01-14T19:02:25.693712-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTreeItemModel,				#isMetaSide : false			},			#name : #'parent:',			#protocol : #accessing,			#sourceCode : 'parent: anObject\r\tparent := anObject',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '312' ],		#self : OmReference [ '313' ],		#time : DateAndTime [ '2018-01-14T19:02:25.694608-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTreeItemModel,				#isMetaSide : false			},			#name : #'printOn:',			#protocol : #printing,			#sourceCode : 'printOn: aStream\r\taStream nextPutAll: \'Item(\'.\r\tself item printOn: aStream.\r\taStream nextPut: $)',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '313' ],		#self : OmReference [ '314' ],		#time : DateAndTime [ '2018-01-14T19:02:25.69551-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTreeItemModel,				#isMetaSide : false			},			#name : #root,			#protocol : #accessing,			#sourceCode : 'root\r\t^ parent ifNil: [ self ] ifNotNil: [ parent root ]',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '314' ],		#self : OmReference [ '315' ],		#time : DateAndTime [ '2018-01-14T19:02:25.698018-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTreeItemModel,				#isMetaSide : false			},			#name : #select,			#protocol : #selection,			#sourceCode : 'select\r\t"Let the selection goes through there, so that it can be caught."\r\r\t^ self selectAt: (self root indexOf: self)',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '315' ],		#self : OmReference [ '316' ],		#time : DateAndTime [ '2018-01-14T19:02:25.699083-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTreeItemModel,				#isMetaSide : false			},			#name : #'selectAt:',			#protocol : #selection,			#sourceCode : 'selectAt: anIndex\r\t"Let the selection goes through there, so that it can be caught."\r\r\t^ self root selectItem: self index: anIndex',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '316' ],		#self : OmReference [ '317' ],		#time : DateAndTime [ '2018-01-14T19:02:25.699994-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTreeItemModel,				#isMetaSide : false			},			#name : #'selectIndex:',			#protocol : #selection,			#sourceCode : 'selectIndex: anIndex\r\t"Sent to the relevant item. Remember that #indexOf: and #at: are expensive operations, so do them only once."\r\r\t^ (self at: anIndex ifAbsent: [ self root ]) selectAt: anIndex',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '317' ],		#self : OmReference [ '318' ],		#time : DateAndTime [ '2018-01-14T19:02:25.701115-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTreeItemModel,				#isMetaSide : false			},			#name : #'selectItem:index:',			#protocol : #selection,			#sourceCode : 'selectItem: anItem index: anIndex\r\t"Select that item at this index. Or deselect a previous one if anIndex isZero (and anItem is then null)."\r\r\t"Deselect any other item. Expect only single selection."\r\r\t| announcement |\r\tselectedIndex == anIndex\r\t\tifTrue: [ ^ self ].\r\tannouncement := AltSelectionChanged new.\r\tselectedItem\r\t\tifNotNil:\r\t\t\t[ :s | \r\t\t\tannouncement oldItems add: s.\r\t\t\tannouncement oldIndexes add: selectedIndex ].\r\tanIndex isZero\r\t\tifTrue: [ selectedItem := nil.\r\t\t\tselectedIndex := 0 ]\r\t\tifFalse:\r\t\t\t[ selectedItem := anItem.\r\t\t\tselectedIndex := anIndex.\r\t\t\tannouncement newItems add: selectedItem.\r\t\t\tannouncement newIndexes add: selectedIndex ].\r\tself doAnnounce: announcement',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '318' ],		#self : OmReference [ '319' ],		#time : DateAndTime [ '2018-01-14T19:02:25.702056-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTreeItemModel,				#isMetaSide : false			},			#name : #selectedIndex,			#protocol : #selection,			#sourceCode : 'selectedIndex\r\t"Get current selection."\r\r\t^ selectedIndex ifNil: [ selectedIndex := 0 ]',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '319' ],		#self : OmReference [ '320' ],		#time : DateAndTime [ '2018-01-14T19:02:25.702948-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTreeItemModel,				#isMetaSide : false			},			#name : #selectedItem,			#protocol : #selection,			#sourceCode : 'selectedItem\r\t^ selectedItem',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '320' ],		#self : OmReference [ '321' ],		#time : DateAndTime [ '2018-01-14T19:02:25.70381-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTreeItemModel,				#isMetaSide : false			},			#name : #'selectedItem:',			#protocol : #selection,			#sourceCode : 'selectedItem: anObject\r\tselectedItem := anObject',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '321' ],		#self : OmReference [ '322' ],		#time : DateAndTime [ '2018-01-14T19:02:25.704714-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTreeItemModel,				#isMetaSide : false			},			#name : #size,			#protocol : #'tree accessing',			#sourceCode : 'size\r\t"The size of the tree with us at the origin."\r\r\t^ self contents\r\t\tinject: (parent ifNil: [ 0 ] ifNotNil: [ 1 ])\r\t\tinto: [ :sum :each | sum + each size ]',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '322' ],		#self : OmReference [ '323' ],		#time : DateAndTime [ '2018-01-14T19:02:25.705695-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTreeItemModel,				#isMetaSide : false			},			#name : #toggleExpanded,			#protocol : #'user interface',			#sourceCode : 'toggleExpanded\r\t"If one of our sub-element is selected, select myself since I will be collapsed.\r\tUse selectedItem direct access on root."\r\r\tself root selectedItem\r\t\tifNotNil:\r\t\t\t[ :s | \r\t\t\t(s ~~ self and: [ self anySatisfy: [ :e | e == s ] ])\r\t\t\t\tifTrue: [ self root selectedItem: self ] ].\r\tself isExpanded: self isExpanded not.\r\tself changed',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '323' ],		#self : OmReference [ '324' ],		#time : DateAndTime [ '2018-01-14T19:02:25.706583-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTreeItemModel,				#isMetaSide : false			},			#name : #'wantsDroppedElement:',			#protocol : #'drag and drop',			#sourceCode : 'wantsDroppedElement: aMorphPassenger\r\t^ false',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '324' ],		#self : OmReference [ '325' ],		#time : DateAndTime [ '2018-01-14T19:02:25.709142-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltTreeReadStream class',				#isMetaSide : true			},			#name : #'on:',			#protocol : #'instance creation',			#sourceCode : 'on: aCollection\r\t^ self new\r\t\tcollection: aCollection;\r\t\tyourself',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '325' ],		#self : OmReference [ '326' ],		#time : DateAndTime [ '2018-01-14T19:02:25.710143-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTreeReadStream,				#isMetaSide : false			},			#name : #atEnd,			#protocol : #testing,			#sourceCode : 'atEnd\r\t^ self position > 0\r\t\tand:\r\t\t\t[ (self stack isEmpty\r\t\t\t\tor: [ self stack allSatisfy: [ :each | each atEnd ] ])\r\t\t\t\tand: [ item notNil and: [ item contents isEmpty ] ] ]',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '326' ],		#self : OmReference [ '327' ],		#time : DateAndTime [ '2018-01-14T19:02:25.711038-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTreeReadStream,				#isMetaSide : false			},			#name : #collection,			#protocol : #accessing,			#sourceCode : 'collection\r\t^ collection',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '327' ],		#self : OmReference [ '328' ],		#time : DateAndTime [ '2018-01-14T19:02:25.711886-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTreeReadStream,				#isMetaSide : false			},			#name : #'collection:',			#protocol : #accessing,			#sourceCode : 'collection: anObject\r\tcollection := anObject',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '328' ],		#self : OmReference [ '329' ],		#time : DateAndTime [ '2018-01-14T19:02:25.712861-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTreeReadStream,				#isMetaSide : false			},			#name : #next,			#protocol : #streaming,			#sourceCode : 'next\r\t"Next: on a node, it\'s either its first child, or its sibling."\r\r\t"For the very first node, take in account the hidden root case."\r\r\titem\r\t\tifNil:\r\t\t\t[ (collection at: 1) == collection\r\t\t\t\tifTrue: [ item := collection ]\r\t\t\t\tifFalse:\r\t\t\t\t\t[ self stack add: (ReadStream on: collection contents).\r\t\t\t\t\titem := self stack last next ].\r\t\t\tposition := 1.\r\t\t\t^ item ].\r\titem contents isEmpty\r\t\tifFalse:\r\t\t\t[ self stack add: (ReadStream on: item contents).\r\t\t\titem := self stack last next ]\r\t\tifTrue:\r\t\t\t[ [ self stack last atEnd ]\r\t\t\t\twhileTrue:\r\t\t\t\t\t[ self stack removeLast.\r\t\t\t\t\tself stack isEmpty\r\t\t\t\t\t\tifTrue: [ position := position + 1.\r\t\t\t\t\t\t\t^ item := nil ] ].\r\t\t\titem := self stack last next ].\r\tposition := position + 1.\r\t^ item',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '329' ],		#self : OmReference [ '330' ],		#time : DateAndTime [ '2018-01-14T19:02:25.713734-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTreeReadStream,				#isMetaSide : false			},			#name : #position,			#protocol : #accessing,			#sourceCode : 'position\r\t^ position ifNil: [ position := 0 ]',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '330' ],		#self : OmReference [ '331' ],		#time : DateAndTime [ '2018-01-14T19:02:25.714598-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTreeReadStream,				#isMetaSide : false			},			#name : #'position:',			#protocol : #private,			#sourceCode : 'position: aValue\r\tposition := aValue',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '331' ],		#self : OmReference [ '332' ],		#time : DateAndTime [ '2018-01-14T19:02:25.715527-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTreeReadStream,				#isMetaSide : false			},			#name : #reversed,			#protocol : #accessing,			#sourceCode : 'reversed\r\t"Would that work? Just reverse all the stack items one by one."\r\r\t| reversed |\r\treversed := AltTreeReverseReadStream new.\r\treversed setCollection: self collection.\r\treversed\r\t\tstack:\r\t\t\t(self stack\r\t\t\t\tcollect: [ :e | \r\t\t\t\t\t(ReadStream on: e contents reversed)\r\t\t\t\t\t\tskip: e contents size - e position ]).\r\treversed position: self position + 1.\r\t^ reversed',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '332' ],		#self : OmReference [ '333' ],		#time : DateAndTime [ '2018-01-14T19:02:25.716443-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTreeReadStream,				#isMetaSide : false			},			#name : #'skip:',			#protocol : #streaming,			#sourceCode : 'skip: aNumber\r\taNumber timesRepeat: [ self next ]',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '333' ],		#self : OmReference [ '334' ],		#time : DateAndTime [ '2018-01-14T19:02:25.718822-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTreeReadStream,				#isMetaSide : false			},			#name : #stack,			#protocol : #private,			#sourceCode : 'stack\r\t^ stack ifNil: [ stack := OrderedCollection new ]',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '334' ],		#self : OmReference [ '335' ],		#time : DateAndTime [ '2018-01-14T19:02:25.71989-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTreeReadStream,				#isMetaSide : false			},			#name : #'stack:',			#protocol : #private,			#sourceCode : 'stack: aStack\r\tstack := aStack',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '335' ],		#self : OmReference [ '336' ],		#time : DateAndTime [ '2018-01-14T19:02:25.720949-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTreeReverseReadStream,				#isMetaSide : false			},			#name : #atEnd,			#protocol : #testing,			#sourceCode : 'atEnd\r\t^ self position <= 1',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '336' ],		#self : OmReference [ '337' ],		#time : DateAndTime [ '2018-01-14T19:02:25.721947-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTreeReverseReadStream,				#isMetaSide : false			},			#name : #'collection:',			#protocol : #streaming,			#sourceCode : 'collection: anObject\r\t"If a collection is added, then prepare the stack to make sure next will work."\r\r\t"Do not use super; superclass may init itself differently."\r\t\r\t"A better initialisation scheme can be done if we need a point and a way to iterate both up and down, as it is the case in the list."\r\r\t| aParent anItem |\r\tcollection := anObject.\r\tposition := 1.\r\tcollection\r\t\tanySatisfy:\r\t\t\t[ :each | \r\t\t\tanItem := each.\r\t\t\tposition := position + 1.\r\t\t\tfalse ].\t"Get both last  element and size in the fastest way."\r\taParent := anItem parent.\r\t[ aParent notNil ]\r\t\twhileTrue:\r\t\t\t[ self stack addFirst: (ReadStream on: aParent contents reversed).\r\t\t\taParent := aParent parent ].\r\tself stack addFirst: (ReadStream on: (Array with: collection))',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '337' ],		#self : OmReference [ '338' ],		#time : DateAndTime [ '2018-01-14T19:02:25.722991-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTreeReverseReadStream,				#isMetaSide : false			},			#name : #next,			#protocol : #streaming,			#sourceCode : 'next\r\t"Next: on a node, it\'s either its first child, or its sibling."\r\r\t"For the very first node, take in account the hidden root case."\r\r\tposition <= 1\r\t\tifTrue: [ ^ nil ].\r\tstack isEmpty\r\t\tifTrue: [ position := 0.\r\t\t\t^ nil ].\r\tstack last atEnd\r\t\tifFalse:\r\t\t\t[ | n |\r\t\t\t[ n := stack last peek.\r\t\t\tn contents isEmpty ]\r\t\t\t\twhileFalse: [ stack add: (ReadStream on: n contents reversed) ].\r\t\t\titem := stack last next ]\r\t\tifTrue:\r\t\t\t[ stack removeLast.\r\t\t\tself assert: stack notEmpty.\r\t\t\tself assert: stack first atEnd not.\r\t\t\titem := stack last next ].\r\tposition := position - 1.\r\t^ item',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '338' ],		#self : OmReference [ '339' ],		#time : DateAndTime [ '2018-01-14T19:02:25.723932-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTreeReverseReadStream,				#isMetaSide : false			},			#name : #reversed,			#protocol : #accessing,			#sourceCode : 'reversed\r\t"Would that work? Just reverse all the stack items one by one."\r\r\t| reversed |\r\treversed := AltTreeReadStream new.\r\treversed setCollection: self collection.\r\treversed\r\t\tstack:\r\t\t\t(self stack\r\t\t\t\tcollect: [ :e | \r\t\t\t\t\t(ReadStream on: e contents reversed)\r\t\t\t\t\t\tskip: e contents size - e position ]).\r\t^ reversed',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '339' ],		#self : OmReference [ '340' ],		#time : DateAndTime [ '2018-01-14T19:02:25.724796-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTreeReverseReadStream,				#isMetaSide : false			},			#name : #'setCollection:',			#protocol : #private,			#sourceCode : 'setCollection: aCollection\r\tcollection := aCollection',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '340' ],		#self : OmReference [ '341' ],		#time : DateAndTime [ '2018-01-14T19:02:25.726639-05:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Object,				#isMetaSide : false			},			#name : #asAltTreeItem,			#protocol : #'*alt-list',			#sourceCode : 'asAltTreeItem\r\t^ AltTreeItemModel on: self',			#stamp : ' 1/14/2018 19:02:20',			#package : #Alt-List		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#time : DateAndTime [ '2018-01-14T19:02:25.99193-05:00' ],		#prior : OmReference [ '341' ],		#self : OmReference [ '342' ]	},	#content : EpMonticelloVersionsLoad {		#versionNames : OrderedCollection [			'Alt-Browser-cypress.1'		]	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '342' ],		#self : OmReference [ '343' ],		#time : DateAndTime [ '2018-01-14T19:02:26.395874-05:00' ],		#trigger : @3	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'SettingDeclaration',				#traitCompositionSource : '{}',				#definitionSource : 'SettingDeclaration subclass: #AltSettingDeclaration\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltSettingDeclaration,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltSettingDeclaration class\r\tinstanceVariableNames: \'\''				},				#name : #'AltSettingDeclaration class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltSettingDeclaration,					#isMetaSide : false				},				#parent : @7,				#content : 'An AltSettingDeclaration is a SettingDeclaration which knows that its target may not exist when loading the image, and henceforth creates a StartupAction which check for the target existence before firing.\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'An AltSettingDeclaration is a SettingDeclaration which knows that its target may not exist when loading the image, and henceforth creates a StartupAction which check for the target existence before firing.\r',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '343' ],		#self : OmReference [ '344' ],		#time : DateAndTime [ '2018-01-14T19:02:26.397767-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpCategoryAddition {		#classCategoryName : #Alt-Browser-Settings,		#affectedPackageName : #Alt-Browser	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '344' ],		#self : OmReference [ '345' ],		#time : DateAndTime [ '2018-01-14T19:02:26.537477-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'SettingDeclaration',				#traitCompositionSource : '{}',				#definitionSource : 'SettingDeclaration subclass: #AltSettingDeclaration\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Settings\''			},			#name : #AltSettingDeclaration,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltSettingDeclaration class\r\tinstanceVariableNames: \'\''				},				#name : #'AltSettingDeclaration class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltSettingDeclaration,					#isMetaSide : false				},				#parent : @8,				#content : 'An AltSettingDeclaration is a SettingDeclaration which knows that its target may not exist when loading the image, and henceforth creates a StartupAction which check for the target existence before firing.\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Settings,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '345' ],		#self : OmReference [ '346' ],		#time : DateAndTime [ '2018-01-14T19:02:26.585132-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'VersionBrowser',				#traitCompositionSource : '{}',				#definitionSource : 'VersionBrowser subclass: #AltVersionBrowser\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltVersionBrowser,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltVersionBrowser class\r\tinstanceVariableNames: \'\''				},				#name : #'AltVersionBrowser class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltVersionBrowser,					#isMetaSide : false				},				#parent : @8,				#content : 'A subclass of VersionsBrowser to deal with method definitions instead of change records. It allows one to scan a git repository for all versions of a method, even if it misses renaming.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'A subclass of VersionsBrowser to deal with method definitions instead of change records. It allows one to scan a git repository for all versions of a method, even if it misses renaming.',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '346' ],		#self : OmReference [ '347' ],		#time : DateAndTime [ '2018-01-14T19:02:26.586659-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpCategoryAddition {		#classCategoryName : #Alt-Browser-Versions,		#affectedPackageName : #Alt-Browser	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '347' ],		#self : OmReference [ '348' ],		#time : DateAndTime [ '2018-01-14T19:02:26.59086-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'VersionBrowser',				#traitCompositionSource : '{}',				#definitionSource : 'VersionBrowser subclass: #AltVersionBrowser\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Versions\''			},			#name : #AltVersionBrowser,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltVersionBrowser class\r\tinstanceVariableNames: \'\''				},				#name : #'AltVersionBrowser class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltVersionBrowser,					#isMetaSide : false				},				#parent : @8,				#content : 'A subclass of VersionsBrowser to deal with method definitions instead of change records. It allows one to scan a git repository for all versions of a method, even if it misses renaming.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Versions,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '348' ],		#self : OmReference [ '349' ],		#time : DateAndTime [ '2018-01-14T19:02:26.59646-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #AltBrowserTest\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltBrowserTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltBrowserTest class\r\tinstanceVariableNames: \'\''				},				#name : #'AltBrowserTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltBrowserTest,					#isMetaSide : false				},				#parent : @8,				#content : 'Testing for the AltBrowser is here.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Testing for the AltBrowser is here.',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '349' ],		#self : OmReference [ '350' ],		#time : DateAndTime [ '2018-01-14T19:02:26.598016-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpCategoryAddition {		#classCategoryName : #Alt-Browser-Tests,		#affectedPackageName : #Alt-Browser	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '350' ],		#self : OmReference [ '351' ],		#time : DateAndTime [ '2018-01-14T19:02:26.601045-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #AltBrowserTest\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Tests\''			},			#name : #AltBrowserTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltBrowserTest class\r\tinstanceVariableNames: \'\''				},				#name : #'AltBrowserTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltBrowserTest,					#isMetaSide : false				},				#parent : @8,				#content : 'Testing for the AltBrowser is here.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Tests,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '351' ],		#self : OmReference [ '352' ],		#time : DateAndTime [ '2018-01-14T19:02:26.624245-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #AltBrowserTestUI\r\tinstanceVariableNames: \'browser\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltBrowserTestUI,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltBrowserTestUI,						#isMetaSide : false					},					#name : #browser,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltBrowserTestUI class\r\tinstanceVariableNames: \'\''				},				#name : #'AltBrowserTestUI class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltBrowserTestUI,					#isMetaSide : false				},				#parent : @8,				#content : 'To test the GUI. It\'s expensive to create the GUI resources (a Browser instance, a Category and a Class), so I\'m moving them here.\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'To test the GUI. It\'s expensive to create the GUI resources (a Browser instance, a Category and a Class), so I\'m moving them here.\r',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '352' ],		#self : OmReference [ '353' ],		#time : DateAndTime [ '2018-01-14T19:02:26.628263-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #AltBrowserTestUI\r\tinstanceVariableNames: \'browser\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Tests\''			},			#name : #AltBrowserTestUI,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltBrowserTestUI,						#isMetaSide : false					},					#name : #browser,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltBrowserTestUI class\r\tinstanceVariableNames: \'\''				},				#name : #'AltBrowserTestUI class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltBrowserTestUI,					#isMetaSide : false				},				#parent : @8,				#content : 'To test the GUI. It\'s expensive to create the GUI resources (a Browser instance, a Category and a Class), so I\'m moving them here.\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Tests,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '353' ],		#self : OmReference [ '354' ],		#time : DateAndTime [ '2018-01-14T19:02:26.634808-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Model',				#traitCompositionSource : '{}',				#definitionSource : 'Model subclass: #AltBrowserCodeModel\r\tinstanceVariableNames: \'browser aboutToStyle currentCompiledMethod contentsSymbol contents\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltBrowserCodeModel,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltBrowserCodeModel,						#isMetaSide : false					},					#name : #browser,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltBrowserCodeModel,						#isMetaSide : false					},					#name : #aboutToStyle,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltBrowserCodeModel,						#isMetaSide : false					},					#name : #currentCompiledMethod,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltBrowserCodeModel,						#isMetaSide : false					},					#name : #contentsSymbol,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltBrowserCodeModel,						#isMetaSide : false					},					#name : #contents,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltBrowserCodeModel class\r\tinstanceVariableNames: \'\''				},				#name : #'AltBrowserCodeModel class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltBrowserCodeModel,					#isMetaSide : false				},				#parent : @8,				#content : 'An AltBrowserCodeModel is in charge of handling the text morph of the Alt Browser.\r\rInstance Variables\r\taboutToStyle:\t\t<Boolean>\r\tbehavior:\t\t<Class>\r\tbrowser:\t\t<AltBrowserModel>\r\raboutToStyle\r\t- Say if the next code is to be styled (syntax coloring) or not.\r\rbehavior\r\t- The behavior for the styler ?\r\rbrowser\r\t- The instance of the AltBrowserModel we are in\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'An AltBrowserCodeModel is in charge of handling the text morph of the Alt Browser.\r\rInstance Variables\r\taboutToStyle:\t\t<Boolean>\r\tbehavior:\t\t<Class>\r\tbrowser:\t\t<AltBrowserModel>\r\raboutToStyle\r\t- Say if the next code is to be styled (syntax coloring) or not.\r\rbehavior\r\t- The behavior for the styler ?\r\rbrowser\r\t- The instance of the AltBrowserModel we are in\r',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '354' ],		#self : OmReference [ '355' ],		#time : DateAndTime [ '2018-01-14T19:02:26.636119-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpCategoryAddition {		#classCategoryName : #Alt-Browser-Core,		#affectedPackageName : #Alt-Browser	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '355' ],		#self : OmReference [ '356' ],		#time : DateAndTime [ '2018-01-14T19:02:26.639119-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Model',				#traitCompositionSource : '{}',				#definitionSource : 'Model subclass: #AltBrowserCodeModel\r\tinstanceVariableNames: \'browser aboutToStyle currentCompiledMethod contentsSymbol contents\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Core\''			},			#name : #AltBrowserCodeModel,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltBrowserCodeModel,						#isMetaSide : false					},					#name : #browser,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltBrowserCodeModel,						#isMetaSide : false					},					#name : #aboutToStyle,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltBrowserCodeModel,						#isMetaSide : false					},					#name : #currentCompiledMethod,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltBrowserCodeModel,						#isMetaSide : false					},					#name : #contentsSymbol,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltBrowserCodeModel,						#isMetaSide : false					},					#name : #contents,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltBrowserCodeModel class\r\tinstanceVariableNames: \'\''				},				#name : #'AltBrowserCodeModel class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltBrowserCodeModel,					#isMetaSide : false				},				#parent : @8,				#content : 'An AltBrowserCodeModel is in charge of handling the text morph of the Alt Browser.\r\rInstance Variables\r\taboutToStyle:\t\t<Boolean>\r\tbehavior:\t\t<Class>\r\tbrowser:\t\t<AltBrowserModel>\r\raboutToStyle\r\t- Say if the next code is to be styled (syntax coloring) or not.\r\rbehavior\r\t- The behavior for the styler ?\r\rbrowser\r\t- The instance of the AltBrowserModel we are in\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Core,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '356' ],		#self : OmReference [ '357' ],		#time : DateAndTime [ '2018-01-14T19:02:26.643892-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PluggableTextMorph',				#traitCompositionSource : '{}',				#definitionSource : 'PluggableTextMorph subclass: #AltPluggableTextMorph\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltPluggableTextMorph,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltPluggableTextMorph class\r\tinstanceVariableNames: \'\''				},				#name : #'AltPluggableTextMorph class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltPluggableTextMorph,					#isMetaSide : false				},				#parent : @8,				#content : 'Just to handle theme change.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Just to handle theme change.',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '357' ],		#self : OmReference [ '358' ],		#time : DateAndTime [ '2018-01-14T19:02:26.648505-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'PluggableTextMorph',				#traitCompositionSource : '{}',				#definitionSource : 'PluggableTextMorph subclass: #AltPluggableTextMorph\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Core\''			},			#name : #AltPluggableTextMorph,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltPluggableTextMorph class\r\tinstanceVariableNames: \'\''				},				#name : #'AltPluggableTextMorph class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltPluggableTextMorph,					#isMetaSide : false				},				#parent : @8,				#content : 'Just to handle theme change.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Core,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '358' ],		#self : OmReference [ '359' ],		#time : DateAndTime [ '2018-01-14T19:02:26.653058-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'LayoutFrame',				#traitCompositionSource : '{}',				#definitionSource : 'LayoutFrame subclass: #AltLayoutFrame\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltLayoutFrame,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltLayoutFrame class\r\tinstanceVariableNames: \'\''				},				#name : #'AltLayoutFrame class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltLayoutFrame,					#isMetaSide : false				},				#parent : @8,				#content : 'To try to catch why layout frame does silly things.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'To try to catch why layout frame does silly things.',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '359' ],		#self : OmReference [ '360' ],		#time : DateAndTime [ '2018-01-14T19:02:26.656255-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'LayoutFrame',				#traitCompositionSource : '{}',				#definitionSource : 'LayoutFrame subclass: #AltLayoutFrame\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Core\''			},			#name : #AltLayoutFrame,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltLayoutFrame class\r\tinstanceVariableNames: \'\''				},				#name : #'AltLayoutFrame class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltLayoutFrame,					#isMetaSide : false				},				#parent : @8,				#content : 'To try to catch why layout frame does silly things.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Core,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '360' ],		#self : OmReference [ '361' ],		#time : DateAndTime [ '2018-01-14T19:02:26.661037-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'KMDispatcher',				#traitCompositionSource : '{}',				#definitionSource : 'KMDispatcher subclass: #AltKMDispatcher\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltKMDispatcher,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltKMDispatcher class\r\tinstanceVariableNames: \'\''				},				#name : #'AltKMDispatcher class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltKMDispatcher,					#isMetaSide : false				},				#parent : @8,				#content : 'Here only to remove a bad behavior in KMDispatcher. See how the standard KMDispatcher is replaced by this one in AltBrowser>>updateTextKeymaps.\r\rAlso remove the staticTargets targets, so that we may have a text editor without any legacy shortcuts.\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Here only to remove a bad behavior in KMDispatcher. See how the standard KMDispatcher is replaced by this one in AltBrowser>>updateTextKeymaps.\r\rAlso remove the staticTargets targets, so that we may have a text editor without any legacy shortcuts.\r',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '361' ],		#self : OmReference [ '362' ],		#time : DateAndTime [ '2018-01-14T19:02:26.666104-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'KMDispatcher',				#traitCompositionSource : '{}',				#definitionSource : 'KMDispatcher subclass: #AltKMDispatcher\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Core\''			},			#name : #AltKMDispatcher,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltKMDispatcher class\r\tinstanceVariableNames: \'\''				},				#name : #'AltKMDispatcher class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltKMDispatcher,					#isMetaSide : false				},				#parent : @8,				#content : 'Here only to remove a bad behavior in KMDispatcher. See how the standard KMDispatcher is replaced by this one in AltBrowser>>updateTextKeymaps.\r\rAlso remove the staticTargets targets, so that we may have a text editor without any legacy shortcuts.\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Core,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '362' ],		#self : OmReference [ '363' ],		#time : DateAndTime [ '2018-01-14T19:02:26.682637-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Announcement',				#traitCompositionSource : '{}',				#definitionSource : 'Announcement subclass: #AltNodeAnnouncement\r\tinstanceVariableNames: \'node\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltNodeAnnouncement,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltNodeAnnouncement,						#isMetaSide : false					},					#name : #node,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltNodeAnnouncement class\r\tinstanceVariableNames: \'\''				},				#name : #'AltNodeAnnouncement class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltNodeAnnouncement,					#isMetaSide : false				},				#parent : @8,				#content : 'The abstract node announcement.\r\rBeware, unexpected behavior! Announcement matching for actions matches also subclasses (what a strange idea?).\r\rBuggy previous code: AltNodeRemoved has AltNodeAdded as superclass; on AltNodeRemoved both AltNodeAdded and AltNodeRemoved would match and trigger actions.\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'The abstract node announcement.\r\rBeware, unexpected behavior! Announcement matching for actions matches also subclasses (what a strange idea?).\r\rBuggy previous code: AltNodeRemoved has AltNodeAdded as superclass; on AltNodeRemoved both AltNodeAdded and AltNodeRemoved would match and trigger actions.\r',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '363' ],		#self : OmReference [ '364' ],		#time : DateAndTime [ '2018-01-14T19:02:26.684597-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpCategoryAddition {		#classCategoryName : #Alt-Browser-Announcements,		#affectedPackageName : #Alt-Browser	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '364' ],		#self : OmReference [ '365' ],		#time : DateAndTime [ '2018-01-14T19:02:26.688147-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Announcement',				#traitCompositionSource : '{}',				#definitionSource : 'Announcement subclass: #AltNodeAnnouncement\r\tinstanceVariableNames: \'node\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Announcements\''			},			#name : #AltNodeAnnouncement,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltNodeAnnouncement,						#isMetaSide : false					},					#name : #node,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltNodeAnnouncement class\r\tinstanceVariableNames: \'\''				},				#name : #'AltNodeAnnouncement class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltNodeAnnouncement,					#isMetaSide : false				},				#parent : @8,				#content : 'The abstract node announcement.\r\rBeware, unexpected behavior! Announcement matching for actions matches also subclasses (what a strange idea?).\r\rBuggy previous code: AltNodeRemoved has AltNodeAdded as superclass; on AltNodeRemoved both AltNodeAdded and AltNodeRemoved would match and trigger actions.\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Announcements,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '365' ],		#self : OmReference [ '366' ],		#time : DateAndTime [ '2018-01-14T19:02:26.693978-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltNodeAnnouncement',				#traitCompositionSource : '{}',				#definitionSource : 'AltNodeAnnouncement subclass: #AltNodeAdded\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltNodeAdded,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltNodeAdded class\r\tinstanceVariableNames: \'\''				},				#name : #'AltNodeAdded class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltNodeAdded,					#isMetaSide : false				},				#parent : @8,				#content : 'This announce an added node in the tree.\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'This announce an added node in the tree.\r',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '366' ],		#self : OmReference [ '367' ],		#time : DateAndTime [ '2018-01-14T19:02:26.698358-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltNodeAnnouncement',				#traitCompositionSource : '{}',				#definitionSource : 'AltNodeAnnouncement subclass: #AltNodeAdded\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Announcements\''			},			#name : #AltNodeAdded,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltNodeAdded class\r\tinstanceVariableNames: \'\''				},				#name : #'AltNodeAdded class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltNodeAdded,					#isMetaSide : false				},				#parent : @8,				#content : 'This announce an added node in the tree.\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Announcements,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '367' ],		#self : OmReference [ '368' ],		#time : DateAndTime [ '2018-01-14T19:02:26.703589-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltNodeAnnouncement',				#traitCompositionSource : '{}',				#definitionSource : 'AltNodeAnnouncement subclass: #AltNodeRebuilt\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltNodeRebuilt,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltNodeRebuilt class\r\tinstanceVariableNames: \'\''				},				#name : #'AltNodeRebuilt class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltNodeRebuilt,					#isMetaSide : false				},				#parent : @8,				#content : 'This announcement mark a node rebuilt.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'This announcement mark a node rebuilt.',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '368' ],		#self : OmReference [ '369' ],		#time : DateAndTime [ '2018-01-14T19:02:26.706901-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltNodeAnnouncement',				#traitCompositionSource : '{}',				#definitionSource : 'AltNodeAnnouncement subclass: #AltNodeRebuilt\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Announcements\''			},			#name : #AltNodeRebuilt,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltNodeRebuilt class\r\tinstanceVariableNames: \'\''				},				#name : #'AltNodeRebuilt class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltNodeRebuilt,					#isMetaSide : false				},				#parent : @8,				#content : 'This announcement mark a node rebuilt.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Announcements,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '369' ],		#self : OmReference [ '370' ],		#time : DateAndTime [ '2018-01-14T19:02:26.713118-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltNodeAnnouncement',				#traitCompositionSource : '{}',				#definitionSource : 'AltNodeAnnouncement subclass: #AltNodeRemoved\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltNodeRemoved,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltNodeRemoved class\r\tinstanceVariableNames: \'\''				},				#name : #'AltNodeRemoved class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltNodeRemoved,					#isMetaSide : false				},				#parent : @8,				#content : 'This class mark the removal of a node.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'This class mark the removal of a node.',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '370' ],		#self : OmReference [ '371' ],		#time : DateAndTime [ '2018-01-14T19:02:26.717522-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltNodeAnnouncement',				#traitCompositionSource : '{}',				#definitionSource : 'AltNodeAnnouncement subclass: #AltNodeRemoved\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Announcements\''			},			#name : #AltNodeRemoved,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltNodeRemoved class\r\tinstanceVariableNames: \'\''				},				#name : #'AltNodeRemoved class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltNodeRemoved,					#isMetaSide : false				},				#parent : @8,				#content : 'This class mark the removal of a node.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Announcements,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '371' ],		#self : OmReference [ '372' ],		#time : DateAndTime [ '2018-01-14T19:02:26.723163-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltNodeAnnouncement',				#traitCompositionSource : '{}',				#definitionSource : 'AltNodeAnnouncement subclass: #AltNodeUpdated\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltNodeUpdated,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltNodeUpdated class\r\tinstanceVariableNames: \'\''				},				#name : #'AltNodeUpdated class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltNodeUpdated,					#isMetaSide : false				},				#parent : @8,				#content : 'This mark that the node has seen its contents (name) changed.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'This mark that the node has seen its contents (name) changed.',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '372' ],		#self : OmReference [ '373' ],		#time : DateAndTime [ '2018-01-14T19:02:26.726471-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltNodeAnnouncement',				#traitCompositionSource : '{}',				#definitionSource : 'AltNodeAnnouncement subclass: #AltNodeUpdated\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Announcements\''			},			#name : #AltNodeUpdated,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltNodeUpdated class\r\tinstanceVariableNames: \'\''				},				#name : #'AltNodeUpdated class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltNodeUpdated,					#isMetaSide : false				},				#parent : @8,				#content : 'This mark that the node has seen its contents (name) changed.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Announcements,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '373' ],		#self : OmReference [ '374' ],		#time : DateAndTime [ '2018-01-14T19:02:26.738814-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Announcement',				#traitCompositionSource : '{}',				#definitionSource : 'Announcement subclass: #AltRootsReset\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltRootsReset,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltRootsReset class\r\tinstanceVariableNames: \'\''				},				#name : #'AltRootsReset class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltRootsReset,					#isMetaSide : false				},				#parent : @8,				#content : 'This announcement is for resetting all roots from the AltBrowser class side.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'This announcement is for resetting all roots from the AltBrowser class side.',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '374' ],		#self : OmReference [ '375' ],		#time : DateAndTime [ '2018-01-14T19:02:26.743601-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Announcement',				#traitCompositionSource : '{}',				#definitionSource : 'Announcement subclass: #AltRootsReset\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Announcements\''			},			#name : #AltRootsReset,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltRootsReset class\r\tinstanceVariableNames: \'\''				},				#name : #'AltRootsReset class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltRootsReset,					#isMetaSide : false				},				#parent : @8,				#content : 'This announcement is for resetting all roots from the AltBrowser class side.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Announcements,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '375' ],		#self : OmReference [ '376' ],		#time : DateAndTime [ '2018-01-14T19:02:26.749063-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Announcement',				#traitCompositionSource : '{}',				#definitionSource : 'Announcement subclass: #AltWatchpointInstalled\r\tinstanceVariableNames: \'watchpoint\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltWatchpointInstalled,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltWatchpointInstalled,						#isMetaSide : false					},					#name : #watchpoint,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltWatchpointInstalled class\r\tinstanceVariableNames: \'\''				},				#name : #'AltWatchpointInstalled class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltWatchpointInstalled,					#isMetaSide : false				},				#parent : @8,				#content : 'sent when a watchpoint is installed',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'sent when a watchpoint is installed',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '376' ],		#self : OmReference [ '377' ],		#time : DateAndTime [ '2018-01-14T19:02:26.750448-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpCategoryAddition {		#classCategoryName : #Alt-Browser-Watchpoints,		#affectedPackageName : #Alt-Browser	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '377' ],		#self : OmReference [ '378' ],		#time : DateAndTime [ '2018-01-14T19:02:26.755052-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Announcement',				#traitCompositionSource : '{}',				#definitionSource : 'Announcement subclass: #AltWatchpointInstalled\r\tinstanceVariableNames: \'watchpoint\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Watchpoints\''			},			#name : #AltWatchpointInstalled,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltWatchpointInstalled,						#isMetaSide : false					},					#name : #watchpoint,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltWatchpointInstalled class\r\tinstanceVariableNames: \'\''				},				#name : #'AltWatchpointInstalled class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltWatchpointInstalled,					#isMetaSide : false				},				#parent : @8,				#content : 'sent when a watchpoint is installed',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Watchpoints,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '378' ],		#self : OmReference [ '379' ],		#time : DateAndTime [ '2018-01-14T19:02:26.760224-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Announcement',				#traitCompositionSource : '{}',				#definitionSource : 'Announcement subclass: #AltWatchpointUninstalled\r\tinstanceVariableNames: \'watchpoint\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltWatchpointUninstalled,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltWatchpointUninstalled,						#isMetaSide : false					},					#name : #watchpoint,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltWatchpointUninstalled class\r\tinstanceVariableNames: \'\''				},				#name : #'AltWatchpointUninstalled class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltWatchpointUninstalled,					#isMetaSide : false				},				#parent : @8,				#content : 'sent when a watchpoint is removed',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'sent when a watchpoint is removed',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '379' ],		#self : OmReference [ '380' ],		#time : DateAndTime [ '2018-01-14T19:02:26.763549-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Announcement',				#traitCompositionSource : '{}',				#definitionSource : 'Announcement subclass: #AltWatchpointUninstalled\r\tinstanceVariableNames: \'watchpoint\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Watchpoints\''			},			#name : #AltWatchpointUninstalled,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltWatchpointUninstalled,						#isMetaSide : false					},					#name : #watchpoint,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltWatchpointUninstalled class\r\tinstanceVariableNames: \'\''				},				#name : #'AltWatchpointUninstalled class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltWatchpointUninstalled,					#isMetaSide : false				},				#parent : @8,				#content : 'sent when a watchpoint is removed',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Watchpoints,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '380' ],		#self : OmReference [ '381' ],		#time : DateAndTime [ '2018-01-14T19:02:26.768285-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'MethodAdded',				#traitCompositionSource : '{}',				#definitionSource : 'MethodAdded subclass: #AltMethodAdded\r\tinstanceVariableNames: \'rpackage\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltMethodAdded,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltMethodAdded,						#isMetaSide : false					},					#name : #rpackage,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltMethodAdded class\r\tinstanceVariableNames: \'\''				},				#name : #'AltMethodAdded class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltMethodAdded,					#isMetaSide : false				},				#parent : @8,				#content : 'an extension to MethodAdded to cache the package associated with the method for performance reasons.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'an extension to MethodAdded to cache the package associated with the method for performance reasons.',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '381' ],		#self : OmReference [ '382' ],		#time : DateAndTime [ '2018-01-14T19:02:26.772312-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'MethodAdded',				#traitCompositionSource : '{}',				#definitionSource : 'MethodAdded subclass: #AltMethodAdded\r\tinstanceVariableNames: \'rpackage\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Announcements\''			},			#name : #AltMethodAdded,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltMethodAdded,						#isMetaSide : false					},					#name : #rpackage,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltMethodAdded class\r\tinstanceVariableNames: \'\''				},				#name : #'AltMethodAdded class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltMethodAdded,					#isMetaSide : false				},				#parent : @8,				#content : 'an extension to MethodAdded to cache the package associated with the method for performance reasons.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Announcements,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '382' ],		#self : OmReference [ '383' ],		#time : DateAndTime [ '2018-01-14T19:02:26.776796-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'CustomHelp',				#traitCompositionSource : '{}',				#definitionSource : 'CustomHelp subclass: #AltBrowserHelp\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltBrowserHelp,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltBrowserHelp class\r\tinstanceVariableNames: \'\''				},				#name : #'AltBrowserHelp class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltBrowserHelp,					#isMetaSide : false				},				#parent : @8,				#content : 'This is the help for the AltBrowser. Tries to hold some documentation about what is going on.\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'This is the help for the AltBrowser. Tries to hold some documentation about what is going on.\r',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '383' ],		#self : OmReference [ '384' ],		#time : DateAndTime [ '2018-01-14T19:02:26.781424-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'CustomHelp',				#traitCompositionSource : '{}',				#definitionSource : 'CustomHelp subclass: #AltBrowserHelp\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Core\''			},			#name : #AltBrowserHelp,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltBrowserHelp class\r\tinstanceVariableNames: \'\''				},				#name : #'AltBrowserHelp class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltBrowserHelp,					#isMetaSide : false				},				#parent : @8,				#content : 'This is the help for the AltBrowser. Tries to hold some documentation about what is going on.\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Core,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '384' ],		#self : OmReference [ '385' ],		#time : DateAndTime [ '2018-01-14T19:02:26.790398-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TextMorph',				#traitCompositionSource : '{}',				#definitionSource : 'TextMorph subclass: #AltTextSearchMorph\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltTextSearchMorph,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltTextSearchMorph class\r\tinstanceVariableNames: \'\''				},				#name : #'AltTextSearchMorph class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltTextSearchMorph,					#isMetaSide : false				},				#parent : @8,				#content : 'I am a popup morph for searching in a tree. I appear over the tree, and I go away as soon as the user type CR, ctrl s, Escape or clicks elsewhere. I am very similar to StringMorphEditor (a copy), but without expectations on the Morph I am used on.\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I am a popup morph for searching in a tree. I appear over the tree, and I go away as soon as the user type CR, ctrl s, Escape or clicks elsewhere. I am very similar to StringMorphEditor (a copy), but without expectations on the Morph I am used on.\r',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '385' ],		#self : OmReference [ '386' ],		#time : DateAndTime [ '2018-01-14T19:02:26.793881-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TextMorph',				#traitCompositionSource : '{}',				#definitionSource : 'TextMorph subclass: #AltTextSearchMorph\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Core\''			},			#name : #AltTextSearchMorph,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltTextSearchMorph class\r\tinstanceVariableNames: \'\''				},				#name : #'AltTextSearchMorph class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltTextSearchMorph,					#isMetaSide : false				},				#parent : @8,				#content : 'I am a popup morph for searching in a tree. I appear over the tree, and I go away as soon as the user type CR, ctrl s, Escape or clicks elsewhere. I am very similar to StringMorphEditor (a copy), but without expectations on the Morph I am used on.\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Core,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '386' ],		#self : OmReference [ '387' ],		#time : DateAndTime [ '2018-01-14T19:02:26.798738-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #AltAbstractNode\r\tinstanceVariableNames: \'parent item\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltAbstractNode,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltAbstractNode,						#isMetaSide : false					},					#name : #parent,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltAbstractNode,						#isMetaSide : false					},					#name : #item,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltAbstractNode class\r\tinstanceVariableNames: \'\''				},				#name : #'AltAbstractNode class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltAbstractNode,					#isMetaSide : false				},				#parent : @8,				#content : 'This class is the abstract class of all nodes used by the AltBrowser. Those nodes are abstract and are supposed to be used inside (wrapped) an AltTreeNodeModel.\r\rIt implements the following APIs and/or patterns :\r- Wrapping over an abstract reference (code)\r- Tree with a parentNode\r- Children via a contents variable\r- GUI direct actions:\r\t- accept (from the editor)\r\t- doubleClick (on the tree node)\r\t- drag and drop (on the tree node)\r- menu and shortcuts commands\r\t- for both the tree view and the editor\r\rBeware: I implemented all update messages as the default, no action, in that abstract superclass; for correct performance of this system, most of those update messages should never reach the leafs. An error there will be hidden.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'This class is the abstract class of all nodes used by the AltBrowser. Those nodes are abstract and are supposed to be used inside (wrapped) an AltTreeNodeModel.\r\rIt implements the following APIs and/or patterns :\r- Wrapping over an abstract reference (code)\r- Tree with a parentNode\r- Children via a contents variable\r- GUI direct actions:\r\t- accept (from the editor)\r\t- doubleClick (on the tree node)\r\t- drag and drop (on the tree node)\r- menu and shortcuts commands\r\t- for both the tree view and the editor\r\rBeware: I implemented all update messages as the default, no action, in that abstract superclass; for correct performance of this system, most of those update messages should never reach the leafs. An error there will be hidden.',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '387' ],		#self : OmReference [ '388' ],		#time : DateAndTime [ '2018-01-14T19:02:26.800194-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpCategoryAddition {		#classCategoryName : #Alt-Browser-Nodes,		#affectedPackageName : #Alt-Browser	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '388' ],		#self : OmReference [ '389' ],		#time : DateAndTime [ '2018-01-14T19:02:26.803652-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #AltAbstractNode\r\tinstanceVariableNames: \'parent item\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Nodes\''			},			#name : #AltAbstractNode,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltAbstractNode,						#isMetaSide : false					},					#name : #parent,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltAbstractNode,						#isMetaSide : false					},					#name : #item,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltAbstractNode class\r\tinstanceVariableNames: \'\''				},				#name : #'AltAbstractNode class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltAbstractNode,					#isMetaSide : false				},				#parent : @8,				#content : 'This class is the abstract class of all nodes used by the AltBrowser. Those nodes are abstract and are supposed to be used inside (wrapped) an AltTreeNodeModel.\r\rIt implements the following APIs and/or patterns :\r- Wrapping over an abstract reference (code)\r- Tree with a parentNode\r- Children via a contents variable\r- GUI direct actions:\r\t- accept (from the editor)\r\t- doubleClick (on the tree node)\r\t- drag and drop (on the tree node)\r- menu and shortcuts commands\r\t- for both the tree view and the editor\r\rBeware: I implemented all update messages as the default, no action, in that abstract superclass; for correct performance of this system, most of those update messages should never reach the leafs. An error there will be hidden.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Nodes,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '389' ],		#self : OmReference [ '390' ],		#time : DateAndTime [ '2018-01-14T19:02:26.828998-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltAbstractNode',				#traitCompositionSource : '{}',				#definitionSource : 'AltAbstractNode subclass: #AltClassCommentNode\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltClassCommentNode,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltClassCommentNode class\r\tinstanceVariableNames: \'\''				},				#name : #'AltClassCommentNode class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltClassCommentNode,					#isMetaSide : false				},				#parent : @8,				#content : 'An ABClassCommentNode is for a class comment, if any. No children.\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'An ABClassCommentNode is for a class comment, if any. No children.\r',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '390' ],		#self : OmReference [ '391' ],		#time : DateAndTime [ '2018-01-14T19:02:26.837985-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltAbstractNode',				#traitCompositionSource : '{}',				#definitionSource : 'AltAbstractNode subclass: #AltClassCommentNode\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Nodes\''			},			#name : #AltClassCommentNode,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltClassCommentNode class\r\tinstanceVariableNames: \'\''				},				#name : #'AltClassCommentNode class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltClassCommentNode,					#isMetaSide : false				},				#parent : @8,				#content : 'An ABClassCommentNode is for a class comment, if any. No children.\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Nodes,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '391' ],		#self : OmReference [ '392' ],		#time : DateAndTime [ '2018-01-14T19:02:26.847762-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltAbstractNode',				#traitCompositionSource : '{}',				#definitionSource : 'AltAbstractNode subclass: #AltCompositeNode\r\tinstanceVariableNames: \'contents\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltCompositeNode,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltCompositeNode,						#isMetaSide : false					},					#name : #contents,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltCompositeNode class\r\tinstanceVariableNames: \'\''				},				#name : #'AltCompositeNode class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltCompositeNode,					#isMetaSide : false				},				#parent : @8,				#content : 'This asbtract node is for nodes which have childrens in the tree.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'This asbtract node is for nodes which have childrens in the tree.',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '392' ],		#self : OmReference [ '393' ],		#time : DateAndTime [ '2018-01-14T19:02:26.855924-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltAbstractNode',				#traitCompositionSource : '{}',				#definitionSource : 'AltAbstractNode subclass: #AltCompositeNode\r\tinstanceVariableNames: \'contents\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Nodes\''			},			#name : #AltCompositeNode,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltCompositeNode,						#isMetaSide : false					},					#name : #contents,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltCompositeNode class\r\tinstanceVariableNames: \'\''				},				#name : #'AltCompositeNode class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltCompositeNode,					#isMetaSide : false				},				#parent : @8,				#content : 'This asbtract node is for nodes which have childrens in the tree.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Nodes,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '393' ],		#self : OmReference [ '394' ],		#time : DateAndTime [ '2018-01-14T19:02:26.864583-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCompositeNode',				#traitCompositionSource : '{}',				#definitionSource : 'AltCompositeNode subclass: #AltClassNode\r\tinstanceVariableNames: \'indent\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltClassNode,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltClassNode,						#isMetaSide : false					},					#name : #indent,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltClassNode class\r\tinstanceVariableNames: \'\''				},				#name : #'AltClassNode class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltClassNode,					#isMetaSide : false				},				#parent : @8,				#content : 'An AltClassNode represent a class. The meta side is handled by AltClassMetaNode.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'An AltClassNode represent a class. The meta side is handled by AltClassMetaNode.',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '394' ],		#self : OmReference [ '395' ],		#time : DateAndTime [ '2018-01-14T19:02:26.87101-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCompositeNode',				#traitCompositionSource : '{}',				#definitionSource : 'AltCompositeNode subclass: #AltClassNode\r\tinstanceVariableNames: \'indent\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Nodes\''			},			#name : #AltClassNode,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltClassNode,						#isMetaSide : false					},					#name : #indent,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltClassNode class\r\tinstanceVariableNames: \'\''				},				#name : #'AltClassNode class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltClassNode,					#isMetaSide : false				},				#parent : @8,				#content : 'An AltClassNode represent a class. The meta side is handled by AltClassMetaNode.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Nodes,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '395' ],		#self : OmReference [ '396' ],		#time : DateAndTime [ '2018-01-14T19:02:26.881082-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltClassNode',				#traitCompositionSource : '{}',				#definitionSource : 'AltClassNode subclass: #AltClassExtensionNode\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltClassExtensionNode,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltClassExtensionNode class\r\tinstanceVariableNames: \'\''				},				#name : #'AltClassExtensionNode class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltClassExtensionNode,					#isMetaSide : false				},				#parent : @8,				#content : 'This class is used when browsing the extension of a package. Restrict itself to the methods of the extension of the parent package.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'This class is used when browsing the extension of a package. Restrict itself to the methods of the extension of the parent package.',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '396' ],		#self : OmReference [ '397' ],		#time : DateAndTime [ '2018-01-14T19:02:26.887074-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltClassNode',				#traitCompositionSource : '{}',				#definitionSource : 'AltClassNode subclass: #AltClassExtensionNode\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Nodes\''			},			#name : #AltClassExtensionNode,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltClassExtensionNode class\r\tinstanceVariableNames: \'\''				},				#name : #'AltClassExtensionNode class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltClassExtensionNode,					#isMetaSide : false				},				#parent : @8,				#content : 'This class is used when browsing the extension of a package. Restrict itself to the methods of the extension of the parent package.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Nodes,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '397' ],		#self : OmReference [ '398' ],		#time : DateAndTime [ '2018-01-14T19:02:26.908039-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltClassExtensionNode',				#traitCompositionSource : '{}',				#definitionSource : 'AltClassExtensionNode subclass: #AltClassMetaExtensionNode\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltClassMetaExtensionNode,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltClassMetaExtensionNode class\r\tinstanceVariableNames: \'\''				},				#name : #'AltClassMetaExtensionNode class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltClassMetaExtensionNode,					#isMetaSide : false				},				#parent : @8,				#content : 'An AltClassMetaExtensionNode is for extensions on the meta side\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'An AltClassMetaExtensionNode is for extensions on the meta side\r',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '398' ],		#self : OmReference [ '399' ],		#time : DateAndTime [ '2018-01-14T19:02:26.914842-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltClassExtensionNode',				#traitCompositionSource : '{}',				#definitionSource : 'AltClassExtensionNode subclass: #AltClassMetaExtensionNode\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Nodes\''			},			#name : #AltClassMetaExtensionNode,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltClassMetaExtensionNode class\r\tinstanceVariableNames: \'\''				},				#name : #'AltClassMetaExtensionNode class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltClassMetaExtensionNode,					#isMetaSide : false				},				#parent : @8,				#content : 'An AltClassMetaExtensionNode is for extensions on the meta side\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Nodes,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '399' ],		#self : OmReference [ '400' ],		#time : DateAndTime [ '2018-01-14T19:02:26.920438-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltClassNode',				#traitCompositionSource : '{}',				#definitionSource : 'AltClassNode subclass: #AltClassMetaNode\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltClassMetaNode,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltClassMetaNode class\r\tinstanceVariableNames: \'\''				},				#name : #'AltClassMetaNode class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltClassMetaNode,					#isMetaSide : false				},				#parent : @8,				#content : 'An AltClassMetaNode is in charge of the meta side of a class.\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'An AltClassMetaNode is in charge of the meta side of a class.\r',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '400' ],		#self : OmReference [ '401' ],		#time : DateAndTime [ '2018-01-14T19:02:26.928412-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltClassNode',				#traitCompositionSource : '{}',				#definitionSource : 'AltClassNode subclass: #AltClassMetaNode\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Nodes\''			},			#name : #AltClassMetaNode,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltClassMetaNode class\r\tinstanceVariableNames: \'\''				},				#name : #'AltClassMetaNode class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltClassMetaNode,					#isMetaSide : false				},				#parent : @8,				#content : 'An AltClassMetaNode is in charge of the meta side of a class.\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Nodes,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '401' ],		#self : OmReference [ '402' ],		#time : DateAndTime [ '2018-01-14T19:02:26.935864-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCompositeNode',				#traitCompositionSource : '{}',				#definitionSource : 'AltCompositeNode subclass: #AltMetacelloProjectNode\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltMetacelloProjectNode,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltMetacelloProjectNode class\r\tinstanceVariableNames: \'\''				},				#name : #'AltMetacelloProjectNode class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltMetacelloProjectNode,					#isMetaSide : false				},				#parent : @8,				#content : 'I represent a project entry in the metacello registry\r\rI am a baselineOf or a configurationOf\r\rI could record only the name of it... later',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I represent a project entry in the metacello registry\r\rI am a baselineOf or a configurationOf\r\rI could record only the name of it... later',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '402' ],		#self : OmReference [ '403' ],		#time : DateAndTime [ '2018-01-14T19:02:26.940687-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCompositeNode',				#traitCompositionSource : '{}',				#definitionSource : 'AltCompositeNode subclass: #AltMetacelloProjectNode\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Nodes\''			},			#name : #AltMetacelloProjectNode,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltMetacelloProjectNode class\r\tinstanceVariableNames: \'\''				},				#name : #'AltMetacelloProjectNode class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltMetacelloProjectNode,					#isMetaSide : false				},				#parent : @8,				#content : 'I represent a project entry in the metacello registry\r\rI am a baselineOf or a configurationOf\r\rI could record only the name of it... later',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Nodes,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '403' ],		#self : OmReference [ '404' ],		#time : DateAndTime [ '2018-01-14T19:02:26.946965-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCompositeNode',				#traitCompositionSource : '{}',				#definitionSource : 'AltCompositeNode subclass: #AltMetacelloRegistryNode\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltMetacelloRegistryNode,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltMetacelloRegistryNode class\r\tinstanceVariableNames: \'\''				},				#name : #'AltMetacelloRegistryNode class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltMetacelloRegistryNode,					#isMetaSide : false				},				#parent : @8,				#content : 'I represent the contents of the Metacello registry of projects',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I represent the contents of the Metacello registry of projects',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '404' ],		#self : OmReference [ '405' ],		#time : DateAndTime [ '2018-01-14T19:02:26.951618-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCompositeNode',				#traitCompositionSource : '{}',				#definitionSource : 'AltCompositeNode subclass: #AltMetacelloRegistryNode\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Nodes\''			},			#name : #AltMetacelloRegistryNode,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltMetacelloRegistryNode class\r\tinstanceVariableNames: \'\''				},				#name : #'AltMetacelloRegistryNode class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltMetacelloRegistryNode,					#isMetaSide : false				},				#parent : @8,				#content : 'I represent the contents of the Metacello registry of projects',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Nodes,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '405' ],		#self : OmReference [ '406' ],		#time : DateAndTime [ '2018-01-14T19:02:26.965662-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCompositeNode',				#traitCompositionSource : '{}',				#definitionSource : 'AltCompositeNode subclass: #AltMethodCategoryNode\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltMethodCategoryNode,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltMethodCategoryNode class\r\tinstanceVariableNames: \'\''				},				#name : #'AltMethodCategoryNode class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltMethodCategoryNode,					#isMetaSide : false				},				#parent : @8,				#content : 'For a method category. No need for an -- all ---, the tree list allow for opening everything if needed. The \'as yet unclassified\' method category (protocol) is managed on the fly (and exist in the system) ',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'For a method category. No need for an -- all ---, the tree list allow for opening everything if needed. The \'as yet unclassified\' method category (protocol) is managed on the fly (and exist in the system) ',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '406' ],		#self : OmReference [ '407' ],		#time : DateAndTime [ '2018-01-14T19:02:26.970962-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCompositeNode',				#traitCompositionSource : '{}',				#definitionSource : 'AltCompositeNode subclass: #AltMethodCategoryNode\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Nodes\''			},			#name : #AltMethodCategoryNode,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltMethodCategoryNode class\r\tinstanceVariableNames: \'\''				},				#name : #'AltMethodCategoryNode class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltMethodCategoryNode,					#isMetaSide : false				},				#parent : @8,				#content : 'For a method category. No need for an -- all ---, the tree list allow for opening everything if needed. The \'as yet unclassified\' method category (protocol) is managed on the fly (and exist in the system) ',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Nodes,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '407' ],		#self : OmReference [ '408' ],		#time : DateAndTime [ '2018-01-14T19:02:26.976046-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCompositeNode',				#traitCompositionSource : '{}',				#definitionSource : 'AltCompositeNode subclass: #AltPackageCategoryNode\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltPackageCategoryNode,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltPackageCategoryNode class\r\tinstanceVariableNames: \'\''				},				#name : #'AltPackageCategoryNode class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltPackageCategoryNode,					#isMetaSide : false				},				#parent : @8,				#content : 'An AltPackageCategoryNode represent a category of packages.\r\ritem contains an association "package category name" -> "list of packages.".\r\rQuestion: if I am in an environment where I disappear, and the addition of a package makes me appear in that environment, how do I propagate the fact I have to rebuilt my parent to reappear? And my parent as well, maybe? And my parents parent? ...\r\rQuestion: if empty categories are filtered out in the tree, how do I create them? Do I need a specific \'isHumanCreated\' flag to keep thoses visibles even when empty?',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'An AltPackageCategoryNode represent a category of packages.\r\ritem contains an association "package category name" -> "list of packages.".\r\rQuestion: if I am in an environment where I disappear, and the addition of a package makes me appear in that environment, how do I propagate the fact I have to rebuilt my parent to reappear? And my parent as well, maybe? And my parents parent? ...\r\rQuestion: if empty categories are filtered out in the tree, how do I create them? Do I need a specific \'isHumanCreated\' flag to keep thoses visibles even when empty?',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '408' ],		#self : OmReference [ '409' ],		#time : DateAndTime [ '2018-01-14T19:02:26.980493-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCompositeNode',				#traitCompositionSource : '{}',				#definitionSource : 'AltCompositeNode subclass: #AltPackageCategoryNode\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Nodes\''			},			#name : #AltPackageCategoryNode,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltPackageCategoryNode class\r\tinstanceVariableNames: \'\''				},				#name : #'AltPackageCategoryNode class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltPackageCategoryNode,					#isMetaSide : false				},				#parent : @8,				#content : 'An AltPackageCategoryNode represent a category of packages.\r\ritem contains an association "package category name" -> "list of packages.".\r\rQuestion: if I am in an environment where I disappear, and the addition of a package makes me appear in that environment, how do I propagate the fact I have to rebuilt my parent to reappear? And my parent as well, maybe? And my parents parent? ...\r\rQuestion: if empty categories are filtered out in the tree, how do I create them? Do I need a specific \'isHumanCreated\' flag to keep thoses visibles even when empty?',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Nodes,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '409' ],		#self : OmReference [ '410' ],		#time : DateAndTime [ '2018-01-14T19:02:26.985882-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltPackageCategoryNode',				#traitCompositionSource : '{}',				#definitionSource : 'AltPackageCategoryNode subclass: #AltProjectCategoryNode\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltProjectCategoryNode,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltProjectCategoryNode class\r\tinstanceVariableNames: \'\''				},				#name : #'AltProjectCategoryNode class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltProjectCategoryNode,					#isMetaSide : false				},				#parent : @8,				#content : 'I represent a project category, i.e. either a baseline or a configuration. All my children are project nodes.\r\rI use the tag naming scheme to add projects to my category',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I represent a project category, i.e. either a baseline or a configuration. All my children are project nodes.\r\rI use the tag naming scheme to add projects to my category',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '410' ],		#self : OmReference [ '411' ],		#time : DateAndTime [ '2018-01-14T19:02:26.988994-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltPackageCategoryNode',				#traitCompositionSource : '{}',				#definitionSource : 'AltPackageCategoryNode subclass: #AltProjectCategoryNode\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Nodes\''			},			#name : #AltProjectCategoryNode,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltProjectCategoryNode class\r\tinstanceVariableNames: \'\''				},				#name : #'AltProjectCategoryNode class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltProjectCategoryNode,					#isMetaSide : false				},				#parent : @8,				#content : 'I represent a project category, i.e. either a baseline or a configuration. All my children are project nodes.\r\rI use the tag naming scheme to add projects to my category',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Nodes,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '411' ],		#self : OmReference [ '412' ],		#time : DateAndTime [ '2018-01-14T19:02:26.994173-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltPackageCategoryNode',				#traitCompositionSource : '{}',				#definitionSource : 'AltPackageCategoryNode subclass: #AltProjectNode\r\tinstanceVariableNames: \'packagesCache\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltProjectNode,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltProjectNode,						#isMetaSide : false					},					#name : #packagesCache,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltProjectNode class\r\tinstanceVariableNames: \'\''				},				#name : #'AltProjectNode class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltProjectNode,					#isMetaSide : false				},				#parent : @8,				#content : 'I represent a project: either a ConfigurationOf, or a BaselineOf, with all related packages and dependents.\r\rSo my item is either a ConfigurationOf or a BaselineOf key, and my contents is the list of packages manipulated by this project and present in the image (if the value part of my item is empty). Otherwise it behaves as a category.\r\r(((MCWorkingCopy allManagers collect:  [ :e |\r\te packageName  ]) select: [ :n | n beginsWith: \'BaselineOf\' ]) asSortedCollection collect: [ :e | AltProjectNode with: e asSymbol -> OrderedCollection new ]) do: [ :e | e contents ].\r\r(((MCWorkingCopy allManagers collect:  [ :e |\r\te packageName  ]) select: [ :n | n beginsWith: \'ConfigurationOf\' ]) asSortedCollection collect: [ :e | AltProjectNode with: e asSymbol -> OrderedCollection new ]) do: [ :e | e contents ].\r\rNote: the notion of a project is a weak concept and that means it needs to be refined as it goes along. A project behaves as a category, with a first element a bit special (configuration or baseline); the rest is filled at initialisation or as packages are added that belongs to that configuration. Unloading the configuration keeps the packages inside the project. Adding a package put it in the project (but may be it isn\'t tracked by the configuration or baseline). ',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I represent a project: either a ConfigurationOf, or a BaselineOf, with all related packages and dependents.\r\rSo my item is either a ConfigurationOf or a BaselineOf key, and my contents is the list of packages manipulated by this project and present in the image (if the value part of my item is empty). Otherwise it behaves as a category.\r\r(((MCWorkingCopy allManagers collect:  [ :e |\r\te packageName  ]) select: [ :n | n beginsWith: \'BaselineOf\' ]) asSortedCollection collect: [ :e | AltProjectNode with: e asSymbol -> OrderedCollection new ]) do: [ :e | e contents ].\r\r(((MCWorkingCopy allManagers collect:  [ :e |\r\te packageName  ]) select: [ :n | n beginsWith: \'ConfigurationOf\' ]) asSortedCollection collect: [ :e | AltProjectNode with: e asSymbol -> OrderedCollection new ]) do: [ :e | e contents ].\r\rNote: the notion of a project is a weak concept and that means it needs to be refined as it goes along. A project behaves as a category, with a first element a bit special (configuration or baseline); the rest is filled at initialisation or as packages are added that belongs to that configuration. Unloading the configuration keeps the packages inside the project. Adding a package put it in the project (but may be it isn\'t tracked by the configuration or baseline). ',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '412' ],		#self : OmReference [ '413' ],		#time : DateAndTime [ '2018-01-14T19:02:26.997516-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltPackageCategoryNode',				#traitCompositionSource : '{}',				#definitionSource : 'AltPackageCategoryNode subclass: #AltProjectNode\r\tinstanceVariableNames: \'packagesCache\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Nodes\''			},			#name : #AltProjectNode,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltProjectNode,						#isMetaSide : false					},					#name : #packagesCache,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltProjectNode class\r\tinstanceVariableNames: \'\''				},				#name : #'AltProjectNode class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltProjectNode,					#isMetaSide : false				},				#parent : @8,				#content : 'I represent a project: either a ConfigurationOf, or a BaselineOf, with all related packages and dependents.\r\rSo my item is either a ConfigurationOf or a BaselineOf key, and my contents is the list of packages manipulated by this project and present in the image (if the value part of my item is empty). Otherwise it behaves as a category.\r\r(((MCWorkingCopy allManagers collect:  [ :e |\r\te packageName  ]) select: [ :n | n beginsWith: \'BaselineOf\' ]) asSortedCollection collect: [ :e | AltProjectNode with: e asSymbol -> OrderedCollection new ]) do: [ :e | e contents ].\r\r(((MCWorkingCopy allManagers collect:  [ :e |\r\te packageName  ]) select: [ :n | n beginsWith: \'ConfigurationOf\' ]) asSortedCollection collect: [ :e | AltProjectNode with: e asSymbol -> OrderedCollection new ]) do: [ :e | e contents ].\r\rNote: the notion of a project is a weak concept and that means it needs to be refined as it goes along. A project behaves as a category, with a first element a bit special (configuration or baseline); the rest is filled at initialisation or as packages are added that belongs to that configuration. Unloading the configuration keeps the packages inside the project. Adding a package put it in the project (but may be it isn\'t tracked by the configuration or baseline). ',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Nodes,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '413' ],		#self : OmReference [ '414' ],		#time : DateAndTime [ '2018-01-14T19:02:27.003587-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltPackageCategoryNode',				#traitCompositionSource : '{}',				#definitionSource : 'AltPackageCategoryNode subclass: #AltRootNode\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltRootNode,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltRootNode class\r\tinstanceVariableNames: \'\''				},				#name : #'AltRootNode class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltRootNode,					#isMetaSide : false				},				#parent : @8,				#content : 'An AltRootNode represent the root of the tree. It is never visible; only it\'s items are. Its parent is allways nil.\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'An AltRootNode represent the root of the tree. It is never visible; only it\'s items are. Its parent is allways nil.\r',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '414' ],		#self : OmReference [ '415' ],		#time : DateAndTime [ '2018-01-14T19:02:27.007065-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltPackageCategoryNode',				#traitCompositionSource : '{}',				#definitionSource : 'AltPackageCategoryNode subclass: #AltRootNode\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Nodes\''			},			#name : #AltRootNode,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltRootNode class\r\tinstanceVariableNames: \'\''				},				#name : #'AltRootNode class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltRootNode,					#isMetaSide : false				},				#parent : @8,				#content : 'An AltRootNode represent the root of the tree. It is never visible; only it\'s items are. Its parent is allways nil.\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Nodes,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '415' ],		#self : OmReference [ '416' ],		#time : DateAndTime [ '2018-01-14T19:02:27.011839-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCompositeNode',				#traitCompositionSource : '{}',				#definitionSource : 'AltCompositeNode subclass: #AltPackageExtensionNode\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltPackageExtensionNode,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltPackageExtensionNode class\r\tinstanceVariableNames: \'\''				},				#name : #'AltPackageExtensionNode class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltPackageExtensionNode,					#isMetaSide : false				},				#parent : @8,				#content : 'This node represent a RPackage extension set. Item is a RPackage name, childrenItems are classes extended in the RPackage\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'This node represent a RPackage extension set. Item is a RPackage name, childrenItems are classes extended in the RPackage\r',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '416' ],		#self : OmReference [ '417' ],		#time : DateAndTime [ '2018-01-14T19:02:27.015731-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCompositeNode',				#traitCompositionSource : '{}',				#definitionSource : 'AltCompositeNode subclass: #AltPackageExtensionNode\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Nodes\''			},			#name : #AltPackageExtensionNode,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltPackageExtensionNode class\r\tinstanceVariableNames: \'\''				},				#name : #'AltPackageExtensionNode class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltPackageExtensionNode,					#isMetaSide : false				},				#parent : @8,				#content : 'This node represent a RPackage extension set. Item is a RPackage name, childrenItems are classes extended in the RPackage\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Nodes,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '417' ],		#self : OmReference [ '418' ],		#time : DateAndTime [ '2018-01-14T19:02:27.032507-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCompositeNode',				#traitCompositionSource : '{}',				#definitionSource : 'AltCompositeNode subclass: #AltPackageNode\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltPackageNode,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltPackageNode class\r\tinstanceVariableNames: \'\''				},				#name : #'AltPackageNode class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltPackageNode,					#isMetaSide : false				},				#parent : @8,				#content : 'This class instances represent PackageSets or MCWorkingCopy of a package. It also represent a single RPackage now, system categories being tags.\r\rItem is the name of a RPackage / MCWorkingCopy, childrenItems are itself (displayed as a RPackageExtensionNode), classes (if defined at the RPackage level or with a class tag of the RPackage name) and class tags.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'This class instances represent PackageSets or MCWorkingCopy of a package. It also represent a single RPackage now, system categories being tags.\r\rItem is the name of a RPackage / MCWorkingCopy, childrenItems are itself (displayed as a RPackageExtensionNode), classes (if defined at the RPackage level or with a class tag of the RPackage name) and class tags.',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '418' ],		#self : OmReference [ '419' ],		#time : DateAndTime [ '2018-01-14T19:02:27.036102-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCompositeNode',				#traitCompositionSource : '{}',				#definitionSource : 'AltCompositeNode subclass: #AltPackageNode\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Nodes\''			},			#name : #AltPackageNode,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltPackageNode class\r\tinstanceVariableNames: \'\''				},				#name : #'AltPackageNode class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltPackageNode,					#isMetaSide : false				},				#parent : @8,				#content : 'This class instances represent PackageSets or MCWorkingCopy of a package. It also represent a single RPackage now, system categories being tags.\r\rItem is the name of a RPackage / MCWorkingCopy, childrenItems are itself (displayed as a RPackageExtensionNode), classes (if defined at the RPackage level or with a class tag of the RPackage name) and class tags.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Nodes,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '419' ],		#self : OmReference [ '420' ],		#time : DateAndTime [ '2018-01-14T19:02:27.041256-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltPackageNode',				#traitCompositionSource : '{}',				#definitionSource : 'AltPackageNode subclass: #AltUnpackagedNode\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltUnpackagedNode,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltUnpackagedNode class\r\tinstanceVariableNames: \'\''				},				#name : #'AltUnpackagedNode class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltUnpackagedNode,					#isMetaSide : false				},				#parent : @8,				#content : 'This node represent code which isn\'t packaged. This is a singleton and map to the \'_UnpackagedPackage\' whose name sound a bit silly :)',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'This node represent code which isn\'t packaged. This is a singleton and map to the \'_UnpackagedPackage\' whose name sound a bit silly :)',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '420' ],		#self : OmReference [ '421' ],		#time : DateAndTime [ '2018-01-14T19:02:27.048586-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltPackageNode',				#traitCompositionSource : '{}',				#definitionSource : 'AltPackageNode subclass: #AltUnpackagedNode\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Nodes\''			},			#name : #AltUnpackagedNode,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltUnpackagedNode class\r\tinstanceVariableNames: \'\''				},				#name : #'AltUnpackagedNode class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltUnpackagedNode,					#isMetaSide : false				},				#parent : @8,				#content : 'This node represent code which isn\'t packaged. This is a singleton and map to the \'_UnpackagedPackage\' whose name sound a bit silly :)',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Nodes,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '421' ],		#self : OmReference [ '422' ],		#time : DateAndTime [ '2018-01-14T19:02:27.053786-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCompositeNode',				#traitCompositionSource : '{}',				#definitionSource : 'AltCompositeNode subclass: #AltPackageTagNode\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltPackageTagNode,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltPackageTagNode class\r\tinstanceVariableNames: \'\''				},				#name : #'AltPackageTagNode class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltPackageTagNode,					#isMetaSide : false				},				#parent : @8,				#content : 'An AltPackageTagNode handles the tag of a RPackage instance. It is about the same as a system category. The item is the name of a RPackageTag instance.\r\rSome of my questions then are:\r- What happens on tag removal (what announcement)?\r- What is the announcement on changing a class from a tag to another?',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'An AltPackageTagNode handles the tag of a RPackage instance. It is about the same as a system category. The item is the name of a RPackageTag instance.\r\rSome of my questions then are:\r- What happens on tag removal (what announcement)?\r- What is the announcement on changing a class from a tag to another?',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '422' ],		#self : OmReference [ '423' ],		#time : DateAndTime [ '2018-01-14T19:02:27.057447-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCompositeNode',				#traitCompositionSource : '{}',				#definitionSource : 'AltCompositeNode subclass: #AltPackageTagNode\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Nodes\''			},			#name : #AltPackageTagNode,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltPackageTagNode class\r\tinstanceVariableNames: \'\''				},				#name : #'AltPackageTagNode class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltPackageTagNode,					#isMetaSide : false				},				#parent : @8,				#content : 'An AltPackageTagNode handles the tag of a RPackage instance. It is about the same as a system category. The item is the name of a RPackageTag instance.\r\rSome of my questions then are:\r- What happens on tag removal (what announcement)?\r- What is the announcement on changing a class from a tag to another?',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Nodes,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '423' ],		#self : OmReference [ '424' ],		#time : DateAndTime [ '2018-01-14T19:02:27.064179-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCompositeNode',				#traitCompositionSource : '{}',				#definitionSource : 'AltCompositeNode subclass: #AltRecentPackagesNode\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltRecentPackagesNode,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltRecentPackagesNode class\r\tinstanceVariableNames: \'\''				},				#name : #'AltRecentPackagesNode class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltRecentPackagesNode,					#isMetaSide : false				},				#parent : @8,				#content : 'This node contains a list of recent packages. Instance variable code contains an ordered collection of timestamps / packages.\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'This node contains a list of recent packages. Instance variable code contains an ordered collection of timestamps / packages.\r',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '424' ],		#self : OmReference [ '425' ],		#time : DateAndTime [ '2018-01-14T19:02:27.06959-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCompositeNode',				#traitCompositionSource : '{}',				#definitionSource : 'AltCompositeNode subclass: #AltRecentPackagesNode\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Nodes\''			},			#name : #AltRecentPackagesNode,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltRecentPackagesNode class\r\tinstanceVariableNames: \'\''				},				#name : #'AltRecentPackagesNode class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltRecentPackagesNode,					#isMetaSide : false				},				#parent : @8,				#content : 'This node contains a list of recent packages. Instance variable code contains an ordered collection of timestamps / packages.\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Nodes,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '425' ],		#self : OmReference [ '426' ],		#time : DateAndTime [ '2018-01-14T19:02:27.075155-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCompositeNode',				#traitCompositionSource : '{}',				#definitionSource : 'AltCompositeNode subclass: #AltWatchpointsClassNode\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltWatchpointsClassNode,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltWatchpointsClassNode class\r\tinstanceVariableNames: \'\''				},				#name : #'AltWatchpointsClassNode class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltWatchpointsClassNode,					#isMetaSide : false				},				#parent : @8,				#content : 'I list the watchpoints associated with a class.\r\rI should not be visible if the environment is the class itself (i.e. direct access to methods with watchpoints).',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I list the watchpoints associated with a class.\r\rI should not be visible if the environment is the class itself (i.e. direct access to methods with watchpoints).',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '426' ],		#self : OmReference [ '427' ],		#time : DateAndTime [ '2018-01-14T19:02:27.079112-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCompositeNode',				#traitCompositionSource : '{}',				#definitionSource : 'AltCompositeNode subclass: #AltWatchpointsClassNode\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Watchpoints\''			},			#name : #AltWatchpointsClassNode,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltWatchpointsClassNode class\r\tinstanceVariableNames: \'\''				},				#name : #'AltWatchpointsClassNode class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltWatchpointsClassNode,					#isMetaSide : false				},				#parent : @8,				#content : 'I list the watchpoints associated with a class.\r\rI should not be visible if the environment is the class itself (i.e. direct access to methods with watchpoints).',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Watchpoints,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '427' ],		#self : OmReference [ '428' ],		#time : DateAndTime [ '2018-01-14T19:02:27.084761-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCompositeNode',				#traitCompositionSource : '{}',				#definitionSource : 'AltCompositeNode subclass: #AltWatchpointsNode\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltWatchpointsNode,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltWatchpointsNode class\r\tinstanceVariableNames: \'\''				},				#name : #'AltWatchpointsNode class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltWatchpointsNode,					#isMetaSide : false				},				#parent : @8,				#content : 'Gives access to all watchpoints in the current environment.\r\rList of class / method.\r\rUnable to see added watchpoints by other means than myself, since the default watchpoint api doesn\'t announce anything (including for its own gui :facepalm:).\r\rMaybe I need to add a watchpoint on the watchpoint API?\r\rNote that watchpoints are held in a weak array, so they may disappear (method recompiled, method removed) without any watchpoint uninstall event. Also, they may still be among watchpoints even after an uninstall, because they are still in the weak array.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Gives access to all watchpoints in the current environment.\r\rList of class / method.\r\rUnable to see added watchpoints by other means than myself, since the default watchpoint api doesn\'t announce anything (including for its own gui :facepalm:).\r\rMaybe I need to add a watchpoint on the watchpoint API?\r\rNote that watchpoints are held in a weak array, so they may disappear (method recompiled, method removed) without any watchpoint uninstall event. Also, they may still be among watchpoints even after an uninstall, because they are still in the weak array.',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '428' ],		#self : OmReference [ '429' ],		#time : DateAndTime [ '2018-01-14T19:02:27.089843-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCompositeNode',				#traitCompositionSource : '{}',				#definitionSource : 'AltCompositeNode subclass: #AltWatchpointsNode\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Watchpoints\''			},			#name : #AltWatchpointsNode,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltWatchpointsNode class\r\tinstanceVariableNames: \'\''				},				#name : #'AltWatchpointsNode class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltWatchpointsNode,					#isMetaSide : false				},				#parent : @8,				#content : 'Gives access to all watchpoints in the current environment.\r\rList of class / method.\r\rUnable to see added watchpoints by other means than myself, since the default watchpoint api doesn\'t announce anything (including for its own gui :facepalm:).\r\rMaybe I need to add a watchpoint on the watchpoint API?\r\rNote that watchpoints are held in a weak array, so they may disappear (method recompiled, method removed) without any watchpoint uninstall event. Also, they may still be among watchpoints even after an uninstall, because they are still in the weak array.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Watchpoints,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '429' ],		#self : OmReference [ '430' ],		#time : DateAndTime [ '2018-01-14T19:02:27.109423-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltAbstractNode',				#traitCompositionSource : '{}',				#definitionSource : 'AltAbstractNode subclass: #AltMethodNode\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'ProtectedMethods\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltMethodNode,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltMethodNode class\r\tinstanceVariableNames: \'\''				},				#name : #'AltMethodNode class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltMethodNode,					#isMetaSide : false				},				#parent : @8,				#content : 'Represent a method. Should be used to get the method source, selector and whatever.\r\rI can also track "customized" methods and avoid them to be shown bare.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltMethodNode,						#isMetaSide : false					},					#name : #ProtectedMethods,					#parent : @8				}			],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Represent a method. Should be used to get the method source, selector and whatever.\r\rI can also track "customized" methods and avoid them to be shown bare.',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '430' ],		#self : OmReference [ '431' ],		#time : DateAndTime [ '2018-01-14T19:02:27.115158-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltAbstractNode',				#traitCompositionSource : '{}',				#definitionSource : 'AltAbstractNode subclass: #AltMethodNode\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'ProtectedMethods\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Nodes\''			},			#name : #AltMethodNode,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltMethodNode class\r\tinstanceVariableNames: \'\''				},				#name : #'AltMethodNode class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltMethodNode,					#isMetaSide : false				},				#parent : @8,				#content : 'Represent a method. Should be used to get the method source, selector and whatever.\r\rI can also track "customized" methods and avoid them to be shown bare.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltMethodNode,						#isMetaSide : false					},					#name : #ProtectedMethods,					#parent : @8				}			],			#category : #Alt-Browser-Nodes,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '431' ],		#self : OmReference [ '432' ],		#time : DateAndTime [ '2018-01-14T19:02:27.120022-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltAbstractNode',				#traitCompositionSource : '{}',				#definitionSource : 'AltAbstractNode subclass: #AltPackageLinkNode\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltPackageLinkNode,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltPackageLinkNode class\r\tinstanceVariableNames: \'\''				},				#name : #'AltPackageLinkNode class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltPackageLinkNode,					#isMetaSide : false				},				#parent : @8,				#content : 'This class displays a link on another object in the tree. Selecting it triggers selecting the target.\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'This class displays a link on another object in the tree. Selecting it triggers selecting the target.\r',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '432' ],		#self : OmReference [ '433' ],		#time : DateAndTime [ '2018-01-14T19:02:27.124184-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltAbstractNode',				#traitCompositionSource : '{}',				#definitionSource : 'AltAbstractNode subclass: #AltPackageLinkNode\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Nodes\''			},			#name : #AltPackageLinkNode,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltPackageLinkNode class\r\tinstanceVariableNames: \'\''				},				#name : #'AltPackageLinkNode class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltPackageLinkNode,					#isMetaSide : false				},				#parent : @8,				#content : 'This class displays a link on another object in the tree. Selecting it triggers selecting the target.\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Nodes,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '433' ],		#self : OmReference [ '434' ],		#time : DateAndTime [ '2018-01-14T19:02:27.132989-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltAbstractNode',				#traitCompositionSource : '{}',				#definitionSource : 'AltAbstractNode subclass: #AltWatchpointNode\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltWatchpointNode,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltWatchpointNode class\r\tinstanceVariableNames: \'\''				},				#name : #'AltWatchpointNode class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltWatchpointNode,					#isMetaSide : false				},				#parent : @8,				#content : 'Represent a single watchpoint.\r\rGive access to the commands for that watchpoint.\r\rIs contained by a Watchpoints Class Node',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Represent a single watchpoint.\r\rGive access to the commands for that watchpoint.\r\rIs contained by a Watchpoints Class Node',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '434' ],		#self : OmReference [ '435' ],		#time : DateAndTime [ '2018-01-14T19:02:27.137839-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltAbstractNode',				#traitCompositionSource : '{}',				#definitionSource : 'AltAbstractNode subclass: #AltWatchpointNode\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Watchpoints\''			},			#name : #AltWatchpointNode,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltWatchpointNode class\r\tinstanceVariableNames: \'\''				},				#name : #'AltWatchpointNode class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltWatchpointNode,					#isMetaSide : false				},				#parent : @8,				#content : 'Represent a single watchpoint.\r\rGive access to the commands for that watchpoint.\r\rIs contained by a Watchpoints Class Node',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Watchpoints,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '435' ],		#self : OmReference [ '436' ],		#time : DateAndTime [ '2018-01-14T19:02:27.144335-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #AltBrowser\r\tinstanceVariableNames: \'source root history window treeMorph textMorph rbEnvironment finder finderUI toolbar commentMorph selection\'\r\tclassVariableNames: \'AltAnnouncer Categories Debug RecentPackages Root Temporary\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltBrowser,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltBrowser,						#isMetaSide : false					},					#name : #source,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltBrowser,						#isMetaSide : false					},					#name : #root,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltBrowser,						#isMetaSide : false					},					#name : #history,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltBrowser,						#isMetaSide : false					},					#name : #window,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltBrowser,						#isMetaSide : false					},					#name : #treeMorph,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltBrowser,						#isMetaSide : false					},					#name : #textMorph,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltBrowser,						#isMetaSide : false					},					#name : #rbEnvironment,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltBrowser,						#isMetaSide : false					},					#name : #finder,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltBrowser,						#isMetaSide : false					},					#name : #finderUI,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltBrowser,						#isMetaSide : false					},					#name : #toolbar,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltBrowser,						#isMetaSide : false					},					#name : #commentMorph,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltBrowser,						#isMetaSide : false					},					#name : #selection,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltBrowser class\r\tinstanceVariableNames: \'\''				},				#name : #'AltBrowser class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltBrowser,					#isMetaSide : false				},				#parent : @8,				#content : 'An AltBrowser is a complete alternative system browser, message list and finder.\r\rIt builds a representation of  the code structure as a abstract tree, out of AltAbstractNode, in the class side. That tree is kept on the class side, and is connected to all the system announcements tracking code changes (loading, creating, compiling, etc...).\r\rEach instance handle the display of the overall tree in a GUI and an environment (a Refactoring Browser environment). The GUI is simply an AltTreeMorph instance and a PluggableTextMorph, and the context menus for both morphs. The instance reference a display tree based on AltTreeItemModel which is manipulated by the user interactively and also filtered by the refactoring environment associated with the instance (for example restricted to a package / a class / a set of selectors).\r\rThe instance is listening to events from the class to be able to update the relevant nodes for display. It also has an history (for navigation). It coordinates the building of context menus, shortcuts and a few user events (drag and drop). It has utility functions to relate an abstract item, a node model and a node morph, because it is common to have to update the tree (or the display of a node) out of a change event on an item.\r\rStarting point for interesting code:\r- context menu building : #buildTextMenu:, #buildTreeMenu:\r- contextual key combinations : #updateTextKeymap, #updateTreeKeymap\r- drag and drop in the tree: #acceptDroppingMorph:event:inMorph:, ...\r- updating (for updates from the class about code change events)',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltBrowser,						#isMetaSide : false					},					#name : #AltAnnouncer,					#parent : @8				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltBrowser,						#isMetaSide : false					},					#name : #Categories,					#parent : @8				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltBrowser,						#isMetaSide : false					},					#name : #Debug,					#parent : @8				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltBrowser,						#isMetaSide : false					},					#name : #RecentPackages,					#parent : @8				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltBrowser,						#isMetaSide : false					},					#name : #Root,					#parent : @8				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltBrowser,						#isMetaSide : false					},					#name : #Temporary,					#parent : @8				}			],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'An AltBrowser is a complete alternative system browser, message list and finder.\r\rIt builds a representation of  the code structure as a abstract tree, out of AltAbstractNode, in the class side. That tree is kept on the class side, and is connected to all the system announcements tracking code changes (loading, creating, compiling, etc...).\r\rEach instance handle the display of the overall tree in a GUI and an environment (a Refactoring Browser environment). The GUI is simply an AltTreeMorph instance and a PluggableTextMorph, and the context menus for both morphs. The instance reference a display tree based on AltTreeItemModel which is manipulated by the user interactively and also filtered by the refactoring environment associated with the instance (for example restricted to a package / a class / a set of selectors).\r\rThe instance is listening to events from the class to be able to update the relevant nodes for display. It also has an history (for navigation). It coordinates the building of context menus, shortcuts and a few user events (drag and drop). It has utility functions to relate an abstract item, a node model and a node morph, because it is common to have to update the tree (or the display of a node) out of a change event on an item.\r\rStarting point for interesting code:\r- context menu building : #buildTextMenu:, #buildTreeMenu:\r- contextual key combinations : #updateTextKeymap, #updateTreeKeymap\r- drag and drop in the tree: #acceptDroppingMorph:event:inMorph:, ...\r- updating (for updates from the class about code change events)',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '436' ],		#self : OmReference [ '437' ],		#time : DateAndTime [ '2018-01-14T19:02:27.147987-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #AltBrowser\r\tinstanceVariableNames: \'source root history window treeMorph textMorph rbEnvironment finder finderUI toolbar commentMorph selection\'\r\tclassVariableNames: \'AltAnnouncer Categories Debug RecentPackages Root Temporary\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Core\''			},			#name : #AltBrowser,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltBrowser,						#isMetaSide : false					},					#name : #source,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltBrowser,						#isMetaSide : false					},					#name : #root,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltBrowser,						#isMetaSide : false					},					#name : #history,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltBrowser,						#isMetaSide : false					},					#name : #window,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltBrowser,						#isMetaSide : false					},					#name : #treeMorph,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltBrowser,						#isMetaSide : false					},					#name : #textMorph,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltBrowser,						#isMetaSide : false					},					#name : #rbEnvironment,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltBrowser,						#isMetaSide : false					},					#name : #finder,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltBrowser,						#isMetaSide : false					},					#name : #finderUI,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltBrowser,						#isMetaSide : false					},					#name : #toolbar,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltBrowser,						#isMetaSide : false					},					#name : #commentMorph,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltBrowser,						#isMetaSide : false					},					#name : #selection,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltBrowser class\r\tinstanceVariableNames: \'\''				},				#name : #'AltBrowser class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltBrowser,					#isMetaSide : false				},				#parent : @8,				#content : 'An AltBrowser is a complete alternative system browser, message list and finder.\r\rIt builds a representation of  the code structure as a abstract tree, out of AltAbstractNode, in the class side. That tree is kept on the class side, and is connected to all the system announcements tracking code changes (loading, creating, compiling, etc...).\r\rEach instance handle the display of the overall tree in a GUI and an environment (a Refactoring Browser environment). The GUI is simply an AltTreeMorph instance and a PluggableTextMorph, and the context menus for both morphs. The instance reference a display tree based on AltTreeItemModel which is manipulated by the user interactively and also filtered by the refactoring environment associated with the instance (for example restricted to a package / a class / a set of selectors).\r\rThe instance is listening to events from the class to be able to update the relevant nodes for display. It also has an history (for navigation). It coordinates the building of context menus, shortcuts and a few user events (drag and drop). It has utility functions to relate an abstract item, a node model and a node morph, because it is common to have to update the tree (or the display of a node) out of a change event on an item.\r\rStarting point for interesting code:\r- context menu building : #buildTextMenu:, #buildTreeMenu:\r- contextual key combinations : #updateTextKeymap, #updateTreeKeymap\r- drag and drop in the tree: #acceptDroppingMorph:event:inMorph:, ...\r- updating (for updates from the class about code change events)',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltBrowser,						#isMetaSide : false					},					#name : #AltAnnouncer,					#parent : @8				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltBrowser,						#isMetaSide : false					},					#name : #Categories,					#parent : @8				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltBrowser,						#isMetaSide : false					},					#name : #Debug,					#parent : @8				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltBrowser,						#isMetaSide : false					},					#name : #RecentPackages,					#parent : @8				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltBrowser,						#isMetaSide : false					},					#name : #Root,					#parent : @8				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltBrowser,						#isMetaSide : false					},					#name : #Temporary,					#parent : @8				}			],			#category : #Alt-Browser-Core,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '437' ],		#self : OmReference [ '438' ],		#time : DateAndTime [ '2018-01-14T19:02:27.153114-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltBrowser',				#traitCompositionSource : '{}',				#definitionSource : 'AltBrowser subclass: #AltMessageList\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltMessageList,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltMessageList class\r\tinstanceVariableNames: \'\''				},				#name : #'AltMessageList class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltMessageList,					#isMetaSide : false				},				#parent : @8,				#content : 'Done to handle that stupid message list tool API',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Done to handle that stupid message list tool API',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '438' ],		#self : OmReference [ '439' ],		#time : DateAndTime [ '2018-01-14T19:02:27.15686-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltBrowser',				#traitCompositionSource : '{}',				#definitionSource : 'AltBrowser subclass: #AltMessageList\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Core\''			},			#name : #AltMessageList,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltMessageList class\r\tinstanceVariableNames: \'\''				},				#name : #'AltMessageList class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltMessageList,					#isMetaSide : false				},				#parent : @8,				#content : 'Done to handle that stupid message list tool API',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Core,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '439' ],		#self : OmReference [ '440' ],		#time : DateAndTime [ '2018-01-14T19:02:27.161875-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #AltCommand\r\tinstanceVariableNames: \'target requestor\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltCommand,						#isMetaSide : false					},					#name : #target,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltCommand,						#isMetaSide : false					},					#name : #requestor,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'I am in charge of preparing and executing commands.\r\rI can take place in a menu and register as a keymapping tool.\r\rInstance Variables\r\trequestor:\t<Object>\tThe object sending the command.\r\ttarget:\t\t<Object>\tThe target (where the command is applied).\r\t\t\t\t\rRequestor and target are to be used accordingly to the application; subclass AlTreeCommand for effect.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I am in charge of preparing and executing commands.\r\rI can take place in a menu and register as a keymapping tool.\r\rInstance Variables\r\trequestor:\t<Object>\tThe object sending the command.\r\ttarget:\t\t<Object>\tThe target (where the command is applied).\r\t\t\t\t\rRequestor and target are to be used accordingly to the application; subclass AlTreeCommand for effect.',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '440' ],		#self : OmReference [ '441' ],		#time : DateAndTime [ '2018-01-14T19:02:27.163665-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpCategoryAddition {		#classCategoryName : #Alt-Browser-Commands,		#affectedPackageName : #Alt-Browser	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '441' ],		#self : OmReference [ '442' ],		#time : DateAndTime [ '2018-01-14T19:02:27.167049-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #AltCommand\r\tinstanceVariableNames: \'target requestor\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Commands\''			},			#name : #AltCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltCommand,						#isMetaSide : false					},					#name : #target,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltCommand,						#isMetaSide : false					},					#name : #requestor,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'I am in charge of preparing and executing commands.\r\rI can take place in a menu and register as a keymapping tool.\r\rInstance Variables\r\trequestor:\t<Object>\tThe object sending the command.\r\ttarget:\t\t<Object>\tThe target (where the command is applied).\r\t\t\t\t\rRequestor and target are to be used accordingly to the application; subclass AlTreeCommand for effect.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Commands,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '442' ],		#self : OmReference [ '443' ],		#time : DateAndTime [ '2018-01-14T19:02:27.183995-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltAcceptTextCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltAcceptTextCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltAcceptTextCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltAcceptTextCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltAcceptTextCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'An ABAcceptTextCommand is about accepting the text.\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'An ABAcceptTextCommand is about accepting the text.\r',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '443' ],		#self : OmReference [ '444' ],		#time : DateAndTime [ '2018-01-14T19:02:27.185729-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpCategoryAddition {		#classCategoryName : #Alt-Browser-Commands-Text,		#affectedPackageName : #Alt-Browser	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '444' ],		#self : OmReference [ '445' ],		#time : DateAndTime [ '2018-01-14T19:02:27.189084-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltAcceptTextCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Commands-Text\''			},			#name : #AltAcceptTextCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltAcceptTextCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltAcceptTextCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltAcceptTextCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'An ABAcceptTextCommand is about accepting the text.\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Commands-Text,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '445' ],		#self : OmReference [ '446' ],		#time : DateAndTime [ '2018-01-14T19:02:27.195614-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltAddProtocolCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltAddProtocolCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltAddProtocolCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltAddProtocolCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltAddProtocolCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'Add a method protocol to a class. Try to propose a limited set of usefull protocols from the superclass to choose from.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Add a method protocol to a class. Try to propose a limited set of usefull protocols from the superclass to choose from.',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '446' ],		#self : OmReference [ '447' ],		#time : DateAndTime [ '2018-01-14T19:02:27.199632-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltAddProtocolCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Commands\''			},			#name : #AltAddProtocolCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltAddProtocolCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltAddProtocolCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltAddProtocolCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'Add a method protocol to a class. Try to propose a limited set of usefull protocols from the superclass to choose from.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Commands,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '447' ],		#self : OmReference [ '448' ],		#time : DateAndTime [ '2018-01-14T19:02:27.204776-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltAddSystemCategoryCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltAddSystemCategoryCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltAddSystemCategoryCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltAddSystemCategoryCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltAddSystemCategoryCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'Add category : add a system category or a RPackageTag (depending on how you define it).\r\rUses the fact that creating a system category triggers the tag creation as well.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Add category : add a system category or a RPackageTag (depending on how you define it).\r\rUses the fact that creating a system category triggers the tag creation as well.',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '448' ],		#self : OmReference [ '449' ],		#time : DateAndTime [ '2018-01-14T19:02:27.209232-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltAddSystemCategoryCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Commands\''			},			#name : #AltAddSystemCategoryCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltAddSystemCategoryCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltAddSystemCategoryCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltAddSystemCategoryCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'Add category : add a system category or a RPackageTag (depending on how you define it).\r\rUses the fact that creating a system category triggers the tag creation as well.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Commands,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '449' ],		#self : OmReference [ '450' ],		#time : DateAndTime [ '2018-01-14T19:02:27.214142-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltAstNodeCommand\r\tinstanceVariableNames: \'astNode\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltAstNodeCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltAstNodeCommand,						#isMetaSide : false					},					#name : #astNode,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltAstNodeCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltAstNodeCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltAstNodeCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'An abstract class for a command linked to an ast node.\r\rInstance Variables\r\tastNode:\t\taRBNode\r\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'An abstract class for a command linked to an ast node.\r\rInstance Variables\r\tastNode:\t\taRBNode\r\r',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '450' ],		#self : OmReference [ '451' ],		#time : DateAndTime [ '2018-01-14T19:02:27.215756-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpCategoryAddition {		#classCategoryName : #Alt-Browser-Commands-AST,		#affectedPackageName : #Alt-Browser	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '451' ],		#self : OmReference [ '452' ],		#time : DateAndTime [ '2018-01-14T19:02:27.219115-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltAstNodeCommand\r\tinstanceVariableNames: \'astNode\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Commands-AST\''			},			#name : #AltAstNodeCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltAstNodeCommand,						#isMetaSide : false					},					#name : #astNode,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltAstNodeCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltAstNodeCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltAstNodeCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'An abstract class for a command linked to an ast node.\r\rInstance Variables\r\tastNode:\t\taRBNode\r\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Commands-AST,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '452' ],		#self : OmReference [ '453' ],		#time : DateAndTime [ '2018-01-14T19:02:27.225092-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltAstNodeCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltAstNodeCommand subclass: #AltBreakOnceCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltBreakOnceCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltBreakOnceCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltBreakOnceCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltBreakOnceCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'A once breakpoint',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'A once breakpoint',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '453' ],		#self : OmReference [ '454' ],		#time : DateAndTime [ '2018-01-14T19:02:27.228563-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltAstNodeCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltAstNodeCommand subclass: #AltBreakOnceCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Commands-AST\''			},			#name : #AltBreakOnceCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltBreakOnceCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltBreakOnceCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltBreakOnceCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'A once breakpoint',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Commands-AST,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '454' ],		#self : OmReference [ '455' ],		#time : DateAndTime [ '2018-01-14T19:02:27.233575-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltAstNodeCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltAstNodeCommand subclass: #AltBreakPointCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltBreakPointCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltBreakPointCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltBreakPointCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltBreakPointCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'Metalink-based breakpoint',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Metalink-based breakpoint',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '455' ],		#self : OmReference [ '456' ],		#time : DateAndTime [ '2018-01-14T19:02:27.23712-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltAstNodeCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltAstNodeCommand subclass: #AltBreakPointCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Commands-AST\''			},			#name : #AltBreakPointCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltBreakPointCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltBreakPointCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltBreakPointCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'Metalink-based breakpoint',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Commands-AST,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '456' ],		#self : OmReference [ '457' ],		#time : DateAndTime [ '2018-01-14T19:02:27.242941-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltAstNodeCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltAstNodeCommand subclass: #AltBreakWhenCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltBreakWhenCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltBreakWhenCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltBreakWhenCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltBreakWhenCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'Break when metalink',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Break when metalink',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '457' ],		#self : OmReference [ '458' ],		#time : DateAndTime [ '2018-01-14T19:02:27.246493-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltAstNodeCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltAstNodeCommand subclass: #AltBreakWhenCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Commands-AST\''			},			#name : #AltBreakWhenCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltBreakWhenCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltBreakWhenCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltBreakWhenCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'Break when metalink',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Commands-AST,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '458' ],		#self : OmReference [ '459' ],		#time : DateAndTime [ '2018-01-14T19:02:27.251296-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltAstNodeCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltAstNodeCommand subclass: #AltBrowseTextCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltBrowseTextCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltBrowseTextCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltBrowseTextCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltBrowseTextCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'An AltBrowseTextCommand is to browse a literal (a class?)\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'An AltBrowseTextCommand is to browse a literal (a class?)\r',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '459' ],		#self : OmReference [ '460' ],		#time : DateAndTime [ '2018-01-14T19:02:27.2561-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltAstNodeCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltAstNodeCommand subclass: #AltBrowseTextCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Commands-AST\''			},			#name : #AltBrowseTextCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltBrowseTextCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltBrowseTextCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltBrowseTextCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'An AltBrowseTextCommand is to browse a literal (a class?)\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Commands-AST,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '460' ],		#self : OmReference [ '461' ],		#time : DateAndTime [ '2018-01-14T19:02:27.28626-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltAstNodeCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltAstNodeCommand subclass: #AltImplementorsOfSymbolCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltImplementorsOfSymbolCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltImplementorsOfSymbolCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltImplementorsOfSymbolCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltImplementorsOfSymbolCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'Search for a symbol references (senders? implementors?)',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Search for a symbol references (senders? implementors?)',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '461' ],		#self : OmReference [ '462' ],		#time : DateAndTime [ '2018-01-14T19:02:27.29044-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltAstNodeCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltAstNodeCommand subclass: #AltImplementorsOfSymbolCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Commands-AST\''			},			#name : #AltImplementorsOfSymbolCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltImplementorsOfSymbolCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltImplementorsOfSymbolCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltImplementorsOfSymbolCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'Search for a symbol references (senders? implementors?)',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Commands-AST,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '462' ],		#self : OmReference [ '463' ],		#time : DateAndTime [ '2018-01-14T19:02:27.29801-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltAstNodeCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltAstNodeCommand subclass: #AltImplementorsOfTextCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltImplementorsOfTextCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltImplementorsOfTextCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltImplementorsOfTextCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltImplementorsOfTextCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'Browse all implementors of the selected selector.\r\rUnderway. Test a RBParser linkage.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Browse all implementors of the selected selector.\r\rUnderway. Test a RBParser linkage.',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '463' ],		#self : OmReference [ '464' ],		#time : DateAndTime [ '2018-01-14T19:02:27.302063-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltAstNodeCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltAstNodeCommand subclass: #AltImplementorsOfTextCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Commands-AST\''			},			#name : #AltImplementorsOfTextCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltImplementorsOfTextCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltImplementorsOfTextCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltImplementorsOfTextCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'Browse all implementors of the selected selector.\r\rUnderway. Test a RBParser linkage.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Commands-AST,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '464' ],		#self : OmReference [ '465' ],		#time : DateAndTime [ '2018-01-14T19:02:27.307124-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltAstNodeCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltAstNodeCommand subclass: #AltInstVarDefs\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltInstVarDefs,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltInstVarDefs class\r\tinstanceVariableNames: \'\''				},				#name : #'AltInstVarDefs class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltInstVarDefs,					#isMetaSide : false				},				#parent : @8,				#content : 'An AltInstVarDefs does a system navigation search for definitions of this variable.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'An AltInstVarDefs does a system navigation search for definitions of this variable.',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '465' ],		#self : OmReference [ '466' ],		#time : DateAndTime [ '2018-01-14T19:02:27.312007-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltAstNodeCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltAstNodeCommand subclass: #AltInstVarDefs\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Commands-AST\''			},			#name : #AltInstVarDefs,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltInstVarDefs class\r\tinstanceVariableNames: \'\''				},				#name : #'AltInstVarDefs class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltInstVarDefs,					#isMetaSide : false				},				#parent : @8,				#content : 'An AltInstVarDefs does a system navigation search for definitions of this variable.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Commands-AST,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '466' ],		#self : OmReference [ '467' ],		#time : DateAndTime [ '2018-01-14T19:02:27.316793-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltAstNodeCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltAstNodeCommand subclass: #AltInstVarRefs\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltInstVarRefs,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltInstVarRefs class\r\tinstanceVariableNames: \'\''				},				#name : #'AltInstVarRefs class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltInstVarRefs,					#isMetaSide : false				},				#parent : @8,				#content : 'Does an inst var refs on the selected variable node',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Does an inst var refs on the selected variable node',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '467' ],		#self : OmReference [ '468' ],		#time : DateAndTime [ '2018-01-14T19:02:27.320372-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltAstNodeCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltAstNodeCommand subclass: #AltInstVarRefs\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Commands-AST\''			},			#name : #AltInstVarRefs,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltInstVarRefs class\r\tinstanceVariableNames: \'\''				},				#name : #'AltInstVarRefs class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltInstVarRefs,					#isMetaSide : false				},				#parent : @8,				#content : 'Does an inst var refs on the selected variable node',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Commands-AST,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '468' ],		#self : OmReference [ '469' ],		#time : DateAndTime [ '2018-01-14T19:02:27.325343-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltAstNodeCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltAstNodeCommand subclass: #AltMethodDoItCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltMethodDoItCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltMethodDoItCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltMethodDoItCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltMethodDoItCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'I execute the method in the class I am refered to.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I execute the method in the class I am refered to.',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '469' ],		#self : OmReference [ '470' ],		#time : DateAndTime [ '2018-01-14T19:02:27.329875-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltAstNodeCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltAstNodeCommand subclass: #AltMethodDoItCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Commands-AST\''			},			#name : #AltMethodDoItCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltMethodDoItCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltMethodDoItCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltMethodDoItCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'I execute the method in the class I am refered to.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Commands-AST,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '470' ],		#self : OmReference [ '471' ],		#time : DateAndTime [ '2018-01-14T19:02:27.351756-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltAstNodeCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltAstNodeCommand subclass: #AltRBAstNodeCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltRBAstNodeCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltRBAstNodeCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltRBAstNodeCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltRBAstNodeCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'This class reuse the behavior of an AltRBCommand.\r\rMaybe the RB abstract stuff should be a trait?',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'This class reuse the behavior of an AltRBCommand.\r\rMaybe the RB abstract stuff should be a trait?',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '471' ],		#self : OmReference [ '472' ],		#time : DateAndTime [ '2018-01-14T19:02:27.35333-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpCategoryAddition {		#classCategoryName : #Alt-Browser-Commands-Refactoring,		#affectedPackageName : #Alt-Browser	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '472' ],		#self : OmReference [ '473' ],		#time : DateAndTime [ '2018-01-14T19:02:27.35662-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltAstNodeCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltAstNodeCommand subclass: #AltRBAstNodeCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Commands-Refactoring\''			},			#name : #AltRBAstNodeCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltRBAstNodeCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltRBAstNodeCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltRBAstNodeCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'This class reuse the behavior of an AltRBCommand.\r\rMaybe the RB abstract stuff should be a trait?',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Commands-Refactoring,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '473' ],		#self : OmReference [ '474' ],		#time : DateAndTime [ '2018-01-14T19:02:27.36399-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltRBAstNodeCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltRBAstNodeCommand subclass: #AltRBInstVarAccessorCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltRBInstVarAccessorCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltRBInstVarAccessorCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltRBInstVarAccessorCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltRBInstVarAccessorCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'This command does an accessor creation',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'This command does an accessor creation',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '474' ],		#self : OmReference [ '475' ],		#time : DateAndTime [ '2018-01-14T19:02:27.367927-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltRBAstNodeCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltRBAstNodeCommand subclass: #AltRBInstVarAccessorCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Commands-Refactoring\''			},			#name : #AltRBInstVarAccessorCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltRBInstVarAccessorCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltRBInstVarAccessorCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltRBInstVarAccessorCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'This command does an accessor creation',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Commands-Refactoring,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '475' ],		#self : OmReference [ '476' ],		#time : DateAndTime [ '2018-01-14T19:02:27.373091-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltRBAstNodeCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltRBAstNodeCommand subclass: #AltRBInstVarPullUpCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltRBInstVarPullUpCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltRBInstVarPullUpCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltRBInstVarPullUpCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltRBInstVarPullUpCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'Does a RBPullUpInstanceVariableCommand\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Does a RBPullUpInstanceVariableCommand\r',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '476' ],		#self : OmReference [ '477' ],		#time : DateAndTime [ '2018-01-14T19:02:27.377787-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltRBAstNodeCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltRBAstNodeCommand subclass: #AltRBInstVarPullUpCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Commands-Refactoring\''			},			#name : #AltRBInstVarPullUpCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltRBInstVarPullUpCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltRBInstVarPullUpCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltRBInstVarPullUpCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'Does a RBPullUpInstanceVariableCommand\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Commands-Refactoring,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '477' ],		#self : OmReference [ '478' ],		#time : DateAndTime [ '2018-01-14T19:02:27.382678-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltRBAstNodeCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltRBAstNodeCommand subclass: #AltRBInstVarPushDownCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltRBInstVarPushDownCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltRBInstVarPushDownCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltRBInstVarPushDownCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltRBInstVarPushDownCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'Does a RBPushDownInstanceVariable',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Does a RBPushDownInstanceVariable',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '478' ],		#self : OmReference [ '479' ],		#time : DateAndTime [ '2018-01-14T19:02:27.386423-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltRBAstNodeCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltRBAstNodeCommand subclass: #AltRBInstVarPushDownCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Commands-Refactoring\''			},			#name : #AltRBInstVarPushDownCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltRBInstVarPushDownCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltRBInstVarPushDownCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltRBInstVarPushDownCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'Does a RBPushDownInstanceVariable',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Commands-Refactoring,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '479' ],		#self : OmReference [ '480' ],		#time : DateAndTime [ '2018-01-14T19:02:27.391187-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltRBAstNodeCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltRBAstNodeCommand subclass: #AltRBInstVarRenameCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltRBInstVarRenameCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltRBInstVarRenameCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltRBInstVarRenameCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltRBInstVarRenameCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'Does a RBRenameInstanceVariableRefactoring',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Does a RBRenameInstanceVariableRefactoring',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '480' ],		#self : OmReference [ '481' ],		#time : DateAndTime [ '2018-01-14T19:02:27.394938-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltRBAstNodeCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltRBAstNodeCommand subclass: #AltRBInstVarRenameCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Commands-Refactoring\''			},			#name : #AltRBInstVarRenameCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltRBInstVarRenameCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltRBInstVarRenameCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltRBInstVarRenameCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'Does a RBRenameInstanceVariableRefactoring',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Commands-Refactoring,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '481' ],		#self : OmReference [ '482' ],		#time : DateAndTime [ '2018-01-14T19:02:27.408567-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltRBAstNodeCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltRBAstNodeCommand subclass: #AltRBRemoveClassVariableCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltRBRemoveClassVariableCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltRBRemoveClassVariableCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltRBRemoveClassVariableCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltRBRemoveClassVariableCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'Call RBRemoveClassVariableRefactoring',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Call RBRemoveClassVariableRefactoring',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '482' ],		#self : OmReference [ '483' ],		#time : DateAndTime [ '2018-01-14T19:02:27.414837-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltRBAstNodeCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltRBAstNodeCommand subclass: #AltRBRemoveClassVariableCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Commands-Refactoring\''			},			#name : #AltRBRemoveClassVariableCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltRBRemoveClassVariableCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltRBRemoveClassVariableCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltRBRemoveClassVariableCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'Call RBRemoveClassVariableRefactoring',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Commands-Refactoring,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '483' ],		#self : OmReference [ '484' ],		#time : DateAndTime [ '2018-01-14T19:02:27.419841-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltRBAstNodeCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltRBAstNodeCommand subclass: #AltRBRemoveInstanceVariableCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltRBRemoveInstanceVariableCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltRBRemoveInstanceVariableCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltRBRemoveInstanceVariableCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltRBRemoveInstanceVariableCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'Call RBRemoveInstanceVariableRefactoring',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Call RBRemoveInstanceVariableRefactoring',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '484' ],		#self : OmReference [ '485' ],		#time : DateAndTime [ '2018-01-14T19:02:27.423778-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltRBAstNodeCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltRBAstNodeCommand subclass: #AltRBRemoveInstanceVariableCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Commands-Refactoring\''			},			#name : #AltRBRemoveInstanceVariableCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltRBRemoveInstanceVariableCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltRBRemoveInstanceVariableCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltRBRemoveInstanceVariableCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'Call RBRemoveInstanceVariableRefactoring',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Commands-Refactoring,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '485' ],		#self : OmReference [ '486' ],		#time : DateAndTime [ '2018-01-14T19:02:27.429142-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltRBAstNodeCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltRBAstNodeCommand subclass: #AltRBTemporaryRenameCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltRBTemporaryRenameCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltRBTemporaryRenameCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltRBTemporaryRenameCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltRBTemporaryRenameCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'Temporary variable rename in a method (RBRenameTemporaryRefactoring)\r\rNote 1 : the Refactoring API is ugly. What, have to give the interval of the temporary var in the method source ? This forces the command to reparse, whereas we are already in posession of the right ast node.\r\rNote 2 : the refactoring could be done on any ast, which would allow one to do it during editing. But the refactoring command does not allow for it.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Temporary variable rename in a method (RBRenameTemporaryRefactoring)\r\rNote 1 : the Refactoring API is ugly. What, have to give the interval of the temporary var in the method source ? This forces the command to reparse, whereas we are already in posession of the right ast node.\r\rNote 2 : the refactoring could be done on any ast, which would allow one to do it during editing. But the refactoring command does not allow for it.',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '486' ],		#self : OmReference [ '487' ],		#time : DateAndTime [ '2018-01-14T19:02:27.43275-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltRBAstNodeCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltRBAstNodeCommand subclass: #AltRBTemporaryRenameCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Commands-Refactoring\''			},			#name : #AltRBTemporaryRenameCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltRBTemporaryRenameCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltRBTemporaryRenameCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltRBTemporaryRenameCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'Temporary variable rename in a method (RBRenameTemporaryRefactoring)\r\rNote 1 : the Refactoring API is ugly. What, have to give the interval of the temporary var in the method source ? This forces the command to reparse, whereas we are already in posession of the right ast node.\r\rNote 2 : the refactoring could be done on any ast, which would allow one to do it during editing. But the refactoring command does not allow for it.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Commands-Refactoring,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '487' ],		#self : OmReference [ '488' ],		#time : DateAndTime [ '2018-01-14T19:02:27.438573-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltAstNodeCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltAstNodeCommand subclass: #AltSendersOfSymbolCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltSendersOfSymbolCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltSendersOfSymbolCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltSendersOfSymbolCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltSendersOfSymbolCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'Search for a symbol uses (senders)',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Search for a symbol uses (senders)',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '488' ],		#self : OmReference [ '489' ],		#time : DateAndTime [ '2018-01-14T19:02:27.442084-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltAstNodeCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltAstNodeCommand subclass: #AltSendersOfSymbolCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Commands-AST\''			},			#name : #AltSendersOfSymbolCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltSendersOfSymbolCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltSendersOfSymbolCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltSendersOfSymbolCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'Search for a symbol uses (senders)',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Commands-AST,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '489' ],		#self : OmReference [ '490' ],		#time : DateAndTime [ '2018-01-14T19:02:27.447768-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltAstNodeCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltAstNodeCommand subclass: #AltSendersTextCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltSendersTextCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltSendersTextCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltSendersTextCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltSendersTextCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'Browse all senders of the selected selector.\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Browse all senders of the selected selector.\r',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '490' ],		#self : OmReference [ '491' ],		#time : DateAndTime [ '2018-01-14T19:02:27.451718-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltAstNodeCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltAstNodeCommand subclass: #AltSendersTextCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Commands-AST\''			},			#name : #AltSendersTextCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltSendersTextCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltSendersTextCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltSendersTextCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'Browse all senders of the selected selector.\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Commands-AST,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '491' ],		#self : OmReference [ '492' ],		#time : DateAndTime [ '2018-01-14T19:02:27.456774-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltAstNodeCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltAstNodeCommand subclass: #AltWatchpointCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltWatchpointCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltWatchpointCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltWatchpointCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltWatchpointCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'I implement the add a watchpoint command',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I implement the add a watchpoint command',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '492' ],		#self : OmReference [ '493' ],		#time : DateAndTime [ '2018-01-14T19:02:27.460324-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltAstNodeCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltAstNodeCommand subclass: #AltWatchpointCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Watchpoints\''			},			#name : #AltWatchpointCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltWatchpointCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltWatchpointCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltWatchpointCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'I implement the add a watchpoint command',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Watchpoints,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '493' ],		#self : OmReference [ '494' ],		#time : DateAndTime [ '2018-01-14T19:02:27.465066-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltBrowseVersionsCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltBrowseVersionsCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltBrowseVersionsCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltBrowseVersionsCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltBrowseVersionsCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'This command opens a version browser on a method.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'This command opens a version browser on a method.',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '494' ],		#self : OmReference [ '495' ],		#time : DateAndTime [ '2018-01-14T19:02:27.468734-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltBrowseVersionsCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Commands\''			},			#name : #AltBrowseVersionsCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltBrowseVersionsCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltBrowseVersionsCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltBrowseVersionsCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'This command opens a version browser on a method.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Commands,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '495' ],		#self : OmReference [ '496' ],		#time : DateAndTime [ '2018-01-14T19:02:27.474556-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltCancelTextCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltCancelTextCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltCancelTextCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltCancelTextCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltCancelTextCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'An ABCancelTextCommand is about cancelling the last action.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'An ABCancelTextCommand is about cancelling the last action.',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '496' ],		#self : OmReference [ '497' ],		#time : DateAndTime [ '2018-01-14T19:02:27.478063-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltCancelTextCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Commands-Text\''			},			#name : #AltCancelTextCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltCancelTextCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltCancelTextCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltCancelTextCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'An ABCancelTextCommand is about cancelling the last action.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Commands-Text,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '497' ],		#self : OmReference [ '498' ],		#time : DateAndTime [ '2018-01-14T19:02:27.491863-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltClassFileOutCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltClassFileOutCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltClassFileOutCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltClassFileOutCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltClassFileOutCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'FileOut a class',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'FileOut a class',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '498' ],		#self : OmReference [ '499' ],		#time : DateAndTime [ '2018-01-14T19:02:27.497106-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltClassFileOutCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Commands\''			},			#name : #AltClassFileOutCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltClassFileOutCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltClassFileOutCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltClassFileOutCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'FileOut a class',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Commands,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '499' ],		#self : OmReference [ '500' ],		#time : DateAndTime [ '2018-01-14T19:02:27.503453-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltClassHierarchyCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltClassHierarchyCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltClassHierarchyCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltClassHierarchyCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltClassHierarchyCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'Opens a browser on the hierarchy view of the class.\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Opens a browser on the hierarchy view of the class.\r',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '500' ],		#self : OmReference [ '501' ],		#time : DateAndTime [ '2018-01-14T19:02:27.507237-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltClassHierarchyCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Commands\''			},			#name : #AltClassHierarchyCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltClassHierarchyCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltClassHierarchyCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltClassHierarchyCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'Opens a browser on the hierarchy view of the class.\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Commands,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '501' ],		#self : OmReference [ '502' ],		#time : DateAndTime [ '2018-01-14T19:02:27.512555-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltClassRefsCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltClassRefsCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltClassRefsCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltClassRefsCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltClassRefsCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'Browse all references to a global (classes)',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Browse all references to a global (classes)',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '502' ],		#self : OmReference [ '503' ],		#time : DateAndTime [ '2018-01-14T19:02:27.517266-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltClassRefsCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Commands\''			},			#name : #AltClassRefsCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltClassRefsCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltClassRefsCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltClassRefsCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'Browse all references to a global (classes)',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Commands,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '503' ],		#self : OmReference [ '504' ],		#time : DateAndTime [ '2018-01-14T19:02:27.522929-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltCopyTextCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltCopyTextCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltCopyTextCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltCopyTextCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltCopyTextCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'This class does a copy on the text area.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'This class does a copy on the text area.',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '504' ],		#self : OmReference [ '505' ],		#time : DateAndTime [ '2018-01-14T19:02:27.526507-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltCopyTextCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Commands-Text\''			},			#name : #AltCopyTextCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltCopyTextCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltCopyTextCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltCopyTextCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'This class does a copy on the text area.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Commands-Text,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '505' ],		#self : OmReference [ '506' ],		#time : DateAndTime [ '2018-01-14T19:02:27.531386-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltCreatePackageCategoryCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltCreatePackageCategoryCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltCreatePackageCategoryCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltCreatePackageCategoryCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltCreatePackageCategoryCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'This class prompts for a name and creates a category at top level.\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'This class prompts for a name and creates a category at top level.\r',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '506' ],		#self : OmReference [ '507' ],		#time : DateAndTime [ '2018-01-14T19:02:27.537243-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltCreatePackageCategoryCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Commands\''			},			#name : #AltCreatePackageCategoryCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltCreatePackageCategoryCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltCreatePackageCategoryCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltCreatePackageCategoryCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'This class prompts for a name and creates a category at top level.\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Commands,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '507' ],		#self : OmReference [ '508' ],		#time : DateAndTime [ '2018-01-14T19:02:27.543807-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltCutCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltCutCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltCutCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltCutCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltCutCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'This command starts a move, different from a delete. It\'s focusing on giving the same behavior as the cut / paste of file browsers.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'This command starts a move, different from a delete. It\'s focusing on giving the same behavior as the cut / paste of file browsers.',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '508' ],		#self : OmReference [ '509' ],		#time : DateAndTime [ '2018-01-14T19:02:27.551295-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltCutCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Commands\''			},			#name : #AltCutCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltCutCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltCutCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltCutCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'This command starts a move, different from a delete. It\'s focusing on giving the same behavior as the cut / paste of file browsers.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Commands,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '509' ],		#self : OmReference [ '510' ],		#time : DateAndTime [ '2018-01-14T19:02:27.558434-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltCutTextCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltCutTextCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltCutTextCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltCutTextCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltCutTextCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'This class does a cut in the text area.\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'This class does a cut in the text area.\r',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '510' ],		#self : OmReference [ '511' ],		#time : DateAndTime [ '2018-01-14T19:02:27.563292-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltCutTextCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Commands-Text\''			},			#name : #AltCutTextCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltCutTextCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltCutTextCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltCutTextCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'This class does a cut in the text area.\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Commands-Text,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '511' ],		#self : OmReference [ '512' ],		#time : DateAndTime [ '2018-01-14T19:02:27.576446-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltDebugTestCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltDebugTestCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltDebugTestCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltDebugTestCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltDebugTestCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'This command run the related test, if the selected method is apparently a test.\r\rIs active if the selected item class inherits from TestCase. Is enabled if the method start by \'test\'.\r\rDoes not run the test, but debug it. Is a more convenient way of running the test by hand, and avoid, as it is the case in Nautilus and OmniBrowser, to have two tests runs if it fails (and, in some cases, twice the effect of running the test).',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'This command run the related test, if the selected method is apparently a test.\r\rIs active if the selected item class inherits from TestCase. Is enabled if the method start by \'test\'.\r\rDoes not run the test, but debug it. Is a more convenient way of running the test by hand, and avoid, as it is the case in Nautilus and OmniBrowser, to have two tests runs if it fails (and, in some cases, twice the effect of running the test).',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '512' ],		#self : OmReference [ '513' ],		#time : DateAndTime [ '2018-01-14T19:02:27.581364-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltDebugTestCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Commands\''			},			#name : #AltDebugTestCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltDebugTestCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltDebugTestCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltDebugTestCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'This command run the related test, if the selected method is apparently a test.\r\rIs active if the selected item class inherits from TestCase. Is enabled if the method start by \'test\'.\r\rDoes not run the test, but debug it. Is a more convenient way of running the test by hand, and avoid, as it is the case in Nautilus and OmniBrowser, to have two tests runs if it fails (and, in some cases, twice the effect of running the test).',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Commands,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '513' ],		#self : OmReference [ '514' ],		#time : DateAndTime [ '2018-01-14T19:02:27.586902-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltDoItTextCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltDoItTextCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltDoItTextCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltDoItTextCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltDoItTextCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'ABDoItTextCommand : execute the code selected\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'ABDoItTextCommand : execute the code selected\r',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '514' ],		#self : OmReference [ '515' ],		#time : DateAndTime [ '2018-01-14T19:02:27.590772-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltDoItTextCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Commands-Text\''			},			#name : #AltDoItTextCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltDoItTextCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltDoItTextCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltDoItTextCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'ABDoItTextCommand : execute the code selected\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Commands-Text,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '515' ],		#self : OmReference [ '516' ],		#time : DateAndTime [ '2018-01-14T19:02:27.596045-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltDoItTextCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltDoItTextCommand subclass: #AltDebugItTextCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltDebugItTextCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltDebugItTextCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltDebugItTextCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltDebugItTextCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'This class does a debugIt on the selection in the text area.\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'This class does a debugIt on the selection in the text area.\r',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '516' ],		#self : OmReference [ '517' ],		#time : DateAndTime [ '2018-01-14T19:02:27.600525-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltDoItTextCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltDoItTextCommand subclass: #AltDebugItTextCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Commands-Text\''			},			#name : #AltDebugItTextCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltDebugItTextCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltDebugItTextCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltDebugItTextCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'This class does a debugIt on the selection in the text area.\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Commands-Text,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '517' ],		#self : OmReference [ '518' ],		#time : DateAndTime [ '2018-01-14T19:02:27.605669-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltDoItTextCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltDoItTextCommand subclass: #AltInspectItTextCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltInspectItTextCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltInspectItTextCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltInspectItTextCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltInspectItTextCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'This class does an inspectIt (evaluate and inspect the result) on the selection in the text area.\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'This class does an inspectIt (evaluate and inspect the result) on the selection in the text area.\r',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '518' ],		#self : OmReference [ '519' ],		#time : DateAndTime [ '2018-01-14T19:02:27.608759-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltDoItTextCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltDoItTextCommand subclass: #AltInspectItTextCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Commands-Text\''			},			#name : #AltInspectItTextCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltInspectItTextCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltInspectItTextCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltInspectItTextCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'This class does an inspectIt (evaluate and inspect the result) on the selection in the text area.\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Commands-Text,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '519' ],		#self : OmReference [ '520' ],		#time : DateAndTime [ '2018-01-14T19:02:27.613045-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltDoItTextCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltDoItTextCommand subclass: #AltPrintItTextCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltPrintItTextCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltPrintItTextCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltPrintItTextCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltPrintItTextCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'This command does a printIt (evaluate and print the result) on the selection in the text area.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'This command does a printIt (evaluate and print the result) on the selection in the text area.',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '520' ],		#self : OmReference [ '521' ],		#time : DateAndTime [ '2018-01-14T19:02:27.616598-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltDoItTextCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltDoItTextCommand subclass: #AltPrintItTextCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Commands-Text\''			},			#name : #AltPrintItTextCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltPrintItTextCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltPrintItTextCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltPrintItTextCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'This command does a printIt (evaluate and print the result) on the selection in the text area.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Commands-Text,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '521' ],		#self : OmReference [ '522' ],		#time : DateAndTime [ '2018-01-14T19:02:27.621113-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltEncloseTextCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltEncloseTextCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltEncloseTextCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltEncloseTextCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltEncloseTextCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'I represent the #enclose: command. Each of my subclass handle one type of enclosing character, and is free to change the way enclosing is done.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I represent the #enclose: command. Each of my subclass handle one type of enclosing character, and is free to change the way enclosing is done.',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '522' ],		#self : OmReference [ '523' ],		#time : DateAndTime [ '2018-01-14T19:02:27.624216-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltEncloseTextCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Commands-Text\''			},			#name : #AltEncloseTextCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltEncloseTextCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltEncloseTextCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltEncloseTextCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'I represent the #enclose: command. Each of my subclass handle one type of enclosing character, and is free to change the way enclosing is done.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Commands-Text,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '523' ],		#self : OmReference [ '524' ],		#time : DateAndTime [ '2018-01-14T19:02:27.628559-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltEncloseTextCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltEncloseTextCommand subclass: #AltCurlyBracketsTextCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltCurlyBracketsTextCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltCurlyBracketsTextCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltCurlyBracketsTextCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltCurlyBracketsTextCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'I do the {  }.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I do the {  }.',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '524' ],		#self : OmReference [ '525' ],		#time : DateAndTime [ '2018-01-14T19:02:27.633768-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltEncloseTextCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltEncloseTextCommand subclass: #AltCurlyBracketsTextCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Commands-Text\''			},			#name : #AltCurlyBracketsTextCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltCurlyBracketsTextCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltCurlyBracketsTextCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltCurlyBracketsTextCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'I do the {  }.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Commands-Text,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '525' ],		#self : OmReference [ '526' ],		#time : DateAndTime [ '2018-01-14T19:02:27.638171-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltEncloseTextCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltEncloseTextCommand subclass: #AltDoubleQuotesTextCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltDoubleQuotesTextCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltDoubleQuotesTextCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltDoubleQuotesTextCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltDoubleQuotesTextCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'I do the "" enclosing',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I do the "" enclosing',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '526' ],		#self : OmReference [ '527' ],		#time : DateAndTime [ '2018-01-14T19:02:27.641263-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltEncloseTextCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltEncloseTextCommand subclass: #AltDoubleQuotesTextCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Commands-Text\''			},			#name : #AltDoubleQuotesTextCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltDoubleQuotesTextCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltDoubleQuotesTextCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltDoubleQuotesTextCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'I do the "" enclosing',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Commands-Text,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '527' ],		#self : OmReference [ '528' ],		#time : DateAndTime [ '2018-01-14T19:02:27.653286-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltEncloseTextCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltEncloseTextCommand subclass: #AltParenthesisTextCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltParenthesisTextCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltParenthesisTextCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltParenthesisTextCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltParenthesisTextCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'I implement the smart parenthesis thing',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I implement the smart parenthesis thing',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '528' ],		#self : OmReference [ '529' ],		#time : DateAndTime [ '2018-01-14T19:02:27.656541-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltEncloseTextCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltEncloseTextCommand subclass: #AltParenthesisTextCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Commands-Text\''			},			#name : #AltParenthesisTextCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltParenthesisTextCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltParenthesisTextCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltParenthesisTextCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'I implement the smart parenthesis thing',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Commands-Text,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '529' ],		#self : OmReference [ '530' ],		#time : DateAndTime [ '2018-01-14T19:02:27.660972-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltEncloseTextCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltEncloseTextCommand subclass: #AltSquareBracketsTextCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltSquareBracketsTextCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltSquareBracketsTextCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltSquareBracketsTextCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltSquareBracketsTextCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'I do the [  ] enclosing.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I do the [  ] enclosing.',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '530' ],		#self : OmReference [ '531' ],		#time : DateAndTime [ '2018-01-14T19:02:27.665289-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltEncloseTextCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltEncloseTextCommand subclass: #AltSquareBracketsTextCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Commands-Text\''			},			#name : #AltSquareBracketsTextCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltSquareBracketsTextCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltSquareBracketsTextCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltSquareBracketsTextCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'I do the [  ] enclosing.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Commands-Text,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '531' ],		#self : OmReference [ '532' ],		#time : DateAndTime [ '2018-01-14T19:02:27.672424-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltExpandCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltExpandCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltExpandCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltExpandCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltExpandCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'This command is keyboard only and expands a node.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'This command is keyboard only and expands a node.',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '532' ],		#self : OmReference [ '533' ],		#time : DateAndTime [ '2018-01-14T19:02:27.675589-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltExpandCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Commands\''			},			#name : #AltExpandCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltExpandCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltExpandCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltExpandCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'This command is keyboard only and expands a node.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Commands,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '533' ],		#self : OmReference [ '534' ],		#time : DateAndTime [ '2018-01-14T19:02:27.680581-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltExploreItemCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltExploreItemCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltExploreItemCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltExploreItemCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltExploreItemCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'An ABExploreItemCommand does an explore of the selected item in the tree pane.\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'An ABExploreItemCommand does an explore of the selected item in the tree pane.\r',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '534' ],		#self : OmReference [ '535' ],		#time : DateAndTime [ '2018-01-14T19:02:27.68397-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltExploreItemCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Commands\''			},			#name : #AltExploreItemCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltExploreItemCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltExploreItemCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltExploreItemCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'An ABExploreItemCommand does an explore of the selected item in the tree pane.\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Commands,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '535' ],		#self : OmReference [ '536' ],		#time : DateAndTime [ '2018-01-14T19:02:27.688245-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltFindClassCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltFindClassCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltFindClassCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltFindClassCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltFindClassCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'This command does a find class. Use an openPath approach.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'This command does a find class. Use an openPath approach.',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '536' ],		#self : OmReference [ '537' ],		#time : DateAndTime [ '2018-01-14T19:02:27.691308-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltFindClassCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Commands\''			},			#name : #AltFindClassCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltFindClassCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltFindClassCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltFindClassCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'This command does a find class. Use an openPath approach.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Commands,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '537' ],		#self : OmReference [ '538' ],		#time : DateAndTime [ '2018-01-14T19:02:27.695568-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltFinderCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltFinderCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltFinderCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltFinderCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltFinderCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'Get the finder GUI to appear or disappear (toggle)',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Get the finder GUI to appear or disappear (toggle)',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '538' ],		#self : OmReference [ '539' ],		#time : DateAndTime [ '2018-01-14T19:02:27.701058-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltFinderCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Commands\''			},			#name : #AltFinderCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltFinderCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltFinderCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltFinderCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'Get the finder GUI to appear or disappear (toggle)',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Commands,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '539' ],		#self : OmReference [ '540' ],		#time : DateAndTime [ '2018-01-14T19:02:27.720223-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltFinderCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltFinderCommand subclass: #AltFinderOffCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltFinderOffCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltFinderOffCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltFinderOffCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltFinderOffCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'An AltFinderOffCommand to toggle the finder UI off, Escape key, no menu entry, active only with the finder on.\r\rShows how to have a keyboard only, active on condition, command.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'An AltFinderOffCommand to toggle the finder UI off, Escape key, no menu entry, active only with the finder on.\r\rShows how to have a keyboard only, active on condition, command.',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '540' ],		#self : OmReference [ '541' ],		#time : DateAndTime [ '2018-01-14T19:02:27.723358-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltFinderCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltFinderCommand subclass: #AltFinderOffCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Commands\''			},			#name : #AltFinderOffCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltFinderOffCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltFinderOffCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltFinderOffCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'An AltFinderOffCommand to toggle the finder UI off, Escape key, no menu entry, active only with the finder on.\r\rShows how to have a keyboard only, active on condition, command.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Commands,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '541' ],		#self : OmReference [ '542' ],		#time : DateAndTime [ '2018-01-14T19:02:27.727726-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltGoToSubclassCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltGoToSubclassCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltGoToSubclassCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltGoToSubclassCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltGoToSubclassCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'This command brings you to the first subclass of a class\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'This command brings you to the first subclass of a class\r',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '542' ],		#self : OmReference [ '543' ],		#time : DateAndTime [ '2018-01-14T19:02:27.730993-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltGoToSubclassCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Commands\''			},			#name : #AltGoToSubclassCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltGoToSubclassCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltGoToSubclassCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltGoToSubclassCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'This command brings you to the first subclass of a class\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Commands,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '543' ],		#self : OmReference [ '544' ],		#time : DateAndTime [ '2018-01-14T19:02:27.736345-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltGoToSuperMethodCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltGoToSuperMethodCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltGoToSuperMethodCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltGoToSuperMethodCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltGoToSuperMethodCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'This class does a navigation move to a superclass method of the same name (overridden then by the current one)',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'This class does a navigation move to a superclass method of the same name (overridden then by the current one)',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '544' ],		#self : OmReference [ '545' ],		#time : DateAndTime [ '2018-01-14T19:02:27.739625-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltGoToSuperMethodCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Commands\''			},			#name : #AltGoToSuperMethodCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltGoToSuperMethodCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltGoToSuperMethodCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltGoToSuperMethodCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'This class does a navigation move to a superclass method of the same name (overridden then by the current one)',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Commands,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '545' ],		#self : OmReference [ '546' ],		#time : DateAndTime [ '2018-01-14T19:02:27.746294-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltGoToSuperclassCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltGoToSuperclassCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltGoToSuperclassCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltGoToSuperclassCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltGoToSuperclassCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'This command moves the selection to the superclass.\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'This command moves the selection to the superclass.\r',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '546' ],		#self : OmReference [ '547' ],		#time : DateAndTime [ '2018-01-14T19:02:27.749517-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltGoToSuperclassCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Commands\''			},			#name : #AltGoToSuperclassCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltGoToSuperclassCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltGoToSuperclassCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltGoToSuperclassCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'This command moves the selection to the superclass.\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Commands,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '547' ],		#self : OmReference [ '548' ],		#time : DateAndTime [ '2018-01-14T19:02:27.753853-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltImplementorsOfCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltImplementorsOfCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltImplementorsOfCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltImplementorsOfCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltImplementorsOfCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'Return the implementors of a selection',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Return the implementors of a selection',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '548' ],		#self : OmReference [ '549' ],		#time : DateAndTime [ '2018-01-14T19:02:27.757821-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltImplementorsOfCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Commands\''			},			#name : #AltImplementorsOfCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltImplementorsOfCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltImplementorsOfCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltImplementorsOfCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'Return the implementors of a selection',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Commands,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '549' ],		#self : OmReference [ '550' ],		#time : DateAndTime [ '2018-01-14T19:02:27.762154-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltInspectMethodASTCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltInspectMethodASTCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltInspectMethodASTCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltInspectMethodASTCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltInspectMethodASTCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'This command is for debugging purposes, it opens an explorator on the method ast.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'This command is for debugging purposes, it opens an explorator on the method ast.',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '550' ],		#self : OmReference [ '551' ],		#time : DateAndTime [ '2018-01-14T19:02:27.76527-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltInspectMethodASTCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Commands\''			},			#name : #AltInspectMethodASTCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltInspectMethodASTCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltInspectMethodASTCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltInspectMethodASTCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'This command is for debugging purposes, it opens an explorator on the method ast.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Commands,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '551' ],		#self : OmReference [ '552' ],		#time : DateAndTime [ '2018-01-14T19:02:27.788957-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltMetacelloFetchProject\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltMetacelloFetchProject,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltMetacelloFetchProject class\r\tinstanceVariableNames: \'\''				},				#name : #'AltMetacelloFetchProject class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltMetacelloFetchProject,					#isMetaSide : false				},				#parent : @8,				#content : 'I do a metacello fetch for a project',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I do a metacello fetch for a project',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '552' ],		#self : OmReference [ '553' ],		#time : DateAndTime [ '2018-01-14T19:02:27.790442-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpCategoryAddition {		#classCategoryName : #Alt-Browser-Commands-Metacello,		#affectedPackageName : #Alt-Browser	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '553' ],		#self : OmReference [ '554' ],		#time : DateAndTime [ '2018-01-14T19:02:27.795099-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltMetacelloFetchProject\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Commands-Metacello\''			},			#name : #AltMetacelloFetchProject,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltMetacelloFetchProject class\r\tinstanceVariableNames: \'\''				},				#name : #'AltMetacelloFetchProject class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltMetacelloFetchProject,					#isMetaSide : false				},				#parent : @8,				#content : 'I do a metacello fetch for a project',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Commands-Metacello,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '554' ],		#self : OmReference [ '555' ],		#time : DateAndTime [ '2018-01-14T19:02:27.800843-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltMetacelloGetProject\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltMetacelloGetProject,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltMetacelloGetProject class\r\tinstanceVariableNames: \'\''				},				#name : #'AltMetacelloGetProject class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltMetacelloGetProject,					#isMetaSide : false				},				#parent : @8,				#content : 'Do a metacello get on the project',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Do a metacello get on the project',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '555' ],		#self : OmReference [ '556' ],		#time : DateAndTime [ '2018-01-14T19:02:27.804388-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltMetacelloGetProject\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Commands-Metacello\''			},			#name : #AltMetacelloGetProject,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltMetacelloGetProject class\r\tinstanceVariableNames: \'\''				},				#name : #'AltMetacelloGetProject class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltMetacelloGetProject,					#isMetaSide : false				},				#parent : @8,				#content : 'Do a metacello get on the project',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Commands-Metacello,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '556' ],		#self : OmReference [ '557' ],		#time : DateAndTime [ '2018-01-14T19:02:27.808936-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltMetacelloLockProject\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltMetacelloLockProject,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltMetacelloLockProject class\r\tinstanceVariableNames: \'\''				},				#name : #'AltMetacelloLockProject class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltMetacelloLockProject,					#isMetaSide : false				},				#parent : @8,				#content : 'I represent the lock / unlock status of the project',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I represent the lock / unlock status of the project',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '557' ],		#self : OmReference [ '558' ],		#time : DateAndTime [ '2018-01-14T19:02:27.812199-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltMetacelloLockProject\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Commands-Metacello\''			},			#name : #AltMetacelloLockProject,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltMetacelloLockProject class\r\tinstanceVariableNames: \'\''				},				#name : #'AltMetacelloLockProject class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltMetacelloLockProject,					#isMetaSide : false				},				#parent : @8,				#content : 'I represent the lock / unlock status of the project',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Commands-Metacello,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '558' ],		#self : OmReference [ '559' ],		#time : DateAndTime [ '2018-01-14T19:02:27.81733-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltMetacelloSaveProject\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltMetacelloSaveProject,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltMetacelloSaveProject class\r\tinstanceVariableNames: \'\''				},				#name : #'AltMetacelloSaveProject class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltMetacelloSaveProject,					#isMetaSide : false				},				#parent : @8,				#content : 'I save the project to a repository, saving as a single commit if the repository implements the right API, or save packages one by one if not.\r\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I save the project to a repository, saving as a single commit if the repository implements the right API, or save packages one by one if not.\r\r',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '559' ],		#self : OmReference [ '560' ],		#time : DateAndTime [ '2018-01-14T19:02:27.820441-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltMetacelloSaveProject\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Commands-Metacello\''			},			#name : #AltMetacelloSaveProject,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltMetacelloSaveProject class\r\tinstanceVariableNames: \'\''				},				#name : #'AltMetacelloSaveProject class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltMetacelloSaveProject,					#isMetaSide : false				},				#parent : @8,				#content : 'I save the project to a repository, saving as a single commit if the repository implements the right API, or save packages one by one if not.\r\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Commands-Metacello,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '560' ],		#self : OmReference [ '561' ],		#time : DateAndTime [ '2018-01-14T19:02:27.825322-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltMetacelloUnloadProject\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltMetacelloUnloadProject,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltMetacelloUnloadProject class\r\tinstanceVariableNames: \'\''				},				#name : #'AltMetacelloUnloadProject class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltMetacelloUnloadProject,					#isMetaSide : false				},				#parent : @8,				#content : 'I unload a project (all related packages and the configuration/baseline Of)',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I unload a project (all related packages and the configuration/baseline Of)',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '561' ],		#self : OmReference [ '562' ],		#time : DateAndTime [ '2018-01-14T19:02:27.830395-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltMetacelloUnloadProject\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Commands-Metacello\''			},			#name : #AltMetacelloUnloadProject,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltMetacelloUnloadProject class\r\tinstanceVariableNames: \'\''				},				#name : #'AltMetacelloUnloadProject class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltMetacelloUnloadProject,					#isMetaSide : false				},				#parent : @8,				#content : 'I unload a project (all related packages and the configuration/baseline Of)',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Commands-Metacello,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '562' ],		#self : OmReference [ '563' ],		#time : DateAndTime [ '2018-01-14T19:02:27.842708-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltNextCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltNextCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltNextCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltNextCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltNextCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'History next command. Execute does a next over the history, jumping over items we cannot reach (which means they may have been erased).\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'History next command. Execute does a next over the history, jumping over items we cannot reach (which means they may have been erased).\r',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '563' ],		#self : OmReference [ '564' ],		#time : DateAndTime [ '2018-01-14T19:02:27.845994-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltNextCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Commands\''			},			#name : #AltNextCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltNextCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltNextCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltNextCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'History next command. Execute does a next over the history, jumping over items we cannot reach (which means they may have been erased).\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Commands,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '564' ],		#self : OmReference [ '565' ],		#time : DateAndTime [ '2018-01-14T19:02:27.851553-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltNextSiblingClassCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltNextSiblingClassCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltNextSiblingClassCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltNextSiblingClassCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltNextSiblingClassCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'This command jumps to the sibling class according to the inheritance: the next class which has the same superclass than the selected class.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'This command jumps to the sibling class according to the inheritance: the next class which has the same superclass than the selected class.',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '565' ],		#self : OmReference [ '566' ],		#time : DateAndTime [ '2018-01-14T19:02:27.854775-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltNextSiblingClassCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Commands\''			},			#name : #AltNextSiblingClassCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltNextSiblingClassCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltNextSiblingClassCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltNextSiblingClassCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'This command jumps to the sibling class according to the inheritance: the next class which has the same superclass than the selected class.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Commands,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '566' ],		#self : OmReference [ '567' ],		#time : DateAndTime [ '2018-01-14T19:02:27.859841-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltPasteCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltPasteCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltPasteCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltPasteCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltPasteCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'This command paste something which has been cut first.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'This command paste something which has been cut first.',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '567' ],		#self : OmReference [ '568' ],		#time : DateAndTime [ '2018-01-14T19:02:27.86292-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltPasteCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Commands\''			},			#name : #AltPasteCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltPasteCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltPasteCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltPasteCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'This command paste something which has been cut first.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Commands,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '568' ],		#self : OmReference [ '569' ],		#time : DateAndTime [ '2018-01-14T19:02:27.869141-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltPasteTextCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltPasteTextCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltPasteTextCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltPasteTextCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltPasteTextCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'An ABPasteTextCommand : Paste text from Clipboard. Directly target the editor; neither the model nor the widget have methods for handling that.\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'An ABPasteTextCommand : Paste text from Clipboard. Directly target the editor; neither the model nor the widget have methods for handling that.\r',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '569' ],		#self : OmReference [ '570' ],		#time : DateAndTime [ '2018-01-14T19:02:27.872246-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltPasteTextCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Commands-Text\''			},			#name : #AltPasteTextCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltPasteTextCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltPasteTextCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltPasteTextCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'An ABPasteTextCommand : Paste text from Clipboard. Directly target the editor; neither the model nor the widget have methods for handling that.\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Commands-Text,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '570' ],		#self : OmReference [ '571' ],		#time : DateAndTime [ '2018-01-14T19:02:27.876594-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltPreviousCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltPreviousCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltPreviousCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltPreviousCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltPreviousCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'History previous in the Alt Browser. The execute jump over unreachable elements: this means they have been erased.\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'History previous in the Alt Browser. The execute jump over unreachable elements: this means they have been erased.\r',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '571' ],		#self : OmReference [ '572' ],		#time : DateAndTime [ '2018-01-14T19:02:27.879697-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltPreviousCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Commands\''			},			#name : #AltPreviousCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltPreviousCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltPreviousCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltPreviousCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'History previous in the Alt Browser. The execute jump over unreachable elements: this means they have been erased.\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Commands,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '572' ],		#self : OmReference [ '573' ],		#time : DateAndTime [ '2018-01-14T19:02:27.883942-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltRBCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltRBCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltRBCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltRBCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltRBCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'Common code for RB commands: exception handling',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Common code for RB commands: exception handling',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '573' ],		#self : OmReference [ '574' ],		#time : DateAndTime [ '2018-01-14T19:02:27.887229-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltRBCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Commands-Refactoring\''			},			#name : #AltRBCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltRBCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltRBCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltRBCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'Common code for RB commands: exception handling',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Commands-Refactoring,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '574' ],		#self : OmReference [ '575' ],		#time : DateAndTime [ '2018-01-14T19:02:27.891652-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltRBCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltRBCommand subclass: #AltRBClassRenameCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltRBClassRenameCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltRBClassRenameCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltRBClassRenameCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltRBClassRenameCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'This class is a class renaming command.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'This class is a class renaming command.',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '575' ],		#self : OmReference [ '576' ],		#time : DateAndTime [ '2018-01-14T19:02:27.897736-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltRBCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltRBCommand subclass: #AltRBClassRenameCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Commands-Refactoring\''			},			#name : #AltRBClassRenameCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltRBClassRenameCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltRBClassRenameCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltRBClassRenameCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'This class is a class renaming command.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Commands-Refactoring,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '576' ],		#self : OmReference [ '577' ],		#time : DateAndTime [ '2018-01-14T19:02:27.902115-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltRBCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltRBCommand subclass: #AltRBRemoveClassCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltRBRemoveClassCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltRBRemoveClassCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltRBRemoveClassCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltRBRemoveClassCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'This command removes a class.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'This command removes a class.',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '577' ],		#self : OmReference [ '578' ],		#time : DateAndTime [ '2018-01-14T19:02:27.905242-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltRBCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltRBCommand subclass: #AltRBRemoveClassCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Commands-Refactoring\''			},			#name : #AltRBRemoveClassCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltRBRemoveClassCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltRBRemoveClassCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltRBRemoveClassCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'This command removes a class.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Commands-Refactoring,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '578' ],		#self : OmReference [ '579' ],		#time : DateAndTime [ '2018-01-14T19:02:27.909606-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltRBFormatCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltRBFormatCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltRBFormatCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltRBFormatCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltRBFormatCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'This class is for the source code formatting command.\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'This class is for the source code formatting command.\r',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '579' ],		#self : OmReference [ '580' ],		#time : DateAndTime [ '2018-01-14T19:02:27.912733-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltRBFormatCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Commands-Refactoring\''			},			#name : #AltRBFormatCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltRBFormatCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltRBFormatCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltRBFormatCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'This class is for the source code formatting command.\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Commands-Refactoring,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '580' ],		#self : OmReference [ '581' ],		#time : DateAndTime [ '2018-01-14T19:02:27.924745-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltRBRedoCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltRBRedoCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltRBRedoCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltRBRedoCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltRBRedoCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'This is the RB redo command.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'This is the RB redo command.',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '581' ],		#self : OmReference [ '582' ],		#time : DateAndTime [ '2018-01-14T19:02:27.928055-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltRBRedoCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Commands-Refactoring\''			},			#name : #AltRBRedoCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltRBRedoCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltRBRedoCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltRBRedoCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'This is the RB redo command.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Commands-Refactoring,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '582' ],		#self : OmReference [ '583' ],		#time : DateAndTime [ '2018-01-14T19:02:27.935166-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltRBUndoCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltRBUndoCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltRBUndoCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltRBUndoCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltRBUndoCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'An AltRBUndoCommand is for handling the undo facilities of RB.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'An AltRBUndoCommand is for handling the undo facilities of RB.',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '583' ],		#self : OmReference [ '584' ],		#time : DateAndTime [ '2018-01-14T19:02:27.938553-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltRBUndoCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Commands-Refactoring\''			},			#name : #AltRBUndoCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltRBUndoCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltRBUndoCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltRBUndoCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'An AltRBUndoCommand is for handling the undo facilities of RB.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Commands-Refactoring,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '584' ],		#self : OmReference [ '585' ],		#time : DateAndTime [ '2018-01-14T19:02:27.943838-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltRebuildItemCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltRebuildItemCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltRebuildItemCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltRebuildItemCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltRebuildItemCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'This class forces a rebuild of an item in the tree.\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'This class forces a rebuild of an item in the tree.\r',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '585' ],		#self : OmReference [ '586' ],		#time : DateAndTime [ '2018-01-14T19:02:27.947712-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltRebuildItemCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Commands\''			},			#name : #AltRebuildItemCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltRebuildItemCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltRebuildItemCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltRebuildItemCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'This class forces a rebuild of an item in the tree.\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Commands,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '586' ],		#self : OmReference [ '587' ],		#time : DateAndTime [ '2018-01-14T19:02:27.952456-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltRedoTextCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltRedoTextCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltRedoTextCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltRedoTextCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltRedoTextCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'An ABRedoTextCommand calls the text editor redo command.\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'An ABRedoTextCommand calls the text editor redo command.\r',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '587' ],		#self : OmReference [ '588' ],		#time : DateAndTime [ '2018-01-14T19:02:27.955583-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltRedoTextCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Commands-Text\''			},			#name : #AltRedoTextCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltRedoTextCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltRedoTextCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltRedoTextCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'An ABRedoTextCommand calls the text editor redo command.\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Commands-Text,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '588' ],		#self : OmReference [ '589' ],		#time : DateAndTime [ '2018-01-14T19:02:27.959882-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltRemoveCategoryCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltRemoveCategoryCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltRemoveCategoryCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltRemoveCategoryCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltRemoveCategoryCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'Remove a system category.\r\rIt should also triggers the removal of the tag of the same name, but this doesn\'t work, so remove also the tag by hand.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Remove a system category.\r\rIt should also triggers the removal of the tag of the same name, but this doesn\'t work, so remove also the tag by hand.',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '589' ],		#self : OmReference [ '590' ],		#time : DateAndTime [ '2018-01-14T19:02:27.963624-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltRemoveCategoryCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Commands\''			},			#name : #AltRemoveCategoryCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltRemoveCategoryCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltRemoveCategoryCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltRemoveCategoryCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'Remove a system category.\r\rIt should also triggers the removal of the tag of the same name, but this doesn\'t work, so remove also the tag by hand.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Commands,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '590' ],		#self : OmReference [ '591' ],		#time : DateAndTime [ '2018-01-14T19:02:27.968184-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltRemoveMethodCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltRemoveMethodCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltRemoveMethodCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltRemoveMethodCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltRemoveMethodCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'Removing a method.\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Removing a method.\r',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '591' ],		#self : OmReference [ '592' ],		#time : DateAndTime [ '2018-01-14T19:02:27.972183-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltRemoveMethodCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Commands\''			},			#name : #AltRemoveMethodCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltRemoveMethodCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltRemoveMethodCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltRemoveMethodCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'Removing a method.\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Commands,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '592' ],		#self : OmReference [ '593' ],		#time : DateAndTime [ '2018-01-14T19:02:28.008122-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltRemovePackageCategoryCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltRemovePackageCategoryCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltRemovePackageCategoryCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltRemovePackageCategoryCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltRemovePackageCategoryCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'This class does a remove item on the selected item (package category : anything else requires specific system commands.)',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'This class does a remove item on the selected item (package category : anything else requires specific system commands.)',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '593' ],		#self : OmReference [ '594' ],		#time : DateAndTime [ '2018-01-14T19:02:28.011323-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltRemovePackageCategoryCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Commands\''			},			#name : #AltRemovePackageCategoryCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltRemovePackageCategoryCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltRemovePackageCategoryCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltRemovePackageCategoryCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'This class does a remove item on the selected item (package category : anything else requires specific system commands.)',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Commands,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '594' ],		#self : OmReference [ '595' ],		#time : DateAndTime [ '2018-01-14T19:02:28.015648-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltRemovePackageCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltRemovePackageCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltRemovePackageCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltRemovePackageCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltRemovePackageCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'Remove a package (Monticello unload)',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Remove a package (Monticello unload)',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '595' ],		#self : OmReference [ '596' ],		#time : DateAndTime [ '2018-01-14T19:02:28.020094-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltRemovePackageCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Commands\''			},			#name : #AltRemovePackageCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltRemovePackageCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltRemovePackageCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltRemovePackageCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'Remove a package (Monticello unload)',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Commands,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '596' ],		#self : OmReference [ '597' ],		#time : DateAndTime [ '2018-01-14T19:02:28.025413-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltRemoveProtocolCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltRemoveProtocolCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltRemoveProtocolCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltRemoveProtocolCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltRemoveProtocolCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'This command removes a protocol',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'This command removes a protocol',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '597' ],		#self : OmReference [ '598' ],		#time : DateAndTime [ '2018-01-14T19:02:28.029312-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltRemoveProtocolCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Commands\''			},			#name : #AltRemoveProtocolCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltRemoveProtocolCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltRemoveProtocolCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltRemoveProtocolCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'This command removes a protocol',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Commands,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '598' ],		#self : OmReference [ '599' ],		#time : DateAndTime [ '2018-01-14T19:02:28.033926-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltRenameCategoryCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltRenameCategoryCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltRenameCategoryCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltRenameCategoryCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltRenameCategoryCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'Rename the system category (the RPackage tag by side effect).\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Rename the system category (the RPackage tag by side effect).\r',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '599' ],		#self : OmReference [ '600' ],		#time : DateAndTime [ '2018-01-14T19:02:28.036981-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltRenameCategoryCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Commands\''			},			#name : #AltRenameCategoryCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltRenameCategoryCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltRenameCategoryCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltRenameCategoryCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'Rename the system category (the RPackage tag by side effect).\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Commands,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '600' ],		#self : OmReference [ '601' ],		#time : DateAndTime [ '2018-01-14T19:02:28.04122-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltRenamePackageCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltRenamePackageCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltRenamePackageCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltRenamePackageCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltRenamePackageCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'Rename a package.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Rename a package.',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '601' ],		#self : OmReference [ '602' ],		#time : DateAndTime [ '2018-01-14T19:02:28.044414-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltRenamePackageCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Commands\''			},			#name : #AltRenamePackageCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltRenamePackageCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltRenamePackageCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltRenamePackageCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'Rename a package.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Commands,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '602' ],		#self : OmReference [ '603' ],		#time : DateAndTime [ '2018-01-14T19:02:28.048665-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltSelectAllTextCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltSelectAllTextCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltSelectAllTextCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltSelectAllTextCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltSelectAllTextCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'An AltSelectAllTextCommand select all the text in the text pane.\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'An AltSelectAllTextCommand select all the text in the text pane.\r',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '603' ],		#self : OmReference [ '604' ],		#time : DateAndTime [ '2018-01-14T19:02:28.052573-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltSelectAllTextCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Commands-Text\''			},			#name : #AltSelectAllTextCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltSelectAllTextCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltSelectAllTextCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltSelectAllTextCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'An AltSelectAllTextCommand select all the text in the text pane.\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Commands-Text,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '604' ],		#self : OmReference [ '605' ],		#time : DateAndTime [ '2018-01-14T19:02:28.07477-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltSelectMoveDown\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltSelectMoveDown,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltSelectMoveDown class\r\tinstanceVariableNames: \'\''				},				#name : #'AltSelectMoveDown class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltSelectMoveDown,					#isMetaSide : false				},				#parent : @8,				#content : 'Move down in the tree. Generally select and expand.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Move down in the tree. Generally select and expand.',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '605' ],		#self : OmReference [ '606' ],		#time : DateAndTime [ '2018-01-14T19:02:28.076567-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpCategoryAddition {		#classCategoryName : #Alt-Browser-Commands-Navigation,		#affectedPackageName : #Alt-Browser	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '606' ],		#self : OmReference [ '607' ],		#time : DateAndTime [ '2018-01-14T19:02:28.079688-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltSelectMoveDown\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Commands-Navigation\''			},			#name : #AltSelectMoveDown,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltSelectMoveDown class\r\tinstanceVariableNames: \'\''				},				#name : #'AltSelectMoveDown class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltSelectMoveDown,					#isMetaSide : false				},				#parent : @8,				#content : 'Move down in the tree. Generally select and expand.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Commands-Navigation,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '607' ],		#self : OmReference [ '608' ],		#time : DateAndTime [ '2018-01-14T19:02:28.085408-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltSelectMoveUp\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltSelectMoveUp,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltSelectMoveUp class\r\tinstanceVariableNames: \'\''				},				#name : #'AltSelectMoveUp class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltSelectMoveUp,					#isMetaSide : false				},				#parent : @8,				#content : 'Character arrow up',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Character arrow up',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '608' ],		#self : OmReference [ '609' ],		#time : DateAndTime [ '2018-01-14T19:02:28.089138-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltSelectMoveUp\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Commands-Navigation\''			},			#name : #AltSelectMoveUp,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltSelectMoveUp class\r\tinstanceVariableNames: \'\''				},				#name : #'AltSelectMoveUp class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltSelectMoveUp,					#isMetaSide : false				},				#parent : @8,				#content : 'Character arrow up',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Commands-Navigation,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '609' ],		#self : OmReference [ '610' ],		#time : DateAndTime [ '2018-01-14T19:02:28.093864-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltSelectNextItem\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltSelectNextItem,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltSelectNextItem class\r\tinstanceVariableNames: \'\''				},				#name : #'AltSelectNextItem class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltSelectNextItem,					#isMetaSide : false				},				#parent : @8,				#content : 'Next item in the list',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Next item in the list',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '610' ],		#self : OmReference [ '611' ],		#time : DateAndTime [ '2018-01-14T19:02:28.09714-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltSelectNextItem\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Commands-Navigation\''			},			#name : #AltSelectNextItem,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltSelectNextItem class\r\tinstanceVariableNames: \'\''				},				#name : #'AltSelectNextItem class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltSelectNextItem,					#isMetaSide : false				},				#parent : @8,				#content : 'Next item in the list',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Commands-Navigation,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '611' ],		#self : OmReference [ '612' ],		#time : DateAndTime [ '2018-01-14T19:02:28.102853-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltSelectPreviousItem\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltSelectPreviousItem,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltSelectPreviousItem class\r\tinstanceVariableNames: \'\''				},				#name : #'AltSelectPreviousItem class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltSelectPreviousItem,					#isMetaSide : false				},				#parent : @8,				#content : 'select the previous item',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'select the previous item',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '612' ],		#self : OmReference [ '613' ],		#time : DateAndTime [ '2018-01-14T19:02:28.106037-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltSelectPreviousItem\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Commands-Navigation\''			},			#name : #AltSelectPreviousItem,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltSelectPreviousItem class\r\tinstanceVariableNames: \'\''				},				#name : #'AltSelectPreviousItem class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltSelectPreviousItem,					#isMetaSide : false				},				#parent : @8,				#content : 'select the previous item',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Commands-Navigation,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '613' ],		#self : OmReference [ '614' ],		#time : DateAndTime [ '2018-01-14T19:02:28.110623-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltSendersOfCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltSendersOfCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltSendersOfCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltSendersOfCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltSendersOfCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'Return the senders of a method node in the tree.\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Return the senders of a method node in the tree.\r',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '614' ],		#self : OmReference [ '615' ],		#time : DateAndTime [ '2018-01-14T19:02:28.114276-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltSendersOfCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Commands\''			},			#name : #AltSendersOfCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltSendersOfCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltSendersOfCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltSendersOfCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'Return the senders of a method node in the tree.\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Commands,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '615' ],		#self : OmReference [ '616' ],		#time : DateAndTime [ '2018-01-14T19:02:28.126195-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltUndoTextCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltUndoTextCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltUndoTextCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltUndoTextCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltUndoTextCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'An ABUndoTextCommand calls the text editor undo command.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'An ABUndoTextCommand calls the text editor undo command.',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '616' ],		#self : OmReference [ '617' ],		#time : DateAndTime [ '2018-01-14T19:02:28.129476-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltUndoTextCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Commands-Text\''			},			#name : #AltUndoTextCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltUndoTextCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltUndoTextCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltUndoTextCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'An ABUndoTextCommand calls the text editor undo command.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Commands-Text,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '617' ],		#self : OmReference [ '618' ],		#time : DateAndTime [ '2018-01-14T19:02:28.135876-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltWatchpointsEraseHistoryAll\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltWatchpointsEraseHistoryAll,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltWatchpointsEraseHistoryAll class\r\tinstanceVariableNames: \'\''				},				#name : #'AltWatchpointsEraseHistoryAll class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltWatchpointsEraseHistoryAll,					#isMetaSide : false				},				#parent : @8,				#content : 'Erase history for all watchpoints\r\rWatchpoint deleteAllHistory',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Erase history for all watchpoints\r\rWatchpoint deleteAllHistory',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '618' ],		#self : OmReference [ '619' ],		#time : DateAndTime [ '2018-01-14T19:02:28.140261-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltWatchpointsEraseHistoryAll\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Watchpoints\''			},			#name : #AltWatchpointsEraseHistoryAll,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltWatchpointsEraseHistoryAll class\r\tinstanceVariableNames: \'\''				},				#name : #'AltWatchpointsEraseHistoryAll class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltWatchpointsEraseHistoryAll,					#isMetaSide : false				},				#parent : @8,				#content : 'Erase history for all watchpoints\r\rWatchpoint deleteAllHistory',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Watchpoints,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '619' ],		#self : OmReference [ '620' ],		#time : DateAndTime [ '2018-01-14T19:02:28.144678-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltWatchpointsRemoveAll\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltWatchpointsRemoveAll,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltWatchpointsRemoveAll class\r\tinstanceVariableNames: \'\''				},				#name : #'AltWatchpointsRemoveAll class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltWatchpointsRemoveAll,					#isMetaSide : false				},				#parent : @8,				#content : 'Remove all watchpoints\r\rWatchpoint removeAll',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Remove all watchpoints\r\rWatchpoint removeAll',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '620' ],		#self : OmReference [ '621' ],		#time : DateAndTime [ '2018-01-14T19:02:28.147758-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltWatchpointsRemoveAll\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Watchpoints\''			},			#name : #AltWatchpointsRemoveAll,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltWatchpointsRemoveAll class\r\tinstanceVariableNames: \'\''				},				#name : #'AltWatchpointsRemoveAll class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltWatchpointsRemoveAll,					#isMetaSide : false				},				#parent : @8,				#content : 'Remove all watchpoints\r\rWatchpoint removeAll',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Watchpoints,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '621' ],		#self : OmReference [ '622' ],		#time : DateAndTime [ '2018-01-14T19:02:28.152483-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #AltKeyboardSearchInTree\r\tinstanceVariableNames: \'requestor baseIndex\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltKeyboardSearchInTree,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltKeyboardSearchInTree,						#isMetaSide : false					},					#name : #requestor,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltKeyboardSearchInTree,						#isMetaSide : false					},					#name : #baseIndex,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltKeyboardSearchInTree class\r\tinstanceVariableNames: \'\''				},				#name : #'AltKeyboardSearchInTree class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltKeyboardSearchInTree,					#isMetaSide : false				},				#parent : @8,				#content : 'This command opens a text field and allow for typing on the fly in it, with the underlying tree being used for the search.\r\rTarget behavior:\r- On every key track down which tree node starts with the prefix and select it.\r(take in account visible names, rely on asString to the node)\r- On tab, complete the current tree node and open it\r- On CR or navigation key, close text entry\rThere is a need to improve and fine tune the key filtering. Maybe use more of Keymapping ?\r\rbaseIndex: first selected node when starting to type.\r\rUses AltTextSearchMorph, a copy of StringMorphEditor, it has the logic for disappearing and is single line. StringMorphEditor is tied to a StringMorph, so I need my own subclass of TextMorph with a copy of the logic.\r\rBehavior is fairly specific to the way the tree is handled, but should show a nice blueprint about searching with on the fly search area creation.\r\rAdding the command to a MorphTreeMorph just requires the following line:\r\raMorphTreeMorph on: #keyStroke send: #startSearch:for: to: AltKeyboardSearchInTree.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'This command opens a text field and allow for typing on the fly in it, with the underlying tree being used for the search.\r\rTarget behavior:\r- On every key track down which tree node starts with the prefix and select it.\r(take in account visible names, rely on asString to the node)\r- On tab, complete the current tree node and open it\r- On CR or navigation key, close text entry\rThere is a need to improve and fine tune the key filtering. Maybe use more of Keymapping ?\r\rbaseIndex: first selected node when starting to type.\r\rUses AltTextSearchMorph, a copy of StringMorphEditor, it has the logic for disappearing and is single line. StringMorphEditor is tied to a StringMorph, so I need my own subclass of TextMorph with a copy of the logic.\r\rBehavior is fairly specific to the way the tree is handled, but should show a nice blueprint about searching with on the fly search area creation.\r\rAdding the command to a MorphTreeMorph just requires the following line:\r\raMorphTreeMorph on: #keyStroke send: #startSearch:for: to: AltKeyboardSearchInTree.',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '622' ],		#self : OmReference [ '623' ],		#time : DateAndTime [ '2018-01-14T19:02:28.155647-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #AltKeyboardSearchInTree\r\tinstanceVariableNames: \'requestor baseIndex\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Core\''			},			#name : #AltKeyboardSearchInTree,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltKeyboardSearchInTree,						#isMetaSide : false					},					#name : #requestor,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltKeyboardSearchInTree,						#isMetaSide : false					},					#name : #baseIndex,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltKeyboardSearchInTree class\r\tinstanceVariableNames: \'\''				},				#name : #'AltKeyboardSearchInTree class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltKeyboardSearchInTree,					#isMetaSide : false				},				#parent : @8,				#content : 'This command opens a text field and allow for typing on the fly in it, with the underlying tree being used for the search.\r\rTarget behavior:\r- On every key track down which tree node starts with the prefix and select it.\r(take in account visible names, rely on asString to the node)\r- On tab, complete the current tree node and open it\r- On CR or navigation key, close text entry\rThere is a need to improve and fine tune the key filtering. Maybe use more of Keymapping ?\r\rbaseIndex: first selected node when starting to type.\r\rUses AltTextSearchMorph, a copy of StringMorphEditor, it has the logic for disappearing and is single line. StringMorphEditor is tied to a StringMorph, so I need my own subclass of TextMorph with a copy of the logic.\r\rBehavior is fairly specific to the way the tree is handled, but should show a nice blueprint about searching with on the fly search area creation.\r\rAdding the command to a MorphTreeMorph just requires the following line:\r\raMorphTreeMorph on: #keyStroke send: #startSearch:for: to: AltKeyboardSearchInTree.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Core,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '623' ],		#self : OmReference [ '624' ],		#time : DateAndTime [ '2018-01-14T19:02:28.160391-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltTreeItemModel',				#traitCompositionSource : '{}',				#definitionSource : 'AltTreeItemModel subclass: #AltCodeItemModel\r\tinstanceVariableNames: \'rbEnvironment\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltCodeItemModel,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltCodeItemModel,						#isMetaSide : false					},					#name : #rbEnvironment,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltCodeItemModel class\r\tinstanceVariableNames: \'\''				},				#name : #'AltCodeItemModel class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltCodeItemModel,					#isMetaSide : false				},				#parent : @8,				#content : 'I represent the model for a code item in the structure.\r\r(Note: check on isExpanded for the closing means deselecting).',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I represent the model for a code item in the structure.\r\r(Note: check on isExpanded for the closing means deselecting).',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '624' ],		#self : OmReference [ '625' ],		#time : DateAndTime [ '2018-01-14T19:02:28.164382-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltTreeItemModel',				#traitCompositionSource : '{}',				#definitionSource : 'AltTreeItemModel subclass: #AltCodeItemModel\r\tinstanceVariableNames: \'rbEnvironment\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Core\''			},			#name : #AltCodeItemModel,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltCodeItemModel,						#isMetaSide : false					},					#name : #rbEnvironment,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltCodeItemModel class\r\tinstanceVariableNames: \'\''				},				#name : #'AltCodeItemModel class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltCodeItemModel,					#isMetaSide : false				},				#parent : @8,				#content : 'I represent the model for a code item in the structure.\r\r(Note: check on isExpanded for the closing means deselecting).',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Core,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '625' ],		#self : OmReference [ '626' ],		#time : DateAndTime [ '2018-01-14T19:02:28.169398-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCodeItemModel',				#traitCompositionSource : '{}',				#definitionSource : 'AltCodeItemModel subclass: #AltCodeItemRootModel\r\tinstanceVariableNames: \'model\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltCodeItemRootModel,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltCodeItemRootModel,						#isMetaSide : false					},					#name : #model,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltCodeItemRootModel class\r\tinstanceVariableNames: \'\''				},				#name : #'AltCodeItemRootModel class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltCodeItemRootModel,					#isMetaSide : false				},				#parent : @8,				#content : 'I\'m a "root" item model with a link to the main browser: my model.\r\rI\'m also at index 0 of the list, so I never appear in the tree display.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I\'m a "root" item model with a link to the main browser: my model.\r\rI\'m also at index 0 of the list, so I never appear in the tree display.',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '626' ],		#self : OmReference [ '627' ],		#time : DateAndTime [ '2018-01-14T19:02:28.172597-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCodeItemModel',				#traitCompositionSource : '{}',				#definitionSource : 'AltCodeItemModel subclass: #AltCodeItemRootModel\r\tinstanceVariableNames: \'model\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Core\''			},			#name : #AltCodeItemRootModel,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltCodeItemRootModel,						#isMetaSide : false					},					#name : #model,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltCodeItemRootModel class\r\tinstanceVariableNames: \'\''				},				#name : #'AltCodeItemRootModel class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltCodeItemRootModel,					#isMetaSide : false				},				#parent : @8,				#content : 'I\'m a "root" item model with a link to the main browser: my model.\r\rI\'m also at index 0 of the list, so I never appear in the tree display.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Browser-Core,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '627' ],		#self : OmReference [ '628' ],		#time : DateAndTime [ '2018-01-14T19:02:28.687997-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #AltBrowser\r\tinstanceVariableNames: \'source root history window treeMorph textMorph rbEnvironment finder finderUI toolbar commentMorph selection\'\r\tclassVariableNames: \'AltAnnouncer Categories Debug RecentPackages Root Temporary\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Core\''			},			#name : #AltBrowser,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltBrowser,						#isMetaSide : false					},					#name : #source,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltBrowser,						#isMetaSide : false					},					#name : #root,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltBrowser,						#isMetaSide : false					},					#name : #history,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltBrowser,						#isMetaSide : false					},					#name : #window,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltBrowser,						#isMetaSide : false					},					#name : #treeMorph,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltBrowser,						#isMetaSide : false					},					#name : #textMorph,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltBrowser,						#isMetaSide : false					},					#name : #rbEnvironment,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltBrowser,						#isMetaSide : false					},					#name : #finder,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltBrowser,						#isMetaSide : false					},					#name : #finderUI,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltBrowser,						#isMetaSide : false					},					#name : #toolbar,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltBrowser,						#isMetaSide : false					},					#name : #commentMorph,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltBrowser,						#isMetaSide : false					},					#name : #selection,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltBrowser class\r\tinstanceVariableNames: \'\''				},				#name : #'AltBrowser class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltBrowser,					#isMetaSide : false				},				#parent : @8,				#content : 'An AltBrowser is a complete alternative system browser, message list and finder.\r\rIt builds a representation of  the code structure as a abstract tree, out of AltAbstractNode, in the class side. That tree is kept on the class side, and is connected to all the system announcements tracking code changes (loading, creating, compiling, etc...).\r\rEach instance handle the display of the overall tree in a GUI and an environment (a Refactoring Browser environment). The GUI is simply an AltTreeMorph instance and a PluggableTextMorph, and the context menus for both morphs. The instance reference a display tree based on AltTreeItemModel which is manipulated by the user interactively and also filtered by the refactoring environment associated with the instance (for example restricted to a package / a class / a set of selectors).\r\rThe instance is listening to events from the class to be able to update the relevant nodes for display. It also has an history (for navigation). It coordinates the building of context menus, shortcuts and a few user events (drag and drop). It has utility functions to relate an abstract item, a node model and a node morph, because it is common to have to update the tree (or the display of a node) out of a change event on an item.\r\rStarting point for interesting code:\r- context menu building : #buildTextMenu:, #buildTreeMenu:\r- contextual key combinations : #updateTextKeymap, #updateTreeKeymap\r- drag and drop in the tree: #acceptDroppingMorph:event:inMorph:, ...\r- updating (for updates from the class about code change events)',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltBrowser,						#isMetaSide : false					},					#name : #AltAnnouncer,					#parent : @8				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltBrowser,						#isMetaSide : false					},					#name : #Categories,					#parent : @8				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltBrowser,						#isMetaSide : false					},					#name : #Debug,					#parent : @8				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltBrowser,						#isMetaSide : false					},					#name : #RecentPackages,					#parent : @8				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltBrowser,						#isMetaSide : false					},					#name : #Root,					#parent : @8				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltBrowser,						#isMetaSide : false					},					#name : #Temporary,					#parent : @8				}			],			#category : #Alt-Browser-Core,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #AltBrowser\r\tinstanceVariableNames: \'source root history window treeMorph textMorph rbEnvironment finder finderUI toolbar commentMorph selection\'\r\tclassVariableNames: \'AltAnnouncer Categories Debug RecentPackages Root Temporary\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Browser-Core\''			},			#name : #AltBrowser,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltBrowser,						#isMetaSide : false					},					#name : #source,					#parent : @58				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltBrowser,						#isMetaSide : false					},					#name : #root,					#parent : @58				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltBrowser,						#isMetaSide : false					},					#name : #history,					#parent : @58				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltBrowser,						#isMetaSide : false					},					#name : #window,					#parent : @58				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltBrowser,						#isMetaSide : false					},					#name : #treeMorph,					#parent : @58				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltBrowser,						#isMetaSide : false					},					#name : #textMorph,					#parent : @58				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltBrowser,						#isMetaSide : false					},					#name : #rbEnvironment,					#parent : @58				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltBrowser,						#isMetaSide : false					},					#name : #finder,					#parent : @58				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltBrowser,						#isMetaSide : false					},					#name : #finderUI,					#parent : @58				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltBrowser,						#isMetaSide : false					},					#name : #toolbar,					#parent : @58				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltBrowser,						#isMetaSide : false					},					#name : #commentMorph,					#parent : @58				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltBrowser,						#isMetaSide : false					},					#name : #selection,					#parent : @58				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltBrowser class\r\tinstanceVariableNames: \'\''				},				#name : #'AltBrowser class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @58			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltBrowser,					#isMetaSide : false				},				#parent : @58,				#content : 'An AltBrowser is a complete alternative system browser, message list and finder.\r\rIt builds a representation of  the code structure as a abstract tree, out of AltAbstractNode, in the class side. That tree is kept on the class side, and is connected to all the system announcements tracking code changes (loading, creating, compiling, etc...).\r\rEach instance handle the display of the overall tree in a GUI and an environment (a Refactoring Browser environment). The GUI is simply an AltTreeMorph instance and a PluggableTextMorph, and the context menus for both morphs. The instance reference a display tree based on AltTreeItemModel which is manipulated by the user interactively and also filtered by the refactoring environment associated with the instance (for example restricted to a package / a class / a set of selectors).\r\rThe instance is listening to events from the class to be able to update the relevant nodes for display. It also has an history (for navigation). It coordinates the building of context menus, shortcuts and a few user events (drag and drop). It has utility functions to relate an abstract item, a node model and a node morph, because it is common to have to update the tree (or the display of a node) out of a change event on an item.\r\rStarting point for interesting code:\r- context menu building : #buildTextMenu:, #buildTreeMenu:\r- contextual key combinations : #updateTextKeymap, #updateTreeKeymap\r- drag and drop in the tree: #acceptDroppingMorph:event:inMorph:, ...\r- updating (for updates from the class about code change events)',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltBrowser,						#isMetaSide : false					},					#name : #AltAnnouncer,					#parent : @58				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltBrowser,						#isMetaSide : false					},					#name : #Categories,					#parent : @58				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltBrowser,						#isMetaSide : false					},					#name : #Debug,					#parent : @58				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltBrowser,						#isMetaSide : false					},					#name : #RecentPackages,					#parent : @58				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltBrowser,						#isMetaSide : false					},					#name : #Root,					#parent : @58				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltBrowser,						#isMetaSide : false					},					#name : #Temporary,					#parent : @58				}			],			#category : #Alt-Browser-Core,			#package : #Alt-Browser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '628' ],		#self : OmReference [ '629' ],		#time : DateAndTime [ '2018-01-14T19:02:29.369056-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RBProgramNode,				#isMetaSide : false			},			#name : #altTextCommands,			#protocol : #'*alt-browser',			#sourceCode : 'altTextCommands\r\t^ #(AltWatchpointCommand)',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '629' ],		#self : OmReference [ '630' ],		#time : DateAndTime [ '2018-01-14T19:02:29.3722-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RBProgramNode,				#isMetaSide : false			},			#name : #canSelect,			#protocol : #'*alt-browser-rb-commands',			#sourceCode : 'canSelect\r\t^ true',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '630' ],		#self : OmReference [ '631' ],		#time : DateAndTime [ '2018-01-14T19:02:29.376726-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RBProgramNode,				#isMetaSide : false			},			#name : #textIntervals,			#protocol : #'*alt-browser-rb-commands',			#sourceCode : 'textIntervals\r\t"The text intervals for this node. To be used to show feedback on the node. Should return an array of intervals describing the node."\r\r\t^ Array with: (self start to: self stop)',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '631' ],		#self : OmReference [ '632' ],		#time : DateAndTime [ '2018-01-14T19:02:29.378424-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RBBrowserEnvironment,				#isMetaSide : false			},			#name : #'classesAndMetaClassesDo:',			#protocol : #'*alt-browser',			#sourceCode : 'classesAndMetaClassesDo: aBlock\r\tself\r\t\tallClassesDo: [ :each | \r\t\t\t(self includesClass: each)\r\t\t\t\tifTrue: [ aBlock value: each ].\r\t\t\t(self includesClass: each theMetaClass)\r\t\t\t\tifTrue: [ aBlock value: each theMetaClass ] ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '632' ],		#self : OmReference [ '633' ],		#time : DateAndTime [ '2018-01-14T19:02:29.379682-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RBBrowserEnvironment,				#isMetaSide : false			},			#name : #'classesAndTraitsAndMetaClassesDo:',			#protocol : #'*alt-browser',			#sourceCode : 'classesAndTraitsAndMetaClassesDo: aBlock\r\tself\r\t\tallClassesAndTraitsDo: [ :each | \r\t\t\t(self includesClass: each)\r\t\t\t\tifTrue: [ aBlock value: each ].\r\t\t\t(self includesClass: each theMetaClass)\r\t\t\t\tifTrue: [ aBlock value: each theMetaClass ] ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '633' ],		#self : OmReference [ '634' ],		#time : DateAndTime [ '2018-01-14T19:02:29.381167-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Class,				#isMetaSide : false			},			#name : #asClass,			#protocol : #'*alt-browser',			#sourceCode : 'asClass\r\t^ self',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '634' ],		#self : OmReference [ '635' ],		#time : DateAndTime [ '2018-01-14T19:02:29.382402-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltSettingDeclaration,				#isMetaSide : false			},			#name : #startupAction,			#protocol : #accessing,			#sourceCode : 'startupAction\r\t"I assume here that the receiver is always a class, but I check if the class exist!"\r\r\t"Specific to this class:\r\t\t- runOnce is left to false. Otherwise, when building a new image, the first run of loading a configuration or a slice would first run the setting, see that it isn\'t doable, and set has run to true so that it wouldn\'t be run again. Of course, this would also happen if we try to load first thing a slice correcting the bug.\r\t\t- the startup action check if the class exist before being run. This protects agains the most obvious error which is package not yet loaded in the image."\r\r\t| targetSymbol currentValue |\r\ttargetSymbol := self target isSymbol\r\t\tifTrue: [ self target ]\r\t\tifFalse: [ self target name asSymbol ].\r\tcurrentValue := self targetSelector\r\t\tifNil: [ (Smalltalk at: targetSymbol) perform: self getSelector ]\r\t\tifNotNil: [ :s | ((Smalltalk at: targetSymbol) perform: s) perform: self getSelector ].\r\t^ StartupAction\r\t\tname: self label\r\t\tcode:\r\t\t\t(String\r\t\t\t\tstreamContents: [ :s | \r\t\t\t\t\ts << \'(Smalltalk includesKey: \'.\r\t\t\t\t\ttargetSymbol asSymbol printOn: s.\r\t\t\t\t\ts << \') ifTrue: [\'.\r\t\t\t\t\tself targetSelector ifNotNil: [ s << \'(\' ].\r\t\t\t\t\ts << \'(Smalltalk at: \'.\r\t\t\t\t\ttargetSymbol asSymbol printOn: s.\r\t\t\t\t\tself targetSelector\r\t\t\t\t\t\tifNotNil: [ :ts | \r\t\t\t\t\t\t\ts << \') perform: \'.\r\t\t\t\t\t\t\tts printOn: s ].\r\t\t\t\t\ts << \') perform: \'.\r\t\t\t\t\tself setSelector asSymbol printOn: s.\r\t\t\t\t\ts << \' with: (\'.\r\t\t\t\t\tcurrentValue settingStoreOn: s.\r\t\t\t\t\ts << \')]\' ])',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '635' ],		#self : OmReference [ '636' ],		#time : DateAndTime [ '2018-01-14T19:02:29.383888-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltVersionBrowser,				#isMetaSide : false			},			#name : #buildChangeList,			#protocol : #'init & update',			#sourceCode : 'buildChangeList\r\t"Do not ask the changeset, but the repository if this is a gitfiletree:// repository."\r\r\t"Write this code so that it is independent of the presence of MonticelloFileTree-Git; it will fail anyway and drop back on the old version browser."\r\r\t"Algorithm: if anything fail (no git repository for example), a NotFound error is generated. If needed, a NotFound error is raised."\r\r\t| rpackage aMCWorkingCopy repository mcMethodDefinition allFileNames gitRepoClass gitReaderClass |\r\t(Smalltalk globals includesKey: #MCFileTreeGitRepository)\r\t\tifTrue: [ gitRepoClass := Smalltalk globals at: #MCFileTreeGitRepository.\r\t\t\tgitReaderClass := Smalltalk globals at: #MCFileTreeGitStReader ]\r\t\tifFalse: [ ^ super buildChangeList ].\r\trpackage := rgMethod method package.\r\taMCWorkingCopy := MCWorkingCopy allManagers\r\t\tdetect: [ :wc | wc package name = rpackage name ].\r\trepository := aMCWorkingCopy repositoryGroup repositories\r\t\tdetect: [ :repo | repo isKindOf: gitRepoClass ] ifNone: [ ^ super buildChangeList ].\r\tallFileNames := repository allFileNames.\r\tmcMethodDefinition := rgMethod asMCMethodDefinition.\r\t^ (OrderedCollection\r\t\tstreamContents: [ :stream | \r\t\t\tstream\r\t\t\t\tnextPutAll:\r\t\t\t\t\t(SourceFiles\r\t\t\t\t\t\tchangeRecordsFrom: rgMethod sourcePointer\r\t\t\t\t\t\tclassName: rgMethod theNonMetaClassName\r\t\t\t\t\t\tisMeta: rgMethod isMetaSide);\r\t\t\t\tnextPutAll:\r\t\t\t\t\t([((((repository\r\t\t\t\t\t\tgitVersionsForDefinition: mcMethodDefinition\r\t\t\t\t\t\tin: aMCWorkingCopy packageName)\r\t\t\t\t\t\tcollect: [ :commitID | \r\t\t\t\t\t\t\t((gitReaderClass\r\t\t\t\t\t\t\t\ton: repository directory\r\t\t\t\t\t\t\t\tfileName: aMCWorkingCopy packageName , repository packageExtension)\r\t\t\t\t\t\t\t\tcommitID: commitID;\r\t\t\t\t\t\t\t\tinfo: (allFileNames detect: [ :en | en commitID = commitID ]) info;\r\t\t\t\t\t\t\t\tyourself) loadDefinitionFor: mcMethodDefinition ])\r\t\t\t\t\t\treject: [ :mcD | mcD isNil or: [ mcD isEmpty ] ])\r\t\t\t\t\t\tcollect: [ :e | e first ]) ] on: NotFound do: [ #() ])])\r\t\tcollectWithIndex: [ :c :i | \r\t\t\t| rg |\r\t\t\trg := c asRingDefinition.\r\t\t\trg annotationNamed: #versionIndex put: i ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '636' ],		#self : OmReference [ '637' ],		#time : DateAndTime [ '2018-01-14T19:02:29.385202-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RBVariableNode,				#isMetaSide : false			},			#name : #altTextCommands,			#protocol : #'*alt-browser',			#sourceCode : 'altTextCommands\r\t"Answer commands depending on the binding "\r\r\tself binding isInstance\r\t\tifTrue:\r\t\t\t[ ^ #(#AltInstVarDefs #AltInstVarRefs #AltRBInstVarRenameCommand #AltRBInstVarAccessorCommand #AltRBInstVarPushDownCommand #AltRBInstVarPullUpCommand #AltRBRemoveInstanceVariableCommand) ].\r\tself binding isTemp\r\t\tifTrue: [ ^ #(#AltRBTemporaryRenameCommand) ].\r\t(self binding isLiteral or: [ self isGlobal ])\r\t\tifTrue:\r\t\t\t[ self binding isClassVariable\r\t\t\t\tifTrue: [ ^ #(#AltRBRemoveClassVariableCommand) ]\r\t\t\t\tifFalse: [ ^ #(#AltBrowseTextCommand) ] ].\r\t^ #()',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '637' ],		#self : OmReference [ '638' ],		#time : DateAndTime [ '2018-01-14T19:02:29.386364-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RBMessageNode,				#isMetaSide : false			},			#name : #altTextCommands,			#protocol : #'*alt-browser',			#sourceCode : 'altTextCommands\r\t"Alt Browser commands enabled on this RB node."\r\r\t^ #(#AltImplementorsOfTextCommand #AltSendersTextCommand #AltBreakPointCommand #AltBreakOnceCommand #AltBreakWhenCommand AltWatchpointCommand)',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '638' ],		#self : OmReference [ '639' ],		#time : DateAndTime [ '2018-01-14T19:02:29.387793-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RBMessageNode,				#isMetaSide : false			},			#name : #textIntervals,			#protocol : #'*alt-browser-rb-commands',			#sourceCode : 'textIntervals\r\t"The text intervals for this node. To be used to show feedback on the node. Should return an array of intervals describing the node."\r\r\t^ self keywordsIntervals ',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '639' ],		#self : OmReference [ '640' ],		#time : DateAndTime [ '2018-01-14T19:02:29.389909-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltBrowserTest,				#isMetaSide : false			},			#name : #testProtocols,			#protocol : #'tests API',			#sourceCode : 'testProtocols\r\tself assert: (Object protocols allSatisfy: [ :p | p isSymbol ]).\r\tself assert: (Object organization protocols noneSatisfy: [ :p | p isSymbol ])',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '640' ],		#self : OmReference [ '641' ],		#time : DateAndTime [ '2018-01-14T19:02:29.391267-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltBrowserTest,				#isMetaSide : false			},			#name : #testRPackageAccess,			#protocol : #'tests API',			#sourceCode : 'testRPackageAccess\r\tself assert: (RPackage organizer packageOf: self class) packageName = \'Alt-Browser\'',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '641' ],		#self : OmReference [ '642' ],		#time : DateAndTime [ '2018-01-14T19:02:29.392172-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltBrowserTest,				#isMetaSide : false			},			#name : #testRPackageTagAccess,			#protocol : #'tests API',			#sourceCode : 'testRPackageTagAccess\r\t"RPackageTag>>name and RPackageTag>>categoryName"\r\r\t| package |\r\tpackage := RPackage organizer packageOf: self class.\r\tself assert: (package classTagForClass: self class) name = #Tests',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '642' ],		#self : OmReference [ '643' ],		#time : DateAndTime [ '2018-01-14T19:02:29.393097-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltBrowserTest,				#isMetaSide : false			},			#name : #testRPackageTagName,			#protocol : #'tests API',			#sourceCode : 'testRPackageTagName\r\t"RPackageTag>>name and RPackageTag>>categoryName"\r\r\t| packageTag |\r\tpackageTag := (RPackage organizer packageOf: self class) classTagForClass: self class.\r\tself assert: packageTag name = #Tests.\r\tself assert: packageTag categoryName = #\'Alt-Browser-Tests\'.\r\tself assert: packageTag packageName = #\'Alt-Browser\'',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '643' ],		#self : OmReference [ '644' ],		#time : DateAndTime [ '2018-01-14T19:02:29.393985-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltBrowserTest,				#isMetaSide : false			},			#name : #testToolsAPI,			#protocol : #'tests API',			#sourceCode : 'testToolsAPI\r\tself assert: (Object browse close isKindOf: AltBrowser)',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '644' ],		#self : OmReference [ '645' ],		#time : DateAndTime [ '2018-01-14T19:02:29.395158-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltBrowserTestUI,				#isMetaSide : false			},			#name : #docMCPackageOwnership,			#protocol : #documentation,			#sourceCode : 'docMCPackageOwnership\r\t"We look if we can test if a method belongs to a saved version of a MCPackage (with a version) or if it is in a dirty set."\r\r\t"Solution. Get a snapshot via the repository (why can\'t I ask the currently loaded package, mate?), and search through the definitions."\r\r\t"Ok, do that through a temporary/locally created method (but this will mark the package as dirty :(). Try to unmark the package as dirty afterwards ? Disactivate that test for the time being."\r\r\t| mcw mcv |\r\tmcw := MCWorkingCopy forPackage: (MCPackage named: \'Alt-Browser\').\r\tmcv := mcw repositoryGroup versionWithInfo: mcw ancestry ancestors first.\r\tAltBrowserTest compile: \'isTesting ^ true\'.\r\tself\r\t\tassert:\r\t\t\t(((mcv snapshot definitions select: [ :e | e isMethodDefinition ]) select: [ :f | f className = \'AltBrowserTest\' ])\r\t\t\t\tselect: [ :m | m selector = #isTesting ]) isEmpty.\r\tAltBrowserTest removeSelector: #isTesting.\r\tAltBrowserTest organization removeEmptyCategories',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '645' ],		#self : OmReference [ '646' ],		#time : DateAndTime [ '2018-01-14T19:02:29.396334-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltBrowserTestUI,				#isMetaSide : false			},			#name : #setUp,			#protocol : #resources,			#sourceCode : 'setUp\r\tRPackageOrganizer default registerPackageNamed: \'TestingUnderway\'.\r\tMCWorkingCopy forPackage: (MCPackage new name: \'TestingUnderway\').\r\tObject\r\t\tsubclass: #AltTestingClass\r\t\tinstanceVariableNames: \'\'\r\t\tclassVariableNames: \'\'\r\t\tpoolDictionaries: \'\'\r\t\tcategory: \'TestingUnderway\'.\r\tbrowser := AltBrowser open',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '646' ],		#self : OmReference [ '647' ],		#time : DateAndTime [ '2018-01-14T19:02:29.397319-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltBrowserTestUI,				#isMetaSide : false			},			#name : #tearDown,			#protocol : #resources,			#sourceCode : 'tearDown\r\t"Remove our testing class and category."\r\r\tbrowser close.\r\tbrowser release.\r\t(Smalltalk at: #AltTestingClass) removeFromSystem.\r\t(MCWorkingCopy forPackage: (MCPackage new name: \'TestingUnderway\')) unload.\r\tSmalltalk globals organization removeCategory: \'TestingUnderway\'',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '647' ],		#self : OmReference [ '648' ],		#time : DateAndTime [ '2018-01-14T19:02:29.398505-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltBrowserTestUI,				#isMetaSide : false			},			#name : #testAddRemoveSystemCategory,			#protocol : #tests,			#sourceCode : 'testAddRemoveSystemCategory\r\t"Package ready, create category and remove it, check that it has disappeared."\r\r\t| n |\r\tself assert: (Smalltalk globals organization includesCategory: #\'TestingUnderway-Core\') not.\r\t[ \r\tSmalltalk globals organization addCategory: #\'TestingUnderway-Core\'.\r\tn := browser treeMorph allNodeMorphs\r\t\tdetect: [ :aNodeMorph | aNodeMorph complexContents item name = \'an AltPackageNode(TestingUnderway)\' ]\r\t\tifNone: [  ].\r\tself assert: n notNil.\r\tn expand.\r\tn := browser treeMorph allNodeMorphs\r\t\tdetect: [ :aNodeMorph | aNodeMorph complexContents item name = \'an AltPackageTagNode(TestingUnderway-Core)\' ]\r\t\tifNone: [  ].\r\tself assert: n notNil.\r\tbrowser treeMorph listManager setSelectedMorph: n.\r\tbrowser treeMorph\r\t\tadjustSubmorphPositions;\r\t\tscrollSelectionIntoView.\r\tself assert: browser selectedItem == n complexContents.\r\tn complexContents item rpackage removeClassTag: #\'TestingUnderway-Core\'.\r\tSmalltalk globals organization removeCategory: #\'TestingUnderway-Core\'.\r\tn := browser treeMorph allNodeMorphs\r\t\tdetect: [ :aNodeMorph | aNodeMorph complexContents item name = \'an AltPackageTagNode(TestingUnderway-Core)\' ]\r\t\tifNone: [  ].\r\tself assert: n isNil ]\r\t\tensure: [ Smalltalk globals organization removeCategory: #\'TestingUnderway-Core\' ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '648' ],		#self : OmReference [ '649' ],		#time : DateAndTime [ '2018-01-14T19:02:29.400822-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltBrowserTestUI,				#isMetaSide : false			},			#name : #testAddSystemCategory,			#protocol : #tests,			#sourceCode : 'testAddSystemCategory\r\t"Package ready, create category and run."\r\r\t| n |\r\tself assert: (Smalltalk globals organization includesCategory: #\'TestingUnderway-Core\') not.\r\t[ \r\tSmalltalk globals organization addCategory: #\'TestingUnderway-Core\'.\r\tn := browser treeMorph allNodeMorphs\r\t\tdetect: [ :aNodeMorph | aNodeMorph complexContents item name = \'an AltPackageNode(TestingUnderway)\' ]\r\t\tifNone: [  ].\r\tself assert: n notNil.\r\tn expand.\r\tn := browser treeMorph allNodeMorphs\r\t\tdetect: [ :aNodeMorph | aNodeMorph complexContents item name = \'an AltPackageTagNode(TestingUnderway-Core)\' ]\r\t\tifNone: [  ].\r\tself assert: n notNil.\r\tbrowser treeMorph listManager setSelectedMorph: n.\r\tbrowser treeMorph\r\t\tadjustSubmorphPositions;\r\t\tscrollSelectionIntoView.\r\tself assert: browser selectedItem == n complexContents ]\r\t\tensure: [ Smalltalk globals organization removeCategory: #\'TestingUnderway-Core\' ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '649' ],		#self : OmReference [ '650' ],		#time : DateAndTime [ '2018-01-14T19:02:29.402188-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltBrowserTestUI,				#isMetaSide : false			},			#name : #testChangeTestClassDefinition,			#protocol : #tests,			#sourceCode : 'testChangeTestClassDefinition\r\t"Select our test class and check that the class definition is correctly updated. It is hard since we had to put a wait on the announcer to get it to work."\r\r\t| n |\r\tn := browser treeMorph allNodeMorphs\r\t\tdetect: [ :aNodeMorph | aNodeMorph complexContents item isPackageNode and: [ aNodeMorph complexContents item packageName = \'TestingUnderway\' ] ]\r\t\tifNone: [  ].\r\tself assert: n notNil.\r\tn expand.\r\tn := browser treeMorph allNodeMorphs\r\t\tdetect: [ :aNodeMorph | aNodeMorph complexContents item isClassNode and: [ aNodeMorph complexContents item title = \'AltTestingClass\' ] ]\r\t\tifNone: [  ].\r\tself assert: n notNil.\r\tbrowser treeMorph listManager setSelectedMorph: n.\r\tbrowser treeMorph\r\t\tadjustSubmorphPositions;\r\t\tscrollSelectionIntoView.\r\tself assert: browser selectedItem == n complexContents.\r\tself\r\t\tassert:\r\t\t\tbrowser textMorph text\r\t\t\t\t=\r\t\t\t\t\t\'Object subclass: #AltTestingClass\r\tinstanceVariableNames: \'\'\'\'\r\tclassVariableNames: \'\'\'\'\r\tpoolDictionaries: \'\'\'\'\r\tcategory: \'\'TestingUnderway\'\'\'.\r\tObject\r\t\tsubclass: #AltTestingClass\r\t\tinstanceVariableNames: \'aVariable\'\r\t\tclassVariableNames: \'\'\r\t\tpoolDictionaries: \'\'\r\t\tcategory: \'TestingUnderway\'.\r\t(Delay forMilliseconds: 1000) wait.\r\tself\r\t\tassert:\r\t\t\tbrowser textMorph text\r\t\t\t\t=\r\t\t\t\t\t\'Object subclass: #AltTestingClass\r\tinstanceVariableNames: \'\'aVariable\'\'\r\tclassVariableNames: \'\'\'\'\r\tpoolDictionaries: \'\'\'\'\r\tcategory: \'\'TestingUnderway\'\'\'',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '650' ],		#self : OmReference [ '651' ],		#time : DateAndTime [ '2018-01-14T19:02:29.403168-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltBrowserTestUI,				#isMetaSide : false			},			#name : #testHasPackage,			#protocol : #tests,			#sourceCode : 'testHasPackage\r\t"Test if our package for testing is there."\r\r\tself\r\t\tassert:\r\t\t\t(browser treeMorph allNodeMorphs\r\t\t\t\tdetect: [ :aNodeMorph | aNodeMorph complexContents item isPackageNode and: [ aNodeMorph complexContents item packageName = \'TestingUnderway\' ] ]\r\t\t\t\tifNone: [  ]) notNil',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '651' ],		#self : OmReference [ '652' ],		#time : DateAndTime [ '2018-01-14T19:02:29.404319-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltBrowserTestUI,				#isMetaSide : false			},			#name : #testRemoveAsYetUnclassifiedOnRecategorizeMethod,			#protocol : #tests,			#sourceCode : 'testRemoveAsYetUnclassifiedOnRecategorizeMethod\r\t"Test if not yet classified is correctly handled."\r\r\t| n |\r\tn := browser treeMorph allNodeMorphs\r\t\tdetect: [ :aNodeMorph | \r\t\t\t(aNodeMorph complexContents item isPackageNode)\r\t\t\t\tand: [ aNodeMorph complexContents item packageName = \'TestingUnderway\' ] ]\r\t\tifNone: [  ].\r\tself assert: n notNil.\r\tn expand.\r\tn := browser treeMorph allNodeMorphs\r\t\tdetect: [ :aNodeMorph | aNodeMorph complexContents item isClassNode and: [ aNodeMorph complexContents item title = \'AltTestingClass\' ] ]\r\t\tifNone: [  ].\r\tself assert: n notNil.\r\tbrowser treeMorph listManager setSelectedMorph: n.\r\tbrowser treeMorph\r\t\tadjustSubmorphPositions;\r\t\tscrollSelectionIntoView.\r\tself assert: browser selectedItem == n complexContents.\r\tn expand.\r\t(Smalltalk at: #AltTestingClass) compile: \'test ^ true\'.\r\t(Smalltalk at: #AltTestingClass) addCategory: #test before: nil.\r\tn := browser treeMorph allNodeMorphs\r\t\tdetect: [ :aNodeMorph | \r\t\t\taNodeMorph complexContents item isMethodCategoryNode\r\t\t\t\tand: [ aNodeMorph complexContents item methodCategory = #\'as yet unclassified\' ] ]\r\t\tifNone: [  ].\r\tself assert: n notNil.\r\t(Smalltalk at: #AltTestingClass) organization classify: #test under: #test suppressIfDefault: false.\r\tn := browser treeMorph allNodeMorphs\r\t\tdetect: [ :aNodeMorph | \r\t\t\taNodeMorph complexContents item isMethodCategoryNode\r\t\t\t\tand: [ aNodeMorph complexContents item methodCategory = #\'as yet unclassified\' ] ]\r\t\tifNone: [  ].\r\tself assert: n isNil',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '652' ],		#self : OmReference [ '653' ],		#time : DateAndTime [ '2018-01-14T19:02:29.405394-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltBrowserTestUI,				#isMetaSide : false			},			#name : #testRemoveAsYetUnclassifiedOnRemoveMethod,			#protocol : #tests,			#sourceCode : 'testRemoveAsYetUnclassifiedOnRemoveMethod\r\t"Test if not yet classified is correctly handled."\r\r\t| n |\r\tn := browser treeMorph allNodeMorphs\r\t\tdetect: [ :aNodeMorph | aNodeMorph complexContents item isPackageNode and: [ aNodeMorph complexContents item packageName = \'TestingUnderway\' ] ]\r\t\tifNone: [  ].\r\tself assert: n notNil.\r\tn expand.\r\tn := browser treeMorph allNodeMorphs\r\t\tdetect: [ :aNodeMorph | aNodeMorph complexContents item isClassNode and: [ aNodeMorph complexContents item title = \'AltTestingClass\' ] ]\r\t\tifNone: [  ].\r\tself assert: n notNil.\r\tbrowser treeMorph listManager setSelectedMorph: n.\r\tbrowser treeMorph\r\t\tadjustSubmorphPositions;\r\t\tscrollSelectionIntoView.\r\tself assert: browser selectedItem == n complexContents.\r\tn expand.\r\t(Smalltalk at: #AltTestingClass) compile: \'test ^ true\'.\r\tn := browser treeMorph allNodeMorphs\r\t\tdetect: [ :aNodeMorph | \r\t\t\taNodeMorph complexContents item isMethodCategoryNode\r\t\t\t\tand: [ aNodeMorph complexContents item methodCategory = #\'as yet unclassified\' ] ]\r\t\tifNone: [  ].\r\tself assert: n notNil.\r\t(Smalltalk at: #AltTestingClass) removeSelector: #test.\r\tn := browser treeMorph allNodeMorphs\r\t\tdetect: [ :aNodeMorph | \r\t\t\taNodeMorph complexContents item isMethodCategoryNode\r\t\t\t\tand: [ aNodeMorph complexContents item methodCategory = #\'as yet unclassified\' ] ]\r\t\tifNone: [  ].\r\tself assert: n isNil',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '653' ],		#self : OmReference [ '654' ],		#time : DateAndTime [ '2018-01-14T19:02:29.406495-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltBrowserTestUI,				#isMetaSide : false			},			#name : #testRemoveProtocol,			#protocol : #tests,			#sourceCode : 'testRemoveProtocol\r\t"Test adding a protocol and removing it."\r\r\t| n |\r\tn := browser treeMorph allNodeMorphs\r\t\tdetect: [ :aNodeMorph | aNodeMorph complexContents item isPackageNode and: [ aNodeMorph complexContents item packageName = \'TestingUnderway\' ] ]\r\t\tifNone: [  ].\r\tself assert: n notNil.\r\tn expand.\r\tn := browser treeMorph allNodeMorphs\r\t\tdetect: [ :aNodeMorph | aNodeMorph complexContents item isClassNode and: [ aNodeMorph complexContents item title = \'AltTestingClass\' ] ]\r\t\tifNone: [  ].\r\tself assert: n notNil.\r\tbrowser treeMorph listManager setSelectedMorph: n.\r\tbrowser treeMorph\r\t\tadjustSubmorphPositions;\r\t\tscrollSelectionIntoView.\r\tself assert: browser selectedItem == n complexContents.\r\tn expand.\r\t(Smalltalk at: #AltTestingClass) addCategory: #test before: nil.\r\tn := browser treeMorph allNodeMorphs\r\t\tdetect: [ :aNodeMorph | aNodeMorph complexContents item isMethodCategoryNode and: [ aNodeMorph complexContents item methodCategory = #test ] ]\r\t\tifNone: [  ].\r\tself assert: n notNil.\r\t(Smalltalk at: #AltTestingClass) organization removeCategory: #test.\r\tn := browser treeMorph allNodeMorphs\r\t\tdetect: [ :aNodeMorph | aNodeMorph complexContents item isMethodCategoryNode and: [ aNodeMorph complexContents item methodCategory = #test ] ]\r\t\tifNone: [  ].\r\tself assert: n isNil',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '654' ],		#self : OmReference [ '655' ],		#time : DateAndTime [ '2018-01-14T19:02:29.407378-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltBrowserTestUI,				#isMetaSide : false			},			#name : #testSearchMethod,			#protocol : #tests,			#sourceCode : 'testSearchMethod\r\t"Test creating a method and selecting it."\r\t\r\t',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '655' ],		#self : OmReference [ '656' ],		#time : DateAndTime [ '2018-01-14T19:02:29.408387-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltBrowserTestUI,				#isMetaSide : false			},			#name : #testSelectPackage,			#protocol : #tests,			#sourceCode : 'testSelectPackage\r\t"Test if our package for testing is there."\r\r\t| n |\r\tn := browser treeMorph allNodeMorphs\r\t\tdetect: [ :aNodeMorph | aNodeMorph complexContents item isPackageNode and: [ aNodeMorph complexContents item packageName = \'TestingUnderway\' ] ]\r\t\tifNone: [  ].\r\tself assert: n notNil.\r\tbrowser treeMorph listManager setSelectedMorph: n.\r\tbrowser treeMorph\r\t\tadjustSubmorphPositions;\r\t\tscrollSelectionIntoView.\r\tself assert: browser selectedItem == n complexContents',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '656' ],		#self : OmReference [ '657' ],		#time : DateAndTime [ '2018-01-14T19:02:29.409387-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltBrowserTestUI,				#isMetaSide : false			},			#name : #testSelectTestClass,			#protocol : #tests,			#sourceCode : 'testSelectTestClass\r\t"Test if our class for testing is there."\r\r\t| n |\r\tn := browser treeMorph allNodeMorphs\r\t\tdetect: [ :aNodeMorph | aNodeMorph complexContents item isPackageNode and: [ aNodeMorph complexContents item packageName = \'TestingUnderway\' ] ]\r\t\tifNone: [  ].\r\tself assert: n notNil.\r\tn expand.\r\tn := browser treeMorph allNodeMorphs\r\t\tdetect: [ :aNodeMorph | aNodeMorph complexContents item isClassNode and: [ aNodeMorph complexContents item title = \'AltTestingClass\' ] ]\r\t\tifNone: [  ].\r\tself assert: n notNil.\r\tbrowser treeMorph listManager setSelectedMorph: n.\r\tbrowser treeMorph\r\t\tadjustSubmorphPositions;\r\t\tscrollSelectionIntoView.\r\tself assert: browser selectedItem == n complexContents',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '657' ],		#self : OmReference [ '658' ],		#time : DateAndTime [ '2018-01-14T19:02:29.411599-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltBrowserCodeModel,				#isMetaSide : false			},			#name : #'aboutToStyle:',			#protocol : #accessing,			#sourceCode : 'aboutToStyle: aBoolean\r\taboutToStyle := aBoolean',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '658' ],		#self : OmReference [ '659' ],		#time : DateAndTime [ '2018-01-14T19:02:29.412597-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltBrowserCodeModel,				#isMetaSide : false			},			#name : #'browser:',			#protocol : #accessing,			#sourceCode : 'browser: anAltBrowserModel\r\tbrowser := anAltBrowserModel',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '659' ],		#self : OmReference [ '660' ],		#time : DateAndTime [ '2018-01-14T19:02:29.413487-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltBrowserCodeModel,				#isMetaSide : false			},			#name : #'buildTextMenu:',			#protocol : #accessing,			#sourceCode : 'buildTextMenu: aMenu\r\t^ browser buildTextMenu: aMenu',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '660' ],		#self : OmReference [ '661' ],		#time : DateAndTime [ '2018-01-14T19:02:29.414421-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltBrowserCodeModel,				#isMetaSide : false			},			#name : #contents,			#protocol : #contents,			#sourceCode : 'contents\r\t"Answer the source code or documentation for the selected method"\r\r\t^ contents copy',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '661' ],		#self : OmReference [ '662' ],		#time : DateAndTime [ '2018-01-14T19:02:29.415274-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltBrowserCodeModel,				#isMetaSide : false			},			#name : #'contents:',			#protocol : #contents,			#sourceCode : 'contents: aStringOrText\r\tcontents := aStringOrText.\r\tself changed: #contents',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '662' ],		#self : OmReference [ '663' ],		#time : DateAndTime [ '2018-01-14T19:02:29.416287-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltBrowserCodeModel,				#isMetaSide : false			},			#name : #readSelection,			#protocol : #accessing,			#sourceCode : 'readSelection\r\t^ browser textMorph readSelection',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '663' ],		#self : OmReference [ '664' ],		#time : DateAndTime [ '2018-01-14T19:02:29.417226-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltBrowserCodeModel,				#isMetaSide : false			},			#name : #selectedClass,			#protocol : #accessing,			#sourceCode : 'selectedClass\r\t"Hope this is the one really needed."\r\r\t^ browser selectedNode isNil\r\t\tifTrue: [ nil ]\r\t\tifFalse: [ browser selectedNode sourceClass ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '664' ],		#self : OmReference [ '665' ],		#time : DateAndTime [ '2018-01-14T19:02:29.418138-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltBrowserCodeModel,				#isMetaSide : false			},			#name : #'shoutAboutToStyle:',			#protocol : #accessing,			#sourceCode : 'shoutAboutToStyle: ignored\r\taboutToStyle isNil\r\t\tifTrue: [ aboutToStyle := false ].\r\t^ aboutToStyle',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '665' ],		#self : OmReference [ '666' ],		#time : DateAndTime [ '2018-01-14T19:02:29.419079-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPluggableTextMorph,				#isMetaSide : false			},			#name : #themeChanged,			#protocol : #accessing-theme,			#sourceCode : 'themeChanged\r\t^ super themeChanged',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '666' ],		#self : OmReference [ '667' ],		#time : DateAndTime [ '2018-01-14T19:02:29.421476-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PluggableTextMorph,				#isMetaSide : false			},			#name : #readSelection,			#protocol : #'*Alt-Browser',			#sourceCode : 'readSelection\r\t"Return the selection text as remembered by the PluggableTextMoprh, even if not in focus."\r\r\t^ textMorph editor text copyFrom: selectionInterval first to: selectionInterval last',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '667' ],		#self : OmReference [ '668' ],		#time : DateAndTime [ '2018-01-14T19:02:29.42283-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PluggableTextMorph,				#isMetaSide : false			},			#name : #trueSelection,			#protocol : #'*Alt-Browser',			#sourceCode : 'trueSelection\r\t"Return the selection text as remembered by the PluggableTextMoprh, even if not in focus."\r\r\t^ textMorph editor text copyFrom: selectionInterval first to: selectionInterval last',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '668' ],		#self : OmReference [ '669' ],		#time : DateAndTime [ '2018-01-14T19:02:29.423851-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PluggableTextMorph,				#isMetaSide : false			},			#name : #trueSelectionInterval,			#protocol : #'*Alt-Browser',			#sourceCode : 'trueSelectionInterval\r\t^ selectionInterval',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '669' ],		#self : OmReference [ '670' ],		#time : DateAndTime [ '2018-01-14T19:02:29.42489-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltLayoutFrame class',				#isMetaSide : true			},			#name : #'fractions:topLeftOffsets:bottomRightOffsets:',			#protocol : #'instance creation',			#sourceCode : 'fractions: fractions topLeftOffsets: topLeftOffsets bottomRightOffsets: bottomRightOffsets\r\t^ self new\r\t\ttopFraction: fractions top offset: topLeftOffsets y;\r\t\tleftFraction: fractions left offset: topLeftOffsets x;\r\t\tbottomFraction: fractions bottom offset: bottomRightOffsets y;\r\t\trightFraction: fractions right offset: bottomRightOffsets x',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '670' ],		#self : OmReference [ '671' ],		#time : DateAndTime [ '2018-01-14T19:02:29.426165-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltLayoutFrame,				#isMetaSide : false			},			#name : #'transform:',			#protocol : #transforming,			#sourceCode : 'transform: outerReferenceRectangle\r\t"Answer a new rectangle which transformed by receiver relative to outerReferenceRectangle.\r\tIf it is not possible to place a outerReferenceRectangle *inside*  this reference rectangle, then result will be zero-width (or zero-height) rectangle. Basically you transform to obtain a subrectangle area inside the reference rectangle"\r\r\t| left right top bottom |\r\tleft := (outerReferenceRectangle left\r\t\t+ (outerReferenceRectangle width * leftFraction) + leftOffset)\r\t\trounded asInteger.\r\tright := (outerReferenceRectangle right\r\t\t- (outerReferenceRectangle width * (1 - rightFraction))\r\t\t+ rightOffset) rounded asInteger.\r\ttop := (outerReferenceRectangle top\r\t\t+ (outerReferenceRectangle height * topFraction) + topOffset)\r\t\trounded asInteger.\r\tbottom := (outerReferenceRectangle bottom\r\t\t- (outerReferenceRectangle height * (1 - bottomFraction))\r\t\t+ bottomOffset) rounded asInteger.\r\tright < left\r\t\tifTrue: [ right := left ].\r\tbottom < top\r\t\tifTrue: [ bottom := top ].\r\t^ Rectangle\r\t\tleft: (left max: outerReferenceRectangle left)\r\t\tright: (right min: outerReferenceRectangle right)\r\t\ttop: (top max: outerReferenceRectangle top)\r\t\tbottom: (bottom min: outerReferenceRectangle bottom)',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '671' ],		#self : OmReference [ '672' ],		#time : DateAndTime [ '2018-01-14T19:02:29.427094-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltKMDispatcher,				#isMetaSide : false			},			#name : #'dispatchKeystroke:',			#protocol : #dispatching,			#sourceCode : 'dispatchKeystroke: aKeyEvent\r\t"We override to make sure we do not propagate Cmd and Ctrl keys to old code."\r\r\tsuper dispatchKeystroke: aKeyEvent.\r\taKeyEvent commandKeyPressed\r\t\tifTrue: [ aKeyEvent wasHandled: true ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '672' ],		#self : OmReference [ '673' ],		#time : DateAndTime [ '2018-01-14T19:02:29.428106-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltKMDispatcher,				#isMetaSide : false			},			#name : #keymapObservers,			#protocol : #dispatching,			#sourceCode : 'keymapObservers\r\t| o |\r\t(o := OrderedCollection with: self perInstanceTarget)\r\t\taddAll: self targets.\r\t^ o',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '673' ],		#self : OmReference [ '674' ],		#time : DateAndTime [ '2018-01-14T19:02:29.429221-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RBLiteralValueNode,				#isMetaSide : false			},			#name : #altTextCommands,			#protocol : #'*alt-browser',			#sourceCode : 'altTextCommands\r\t"Alt Browser commands enabled on this RB node."\r\r\tself value isSymbol\r\t\tifTrue: [ ^ #(#AltImplementorsOfSymbolCommand #AltSendersOfSymbolCommand) ]\r\t\tifFalse: [ ^ #() ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '674' ],		#self : OmReference [ '675' ],		#time : DateAndTime [ '2018-01-14T19:02:29.430293-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RBParseErrorNode,				#isMetaSide : false			},			#name : #isGlobal,			#protocol : #'*alt-browser',			#sourceCode : 'isGlobal\r\t^ false',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '675' ],		#self : OmReference [ '676' ],		#time : DateAndTime [ '2018-01-14T19:02:29.431255-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RBParseErrorNode,				#isMetaSide : false			},			#name : #isInstance,			#protocol : #'*alt-browser',			#sourceCode : 'isInstance\r\t^ false',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '676' ],		#self : OmReference [ '677' ],		#time : DateAndTime [ '2018-01-14T19:02:29.433619-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RBParseErrorNode,				#isMetaSide : false			},			#name : #isSpecialVariable,			#protocol : #'*alt-browser',			#sourceCode : 'isSpecialVariable\r\t^ false',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '677' ],		#self : OmReference [ '678' ],		#time : DateAndTime [ '2018-01-14T19:02:29.434616-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltNodeAnnouncement class',				#isMetaSide : true			},			#name : #'node:',			#protocol : #'instance creation',			#sourceCode : 'node: aNode\r\t^ self new node: aNode',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '678' ],		#self : OmReference [ '679' ],		#time : DateAndTime [ '2018-01-14T19:02:29.435633-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltNodeAnnouncement,				#isMetaSide : false			},			#name : #node,			#protocol : #accessing,			#sourceCode : 'node\r\t^ node',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '679' ],		#self : OmReference [ '680' ],		#time : DateAndTime [ '2018-01-14T19:02:29.436599-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltNodeAnnouncement,				#isMetaSide : false			},			#name : #'node:',			#protocol : #accessing,			#sourceCode : 'node: anObject\r\tnode := anObject',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '680' ],		#self : OmReference [ '681' ],		#time : DateAndTime [ '2018-01-14T19:02:29.437527-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltWatchpointInstalled,				#isMetaSide : false			},			#name : #watchpoint,			#protocol : #accessing,			#sourceCode : 'watchpoint\r\t^ watchpoint',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '681' ],		#self : OmReference [ '682' ],		#time : DateAndTime [ '2018-01-14T19:02:29.438421-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltWatchpointInstalled,				#isMetaSide : false			},			#name : #'watchpoint:',			#protocol : #accessing,			#sourceCode : 'watchpoint: anObject\r\twatchpoint := anObject',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '682' ],		#self : OmReference [ '683' ],		#time : DateAndTime [ '2018-01-14T19:02:29.43934-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltWatchpointUninstalled,				#isMetaSide : false			},			#name : #watchpoint,			#protocol : #accessing,			#sourceCode : 'watchpoint\r\t^ watchpoint',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '683' ],		#self : OmReference [ '684' ],		#time : DateAndTime [ '2018-01-14T19:02:29.440267-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltWatchpointUninstalled,				#isMetaSide : false			},			#name : #'watchpoint:',			#protocol : #accessing,			#sourceCode : 'watchpoint: anObject\r\twatchpoint := anObject',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '684' ],		#self : OmReference [ '685' ],		#time : DateAndTime [ '2018-01-14T19:02:29.441432-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RBAssignmentNode,				#isMetaSide : false			},			#name : #altTextCommands,			#protocol : #'*alt-browser',			#sourceCode : 'altTextCommands\r\t"Alt Browser commands enabled on this RB node."\r\r\t^ #(#AltBreakPointCommand #AltBreakOnceCommand #AltBreakWhenCommand)',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '685' ],		#self : OmReference [ '686' ],		#time : DateAndTime [ '2018-01-14T19:02:29.442269-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMethodAdded,				#isMetaSide : false			},			#name : #rpackage,			#protocol : #accessing,			#sourceCode : 'rpackage\r\t^ rpackage',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '686' ],		#self : OmReference [ '687' ],		#time : DateAndTime [ '2018-01-14T19:02:29.444668-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMethodAdded,				#isMetaSide : false			},			#name : #'rpackage:',			#protocol : #accessing,			#sourceCode : 'rpackage: anObject\r\trpackage := anObject',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '687' ],		#self : OmReference [ '688' ],		#time : DateAndTime [ '2018-01-14T19:02:29.446194-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CompiledMethod,				#isMetaSide : false			},			#name : #isOverride,			#protocol : #'*alt-browser',			#sourceCode : 'isOverride\r\t| selector |\r\tselector := self selector.\r\tself methodClass\r\t\tallSuperclassesDo: [ :each | \r\t\t\t(each includesSelector: selector)\r\t\t\t\tifTrue: [ ^ true ] ].\r\t^ false',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '688' ],		#self : OmReference [ '689' ],		#time : DateAndTime [ '2018-01-14T19:02:29.447057-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltBrowserHelp class',				#isMetaSide : true			},			#name : #bookName,			#protocol : #accessing,			#sourceCode : 'bookName\r\t^ \'AltBrowser\'',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '689' ],		#self : OmReference [ '690' ],		#time : DateAndTime [ '2018-01-14T19:02:29.448046-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltBrowserHelp class',				#isMetaSide : true			},			#name : #introduction,			#protocol : #pages,			#sourceCode : 'introduction\r\t^ HelpTopic\r\t\ttitle: \'Introduction\'\r\t\tcontents:\r\'The Alternative System Browser\r\rThe AltBrowser, for short, is a replacement for the standard or improved system browser. Its aims are to present a powerfull, yet simple, view of your Smalltalk Image to explore and program with, trying a few innovations along the way (smart suggestions, git integration).\r\rThe AltBrowser is also, in itself, a work in progress on a framework for that type of GUI and that type of application in Pharo. Take it as a way to learn to write this type of code really well (both GUI and system integration), and to polish it.\'\r\t\t',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '690' ],		#self : OmReference [ '691' ],		#time : DateAndTime [ '2018-01-14T19:02:29.448949-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltBrowserHelp class',				#isMetaSide : true			},			#name : #notes,			#protocol : #pages,			#sourceCode : 'notes\r\t^ HelpTopic\r\t\ttitle: \'Notes\'\r\t\tcontents:\r\'Issues and Specifics:\r\t- AltBrowser does not track non-packaged code. There is no _UnpackagedPackage node, neither an \'\'Unclassified\'\' node.\r\'\r\t\t',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '691' ],		#self : OmReference [ '692' ],		#time : DateAndTime [ '2018-01-14T19:02:29.449777-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltBrowserHelp class',				#isMetaSide : true			},			#name : #pages,			#protocol : #accessing,			#sourceCode : 'pages\r\t^ #(introduction status notes)',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '692' ],		#self : OmReference [ '693' ],		#time : DateAndTime [ '2018-01-14T19:02:29.450644-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltBrowserHelp class',				#isMetaSide : true			},			#name : #status,			#protocol : #pages,			#sourceCode : 'status\r\t^ HelpTopic\r\t\ttitle: \'Status\'\r\t\tcontents:\r\'Status is : working fine. The underlying framework to handle the tree, commands, drag and drop and all starts to be really nice and polished. It has also proven itself very stable on Pharo 3 while the latter was being developped, as one of the client of the underlying code model (RPackage and friends).\'\r\t\t',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '693' ],		#self : OmReference [ '694' ],		#time : DateAndTime [ '2018-01-14T19:02:29.451553-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTextSearchMorph,				#isMetaSide : false			},			#name : #canChangeText,			#protocol : #testing,			#sourceCode : 'canChangeText\r\t^ true',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '694' ],		#self : OmReference [ '695' ],		#time : DateAndTime [ '2018-01-14T19:02:29.452505-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTextSearchMorph,				#isMetaSide : false			},			#name : #'drawOn:',			#protocol : #drawing,			#sourceCode : 'drawOn: aCanvas\r\r\taCanvas fillRectangle: self bounds color: Color yellow muchLighter.\r\t^ super drawOn: aCanvas',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '695' ],		#self : OmReference [ '696' ],		#time : DateAndTime [ '2018-01-14T19:02:29.454849-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTextSearchMorph,				#isMetaSide : false			},			#name : #'handleKeystroke:',			#protocol : #'event handling',			#sourceCode : 'handleKeystroke: anEvent\r\t"Why do I have to add that? The event handler stuff is removed from TextMorph."\r\r\tsuper handleKeystroke: anEvent.\r\t^ self eventHandler ifNotNil: [ :handler | handler keyStroke: anEvent fromMorph: self ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '696' ],		#self : OmReference [ '697' ],		#time : DateAndTime [ '2018-01-14T19:02:29.455995-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTextSearchMorph,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\t"Initialize the receiver.  Give it a white background"\r\r\tsuper initialize.\r\tself backgroundColor: (self theme backgroundColor alpha: 0.5).\r\tself color: Color red.\r\tself addDropShadow',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '697' ],		#self : OmReference [ '698' ],		#time : DateAndTime [ '2018-01-14T19:02:29.457162-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTextSearchMorph,				#isMetaSide : false			},			#name : #'keyStroke:',			#protocol : #'event handling',			#sourceCode : 'keyStroke: evt\r\t"This is hugely inefficient, but it seems to work, and it\'s unlikely it will ever need\r\tto be any more efficient -- I like the way the editor is being managed."\r\r\t| char priorEditor newSel |\r\t((char := evt keyCharacter) = Character enter\r\t\tor: [ char = Character cr or: [ char = Character escape or: [ char = $s and: [ evt commandKeyPressed ] ] ] ])\r\t\tifTrue: [ \r\t\t\tevt hand releaseKeyboardFocus.\r\t\t\t^ self delete ].\r\t(char = $l and: [ evt commandKeyPressed ])\r\t\tifTrue: [ \r\t\t\t"cancel"\r\t\t\tevt hand releaseKeyboardFocus.\r\t\t\t^ self delete ].\r\tsuper keyStroke: evt.\r\tnewSel := self editor selectionInterval.\r\tpriorEditor := self editor.\t"Save editor state"\r\tself releaseParagraph.\t"Release paragraph so it will grow with selection."\r\tself paragraph.\t"Re-instantiate to set new bounds"\r\tself installEditorToReplace: priorEditor.\t"restore editor state"\r\tself editor selectFrom: newSel first to: newSel last',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '698' ],		#self : OmReference [ '699' ],		#time : DateAndTime [ '2018-01-14T19:02:29.458124-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTextSearchMorph,				#isMetaSide : false			},			#name : #'keyboardFocusChange:',			#protocol : #'event handling',			#sourceCode : 'keyboardFocusChange: aBoolean\r\t"Loosing focus means deleting itself."\r\r\tsuper keyboardFocusChange: aBoolean.\r\taBoolean\r\t\tifFalse: [ ^ self delete ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '699' ],		#self : OmReference [ '700' ],		#time : DateAndTime [ '2018-01-14T19:02:29.459342-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RBPragmaNode,				#isMetaSide : false			},			#name : #altTextCommands,			#protocol : #'*alt-browser',			#sourceCode : 'altTextCommands\r\t"Alt Browser commands enabled on this RB node."\r\r\t(#(example script) includes: self selector)\r\t\tifTrue:\r\t\t\t[ ^ #(#AltImplementorsOfTextCommand #AltSendersTextCommand #AltMethodDoItCommand) ]\r\t\tifFalse: [ ^ #(#AltImplementorsOfTextCommand #AltSendersTextCommand) ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '700' ],		#self : OmReference [ '701' ],		#time : DateAndTime [ '2018-01-14T19:02:29.460357-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RBPragmaNode,				#isMetaSide : false			},			#name : #textIntervals,			#protocol : #'*alt-browser',			#sourceCode : 'textIntervals\r\t"The text intervals for this node. To be used to show feedback on the node. Should return an array of intervals describing the node."\r\r\t^ self keywordsIntervals',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '701' ],		#self : OmReference [ '702' ],		#time : DateAndTime [ '2018-01-14T19:02:29.461388-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltAbstractNode class',				#isMetaSide : true			},			#name : #'sortClasses:',			#protocol : #ordering,			#sourceCode : 'sortClasses: aClassList\r\t"Order: first the closest to object (in number of superclasses) then alphabetical then in tree mode."\r\r\t| sorted currentList remainList |\r\tcurrentList := aClassList asArray\r\t\tsort: [ :a :b | \r\t\t\t| s1 s2 |\r\t\t\ts1 := a withAllSuperclasses size.\r\t\t\ts2 := b withAllSuperclasses size.\r\t\t\ts1 < s2 or: [ s1 = s2 and: [ a name < b name ] ] ].\r\tremainList := OrderedCollection new: currentList size.\r\tsorted := OrderedCollection new: currentList size.\r\tcurrentList\r\t\tdo: [ :e | \r\t\t\t(aClassList includes: e superclass)\r\t\t\t\tifFalse: [ sorted add: e ]\r\t\t\t\tifTrue: [ remainList add: e ] ].\r\tcurrentList := remainList reversed.\r\t[ currentList notEmpty ]\r\t\twhileTrue: [ \r\t\t\tremainList := OrderedCollection new: currentList size.\r\t\t\tcurrentList\r\t\t\t\tdo: [ :e | \r\t\t\t\t\t(sorted indexOf: e superclass ifAbsent: [  ])\r\t\t\t\t\t\tifNil: [ remainList add: e ]\r\t\t\t\t\t\tifNotNil: [ :i | sorted add: e afterIndex: i ] ].\r\t\t\tcurrentList := remainList ].\r\t^ sorted',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '702' ],		#self : OmReference [ '703' ],		#time : DateAndTime [ '2018-01-14T19:02:29.462381-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltAbstractNode class',				#isMetaSide : true			},			#name : #'with:',			#protocol : #'instance creation',			#sourceCode : 'with: anObject\r\t^ self new item: anObject',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '703' ],		#self : OmReference [ '704' ],		#time : DateAndTime [ '2018-01-14T19:02:29.463328-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltAbstractNode class',				#isMetaSide : true			},			#name : #'with:parent:',			#protocol : #'instance creation',			#sourceCode : 'with: anObject parent: aNode\r\t^ self new\r\t\titem: anObject;\r\t\tparent: aNode;\r\t\tyourself',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '704' ],		#self : OmReference [ '705' ],		#time : DateAndTime [ '2018-01-14T19:02:29.465609-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltAbstractNode,				#isMetaSide : false			},			#name : #'aCategoryAdded:',			#protocol : #updating,			#sourceCode : 'aCategoryAdded: anEvent\r\t^ false',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '705' ],		#self : OmReference [ '706' ],		#time : DateAndTime [ '2018-01-14T19:02:29.466769-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltAbstractNode,				#isMetaSide : false			},			#name : #'aCategoryRemoved:',			#protocol : #updating,			#sourceCode : 'aCategoryRemoved: anEvent\r\t^ false',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '706' ],		#self : OmReference [ '707' ],		#time : DateAndTime [ '2018-01-14T19:02:29.46766-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltAbstractNode,				#isMetaSide : false			},			#name : #'aCategoryRenamed:',			#protocol : #updating,			#sourceCode : 'aCategoryRenamed: anEvent\r\t"Pass through that event."\r\r\t^ false',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '707' ],		#self : OmReference [ '708' ],		#time : DateAndTime [ '2018-01-14T19:02:29.468575-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltAbstractNode,				#isMetaSide : false			},			#name : #'aClassAdded:',			#protocol : #updating,			#sourceCode : 'aClassAdded: anEvent\r\t"Pass through that event."\r\r\t^ false',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '708' ],		#self : OmReference [ '709' ],		#time : DateAndTime [ '2018-01-14T19:02:29.469464-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltAbstractNode,				#isMetaSide : false			},			#name : #'aClassCommented:',			#protocol : #updating,			#sourceCode : 'aClassCommented: anEvent\r\t^ false',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '709' ],		#self : OmReference [ '710' ],		#time : DateAndTime [ '2018-01-14T19:02:29.470341-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltAbstractNode,				#isMetaSide : false			},			#name : #'aClassModifiedClassDefinition:',			#protocol : #updating,			#sourceCode : 'aClassModifiedClassDefinition: anEvent\r\t"Pass through that event."\r\r\t^ false',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '710' ],		#self : OmReference [ '711' ],		#time : DateAndTime [ '2018-01-14T19:02:29.471219-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltAbstractNode,				#isMetaSide : false			},			#name : #'aClassRecategorized:',			#protocol : #updating,			#sourceCode : 'aClassRecategorized: anEvent\r\t"Pass through that event."\r\r\t^ false',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '711' ],		#self : OmReference [ '712' ],		#time : DateAndTime [ '2018-01-14T19:02:29.472087-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltAbstractNode,				#isMetaSide : false			},			#name : #'aClassRemoved:',			#protocol : #updating,			#sourceCode : 'aClassRemoved: anEvent\r\t"Pass through that event."\r\r\t^ false',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '712' ],		#self : OmReference [ '713' ],		#time : DateAndTime [ '2018-01-14T19:02:29.472995-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltAbstractNode,				#isMetaSide : false			},			#name : #'aClassRenamed:',			#protocol : #updating,			#sourceCode : 'aClassRenamed: anEvent\r\t"Pass through that event."\r\r\t^ false',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '713' ],		#self : OmReference [ '714' ],		#time : DateAndTime [ '2018-01-14T19:02:29.473925-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltAbstractNode,				#isMetaSide : false			},			#name : #'aClassReorganized:',			#protocol : #updating,			#sourceCode : 'aClassReorganized: anEvent\r\t"Pass through that event."\r\r\t^ false',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '714' ],		#self : OmReference [ '715' ],		#time : DateAndTime [ '2018-01-14T19:02:29.476266-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltAbstractNode,				#isMetaSide : false			},			#name : #'aClassRepackaged:',			#protocol : #updating,			#sourceCode : 'aClassRepackaged: anEvent\r\t"Pass through that event."\r\r\t^ false',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '715' ],		#self : OmReference [ '716' ],		#time : DateAndTime [ '2018-01-14T19:02:29.477293-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltAbstractNode,				#isMetaSide : false			},			#name : #'aMCWorkingCopyCreated:',			#protocol : #updating,			#sourceCode : 'aMCWorkingCopyCreated: anEvent\r\t^ false',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '716' ],		#self : OmReference [ '717' ],		#time : DateAndTime [ '2018-01-14T19:02:29.478341-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltAbstractNode,				#isMetaSide : false			},			#name : #'aMCWorkingCopyDeleted:',			#protocol : #updating,			#sourceCode : 'aMCWorkingCopyDeleted: anEvent\r\t^ false',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '717' ],		#self : OmReference [ '718' ],		#time : DateAndTime [ '2018-01-14T19:02:29.479211-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltAbstractNode,				#isMetaSide : false			},			#name : #'aMCWorkingCopyModified:',			#protocol : #updating,			#sourceCode : 'aMCWorkingCopyModified: anEvent\r\t^ false',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '718' ],		#self : OmReference [ '719' ],		#time : DateAndTime [ '2018-01-14T19:02:29.480298-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltAbstractNode,				#isMetaSide : false			},			#name : #'aMetalinkChanged:',			#protocol : #updating,			#sourceCode : 'aMetalinkChanged: anEvent\r\t^ false',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '719' ],		#self : OmReference [ '720' ],		#time : DateAndTime [ '2018-01-14T19:02:29.481211-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltAbstractNode,				#isMetaSide : false			},			#name : #'aMethodAdded:',			#protocol : #updating,			#sourceCode : 'aMethodAdded: anEvent\r\t^ false',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '720' ],		#self : OmReference [ '721' ],		#time : DateAndTime [ '2018-01-14T19:02:29.482109-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltAbstractNode,				#isMetaSide : false			},			#name : #'aMethodRecategorized:',			#protocol : #updating,			#sourceCode : 'aMethodRecategorized: anEvent\r\t^ false',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '721' ],		#self : OmReference [ '722' ],		#time : DateAndTime [ '2018-01-14T19:02:29.483065-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltAbstractNode,				#isMetaSide : false			},			#name : #'aMethodRemoved:',			#protocol : #updating,			#sourceCode : 'aMethodRemoved: anEvent\r\t"Pass through to childrens."\r\r\t^ false',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '722' ],		#self : OmReference [ '723' ],		#time : DateAndTime [ '2018-01-14T19:02:29.484057-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltAbstractNode,				#isMetaSide : false			},			#name : #'aRPackageCreated:',			#protocol : #updating,			#sourceCode : 'aRPackageCreated: anEvent\r\t^ false',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '723' ],		#self : OmReference [ '724' ],		#time : DateAndTime [ '2018-01-14T19:02:29.485209-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltAbstractNode,				#isMetaSide : false			},			#name : #'aRPackageUnregistered:',			#protocol : #updating,			#sourceCode : 'aRPackageUnregistered: anEvent\r\t^ false',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '724' ],		#self : OmReference [ '725' ],		#time : DateAndTime [ '2018-01-14T19:02:29.48767-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltAbstractNode,				#isMetaSide : false			},			#name : #aRecentPackagesReset,			#protocol : #updating,			#sourceCode : 'aRecentPackagesReset\r\t^ false',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '725' ],		#self : OmReference [ '726' ],		#time : DateAndTime [ '2018-01-14T19:02:29.488695-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltAbstractNode,				#isMetaSide : false			},			#name : #'aWatchpointInstalled:',			#protocol : #updating,			#sourceCode : 'aWatchpointInstalled: anEvent\r\t^ false',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '726' ],		#self : OmReference [ '727' ],		#time : DateAndTime [ '2018-01-14T19:02:29.489597-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltAbstractNode,				#isMetaSide : false			},			#name : #'aWatchpointUninstalled:',			#protocol : #updating,			#sourceCode : 'aWatchpointUninstalled: anEvent\r\t^ false',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '727' ],		#self : OmReference [ '728' ],		#time : DateAndTime [ '2018-01-14T19:02:29.490479-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltAbstractNode,				#isMetaSide : false			},			#name : #'accept:notifying:',			#protocol : #actions,			#sourceCode : 'accept: aText notifying: aController\r\t"When the text editor associated has accepted, do that..."\r\r\t"That is, nothing by default."\r\t\r\t^ nil\r\r\t',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '728' ],		#self : OmReference [ '729' ],		#time : DateAndTime [ '2018-01-14T19:02:29.49138-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltAbstractNode,				#isMetaSide : false			},			#name : #'acceptDropItem:',			#protocol : #'drag and drop',			#sourceCode : 'acceptDropItem: anItem\r\t"By default, say no."\r\r\t^ false',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '729' ],		#self : OmReference [ '730' ],		#time : DateAndTime [ '2018-01-14T19:02:29.492244-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltAbstractNode,				#isMetaSide : false			},			#name : #asCategories,			#protocol : #converting,			#sourceCode : 'asCategories\r\t"Convert this node in a categories setting"\r\r\t^ nil',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '730' ],		#self : OmReference [ '731' ],		#time : DateAndTime [ '2018-01-14T19:02:29.493197-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltAbstractNode,				#isMetaSide : false			},			#name : #'asPerRBEnvironment:',			#protocol : #querying,			#sourceCode : 'asPerRBEnvironment: aRBEnvironment\r\t"Check if it exists in this environment. If yes, return self or a transform of self (a child, for example); if no return nil causing the node to disappear."\r\r\t^ (self isInRBEnvironment: aRBEnvironment)\r\t\tifTrue: [ self ]\r\t\tifFalse: [ nil ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '731' ],		#self : OmReference [ '732' ],		#time : DateAndTime [ '2018-01-14T19:02:29.494249-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltAbstractNode,				#isMetaSide : false			},			#name : #asString,			#protocol : #printing,			#sourceCode : 'asString\r\t^ self item asString',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '732' ],		#self : OmReference [ '733' ],		#time : DateAndTime [ '2018-01-14T19:02:29.49519-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltAbstractNode,				#isMetaSide : false			},			#name : #'asStringIn:',			#protocol : #printing,			#sourceCode : 'asStringIn: anAltTreeNodeModel\r\t"Reduce based on the parent name. anAltTreeNodeModel shows the \'visible\' hierarchy; the goal is to be able to use it to reduce or change the name of the node."\r\r\t^ self asString',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '733' ],		#self : OmReference [ '734' ],		#time : DateAndTime [ '2018-01-14T19:02:29.497634-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltAbstractNode,				#isMetaSide : false			},			#name : #'buildTextMenu:on:with:',			#protocol : #querying,			#sourceCode : 'buildTextMenu: aMenu on: aTarget with: aRequestor\r\t"Now I have a safe way of finding pragmas."\r\r\t| t |\r\tt := false.\r\t((self pragmas: #textAreaCommand from: self class to: AltAbstractNode)\r\t\tsorted: [ :a :b | a methodSelector < b methodSelector ])\r\t\tdo: [ :p | \r\t\t\tt\r\t\t\t\tifTrue: [ aMenu addLine ]\r\t\t\t\tifFalse: [ t := true ].\r\t\t\t(((self perform: p methodSelector)\r\t\t\t\tcollect: [ :c | c asClassInEnvironment: Smalltalk globals ifAbsent: [  ] ])\r\t\t\t\treject: [ :c | c isNil ])\r\t\t\t\tdo: [ :c | (c on: aTarget for: aRequestor) addItemToMenu: aMenu ] ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '734' ],		#self : OmReference [ '735' ],		#time : DateAndTime [ '2018-01-14T19:02:29.498928-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltAbstractNode,				#isMetaSide : false			},			#name : #'buildTextShortcutsOn:with:',			#protocol : #querying,			#sourceCode : 'buildTextShortcutsOn: aKMDispatcher with: aRequestor\r\t"This is an attempt at handling shortcuts... Which works, with the help of a custom KMDispatcher."\r\r\t(self pragmas: #textAreaCommand from: self class to: AltAbstractNode)\r\t\tdo: [ :e | \r\t\t\t(self perform: e methodSelector)\r\t\t\t\tdo: [ :c | \r\t\t\t\t\t| command |\r\t\t\t\t\tcommand := c asClass on: aRequestor textMorph for: aRequestor.\r\t\t\t\t\tcommand buildShortcut: aKMDispatcher ] ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '735' ],		#self : OmReference [ '736' ],		#time : DateAndTime [ '2018-01-14T19:02:29.499916-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltAbstractNode,				#isMetaSide : false			},			#name : #'buildTreeMenu:on:with:',			#protocol : #actions,			#sourceCode : 'buildTreeMenu: aMenu on: aTarget with: aRequestor\r\t| t |\r\tt := false.\r\t((self pragmas: #treeAreaCommand from: self class to: AltAbstractNode)\r\t\tsorted: [ :a :b | a methodSelector < b methodSelector ])\r\t\tdo: [ :e | \r\t\t\tt\r\t\t\t\tifTrue: [ aMenu addLine ]\r\t\t\t\tifFalse: [ t := true ].\r\t\t\t(self perform: e methodSelector)\r\t\t\t\tdo: [ :c | (c asClass on: aTarget for: aRequestor) addItemToMenu: aMenu ] ].\r\t^ aMenu',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '736' ],		#self : OmReference [ '737' ],		#time : DateAndTime [ '2018-01-14T19:02:29.50087-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltAbstractNode,				#isMetaSide : false			},			#name : #'buildTreeShortcutsOn:with:',			#protocol : #querying,			#sourceCode : 'buildTreeShortcutsOn: aMorph with: aRequestor\r\t"This is an attempt at handling shortcuts... Which works, with the help of a custom KMDispatcher."\r\r\t(self pragmas: #treeAreaCommand from: self class to: AltAbstractNode)\r\t\tdo: [ :e | \r\t\t\t(self perform: e methodSelector)\r\t\t\t\tdo: [ :c | \r\t\t\t\t\t| command |\r\t\t\t\t\tcommand := c asClass on: aRequestor treeMorph for: aRequestor.\r\t\t\t\t\tcommand isEnabled\r\t\t\t\t\t\tifTrue: [ command buildShortcut: aMorph ] ] ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '737' ],		#self : OmReference [ '738' ],		#time : DateAndTime [ '2018-01-14T19:02:29.501942-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltAbstractNode,				#isMetaSide : false			},			#name : #clipboardCommands,			#protocol : #commands,			#sourceCode : 'clipboardCommands\r\t<textAreaCommand>\r\t^ #(#AltCutTextCommand #AltCopyTextCommand #AltPasteTextCommand #AltSelectAllTextCommand)',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '738' ],		#self : OmReference [ '739' ],		#time : DateAndTime [ '2018-01-14T19:02:29.502948-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltAbstractNode,				#isMetaSide : false			},			#name : #clipboardTreeCommands,			#protocol : #commands,			#sourceCode : 'clipboardTreeCommands\r\t<treeAreaCommand>\r\t^ #(#AltCutCommand #AltPasteCommand)',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '739' ],		#self : OmReference [ '740' ],		#time : DateAndTime [ '2018-01-14T19:02:29.503857-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltAbstractNode,				#isMetaSide : false			},			#name : #contents,			#protocol : #accessing,			#sourceCode : 'contents\r\t^ #()',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '740' ],		#self : OmReference [ '741' ],		#time : DateAndTime [ '2018-01-14T19:02:29.504795-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltAbstractNode,				#isMetaSide : false			},			#name : #doItContext,			#protocol : #querying,			#sourceCode : 'doItContext\r\t"By default, should be nil."\r\r\t^ nil',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '741' ],		#self : OmReference [ '742' ],		#time : DateAndTime [ '2018-01-14T19:02:29.505762-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltAbstractNode,				#isMetaSide : false			},			#name : #doItReceiver,			#protocol : #querying,			#sourceCode : 'doItReceiver\r\t"Should return an object as a context (class) for compilation."\r\r\t^ self sourceClass ifNotNil: [ :sc | sc theNonMetaClass ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '742' ],		#self : OmReference [ '743' ],		#time : DateAndTime [ '2018-01-14T19:02:29.506761-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltAbstractNode,				#isMetaSide : false			},			#name : #'doubleClickIn:',			#protocol : #actions,			#sourceCode : 'doubleClickIn: aAltTreeCodeItemModel\r\t"Handle a double click on the current node: toggle the expanded state by default, or do something else."\r\r\taAltTreeCodeItemModel toggleExpanded',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '743' ],		#self : OmReference [ '744' ],		#time : DateAndTime [ '2018-01-14T19:02:29.509207-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltAbstractNode,				#isMetaSide : false			},			#name : #executeCommands,			#protocol : #commands,			#sourceCode : 'executeCommands\r\t<textAreaCommand>\r\t^ #(#AltDoItTextCommand #AltPrintItTextCommand #AltInspectItTextCommand #AltDebugItTextCommand #AltParenthesisTextCommand #AltSquareBracketsTextCommand #AltDoubleQuotesTextCommand #AltCurlyBracketsTextCommand)',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '744' ],		#self : OmReference [ '745' ],		#time : DateAndTime [ '2018-01-14T19:02:29.510241-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltAbstractNode,				#isMetaSide : false			},			#name : #executeTreeCommands,			#protocol : #commands,			#sourceCode : 'executeTreeCommands\r\t<treeAreaCommand>\r\t^ #(#AltExpandCommand)',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '745' ],		#self : OmReference [ '746' ],		#time : DateAndTime [ '2018-01-14T19:02:29.511158-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltAbstractNode,				#isMetaSide : false			},			#name : #'findAllClass:',			#protocol : #querying,			#sourceCode : 'findAllClass: aClass\r\t"Return the node if the item matches. By default, search among the kids."\r\r\t^ nil',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '746' ],		#self : OmReference [ '747' ],		#time : DateAndTime [ '2018-01-14T19:02:29.512037-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltAbstractNode,				#isMetaSide : false			},			#name : #'findClass:',			#protocol : #querying,			#sourceCode : 'findClass: aClass\r\t"Return the node if the item matches. By default, search among the kids."\r\r\t^ nil',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '747' ],		#self : OmReference [ '748' ],		#time : DateAndTime [ '2018-01-14T19:02:29.512924-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltAbstractNode,				#isMetaSide : false			},			#name : #'findClassCategory:',			#protocol : #querying,			#sourceCode : 'findClassCategory: aCat\r\t^ nil',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '748' ],		#self : OmReference [ '749' ],		#time : DateAndTime [ '2018-01-14T19:02:29.513833-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltAbstractNode,				#isMetaSide : false			},			#name : #'findMethod:in:',			#protocol : #querying,			#sourceCode : 'findMethod: aSelector in: aClass\r\t"Return the node if the item matches. By default, search among the kids."\r\r\t"Make it lazy : do not trigger contents generation."\r\r\t^ nil',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '749' ],		#self : OmReference [ '750' ],		#time : DateAndTime [ '2018-01-14T19:02:29.514705-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltAbstractNode,				#isMetaSide : false			},			#name : #'findMethodCategory:in:',			#protocol : #querying,			#sourceCode : 'findMethodCategory: aMethodCategory in: aClass\r\t"Return the node if the item matches."\r\r\t^ nil',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '750' ],		#self : OmReference [ '751' ],		#time : DateAndTime [ '2018-01-14T19:02:29.515591-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltAbstractNode,				#isMetaSide : false			},			#name : #icon,			#protocol : #accessing,			#sourceCode : 'icon\r\t"The icon used to display the node in the tree."\r\r\t^ nil',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '751' ],		#self : OmReference [ '752' ],		#time : DateAndTime [ '2018-01-14T19:02:29.516463-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltAbstractNode,				#isMetaSide : false			},			#name : #isClassNode,			#protocol : #testing,			#sourceCode : 'isClassNode\r\t^ false',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '752' ],		#self : OmReference [ '753' ],		#time : DateAndTime [ '2018-01-14T19:02:29.517334-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltAbstractNode,				#isMetaSide : false			},			#name : #'isInRBEnvironment:',			#protocol : #querying,			#sourceCode : 'isInRBEnvironment: aRBEnvironment\r\t"By default, consider this to be true."\r\r\t^ true',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '753' ],		#self : OmReference [ '754' ],		#time : DateAndTime [ '2018-01-14T19:02:29.519967-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltAbstractNode,				#isMetaSide : false			},			#name : #isMethodCategoryNode,			#protocol : #testing,			#sourceCode : 'isMethodCategoryNode\r\t^ false',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '754' ],		#self : OmReference [ '755' ],		#time : DateAndTime [ '2018-01-14T19:02:29.520893-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltAbstractNode,				#isMetaSide : false			},			#name : #isMethodNode,			#protocol : #testing,			#sourceCode : 'isMethodNode\r\t^ false',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '755' ],		#self : OmReference [ '756' ],		#time : DateAndTime [ '2018-01-14T19:02:29.521799-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltAbstractNode,				#isMetaSide : false			},			#name : #isPackageCategoryNode,			#protocol : #testing,			#sourceCode : 'isPackageCategoryNode\r\t^ false',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '756' ],		#self : OmReference [ '757' ],		#time : DateAndTime [ '2018-01-14T19:02:29.522738-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltAbstractNode,				#isMetaSide : false			},			#name : #isPackageNode,			#protocol : #testing,			#sourceCode : 'isPackageNode\r\t^ false',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '757' ],		#self : OmReference [ '758' ],		#time : DateAndTime [ '2018-01-14T19:02:29.523633-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltAbstractNode,				#isMetaSide : false			},			#name : #isProtected,			#protocol : #testing,			#sourceCode : 'isProtected\r\t^ false',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '758' ],		#self : OmReference [ '759' ],		#time : DateAndTime [ '2018-01-14T19:02:29.524532-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltAbstractNode,				#isMetaSide : false			},			#name : #isStyled,			#protocol : #testing,			#sourceCode : 'isStyled\r\t"Should return true if the text is to be styled (default smalltalk code)."\r\t\r\t^ false',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '759' ],		#self : OmReference [ '760' ],		#time : DateAndTime [ '2018-01-14T19:02:29.525439-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltAbstractNode,				#isMetaSide : false			},			#name : #item,			#protocol : #accessing,			#sourceCode : 'item\r\t^ item',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '760' ],		#self : OmReference [ '761' ],		#time : DateAndTime [ '2018-01-14T19:02:29.526317-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltAbstractNode,				#isMetaSide : false			},			#name : #'item:',			#protocol : #accessing,			#sourceCode : 'item: anObject\r\titem := anObject',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '761' ],		#self : OmReference [ '762' ],		#time : DateAndTime [ '2018-01-14T19:02:29.527255-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltAbstractNode,				#isMetaSide : false			},			#name : #parent,			#protocol : #accessing,			#sourceCode : 'parent\r\t^ parent',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '762' ],		#self : OmReference [ '763' ],		#time : DateAndTime [ '2018-01-14T19:02:29.529648-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltAbstractNode,				#isMetaSide : false			},			#name : #'parent:',			#protocol : #accessing,			#sourceCode : 'parent: anObject\r\tparent := anObject',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '763' ],		#self : OmReference [ '764' ],		#time : DateAndTime [ '2018-01-14T19:02:29.530894-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltAbstractNode,				#isMetaSide : false			},			#name : #'pragmas:from:to:',			#protocol : #querying,			#sourceCode : 'pragmas: aSymbol from: aClass to: aTarget\r\t"A safe way to find pragmas in a class hierarchy."\r\r\t| pragmas |\r\tpragmas := OrderedCollection new.\r\t(aClass allSelectorsBelow: aTarget superclass)\r\t\tdo: [ :selector | pragmas addAll: ((aClass lookupSelector: selector) pragmas select: [ :pragma | pragma key == aSymbol ]) ].\r\t^ pragmas',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '764' ],		#self : OmReference [ '765' ],		#time : DateAndTime [ '2018-01-14T19:02:29.531858-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltAbstractNode,				#isMetaSide : false			},			#name : #'printOn:',			#protocol : #printing,			#sourceCode : 'printOn: aStream\r\tsuper printOn: aStream.\r\taStream nextPut: $(.\r\taStream nextPutAll: self asString.\r\taStream nextPut: $)',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '765' ],		#self : OmReference [ '766' ],		#time : DateAndTime [ '2018-01-14T19:02:29.532772-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltAbstractNode,				#isMetaSide : false			},			#name : #rebuildContents,			#protocol : #actions,			#sourceCode : 'rebuildContents\r\t^ self',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '766' ],		#self : OmReference [ '767' ],		#time : DateAndTime [ '2018-01-14T19:02:29.533746-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltAbstractNode,				#isMetaSide : false			},			#name : #saveCommands,			#protocol : #commands,			#sourceCode : 'saveCommands\r\t<textAreaCommand>\r\t^ #(#AltAcceptTextCommand #AltCancelTextCommand)',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '767' ],		#self : OmReference [ '768' ],		#time : DateAndTime [ '2018-01-14T19:02:29.534659-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltAbstractNode,				#isMetaSide : false			},			#name : #searchTreeCommands,			#protocol : #commands,			#sourceCode : 'searchTreeCommands\r\t<treeAreaCommand>\r\t^ #(#AltFindClassCommand #AltFinderCommand #AltFinderOffCommand #AltPreviousCommand #AltNextCommand #AltSelectNextItem #AltSelectPreviousItem #AltSelectMoveDown #AltSelectMoveUp)',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '768' ],		#self : OmReference [ '769' ],		#time : DateAndTime [ '2018-01-14T19:02:29.535556-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltAbstractNode,				#isMetaSide : false			},			#name : #'selectIn:',			#protocol : #actions,			#sourceCode : 'selectIn: aBrowser\r\t"Tracking the fact that we are selected."\r\t\r\t^ false',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '769' ],		#self : OmReference [ '770' ],		#time : DateAndTime [ '2018-01-14T19:02:29.536451-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltAbstractNode,				#isMetaSide : false			},			#name : #sourceClass,			#protocol : #querying,			#sourceCode : 'sourceClass\r\t"Should return a class if appropriate. The class is to provide the context for compilation, evaluation or styling."\r\r\t^ nil',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '770' ],		#self : OmReference [ '771' ],		#time : DateAndTime [ '2018-01-14T19:02:29.537702-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltAbstractNode,				#isMetaSide : false			},			#name : #sourceCode,			#protocol : #querying,			#sourceCode : 'sourceCode\r\t"Should return a source code or a description if appropriate."\r\t\r\t^ \'\'',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '771' ],		#self : OmReference [ '772' ],		#time : DateAndTime [ '2018-01-14T19:02:29.540264-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltAbstractNode,				#isMetaSide : false			},			#name : #sourceComment,			#protocol : #querying,			#sourceCode : 'sourceComment\r\t"A way to get comments."\r\r\t^ \'\'',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '772' ],		#self : OmReference [ '773' ],		#time : DateAndTime [ '2018-01-14T19:02:29.542746-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltAbstractNode,				#isMetaSide : false			},			#name : #styleClass,			#protocol : #querying,			#sourceCode : 'styleClass\r\t"Should return a class if appropriate. The class is to provide the context for styling."\r\r\t^ self sourceClass',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '773' ],		#self : OmReference [ '774' ],		#time : DateAndTime [ '2018-01-14T19:02:29.543738-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltAbstractNode,				#isMetaSide : false			},			#name : #title,			#protocol : #accessing,			#sourceCode : 'title\r\t^ \'\'',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '774' ],		#self : OmReference [ '775' ],		#time : DateAndTime [ '2018-01-14T19:02:29.544666-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltAbstractNode,				#isMetaSide : false			},			#name : #undoCommands,			#protocol : #commands,			#sourceCode : 'undoCommands\r\t<textAreaCommand>\r\t^ #(#AltUndoTextCommand #AltRedoTextCommand)',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '775' ],		#self : OmReference [ '776' ],		#time : DateAndTime [ '2018-01-14T19:02:29.545536-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltAbstractNode,				#isMetaSide : false			},			#name : #wDebugTreeCommands,			#protocol : #commands,			#sourceCode : 'wDebugTreeCommands\r\t<treeAreaCommand>\r\t^ #(#AltExploreItemCommand #AltRebuildItemCommand)',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '776' ],		#self : OmReference [ '777' ],		#time : DateAndTime [ '2018-01-14T19:02:29.546512-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltClassCommentNode,				#isMetaSide : false			},			#name : #'aClassCommented:',			#protocol : #updating,			#sourceCode : 'aClassCommented: anEvent\r\tanEvent classCommented == self itemClass\r\t\tifTrue: [ AltBrowser aNodeToUpdate: self.\r\t\t\t^ true ].\r\t^ false',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '777' ],		#self : OmReference [ '778' ],		#time : DateAndTime [ '2018-01-14T19:02:29.547531-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltClassCommentNode,				#isMetaSide : false			},			#name : #'aClassRenamed:',			#protocol : #updating,			#sourceCode : 'aClassRenamed: anEvent\r\t"Note: Just say if we match. Don\'t bother with the class side, see extension for how it is handled."\r\r\t^ anEvent oldName == self item\r\t\tifTrue:\r\t\t\t[ self item: anEvent newName.\r\t\t\tAltBrowser aNodeToUpdate: self.\r\t\t\ttrue ]\r\t\tifFalse: [ false ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '778' ],		#self : OmReference [ '779' ],		#time : DateAndTime [ '2018-01-14T19:02:29.548422-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltClassCommentNode,				#isMetaSide : false			},			#name : #'accept:notifying:',			#protocol : #actions,			#sourceCode : 'accept: aText notifying: aController\r\t"This should change the class comment"\r\t\r\t"I have a problem there: the Class comment node is recreated on update and therefore the system loses the focus."\r\r\tself itemClass comment: aText.\r\t^ self',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '779' ],		#self : OmReference [ '780' ],		#time : DateAndTime [ '2018-01-14T19:02:29.549331-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltClassCommentNode,				#isMetaSide : false			},			#name : #asString,			#protocol : #printing,			#sourceCode : 'asString\r\t^  \'comment\'',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '780' ],		#self : OmReference [ '781' ],		#time : DateAndTime [ '2018-01-14T19:02:29.550232-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltClassCommentNode,				#isMetaSide : false			},			#name : #contents,			#protocol : #accessing,			#sourceCode : 'contents\r\t^ #()',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '781' ],		#self : OmReference [ '782' ],		#time : DateAndTime [ '2018-01-14T19:02:29.551169-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltClassCommentNode,				#isMetaSide : false			},			#name : #'findClassComment:',			#protocol : #querying,			#sourceCode : 'findClassComment: aClass\r\t^ self item == aClass\r\t\tifTrue: [ self ]\r\t\tifFalse: [ nil ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '782' ],		#self : OmReference [ '783' ],		#time : DateAndTime [ '2018-01-14T19:02:29.553769-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltClassCommentNode,				#isMetaSide : false			},			#name : #icon,			#protocol : #accessing,			#sourceCode : 'icon\r\t^ self itemClass hasComment\r\t\tifTrue: [ nil ]\r\t\tifFalse: [ #uncommentedClassIcon ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '783' ],		#self : OmReference [ '784' ],		#time : DateAndTime [ '2018-01-14T19:02:29.555016-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltClassCommentNode,				#isMetaSide : false			},			#name : #'isInRBEnvironment:',			#protocol : #querying,			#sourceCode : 'isInRBEnvironment: aRBEnvironment\r\t^ (super isInRBEnvironment: aRBEnvironment) and: [ aRBEnvironment isSelectorEnvironment not ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '784' ],		#self : OmReference [ '785' ],		#time : DateAndTime [ '2018-01-14T19:02:29.556001-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltClassCommentNode,				#isMetaSide : false			},			#name : #itemClass,			#protocol : #accessing,			#sourceCode : 'itemClass\r\t^ Smalltalk at: self item ifAbsent: [ UndefinedObject ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '785' ],		#self : OmReference [ '786' ],		#time : DateAndTime [ '2018-01-14T19:02:29.556925-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltClassCommentNode,				#isMetaSide : false			},			#name : #sourceCode,			#protocol : #querying,			#sourceCode : 'sourceCode\r\t^ self itemClass comment',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '786' ],		#self : OmReference [ '787' ],		#time : DateAndTime [ '2018-01-14T19:02:29.557856-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltClassExtensionNode,				#isMetaSide : false			},			#name : #'aClassCommented:',			#protocol : #updating,			#sourceCode : 'aClassCommented: anEvent\r\t"Filter out based on the class."\r\r\t^ false',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '787' ],		#self : OmReference [ '788' ],		#time : DateAndTime [ '2018-01-14T19:02:29.558796-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltClassExtensionNode,				#isMetaSide : false			},			#name : #'aClassRemoved:',			#protocol : #updating,			#sourceCode : 'aClassRemoved: anEvent\r\t"Note: Just say if we match. This will work even if we are an extension. But what happens if we are an extension on the class side?"\r\r\t^ anEvent classRemoved == self itemClass',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '788' ],		#self : OmReference [ '789' ],		#time : DateAndTime [ '2018-01-14T19:02:29.559712-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltClassExtensionNode,				#isMetaSide : false			},			#name : #'aClassRenamed:',			#protocol : #updating,			#sourceCode : 'aClassRenamed: anEvent\r\tanEvent oldName == self item\r\t\tifFalse: [ ^ false ].\r\tself item: anEvent newName.\r\tAltBrowser aNodeToUpdate: self.\r\tself contents first aClassRenamed: anEvent.\t"In case we have a meta node."\r\t^ true',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '789' ],		#self : OmReference [ '790' ],		#time : DateAndTime [ '2018-01-14T19:02:29.560819-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltClassExtensionNode,				#isMetaSide : false			},			#name : #'aClassReorganized:',			#protocol : #updating,			#sourceCode : 'aClassReorganized: anEvent\r\t"Ok, here a reorganize may mean our extension has disappeared. Just ask the top level to update just in case."\r\r\tanEvent classReorganized == self itemClass\r\t\tifTrue: [ ^ true ].\r\tanEvent classReorganized == self itemClass classSide\r\t\tifTrue: [ AltBrowser aNodeToRebuilt: self.\r\t\t\t^ true ].\r\t^ false',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '790' ],		#self : OmReference [ '791' ],		#time : DateAndTime [ '2018-01-14T19:02:29.561834-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltClassExtensionNode,				#isMetaSide : false			},			#name : #'aMethodAdded:',			#protocol : #updating,			#sourceCode : 'aMethodAdded: anEvent\r\t"Are we concerned by that event ? Yes if we are the right class and the right method category."\r\r\t((anEvent methodClass == self itemClass\r\t\tor: [ anEvent methodClass == self itemClass classSide ])\r\t\tand: [ anEvent protocol asLowercase beginsWith: self methodCategory ])\r\t\tifTrue:\r\t\t\t[ (self contents first isKindOf: AltClassMetaExtensionNode)\r\t\t\t\tifTrue: [ self contents first aMethodAdded: anEvent ].\r\t\t\tAltBrowser aNodeToRebuilt: self.\r\t\t\t^ true ].\r\t^ false',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '791' ],		#self : OmReference [ '792' ],		#time : DateAndTime [ '2018-01-14T19:02:29.564474-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltClassExtensionNode,				#isMetaSide : false			},			#name : #'aMethodRecategorized:',			#protocol : #updating,			#sourceCode : 'aMethodRecategorized: anEvent\r\t"Are we concerned by that event ? Yes if we are the right class and the right method category."\r\r\t"On a recategorization which concerns us, eventually cleans the extension protocol if empty."\r\r\t((anEvent methodClass == self sourceClass\r\t\tor: [ anEvent methodClass == self itemClass classSide ])\r\t\tand:\r\t\t\t[ (anEvent newProtocol asLowercase beginsWith: self methodCategory)\r\t\t\t\tor: [ anEvent oldProtocol asLowercase beginsWith: self methodCategory ] ])\r\t\tifTrue:\r\t\t\t[ (self contents notEmpty\r\t\t\t\tand: [ self contents first isKindOf: AltClassMetaExtensionNode ])\r\t\t\t\tifTrue: [ self contents first aMethodRecategorized: anEvent ].\r\t\t\tAltBrowser aNodeToRebuilt: self.\r\t\t\t(anEvent methodClass organization extensionProtocols\r\t\t\t\tselect:\r\t\t\t\t\t[ :e | \r\t\t\t\t\t(e name asLowercase beginsWith: self methodCategory)\r\t\t\t\t\t\tand: [ e isEmpty ] ])\r\t\t\t\tdo: [ :e | anEvent methodClass organization removeCategory: e name ].\r\t\t\t^ true ]\r\t\tifFalse: [  ].\r\t^ false',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '792' ],		#self : OmReference [ '793' ],		#time : DateAndTime [ '2018-01-14T19:02:29.565713-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltClassExtensionNode,				#isMetaSide : false			},			#name : #'aMethodRemoved:',			#protocol : #updating,			#sourceCode : 'aMethodRemoved: anEvent\r\t"Are we concerned by that event ? Yes if we are the right class and the right method category."\r\r\t"We can here ensure that empty extensions protocols are removed."\r\r\t((anEvent methodClass == self itemClass\r\t\tor: [ anEvent methodClass == self itemClass classSide ])\r\t\tand:\r\t\t\t[ (anEvent protocol asLowercase beginsWith: self methodCategory)\r\t\t\t\tand: [ self contents notEmpty ] ])\r\t\tifTrue:\r\t\t\t[ (self contents first isKindOf: AltClassMetaExtensionNode)\r\t\t\t\tifTrue: [ self contents first aMethodRemoved: anEvent ].\r\t\t\tAltBrowser aNodeToRebuilt: self.\r\t\t\t(anEvent methodClass organization extensionProtocols\r\t\t\t\tselect:\r\t\t\t\t\t[ :e | \r\t\t\t\t\t(e name asLowercase beginsWith: self methodCategory)\r\t\t\t\t\t\tand: [ e isEmpty ] ])\r\t\t\t\tdo: [ :e | anEvent methodClass organization removeCategory: e name ] ].\r\t^ false',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '793' ],		#self : OmReference [ '794' ],		#time : DateAndTime [ '2018-01-14T19:02:29.566641-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltClassExtensionNode,				#isMetaSide : false			},			#name : #'accept:notifying:',			#protocol : #actions,			#sourceCode : 'accept: aText notifying: aController\r\t"Compile the method. Return a target methodNode object for the method. We know it should be one of our children."\r\r\t| aSelector aMethodNode |\r\taSelector := self sourceClass compile: aText classified: self methodCategory notifying: aController.\t"New node should have been added in there."\r\tself rebuildContents.\r\taMethodNode := self parent findMethod: aSelector in: self sourceClass.\r\t^ aMethodNode',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '794' ],		#self : OmReference [ '795' ],		#time : DateAndTime [ '2018-01-14T19:02:29.567576-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltClassExtensionNode,				#isMetaSide : false			},			#name : #'acceptDropItem:',			#protocol : #'drag and drop',			#sourceCode : 'acceptDropItem: anItem\r\t"Accept method nodes."\r\r\t^ anItem isKindOf: AltMethodNode',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '795' ],		#self : OmReference [ '796' ],		#time : DateAndTime [ '2018-01-14T19:02:29.568493-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltClassExtensionNode,				#isMetaSide : false			},			#name : #asString,			#protocol : #printing,			#sourceCode : 'asString\r\t^ self itemClass name',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '796' ],		#self : OmReference [ '797' ],		#time : DateAndTime [ '2018-01-14T19:02:29.56949-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltClassExtensionNode,				#isMetaSide : false			},			#name : #contents,			#protocol : #accessing,			#sourceCode : 'contents\r\tcontents\r\t\tifNil: [ \r\t\t\tcontents := (self parent rpackage extensionSelectorsForClass: self itemClass classSide) notEmpty\r\t\t\t\tifTrue: [ {(AltClassMetaExtensionNode with: self itemClass name parent: self)} ]\r\t\t\t\tifFalse: [ #() ].\r\t\t\tcontents := contents\r\t\t\t\t,\r\t\t\t\t\t(((self parent rpackage extensionMethodsForClass: self itemClass) collect: [ :e | e selector ]) asSortedCollection\r\t\t\t\t\t\tcollect: [ :each | AltMethodNode with: each parent: self ]) ].\r\t^ contents',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '797' ],		#self : OmReference [ '798' ],		#time : DateAndTime [ '2018-01-14T19:02:29.570444-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltClassExtensionNode,				#isMetaSide : false			},			#name : #'doubleClickIn:',			#protocol : #actions,			#sourceCode : 'doubleClickIn: aTreeItemModel\r\t"Action!"\r\r\t| aRBEnv anAltBrowser |\r\tanAltBrowser := aTreeItemModel model.\r\taRBEnv := anAltBrowser rbEnvironment isSelectorEnvironment\r\t\tifTrue: [ anAltBrowser rbEnvironment environment ]\r\t\tifFalse: [ anAltBrowser rbEnvironment ].\r\tAltBrowser\r\t\tfullOnEnvironment: (aRBEnv forClasses: {self itemClass})\r\t\tselect: self\r\t\twith: aTreeItemModel findExpanded',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '798' ],		#self : OmReference [ '799' ],		#time : DateAndTime [ '2018-01-14T19:02:29.57144-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltClassExtensionNode,				#isMetaSide : false			},			#name : #'dropItem:',			#protocol : #'drag and drop',			#sourceCode : 'dropItem: anItem\r\t"Used to move methods from a package to another, or from a normal category to an extension-labeled one."\r\r\t| cm |\r\tcm := anItem compiledMethod.\r\tcm methodClass = self itemClass\r\t\tifTrue: [ cm methodClass organization\r\t\t\t\tclassify: anItem selector\r\t\t\t\tunder: self methodCategory\r\t\t\t\tsuppressIfDefault: false ]\r\t\tifFalse: [ self sourceClass\r\t\t\t\tcompile: anItem sourceCode\r\t\t\t\tclassified: self methodCategory\r\t\t\t\tnotifying: nil ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '799' ],		#self : OmReference [ '800' ],		#time : DateAndTime [ '2018-01-14T19:02:29.572357-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltClassExtensionNode,				#isMetaSide : false			},			#name : #'findClass:',			#protocol : #querying,			#sourceCode : 'findClass: aClass\r\t"When we are looking for a class, we fail the test in that class extension."\r\r\t^ nil',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '800' ],		#self : OmReference [ '801' ],		#time : DateAndTime [ '2018-01-14T19:02:29.574823-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltClassExtensionNode,				#isMetaSide : false			},			#name : #'findMethodCategory:in:',			#protocol : #querying,			#sourceCode : 'findMethodCategory: aCategory in: aClass\r\t"As an extension, we are a protocol (or multiple ones, in fact). Return the parent node, it\'s safer when the class loses its last extension selector (it\'s a bit of a hack, really)."\r\r\t(self itemClass classSide == aClass\r\t\tand: [ self parent rpackage isYourClassExtension: aCategory ])\r\t\tifTrue: [ ^ super findMethodCategory: aCategory in: aClass ].\r\t^ (self itemClass == aClass\r\t\tand: [ self parent rpackage isYourClassExtension: aCategory ])\r\t\tifTrue:\r\t\t\t[ self contents isEmpty\r\t\t\t\tifTrue: [ self parent ]\r\t\t\t\tifFalse: [ self ] ]\r\t\tifFalse: [ nil ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '801' ],		#self : OmReference [ '802' ],		#time : DateAndTime [ '2018-01-14T19:02:29.575966-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltClassExtensionNode,				#isMetaSide : false			},			#name : #isClassNode,			#protocol : #testing,			#sourceCode : 'isClassNode\r\t^ false',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '802' ],		#self : OmReference [ '803' ],		#time : DateAndTime [ '2018-01-14T19:02:29.576907-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltClassExtensionNode,				#isMetaSide : false			},			#name : #'isInRBEnvironment:',			#protocol : #querying,			#sourceCode : 'isInRBEnvironment: aRBEnvironment\r\t^ (self contents select: [ :e | e isInRBEnvironment: aRBEnvironment ]) notEmpty',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '803' ],		#self : OmReference [ '804' ],		#time : DateAndTime [ '2018-01-14T19:02:29.577835-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltClassExtensionNode,				#isMetaSide : false			},			#name : #methodCategory,			#protocol : #accessing,			#sourceCode : 'methodCategory\r\t"A class extension is below a package extension node, hence we can ask the parent for the right category prefix."\r\r\t^ self rpackage methodCategoryPrefix',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '804' ],		#self : OmReference [ '805' ],		#time : DateAndTime [ '2018-01-14T19:02:29.578717-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltClassExtensionNode,				#isMetaSide : false			},			#name : #rpackage,			#protocol : #accessing,			#sourceCode : 'rpackage\r\t^ self parent rpackage',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '805' ],		#self : OmReference [ '806' ],		#time : DateAndTime [ '2018-01-14T19:02:29.579613-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltClassExtensionNode,				#isMetaSide : false			},			#name : #sourceCode,			#protocol : #querying,			#sourceCode : 'sourceCode\r\t^ \'message selector and argument names\r\t"comment stating purpose of message"\r\r\t| temporary variable names |\r\tstatements\'',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '806' ],		#self : OmReference [ '807' ],		#time : DateAndTime [ '2018-01-14T19:02:29.58067-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltClassExtensionNode,				#isMetaSide : false			},			#name : #styleClass,			#protocol : #querying,			#sourceCode : 'styleClass\r\t^ self sourceClass',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '807' ],		#self : OmReference [ '808' ],		#time : DateAndTime [ '2018-01-14T19:02:29.581651-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltClassMetaExtensionNode,				#isMetaSide : false			},			#name : #contents,			#protocol : #accessing,			#sourceCode : 'contents\r\tcontents\r\t\tifNil: [ \r\t\t\tcontents := ((self parent rpackage extensionMethodsForClass: self itemClass) collect: [ :e | e selector ])\r\t\t\t\tasSortedCollection collect: [ :each | AltMethodNode with: each parent: self ] ].\r\t^ contents',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '808' ],		#self : OmReference [ '809' ],		#time : DateAndTime [ '2018-01-14T19:02:29.58269-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltClassMetaExtensionNode,				#isMetaSide : false			},			#name : #'findMethodCategory:in:',			#protocol : #querying,			#sourceCode : 'findMethodCategory: aCategory in: aClass\r\t"As an extension, we are a protocol (or multiple ones, in fact). Return the parent node, it\'s safer when the class loses its last extension selector (it\'s a bit of a hack, really)."\r\r\t^ (self itemClass == aClass\r\t\tand: [ self parent rpackage isYourClassExtension: aCategory ])\r\t\tifTrue:\r\t\t\t[ self contents isEmpty\r\t\t\t\tifTrue: [ self parent ]\r\t\t\t\tifFalse: [ self ] ]\r\t\tifFalse: [ nil ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '809' ],		#self : OmReference [ '810' ],		#time : DateAndTime [ '2018-01-14T19:02:29.583629-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltClassMetaExtensionNode,				#isMetaSide : false			},			#name : #itemClass,			#protocol : #accessing,			#sourceCode : 'itemClass\r\t^ (Smalltalk at: self item ifAbsent: [ Object ]) classSide',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '810' ],		#self : OmReference [ '811' ],		#time : DateAndTime [ '2018-01-14T19:02:29.586142-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltClassMetaExtensionNode,				#isMetaSide : false			},			#name : #selector,			#protocol : #accessing,			#sourceCode : 'selector\r\t"Only there for polymorphism."\r\r\t^ nil',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '811' ],		#self : OmReference [ '812' ],		#time : DateAndTime [ '2018-01-14T19:02:29.587216-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltClassMetaNode,				#isMetaSide : false			},			#name : #'aClassModifiedClassDefinition:',			#protocol : #updating,			#sourceCode : 'aClassModifiedClassDefinition: anEvent\r\t"Handle it here."\r\r\tanEvent newClassDefinition = self itemClass\r\t\tifFalse: [ ^ false ].\r\tAltBrowser aNodeToUpdate: self.\r\t^ true',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '812' ],		#self : OmReference [ '813' ],		#time : DateAndTime [ '2018-01-14T19:02:29.58817-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltClassMetaNode,				#isMetaSide : false			},			#name : #'aClassRenamed:',			#protocol : #updating,			#sourceCode : 'aClassRenamed: anEvent\r\tanEvent oldName == self item\r\t\tifFalse: [ ^ false ].\r\tself item: anEvent newName.\r\tAltBrowser aNodeToUpdate: self.\r\t^ true',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '813' ],		#self : OmReference [ '814' ],		#time : DateAndTime [ '2018-01-14T19:02:29.589175-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltClassMetaNode,				#isMetaSide : false			},			#name : #'aMethodAdded:',			#protocol : #updating,			#sourceCode : 'aMethodAdded: anEvent\r\t"Pass through to childrens. We may have to rebuilt if the category isn\'t yet into our list. Try to delegate to the list of items; and rebuilt yourself if the protocol is not included."\r\r\t"Would be simpler if protocol creation were announced. They are not."\r\r\tanEvent methodClass == self itemClass\r\t\tifTrue:\r\t\t\t[ self contents do: [ :each | each aMethodAdded: anEvent ].\r\t\t\t((self contents\r\t\t\t\tselect:\r\t\t\t\t\t[ :e | \r\t\t\t\t\t(e isKindOf: AltMethodCategoryNode)\r\t\t\t\t\t\tand: [ e methodCategory = anEvent protocol ] ]) size < 1\r\t\t\t\tor: [ anEvent protocol = \'no messages\' ])\r\t\t\t\tifTrue: [ AltBrowser aNodeToRebuilt: self ].\r\t\t\t^ true ].\r\t^ false',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '814' ],		#self : OmReference [ '815' ],		#time : DateAndTime [ '2018-01-14T19:02:29.590232-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltClassMetaNode,				#isMetaSide : false			},			#name : #'aMethodRecategorized:',			#protocol : #updating,			#sourceCode : 'aMethodRecategorized: anEvent\r\t"Pass through to childrens. We may have to rebuilt if the category isn\'t yet into our list. Try to delegate to the list of items; and rebuilt yourself if one of the two protocol is not included."\r\r\t"Would be simpler if protocol creation were announced. They are not."\r\r\tanEvent methodClass == self itemClass\r\t\tifTrue:\r\t\t\t[ self contents do: [ :each | each aMethodRecategorized: anEvent ].\r\t\t\t(self contents\r\t\t\t\tselect:\r\t\t\t\t\t[ :e | \r\t\t\t\t\t(e isKindOf: AltMethodCategoryNode)\r\t\t\t\t\t\tand:\r\t\t\t\t\t\t\t[ e methodCategory = anEvent oldProtocol\r\t\t\t\t\t\t\t\tor: [ e methodCategory = anEvent newProtocol ] ] ]) size < 2\r\t\t\t\tifTrue: [ AltBrowser aNodeToRebuilt: self.\r\t\t\t\t\t^ true ].\r\t\t\t((self itemClass protocols includes: anEvent oldProtocol)\r\t\t\t\tand: [ self itemClass protocols includes: anEvent newProtocol ])\r\t\t\t\tifFalse: [ AltBrowser aNodeToRebuilt: self.\r\t\t\t\t\t^ true ].\r\t\t\t^ true ].\r\t^ false',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '815' ],		#self : OmReference [ '816' ],		#time : DateAndTime [ '2018-01-14T19:02:29.591159-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltClassMetaNode,				#isMetaSide : false			},			#name : #'aMethodRemoved:',			#protocol : #updating,			#sourceCode : 'aMethodRemoved: anEvent\r\t"Pass through to childrens. We may have to rebuilt if the category isn\'t yet into our list. Try to delegate to the list of items; and rebuilt yourself if the protocol is not included."\r\r\t"Would be simpler if protocol creation were announced. They are not."\r\r\tanEvent methodClass == self itemClass\r\t\tifTrue:\r\t\t\t[ self contents do: [ :each | each aMethodRemoved: anEvent ].\r\t\t\t(self itemClass protocols includes: anEvent protocol)\r\t\t\t\tifFalse: [ AltBrowser aNodeToRebuilt: self ].\r\t\t\t^ true ].\r\t^ false',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '816' ],		#self : OmReference [ '817' ],		#time : DateAndTime [ '2018-01-14T19:02:29.59205-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltClassMetaNode,				#isMetaSide : false			},			#name : #asString,			#protocol : #printing,			#sourceCode : 'asString\r\t"Class side."\r\r\t ^ \'- Class\'',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '817' ],		#self : OmReference [ '818' ],		#time : DateAndTime [ '2018-01-14T19:02:29.592949-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltClassMetaNode,				#isMetaSide : false			},			#name : #contents,			#protocol : #accessing,			#sourceCode : 'contents\r\t"A class protocols in Pharo 3.0 are ordered by a set, which makes for random ordering, so we need to create an order on those (and of course, a user arranged order can\'t be kept because of the complexity it would creates). itemOrganization creates that ordering."\r\r\tcontents\r\t\tifNil: [ contents := self itemOrganization\r\t\t\t\tcollect: [ :each | AltMethodCategoryNode with: each parent: self ] ].\r\t^ contents',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '818' ],		#self : OmReference [ '819' ],		#time : DateAndTime [ '2018-01-14T19:02:29.59388-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltClassMetaNode,				#isMetaSide : false			},			#name : #'findMethod:in:',			#protocol : #querying,			#sourceCode : 'findMethod: aSelector in: aClass\r\t"Ok. Forced version. May need to force on a case by case basis."\r\r\t| res |\r\taClass == self itemClass\r\t\tifTrue: [ \r\t\t\tself contents\r\t\t\t\tdo: [ :each | \r\t\t\t\t\t(res := each findMethod: aSelector in: aClass) notNil\r\t\t\t\t\t\tifTrue: [ ^ res ] ] ].\r\t^ nil',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '819' ],		#self : OmReference [ '820' ],		#time : DateAndTime [ '2018-01-14T19:02:29.596305-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltClassMetaNode,				#isMetaSide : false			},			#name : #'isInRBEnvironment:',			#protocol : #querying,			#sourceCode : 'isInRBEnvironment: aRBEnvironment\r\t"Meta nodes are in environments with classes."\r\r\t^ aRBEnvironment includesClass: self itemClass',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '820' ],		#self : OmReference [ '821' ],		#time : DateAndTime [ '2018-01-14T19:02:29.597403-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltClassMetaNode,				#isMetaSide : false			},			#name : #itemClass,			#protocol : #accessing,			#sourceCode : 'itemClass\r\t^ (Smalltalk at: self item ifAbsent: [ Object ]) classSide',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '821' ],		#self : OmReference [ '822' ],		#time : DateAndTime [ '2018-01-14T19:02:29.59832-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltClassMetaNode,				#isMetaSide : false			},			#name : #privateClass,			#protocol : #private,			#sourceCode : 'privateClass\r\t^ self itemClass',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '822' ],		#self : OmReference [ '823' ],		#time : DateAndTime [ '2018-01-14T19:02:29.5992-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltClassMetaNode,				#isMetaSide : false			},			#name : #removeClassCommand,			#protocol : #commands,			#sourceCode : 'removeClassCommand\r\t<treeAreaCommand>\r\t^ #()',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '823' ],		#self : OmReference [ '824' ],		#time : DateAndTime [ '2018-01-14T19:02:29.600096-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltClassMetaNode,				#isMetaSide : false			},			#name : #sourceCode,			#protocol : #querying,			#sourceCode : 'sourceCode\r\t^ self itemClass definition',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '824' ],		#self : OmReference [ '825' ],		#time : DateAndTime [ '2018-01-14T19:02:29.601483-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltClassMetaNode,				#isMetaSide : false			},			#name : #title,			#protocol : #accessing,			#sourceCode : 'title\r\t^ self itemClass name',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '825' ],		#self : OmReference [ '826' ],		#time : DateAndTime [ '2018-01-14T19:02:29.602408-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltClassNode,				#isMetaSide : false			},			#name : #'aClassAdded:',			#protocol : #updating,			#sourceCode : 'aClassAdded: anEvent\r\t^ false',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '826' ],		#self : OmReference [ '827' ],		#time : DateAndTime [ '2018-01-14T19:02:29.603404-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltClassNode,				#isMetaSide : false			},			#name : #'aClassCommented:',			#protocol : #updating,			#sourceCode : 'aClassCommented: anEvent\r\t"Filter out based on the class."\r\r\t(anEvent classCommented == self itemClass or: [ anEvent classCommented == self itemClass class ])\r\t\tifTrue: [ \r\t\t\tself contents do: [ :e | e aClassCommented: anEvent ].\r\t\t\t^ true ].\r\t^ false',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '827' ],		#self : OmReference [ '828' ],		#time : DateAndTime [ '2018-01-14T19:02:29.60433-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltClassNode,				#isMetaSide : false			},			#name : #'aClassModifiedClassDefinition:',			#protocol : #updating,			#sourceCode : 'aClassModifiedClassDefinition: anEvent\r\t"Handle it here."\r\r\tanEvent newClassDefinition = self itemClass\r\t\tifFalse: [ ^ false ].\r\tindent := nil.\r\tAltBrowser aNodeToUpdate: self.\r\tself contents first aClassModifiedClassDefinition: anEvent.\r\t^ true',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '828' ],		#self : OmReference [ '829' ],		#time : DateAndTime [ '2018-01-14T19:02:29.605251-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltClassNode,				#isMetaSide : false			},			#name : #'aClassRecategorized:',			#protocol : #updating,			#sourceCode : 'aClassRecategorized: anEvent\r\t"TODO: I see a class node just below a package set node in 3.0. Why?"\r\r\t^ anEvent classRecategorized == self itemClass',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '829' ],		#self : OmReference [ '830' ],		#time : DateAndTime [ '2018-01-14T19:02:29.607812-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltClassNode,				#isMetaSide : false			},			#name : #'aClassRemoved:',			#protocol : #updating,			#sourceCode : 'aClassRemoved: anEvent\r\t"Note: Just say if we match. Don\'t bother with the class side, see extension for how it is handled."\r\r\t^ anEvent classRemoved name = (\'AnObsolete\' , self item)',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '830' ],		#self : OmReference [ '831' ],		#time : DateAndTime [ '2018-01-14T19:02:29.608892-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltClassNode,				#isMetaSide : false			},			#name : #'aClassRenamed:',			#protocol : #updating,			#sourceCode : 'aClassRenamed: anEvent\r\t"Note: Just say if we match. Don\'t bother with the class side, see extension for how it is handled."\r\r\t^ anEvent oldName == self item\r\t\tifTrue:\r\t\t\t[ self item: anEvent newName.\r\t\t\tAltBrowser aNodeToUpdate: self.\r\t\t\tself contents first aClassRenamed: anEvent.\r\t\t\tself contents second aClassRenamed: anEvent.\r\t\t\ttrue ]\r\t\tifFalse: [ false ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '831' ],		#self : OmReference [ '832' ],		#time : DateAndTime [ '2018-01-14T19:02:29.609844-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltClassNode,				#isMetaSide : false			},			#name : #'aClassReorganized:',			#protocol : #updating,			#sourceCode : 'aClassReorganized: anEvent\r\t"Ok, if we are the class, reorganize (of course). If we are the class of the class, we also need to reorganize. Beware: we suppose the class side is the first item."\r\r\tanEvent classReorganized == self itemClass\r\t\tifTrue: [ AltBrowser aNodeToRebuilt: self.\r\t\t\t^ true ].\r\tanEvent classReorganized == self itemClass class\r\t\tifTrue: [ AltBrowser aNodeToRebuilt: self contents first.\r\t\t\t^ true ].\r\t^ false',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '832' ],		#self : OmReference [ '833' ],		#time : DateAndTime [ '2018-01-14T19:02:29.610717-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltClassNode,				#isMetaSide : false			},			#name : #'aClassRepackaged:',			#protocol : #updating,			#sourceCode : 'aClassRepackaged: anEvent\r\t"TODO: I see a class node just below a package set node in 3.0. Why?"\r\r\t^ false',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '833' ],		#self : OmReference [ '834' ],		#time : DateAndTime [ '2018-01-14T19:02:29.611787-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltClassNode,				#isMetaSide : false			},			#name : #'aMethodAdded:',			#protocol : #updating,			#sourceCode : 'aMethodAdded: anEvent\r\t"Pass through to childrens. We may have to rebuilt if the category isn\'t yet into our list. Try to delegate to the list of items; and rebuilt yourself if the protocol is not included."\r\r\t"Would be simpler if protocol creation were announced. They are not."\r\r\tcontents notNil\r\t\tifTrue:\r\t\t\t[ anEvent methodClass == self itemClass\r\t\t\t\tifTrue:\r\t\t\t\t\t[ self contents do: [ :each | each aMethodAdded: anEvent ].\r\t\t\t\t\t((self contents\r\t\t\t\t\t\tselect:\r\t\t\t\t\t\t\t[ :e | \r\t\t\t\t\t\t\t(e isKindOf: AltMethodCategoryNode)\r\t\t\t\t\t\t\t\tand: [ e methodCategory = anEvent protocol ] ]) size < 1\r\t\t\t\t\t\tor: [ anEvent protocol = \'no messages\' ])\r\t\t\t\t\t\tifTrue: [ AltBrowser aNodeToRebuilt: self ].\r\t\t\t\t\t^ true ].\r\t\t\t^ self contents first aMethodAdded: anEvent ].\r\t^ false',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '834' ],		#self : OmReference [ '835' ],		#time : DateAndTime [ '2018-01-14T19:02:29.612917-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltClassNode,				#isMetaSide : false			},			#name : #'aMethodRecategorized:',			#protocol : #updating,			#sourceCode : 'aMethodRecategorized: anEvent\r\t"Pass through to childrens. We may have to rebuilt if the category isn\'t yet into our list. Try to delegate to the list of items; and rebuilt yourself if one of the two protocol is not included."\r\r\t"Would be simpler if protocol creation were announced. They are not."\r\r\tanEvent methodClass == self itemClass\r\t\tifTrue:\r\t\t\t[ self contents do: [ :each | each aMethodRecategorized: anEvent ].\r\t\t\t(self contents\r\t\t\t\tselect:\r\t\t\t\t\t[ :e | \r\t\t\t\t\t(e isKindOf: AltMethodCategoryNode)\r\t\t\t\t\t\tand:\r\t\t\t\t\t\t\t[ e methodCategory = anEvent oldProtocol\r\t\t\t\t\t\t\t\tor: [ e methodCategory = anEvent newProtocol ] ] ]) size < 2\r\t\t\t\tifTrue: [ AltBrowser aNodeToRebuilt: self.\r\t\t\t\t\t^ true ].\r\t\t\t((self itemClass protocols includes: anEvent oldProtocol)\r\t\t\t\tand: [ self itemClass protocols includes: anEvent newProtocol ])\r\t\t\t\tifFalse: [ AltBrowser aNodeToRebuilt: self.\r\t\t\t\t\t^ true ].\r\t\t\t^ true ].\r\t^ self contents first aMethodRecategorized: anEvent',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '835' ],		#self : OmReference [ '836' ],		#time : DateAndTime [ '2018-01-14T19:02:29.614208-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltClassNode,				#isMetaSide : false			},			#name : #'aMethodRemoved:',			#protocol : #updating,			#sourceCode : 'aMethodRemoved: anEvent\r\t"Pass through to childrens. We may have to rebuilt if the category isn\'t yet into our list. Try to delegate to the list of items; and rebuilt yourself if the protocol is not included."\r\r\t"Would be simpler if protocol creation were announced. They are not."\r\r\tanEvent methodClass == self itemClass\r\t\tifTrue:\r\t\t\t[ self contents do: [ :each | each aMethodRemoved: anEvent ].\r\t\t\t(self itemClass organization categories includes: anEvent protocol)\r\t\t\t\tifFalse: [ AltBrowser aNodeToRebuilt: self ].\r\t\t\t^ true ].\r\t^ self contents first aMethodRemoved: anEvent',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '836' ],		#self : OmReference [ '837' ],		#time : DateAndTime [ '2018-01-14T19:02:29.615226-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltClassNode,				#isMetaSide : false			},			#name : #'accept:notifying:',			#protocol : #actions,			#sourceCode : 'accept: aText notifying: aController\r\t"The base code just evaluate the expression."\r\r\t"We will add some RB parsing to really check what is happening, and, in some cases, change the evaluation to a specific RB command (undoable)."\r\r\t| res |\r\tself parseAcceptText: aText notifying: aController.\r\tres := [ UndefinedObject compilerClass new\r\t\tevaluate: (ReadStream on: aText)\r\t\tin: nil\r\t\tto: nil\r\t\tnotifying: aController\r\t\tifFail: [ ^ nil ]\r\t\tlogged: true ]\r\t\ton: SyntaxErrorNotification\r\t\tdo: [ :ex | ex resume: true ].\r\tres notNil\r\t\tifTrue:\r\t\t\t[ | r |\r\t\t\tAltBrowser rootItems\r\t\t\t\tdetect: [ :aRoot | (r := aRoot findClass: res) notNil ]\r\t\t\t\tifNone: [ nil ].\r\t\t\t^ r ].\t"Search for the produced result, a class, to select it."\r\t^ nil',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '837' ],		#self : OmReference [ '838' ],		#time : DateAndTime [ '2018-01-14T19:02:29.616213-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltClassNode,				#isMetaSide : false			},			#name : #asString,			#protocol : #printing,			#sourceCode : 'asString\r\t"Try to have a secondary level of hierarchy among classes with a secondary indent added to the name."\r\r\t^  (String new: self indent withAll: Character space) , self itemClass asString',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '838' ],		#self : OmReference [ '839' ],		#time : DateAndTime [ '2018-01-14T19:02:29.61896-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltClassNode,				#isMetaSide : false			},			#name : #'buildTextMenu:on:with:',			#protocol : #querying,			#sourceCode : 'buildTextMenu: aMenu on: aTarget with: aRequestor\r\t"Ok. Two steps: first, create the menu linked with the node. Second, parse the message, rebuild the code, print and reparse to get the correct nodes for class and instance variables. This code doesn\'t work for the class side."\r\r\t| inS ast node rewritten |\r\tsuper buildTextMenu: aMenu on: aTarget with: aRequestor.\r\tinS := aTarget text asString readStream.\r\trewritten := String\r\t\tstreamContents: [ :s | \r\t\t\ts << (inS upToAll: \'instanceVariableNames:\') << \'instanceVariableNames:\'.\r\t\t\tself rewriteStringOfVars: inS into: s.\r\t\t\ts << (inS upToAll: \'classVariableNames:\') << \'classVariableNames:\'.\r\t\t\tself rewriteStringOfVars: inS into: s.\r\t\t\ts << inS upToEnd ].\r\tast := RBParser parseExpression: rewritten onError: [ :msg :pos | ^ self ].\r\tast methodNode methodClass: self itemClass.\r\tast doSemanticAnalysis.\r\t(node := ast bestNodeFor: aTarget selectionInterval) notNil\r\t\tifFalse: [ ^ self ].\r\taMenu\r\t\taddLine;\r\t\taddLine.\r\tnode altTextCommands do: [ :c | (c asClass on: aTarget for: aRequestor node: node) addItemToMenu: aMenu ].\r\tnode canSelect\r\t\tifFalse: [ ^ self ].\r\taTarget textMorph paragraph secondarySelection: node textIntervals.\r\taTarget textMorph selectionChanged',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '839' ],		#self : OmReference [ '840' ],		#time : DateAndTime [ '2018-01-14T19:02:29.620002-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltClassNode,				#isMetaSide : false			},			#name : #classSearchCommands,			#protocol : #commands,			#sourceCode : 'classSearchCommands\r\t<treeAreaCommand>\r\t^ #(#AltClassRefsCommand)',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '840' ],		#self : OmReference [ '841' ],		#time : DateAndTime [ '2018-01-14T19:02:29.621415-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltClassNode,				#isMetaSide : false			},			#name : #contents,			#protocol : #accessing,			#sourceCode : 'contents\r\t"A class protocols in Pharo 3.0 are ordered by a set, which makes for random ordering, so we need to create an order on those (and of course, a user arranged order can\'t be kept because of the complexity it would creates). itemOrganization creates that ordering."\r\r\tcontents\r\t\tifNil: [ contents := {(AltClassMetaNode with: self item parent: self).\r\t\t\t(AltClassCommentNode with: self item parent: self)}\r\t\t\t\t,\r\t\t\t\t\t(self itemOrganization\r\t\t\t\t\t\tcollect: [ :each | AltMethodCategoryNode with: each parent: self ]) ].\r\t^ contents',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '841' ],		#self : OmReference [ '842' ],		#time : DateAndTime [ '2018-01-14T19:02:29.622413-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltClassNode,				#isMetaSide : false			},			#name : #'doubleClickIn:',			#protocol : #actions,			#sourceCode : 'doubleClickIn: aTreeItemModel\r\t"Action!"\r\r\t| aRBEnv anAltBrowser |\r\tanAltBrowser := aTreeItemModel model.\r\taRBEnv := anAltBrowser rbEnvironment isSelectorEnvironment\r\t\tifTrue: [ anAltBrowser rbEnvironment environment ]\r\t\tifFalse: [ anAltBrowser rbEnvironment ].\r\tAltBrowser\r\t\tfullOnEnvironment: (aRBEnv forClasses: {self itemClass})\r\t\tselect: self\r\t\twith: aTreeItemModel findExpanded',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '842' ],		#self : OmReference [ '843' ],		#time : DateAndTime [ '2018-01-14T19:02:29.623358-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltClassNode,				#isMetaSide : false			},			#name : #'findAllClass:',			#protocol : #querying,			#sourceCode : 'findAllClass: aClass\r\t^ self itemClass == aClass\r\t\tifTrue: [ OrderedCollection with: self ]\r\t\tifFalse: [ super findAllClass: aClass ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '843' ],		#self : OmReference [ '844' ],		#time : DateAndTime [ '2018-01-14T19:02:29.624263-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltClassNode,				#isMetaSide : false			},			#name : #'findClass:',			#protocol : #querying,			#sourceCode : 'findClass: aClass\r\t^ self itemClass == aClass\r\t\tifTrue: [ self ]\r\t\tifFalse: [ nil ]\r',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '844' ],		#self : OmReference [ '845' ],		#time : DateAndTime [ '2018-01-14T19:02:29.625189-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltClassNode,				#isMetaSide : false			},			#name : #'findMethod:in:',			#protocol : #querying,			#sourceCode : 'findMethod: aSelector in: aClass\r\t"Ok. Forced version. May need to force on a case by case basis."\r\r\t| res |\r\taClass == self itemClass\r\t\tifTrue: [ \r\t\t\tself contents\r\t\t\t\tdo: [ :each | \r\t\t\t\t\t(res := each findMethod: aSelector in: aClass) notNil\r\t\t\t\t\t\tifTrue: [ ^ res ] ] ]\r\t\tifFalse: [ \r\t\t\tself contents isEmpty\r\t\t\t\tifFalse: [ ^ self contents first findMethod: aSelector in: aClass ] ].\r\t^ nil',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '845' ],		#self : OmReference [ '846' ],		#time : DateAndTime [ '2018-01-14T19:02:29.626126-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltClassNode,				#isMetaSide : false			},			#name : #indent,			#protocol : #accessing,			#sourceCode : 'indent\r\tindent isNil\r\t\tifTrue: [ \r\t\t\t| i |\r\t\t\tindent := (i := self parent contents\r\t\t\t\tdetect: [ :e | (e isKindOf: AltClassNode) and: [ e itemClass == self superclass ] ]\r\t\t\t\tifNone: [ nil ]) notNil\r\t\t\t\tifTrue: [ i indent + 1 ]\r\t\t\t\tifFalse: [ 0 ] ].\r\t^ indent',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '846' ],		#self : OmReference [ '847' ],		#time : DateAndTime [ '2018-01-14T19:02:29.626984-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltClassNode,				#isMetaSide : false			},			#name : #isClassNode,			#protocol : #testing,			#sourceCode : 'isClassNode\r\t^ true',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '847' ],		#self : OmReference [ '848' ],		#time : DateAndTime [ '2018-01-14T19:02:29.629596-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltClassNode,				#isMetaSide : false			},			#name : #'isInRBEnvironment:',			#protocol : #querying,			#sourceCode : 'isInRBEnvironment: aRBEnvironment\r\t^ (aRBEnvironment includesClass: self itemClass)\r\t\tor: [ aRBEnvironment includesClass: self itemClass class ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '848' ],		#self : OmReference [ '849' ],		#time : DateAndTime [ '2018-01-14T19:02:29.630703-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltClassNode,				#isMetaSide : false			},			#name : #isStyled,			#protocol : #testing,			#sourceCode : 'isStyled\r\t^ true',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '849' ],		#self : OmReference [ '850' ],		#time : DateAndTime [ '2018-01-14T19:02:29.631623-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltClassNode,				#isMetaSide : false			},			#name : #itemClass,			#protocol : #accessing,			#sourceCode : 'itemClass\r\t^ Smalltalk at: self item ifAbsent: [ Object ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '850' ],		#self : OmReference [ '851' ],		#time : DateAndTime [ '2018-01-14T19:02:29.63273-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltClassNode,				#isMetaSide : false			},			#name : #itemOrganization,			#protocol : #private,			#sourceCode : 'itemOrganization\r\t"A class protocols in Pharo 3.0 are ordered by a set, which makes for random ordering, so we need to create an order on those (and of course, a user arranged order can\'t be kept because of the complexity it would creates)."\r\r\t"In this method, we order the protocols with simple rules: alphabetical, except extensions and initialize / instance creation and accessing in front, and private at the end. Dedicated methods provide for the list of exceptions."\r\r\t| result origin ending |\r\torigin := self itemClass organization categories sorted.\r\torigin isEmpty\r\t\tifTrue: [ ^ #(#\'no messages\') ].\r\tresult := OrderedCollection new: origin size.\r\torigin := origin\r\t\treject: [ :p | \r\t\t\t(p beginsWith: self orgExtension)\r\t\t\t\tifTrue: [ \r\t\t\t\t\tresult add: p.\r\t\t\t\t\ttrue ]\r\t\t\t\tifFalse: [ false ] ].\r\tself orgBeginning\r\t\tdo: [ :b | \r\t\t\torigin := origin\r\t\t\t\treject: [ :p | \r\t\t\t\t\t(p beginsWith: b)\r\t\t\t\t\t\tifTrue: [ \r\t\t\t\t\t\t\tresult add: p.\r\t\t\t\t\t\t\ttrue ]\r\t\t\t\t\t\tifFalse: [ false ] ] ].\r\tending := OrderedCollection new.\r\tself orgEnding\r\t\tdo: [ :e | \r\t\t\torigin := origin\r\t\t\t\treject: [ :p | \r\t\t\t\t\t(p beginsWith: e)\r\t\t\t\t\t\tifTrue: [ \r\t\t\t\t\t\t\tending add: p.\r\t\t\t\t\t\t\ttrue ]\r\t\t\t\t\t\tifFalse: [ false ] ] ].\r\tresult addAll: origin.\r\tresult addAll: ending.\r\t^ result',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '851' ],		#self : OmReference [ '852' ],		#time : DateAndTime [ '2018-01-14T19:02:29.633624-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltClassNode,				#isMetaSide : false			},			#name : #navigationCommands,			#protocol : #commands,			#sourceCode : 'navigationCommands\r\t<treeAreaCommand>\r\t^ #(#AltGoToSuperclassCommand #AltGoToSubclassCommand #AltNextSiblingClassCommand #AltClassHierarchyCommand)',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '852' ],		#self : OmReference [ '853' ],		#time : DateAndTime [ '2018-01-14T19:02:29.634563-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltClassNode,				#isMetaSide : false			},			#name : #orgBeginning,			#protocol : #private,			#sourceCode : 'orgBeginning\r\t^ #(\'initializ\' \'instance\' \'accessing\')',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '853' ],		#self : OmReference [ '854' ],		#time : DateAndTime [ '2018-01-14T19:02:29.635448-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltClassNode,				#isMetaSide : false			},			#name : #orgEnding,			#protocol : #private,			#sourceCode : 'orgEnding\r\t^ #(\'private\')',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '854' ],		#self : OmReference [ '855' ],		#time : DateAndTime [ '2018-01-14T19:02:29.636348-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltClassNode,				#isMetaSide : false			},			#name : #orgExtension,			#protocol : #private,			#sourceCode : 'orgExtension\r\t^ \'*\'',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '855' ],		#self : OmReference [ '856' ],		#time : DateAndTime [ '2018-01-14T19:02:29.637449-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltClassNode,				#isMetaSide : false			},			#name : #'parseAcceptText:notifying:',			#protocol : #private,			#sourceCode : 'parseAcceptText: aText notifying: aNotifier\r\t"I\'m not sure we will have a need to the notifier here, but, who knows. "\r\t"Conclusion about the experiment. It\'s gona be hard!"\r\t\r\t"More or less: AddClass does not answer the same protocol for displaying than the RemoveClass refactoring, and both don\'t have a correct protocol anyway for displaying what is inside. Nautilus has done something, but I\'m unsure it\'s valid. Need to extend RB."\r\t\r\t"More. There is no class change refactoring; so I have to scan the new definition element by element to recreate them (and, of course, do a composite which is very difficult to make intelligible in the GUI). The best is maybe to have a Class inspector instead of the text. Oh, and that scanning may be necessary for class additions as well. Need to write a RB to refactoring visitor probably."\r\t\r\t"Doing this for methods may be a lot easier."\r\r\t| ast |\r\tast := RBParser parseExpression: aText.\r\tast isMessage\r\t\tifTrue: [ \r\t\t\tast selector = #subclass:instanceVariableNames:classVariableNames:poolDictionaries:category:\r\t\t\t\tifTrue: [ \r\t\t\t\t\t"This is a subclass creation."\r\t\t\t\t\t(Smalltalk at: ast receiver name ifAbsent: [ nil ])\r\t\t\t\t\t\tifNotNil: [ :global | \r\t\t\t\t\t\t\t| subclassName |\r\t\t\t\t\t\t\t"global is our class here."\r\t\t\t\t\t\t\tsubclassName := ast arguments first value.\r\t\t\t\t\t\t\t(Smalltalk at: subclassName ifAbsent: [ nil ])\r\t\t\t\t\t\t\t\tifNil: [ \r\t\t\t\t\t\t\t\t\t(RBAddClassRefactoring\r\t\t\t\t\t\t\t\t\t\taddClass: subclassName\r\t\t\t\t\t\t\t\t\t\tsuperclass: global\r\t\t\t\t\t\t\t\t\t\tsubclasses: #()\r\t\t\t\t\t\t\t\t\t\tcategory: ast arguments last value) ]\r\t\t\t\t\t\t\t\tifNotNil: [ :subclass | \r\t\t\t\t\t\t\t\t\t"We are redefining a subclass. It\'s a lot\r\t\t\t\t\t\t\t\t\tmore complex from there on."\r\t\t\t\t\t\t\t\t\t(RBAddClassChange definition: aText) ] ] ] ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '856' ],		#self : OmReference [ '857' ],		#time : DateAndTime [ '2018-01-14T19:02:29.638345-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltClassNode,				#isMetaSide : false			},			#name : #privateClass,			#protocol : #private,			#sourceCode : 'privateClass\r\t^ self itemClass',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '857' ],		#self : OmReference [ '858' ],		#time : DateAndTime [ '2018-01-14T19:02:29.641126-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltClassNode,				#isMetaSide : false			},			#name : #refactoringCommands,			#protocol : #commands,			#sourceCode : 'refactoringCommands\r\t<treeAreaCommand>\r\t^ #(#AltRBUndoCommand #AltRBRedoCommand #AltRBClassRenameCommand)',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '858' ],		#self : OmReference [ '859' ],		#time : DateAndTime [ '2018-01-14T19:02:29.642127-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltClassNode,				#isMetaSide : false			},			#name : #removeClassCommand,			#protocol : #commands,			#sourceCode : 'removeClassCommand\r\t<treeAreaCommand>\r\t^ #(#AltRBRemoveClassCommand #AltClassFileOutCommand)',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '859' ],		#self : OmReference [ '860' ],		#time : DateAndTime [ '2018-01-14T19:02:29.643132-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltClassNode,				#isMetaSide : false			},			#name : #'rewriteStringOfVars:into:',			#protocol : #private,			#sourceCode : 'rewriteStringOfVars: inS into: outS\r\t"Given the streams at this position, change \'var1 var2 var3\' into: {var1.var2.var3}."\r\r\tinS atEnd\r\t\tifTrue: [ ^ self ].\r\t[ inS peek ~= $\' ] whileTrue: [ outS nextPut: inS next ].\r\toutS nextPut: ${.\r\tinS next.\r\t[ inS peek ~= $\' ]\r\t\twhileTrue: [ \r\t\t\tinS peek ~= $ \r\t\t\t\tifTrue: [ outS nextPut: inS next ]\r\t\t\t\tifFalse: [ \r\t\t\t\t\toutS nextPut: $..\r\t\t\t\t\tinS next.\r\t\t\t\t\t[ [ inS peek = $  ] whileTrue: [ outS nextPut: inS next ] ] ] ].\r\tinS next.\r\toutS << \'}\'',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '860' ],		#self : OmReference [ '861' ],		#time : DateAndTime [ '2018-01-14T19:02:29.644024-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltClassNode,				#isMetaSide : false			},			#name : #sourceClass,			#protocol : #querying,			#sourceCode : 'sourceClass\r\t^ self itemClass',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '861' ],		#self : OmReference [ '862' ],		#time : DateAndTime [ '2018-01-14T19:02:29.644916-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltClassNode,				#isMetaSide : false			},			#name : #sourceCode,			#protocol : #querying,			#sourceCode : 'sourceCode\r\t^ self itemClass definition',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '862' ],		#self : OmReference [ '863' ],		#time : DateAndTime [ '2018-01-14T19:02:29.645824-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltClassNode,				#isMetaSide : false			},			#name : #sourceComment,			#protocol : #querying,			#sourceCode : 'sourceComment\r\t^ self itemClass comment',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '863' ],		#self : OmReference [ '864' ],		#time : DateAndTime [ '2018-01-14T19:02:29.646698-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltClassNode,				#isMetaSide : false			},			#name : #styleClass,			#protocol : #querying,			#sourceCode : 'styleClass\r\t^ nil',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '864' ],		#self : OmReference [ '865' ],		#time : DateAndTime [ '2018-01-14T19:02:29.647582-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltClassNode,				#isMetaSide : false			},			#name : #subclasses,			#protocol : #accessing,			#sourceCode : 'subclasses\r\t^ self itemClass subclasses',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '865' ],		#self : OmReference [ '866' ],		#time : DateAndTime [ '2018-01-14T19:02:29.648501-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltClassNode,				#isMetaSide : false			},			#name : #superclass,			#protocol : #accessing,			#sourceCode : 'superclass\r\t^ self itemClass superclass',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '866' ],		#self : OmReference [ '867' ],		#time : DateAndTime [ '2018-01-14T19:02:29.651057-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltClassNode,				#isMetaSide : false			},			#name : #title,			#protocol : #accessing,			#sourceCode : 'title\r\t^ self itemClass name',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '867' ],		#self : OmReference [ '868' ],		#time : DateAndTime [ '2018-01-14T19:02:29.652358-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltCompositeNode,				#isMetaSide : false			},			#name : #'findAllClass:',			#protocol : #querying,			#sourceCode : 'findAllClass: aClass\r\t"Return the node if the item matches. By default, search among the kids."\r\t\r\t"Make it lazy : do not trigger contents generation."\r\r\t| o res |\r\tcontents notNil\r\t\tifTrue: [ \r\t\t\tself contents\r\t\t\t\tdo: [ :each | \r\t\t\t\t\t(res := each findAllClass: aClass) notNil\r\t\t\t\t\t\tifTrue: [ \r\t\t\t\t\t\t\to isNil\r\t\t\t\t\t\t\t\tifTrue: [ o := res ]\r\t\t\t\t\t\t\t\tifFalse: [ o addAll: res ] ] ] ].\r\t^ o',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '868' ],		#self : OmReference [ '869' ],		#time : DateAndTime [ '2018-01-14T19:02:29.653377-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltCompositeNode,				#isMetaSide : false			},			#name : #'findClass:',			#protocol : #querying,			#sourceCode : 'findClass: aClass\r\t"Return the node if the item matches. By default, search among the kids."\r\r\t"Not lazy : force contents generation."\r\r\t| found res |\r\tself contents\r\t\tdo: [ :each | \r\t\t\t(res := each findClass: aClass) notNil\r\t\t\t\tifTrue: [ found := res ] ].\r\t^ found',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '869' ],		#self : OmReference [ '870' ],		#time : DateAndTime [ '2018-01-14T19:02:29.654617-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltCompositeNode,				#isMetaSide : false			},			#name : #'findClassCategory:',			#protocol : #querying,			#sourceCode : 'findClassCategory: aCat\r\t"Return the node if the item matches. By default, search among the kids. Is lazy and will avoid triggering child building."\r\r\t"Make it lazy : do not trigger contents generation."\r\r\t| res |\r\tcontents notNil\r\t\tifTrue: [ \r\t\t\tself contents\r\t\t\t\tdo: [ :each | \r\t\t\t\t\t(res := each findClassCategory: aCat) notNil\r\t\t\t\t\t\tifTrue: [ ^ res ] ] ].\r\t^ nil',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '870' ],		#self : OmReference [ '871' ],		#time : DateAndTime [ '2018-01-14T19:02:29.656048-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltCompositeNode,				#isMetaSide : false			},			#name : #'findMethod:in:',			#protocol : #querying,			#sourceCode : 'findMethod: aSelector in: aClass\r\t"Return the node if the item matches. By default, search among the kids."\r\r\t"Make it lazy : do not trigger contents generation."\r\r\t| res |\r\tcontents notNil\r\t\tifTrue: [ \r\t\t\tself contents\r\t\t\t\tdo: [ :each | \r\t\t\t\t\t(res := each findMethod: aSelector in: aClass) notNil\r\t\t\t\t\t\tifTrue: [ ^ res ] ] ].\r\t^ nil',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '871' ],		#self : OmReference [ '872' ],		#time : DateAndTime [ '2018-01-14T19:02:29.657148-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltCompositeNode,				#isMetaSide : false			},			#name : #'findMethodCategory:in:',			#protocol : #querying,			#sourceCode : 'findMethodCategory: aMethodCategory in: aClass\r\t"Return the node if the item matches. By default, search among children items."\r\r\t| res |\r\tself contents\r\t\tdo:\r\t\t\t[ :each | \r\t\t\t(res := each findMethodCategory: aMethodCategory in: aClass) notNil\r\t\t\t\tifTrue: [ ^ res ] ].\r\t^ nil',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '872' ],		#self : OmReference [ '873' ],		#time : DateAndTime [ '2018-01-14T19:02:29.658285-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltCompositeNode,				#isMetaSide : false			},			#name : #rebuildContents,			#protocol : #accessing,			#sourceCode : 'rebuildContents\r\t"Force a rebuild of the contents, to either : change the layout of the children items, or just because the contents has become out of sync with the children items."\r\r\t"Note that optimising contents as a cache is useless in terms of performance, because in most cases we rebuilt all the morphs that are representing them. However, to keep track of expanded / not expanded children morphs, nodes are remembered, so, when rebuilding the contents, we replace new nodes by their equivalent old node if it exists."\r\r\t"Why doing that? Because children creation is complex enough to delegate fullly to the subclasses."\r\r\t| oldContents |\r\tcontents ifNil: [ ^ self ].\r\toldContents := contents copy.\r\tcontents := nil.\r\tcontents := self contents\r\t\tcollect: [ :each | oldContents detect: [ :old | old class == each class and: [ old item == each item ] ] ifNone: [ each ] ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '873' ],		#self : OmReference [ '874' ],		#time : DateAndTime [ '2018-01-14T19:02:29.659456-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMetacelloProjectNode,				#isMetaSide : false			},			#name : #'aCategoryAdded:',			#protocol : #updating,			#sourceCode : 'aCategoryAdded: anEvent\r\t"Pass through that event."\r\r\t^ self contents inject: false into: [ :bool :each | (each aCategoryAdded: anEvent) or: [ bool ] ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '874' ],		#self : OmReference [ '875' ],		#time : DateAndTime [ '2018-01-14T19:02:29.660599-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMetacelloProjectNode,				#isMetaSide : false			},			#name : #'aCategoryRemoved:',			#protocol : #updating,			#sourceCode : 'aCategoryRemoved: anEvent\r\t"Pass through that event."\r\r\t^ self contents inject: false into: [ :bool :each | (each aCategoryRemoved: anEvent) or: [ bool ] ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '875' ],		#self : OmReference [ '876' ],		#time : DateAndTime [ '2018-01-14T19:02:29.66199-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMetacelloProjectNode,				#isMetaSide : false			},			#name : #'aCategoryRenamed:',			#protocol : #updating,			#sourceCode : 'aCategoryRenamed: anEvent\r\t"Pass through that event."\r\r\t^ self contents inject: false into: [ :bool :each | (each aCategoryRenamed: anEvent) or: [ bool ] ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '876' ],		#self : OmReference [ '877' ],		#time : DateAndTime [ '2018-01-14T19:02:29.665075-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMetacelloProjectNode,				#isMetaSide : false			},			#name : #'aClassAdded:',			#protocol : #updating,			#sourceCode : 'aClassAdded: anEvent\r\t"Pass through that event."\r\r\t^ self contents inject: false into: [ :bool :each | (each aClassAdded: anEvent) or: [ bool ] ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '877' ],		#self : OmReference [ '878' ],		#time : DateAndTime [ '2018-01-14T19:02:29.666294-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMetacelloProjectNode,				#isMetaSide : false			},			#name : #'aClassCommented:',			#protocol : #updating,			#sourceCode : 'aClassCommented: anEvent\r\t"Pass through that event."\r\r\t^ self contents inject: false into: [ :bool :each | (each aClassCommented: anEvent) or: [ bool ] ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '878' ],		#self : OmReference [ '879' ],		#time : DateAndTime [ '2018-01-14T19:02:29.667564-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMetacelloProjectNode,				#isMetaSide : false			},			#name : #'aClassModifiedClassDefinition:',			#protocol : #updating,			#sourceCode : 'aClassModifiedClassDefinition: anEvent\r\t"Pass through that event."\r\r\tself contents do: [ :each | each aClassModifiedClassDefinition: anEvent ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '879' ],		#self : OmReference [ '880' ],		#time : DateAndTime [ '2018-01-14T19:02:29.668881-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMetacelloProjectNode,				#isMetaSide : false			},			#name : #'aClassRecategorized:',			#protocol : #updating,			#sourceCode : 'aClassRecategorized: anEvent\r\t"Pass through that event."\r\r\t^ self contents inject: false into: [ :bool :each | (each aClassRecategorized: anEvent) or: [ bool ] ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '880' ],		#self : OmReference [ '881' ],		#time : DateAndTime [ '2018-01-14T19:02:29.670144-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMetacelloProjectNode,				#isMetaSide : false			},			#name : #'aClassRemoved:',			#protocol : #updating,			#sourceCode : 'aClassRemoved: anEvent\r\t"Pass through that event."\r\r\t^ self contents inject: false into: [ :bool :each | (each aClassRemoved: anEvent) or: [ bool ] ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '881' ],		#self : OmReference [ '882' ],		#time : DateAndTime [ '2018-01-14T19:02:29.671319-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMetacelloProjectNode,				#isMetaSide : false			},			#name : #'aClassRenamed:',			#protocol : #updating,			#sourceCode : 'aClassRenamed: anEvent\r\t"Pass through that event."\r\r\tself contents do: [ :each | each aClassRenamed: anEvent ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '882' ],		#self : OmReference [ '883' ],		#time : DateAndTime [ '2018-01-14T19:02:29.672663-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMetacelloProjectNode,				#isMetaSide : false			},			#name : #'aClassReorganized:',			#protocol : #updating,			#sourceCode : 'aClassReorganized: anEvent\r\t"Pass through that event."\r\r\t^ self contents inject: false into: [ :bool :each | (each aClassReorganized: anEvent) or: [ bool ] ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '883' ],		#self : OmReference [ '884' ],		#time : DateAndTime [ '2018-01-14T19:02:29.673832-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMetacelloProjectNode,				#isMetaSide : false			},			#name : #'aClassRepackaged:',			#protocol : #updating,			#sourceCode : 'aClassRepackaged: anEvent\r\t"Pass through that event."\r\r\t^ self contents inject: false into: [ :bool :each | (each aClassRepackaged: anEvent) or: [ bool ] ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '884' ],		#self : OmReference [ '885' ],		#time : DateAndTime [ '2018-01-14T19:02:29.675222-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMetacelloProjectNode,				#isMetaSide : false			},			#name : #'aMCWorkingCopyCreated:',			#protocol : #updating,			#sourceCode : 'aMCWorkingCopyCreated: anEvent\r\t"Either match to itself or pass to its children."\r\r\t^ self contents\r\t\tanySatisfy: [ :each | each aMCWorkingCopyCreated: anEvent ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '885' ],		#self : OmReference [ '886' ],		#time : DateAndTime [ '2018-01-14T19:02:29.678151-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMetacelloProjectNode,				#isMetaSide : false			},			#name : #'aMCWorkingCopyDeleted:',			#protocol : #updating,			#sourceCode : 'aMCWorkingCopyDeleted: anEvent\r\t"If one of our children say yes, rebuilt ourselves!"\r\r\t^ (self contents\r\t\tinject: false\r\t\tinto: [ :bool :each | (each aMCWorkingCopyDeleted: anEvent) or: [ bool ] ])\r\t\tifTrue: [ AltBrowser aNodeToRebuilt: self.\r\t\t\ttrue ]\r\t\tifFalse: [ false ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '886' ],		#self : OmReference [ '887' ],		#time : DateAndTime [ '2018-01-14T19:02:29.679551-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMetacelloProjectNode,				#isMetaSide : false			},			#name : #'aMCWorkingCopyModified:',			#protocol : #updating,			#sourceCode : 'aMCWorkingCopyModified: anEvent\r\t"Update oneself if a copy is modified... our status is linked to whether one of our packages is modified."\r\r\t^ (self contents\r\t\tinject: false\r\t\tinto: [ :bool :each | (each aMCWorkingCopyModified: anEvent) or: [ bool ] ])\r\t\tifTrue: [ AltBrowser aNodeToRebuilt: self.\r\t\t\ttrue ]\r\t\tifFalse: [ false ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '887' ],		#self : OmReference [ '888' ],		#time : DateAndTime [ '2018-01-14T19:02:29.680578-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMetacelloProjectNode,				#isMetaSide : false			},			#name : #'aMethodAdded:',			#protocol : #updating,			#sourceCode : 'aMethodAdded: anEvent\r\t"Pass through to childrens."\r\r\t^ self contents inject: false into: [ :bool :each | (each aMethodAdded: anEvent) or: [ bool ] ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '888' ],		#self : OmReference [ '889' ],		#time : DateAndTime [ '2018-01-14T19:02:29.681584-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMetacelloProjectNode,				#isMetaSide : false			},			#name : #'aMethodRecategorized:',			#protocol : #updating,			#sourceCode : 'aMethodRecategorized: anEvent\r\t"Pass through to childrens."\r\r\t^ self contents inject: false into: [ :bool :each | (each aMethodRecategorized: anEvent) or: [ bool ] ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '889' ],		#self : OmReference [ '890' ],		#time : DateAndTime [ '2018-01-14T19:02:29.682585-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMetacelloProjectNode,				#isMetaSide : false			},			#name : #'aMethodRemoved:',			#protocol : #updating,			#sourceCode : 'aMethodRemoved: anEvent\r\t"Pass through to childrens."\r\r\t^ self contents inject: false into: [ :bool :each | (each aMethodRemoved: anEvent) or: [ bool ] ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '890' ],		#self : OmReference [ '891' ],		#time : DateAndTime [ '2018-01-14T19:02:29.68379-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMetacelloProjectNode,				#isMetaSide : false			},			#name : #'aRPackageCreated:',			#protocol : #updating,			#sourceCode : 'aRPackageCreated: anEvent\r\t^ self contents inject: false into: [ :bool :each | (each aRPackageCreated: anEvent) or: [ bool ] ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '891' ],		#self : OmReference [ '892' ],		#time : DateAndTime [ '2018-01-14T19:02:29.685039-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMetacelloProjectNode,				#isMetaSide : false			},			#name : #'aRPackageUnregistered:',			#protocol : #updating,			#sourceCode : 'aRPackageUnregistered: anEvent\r\t^ self contents inject: false into: [ :bool :each | (each aRPackageUnregistered: anEvent) or: [ bool ] ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '892' ],		#self : OmReference [ '893' ],		#time : DateAndTime [ '2018-01-14T19:02:29.686527-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMetacelloProjectNode,				#isMetaSide : false			},			#name : #'asPerRBEnvironment:',			#protocol : #querying,			#sourceCode : 'asPerRBEnvironment: aRBEnvironment\r\t"Check if it exists in this environment. If yes, return self or a transform of self (a child, for example); if no return nil causing the node to disappear."\r\r\t| sz sc |\r\taRBEnvironment isSystem\r\t\tifTrue: [ ^ self ].\r\tsz := (sc := self contents select: [ :e | e isInRBEnvironment: aRBEnvironment ]) size.\r\t^ sz = 1\r\t\tifTrue: [ sc first asPerRBEnvironment: aRBEnvironment ]\r\t\tifFalse: [ \r\t\t\tsz = 0\r\t\t\t\tifTrue: [ nil ]\r\t\t\t\tifFalse: [ self ] ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '893' ],		#self : OmReference [ '894' ],		#time : DateAndTime [ '2018-01-14T19:02:29.687716-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMetacelloProjectNode,				#isMetaSide : false			},			#name : #asString,			#protocol : #printing,			#sourceCode : 'asString\r\t^ self title',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '894' ],		#self : OmReference [ '895' ],		#time : DateAndTime [ '2018-01-14T19:02:29.688812-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMetacelloProjectNode,				#isMetaSide : false			},			#name : #contents,			#protocol : #accessing,			#sourceCode : 'contents\r\t^ contents\r\t\tifNil: [ self projectRegistration ifNil: [ ^ #() ].\r\t\t\tcontents := {(AltPackageNode with: item parent: self)}\r\t\t\t\t,\r\t\t\t\t\t(((((self projectVersionSpec packages\r\t\t\t\t\t\tpackageSpecsInLoadOrderFor: self projectVersionSpec)\r\t\t\t\t\t\tselect: [ :e | e isKindOf: MetacelloPackageSpec ])\r\t\t\t\t\t\tcollect: [ :p | MCWorkingCopy hasPackageNamed: p name ])\r\t\t\t\t\t\treject: [ :p | p == false ])\r\t\t\t\tcollect: [ :each | AltPackageNode with: each package name parent: self ]) ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '895' ],		#self : OmReference [ '896' ],		#time : DateAndTime [ '2018-01-14T19:02:29.691579-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMetacelloProjectNode,				#isMetaSide : false			},			#name : #'findKeywordsCategory:',			#protocol : #querying,			#sourceCode : 'findKeywordsCategory: keywords\r\t"Not matching"\r\r\t^ nil',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '896' ],		#self : OmReference [ '897' ],		#time : DateAndTime [ '2018-01-14T19:02:29.692894-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMetacelloProjectNode,				#isMetaSide : false			},			#name : #'findMethod:in:',			#protocol : #querying,			#sourceCode : 'findMethod: aSelector in: aClass\r\t"Return the node if the item matches. By default, search among the kids."\r\r\t"Not  lazy : force contents generation."\r\r\t| res |\r\tself contents\r\t\tdo: [ :each | \r\t\t\t(res := each findMethod: aSelector in: aClass) notNil\r\t\t\t\tifTrue: [ ^ res ] ].\r\t^ nil',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '897' ],		#self : OmReference [ '898' ],		#time : DateAndTime [ '2018-01-14T19:02:29.693936-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMetacelloProjectNode,				#isMetaSide : false			},			#name : #'findPackage:',			#protocol : #querying,			#sourceCode : 'findPackage: aRPackage\r\tself contents\r\t\tdo: [ :each | (each findPackage: aRPackage) ifNotNil: [ :f | ^ f ] ].\r\t^ nil',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '898' ],		#self : OmReference [ '899' ],		#time : DateAndTime [ '2018-01-14T19:02:29.694912-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMetacelloProjectNode,				#isMetaSide : false			},			#name : #'findPackageCategory:',			#protocol : #querying,			#sourceCode : 'findPackageCategory: ignored\r\t^ nil',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '899' ],		#self : OmReference [ '900' ],		#time : DateAndTime [ '2018-01-14T19:02:29.695983-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMetacelloProjectNode,				#isMetaSide : false			},			#name : #icon,			#protocol : #accessing,			#sourceCode : 'icon\r\t^ (self contents anySatisfy: [ :e | e mcWorkingCopy modified ])\r\t\tifTrue: [ #dirtyPackageIcon ]\r\t\tifFalse: [ #packageIcon ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '900' ],		#self : OmReference [ '901' ],		#time : DateAndTime [ '2018-01-14T19:02:29.697123-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMetacelloProjectNode,				#isMetaSide : false			},			#name : #'isInRBEnvironment:',			#protocol : #querying,			#sourceCode : 'isInRBEnvironment: aRBEnvironment\r\t^ self contents anySatisfy: [ :e | e isInRBEnvironment: aRBEnvironment ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '901' ],		#self : OmReference [ '902' ],		#time : DateAndTime [ '2018-01-14T19:02:29.69831-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMetacelloProjectNode,				#isMetaSide : false			},			#name : #item,			#protocol : #private,			#sourceCode : 'item\r\t^ item',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '902' ],		#self : OmReference [ '903' ],		#time : DateAndTime [ '2018-01-14T19:02:29.699329-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMetacelloProjectNode,				#isMetaSide : false			},			#name : #metacelloCommands,			#protocol : #commands,			#sourceCode : 'metacelloCommands\r\t<treeAreaCommand>\r\t^ #(AltMetacelloSaveProject AltMetacelloLockProject)',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '903' ],		#self : OmReference [ '904' ],		#time : DateAndTime [ '2018-01-14T19:02:29.700303-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMetacelloProjectNode,				#isMetaSide : false			},			#name : #'packagesDo:',			#protocol : #querying,			#sourceCode : 'packagesDo: aBlock\r\tself contents do: [ :e | e packagesDo: aBlock ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '904' ],		#self : OmReference [ '905' ],		#time : DateAndTime [ '2018-01-14T19:02:29.701324-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMetacelloProjectNode,				#isMetaSide : false			},			#name : #projectRegistration,			#protocol : #private,			#sourceCode : 'projectRegistration\r\t^ MetacelloProjectRegistration registry\r\t\tregistrationForExactClassNamed: item\r\t\tifAbsent: [  ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '905' ],		#self : OmReference [ '906' ],		#time : DateAndTime [ '2018-01-14T19:02:29.704432-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMetacelloProjectNode,				#isMetaSide : false			},			#name : #projectVersionSpec,			#protocol : #private,			#sourceCode : 'projectVersionSpec\r\t^ self projectRegistration projectSpec version spec',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '906' ],		#self : OmReference [ '907' ],		#time : DateAndTime [ '2018-01-14T19:02:29.705462-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMetacelloProjectNode,				#isMetaSide : false			},			#name : #sourceCode,			#protocol : #querying,			#sourceCode : 'sourceCode\r\t"A description of the project."\r\r\t^ self projectRegistration printString',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '907' ],		#self : OmReference [ '908' ],		#time : DateAndTime [ '2018-01-14T19:02:29.70649-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMetacelloProjectNode,				#isMetaSide : false			},			#name : #title,			#protocol : #accessing,			#sourceCode : 'title\r\t^ self item',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '908' ],		#self : OmReference [ '909' ],		#time : DateAndTime [ '2018-01-14T19:02:29.707535-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMetacelloRegistryNode,				#isMetaSide : false			},			#name : #'aCategoryAdded:',			#protocol : #updating,			#sourceCode : 'aCategoryAdded: anEvent\r\t"Pass through that event."\r\r\t^ self contents inject: false into: [ :bool :each | (each aCategoryAdded: anEvent) or: [ bool ] ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '909' ],		#self : OmReference [ '910' ],		#time : DateAndTime [ '2018-01-14T19:02:29.708713-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMetacelloRegistryNode,				#isMetaSide : false			},			#name : #'aCategoryRemoved:',			#protocol : #updating,			#sourceCode : 'aCategoryRemoved: anEvent\r\t"Pass through that event."\r\r\t^ self contents inject: false into: [ :bool :each | (each aCategoryRemoved: anEvent) or: [ bool ] ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '910' ],		#self : OmReference [ '911' ],		#time : DateAndTime [ '2018-01-14T19:02:29.709835-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMetacelloRegistryNode,				#isMetaSide : false			},			#name : #'aCategoryRenamed:',			#protocol : #updating,			#sourceCode : 'aCategoryRenamed: anEvent\r\t"Pass through that event."\r\r\t^ self contents inject: false into: [ :bool :each | (each aCategoryRenamed: anEvent) or: [ bool ] ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '911' ],		#self : OmReference [ '912' ],		#time : DateAndTime [ '2018-01-14T19:02:29.710818-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMetacelloRegistryNode,				#isMetaSide : false			},			#name : #'aClassAdded:',			#protocol : #updating,			#sourceCode : 'aClassAdded: anEvent\r\t"Pass through that event."\r\r\t^ self contents inject: false into: [ :bool :each | (each aClassAdded: anEvent) or: [ bool ] ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '912' ],		#self : OmReference [ '913' ],		#time : DateAndTime [ '2018-01-14T19:02:29.711804-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMetacelloRegistryNode,				#isMetaSide : false			},			#name : #'aClassCommented:',			#protocol : #updating,			#sourceCode : 'aClassCommented: anEvent\r\t"Pass through that event."\r\r\t^ self contents inject: false into: [ :bool :each | (each aClassCommented: anEvent) or: [ bool ] ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '913' ],		#self : OmReference [ '914' ],		#time : DateAndTime [ '2018-01-14T19:02:29.712787-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMetacelloRegistryNode,				#isMetaSide : false			},			#name : #'aClassModifiedClassDefinition:',			#protocol : #updating,			#sourceCode : 'aClassModifiedClassDefinition: anEvent\r\t"Pass through that event."\r\r\tself contents do: [ :each | each aClassModifiedClassDefinition: anEvent ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '914' ],		#self : OmReference [ '915' ],		#time : DateAndTime [ '2018-01-14T19:02:29.716084-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMetacelloRegistryNode,				#isMetaSide : false			},			#name : #'aClassRecategorized:',			#protocol : #updating,			#sourceCode : 'aClassRecategorized: anEvent\r\t"Pass through that event."\r\r\t^ self contents inject: false into: [ :bool :each | (each aClassRecategorized: anEvent) or: [ bool ] ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '915' ],		#self : OmReference [ '916' ],		#time : DateAndTime [ '2018-01-14T19:02:29.717345-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMetacelloRegistryNode,				#isMetaSide : false			},			#name : #'aClassRemoved:',			#protocol : #updating,			#sourceCode : 'aClassRemoved: anEvent\r\t"Pass through that event."\r\r\t^ self contents inject: false into: [ :bool :each | (each aClassRemoved: anEvent) or: [ bool ] ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '916' ],		#self : OmReference [ '917' ],		#time : DateAndTime [ '2018-01-14T19:02:29.718314-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMetacelloRegistryNode,				#isMetaSide : false			},			#name : #'aClassRenamed:',			#protocol : #updating,			#sourceCode : 'aClassRenamed: anEvent\r\t"Pass through that event."\r\r\tself contents do: [ :each | each aClassRenamed: anEvent ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '917' ],		#self : OmReference [ '918' ],		#time : DateAndTime [ '2018-01-14T19:02:29.719418-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMetacelloRegistryNode,				#isMetaSide : false			},			#name : #'aClassReorganized:',			#protocol : #updating,			#sourceCode : 'aClassReorganized: anEvent\r\t"Pass through that event."\r\r\t^ self contents inject: false into: [ :bool :each | (each aClassReorganized: anEvent) or: [ bool ] ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '918' ],		#self : OmReference [ '919' ],		#time : DateAndTime [ '2018-01-14T19:02:29.720538-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMetacelloRegistryNode,				#isMetaSide : false			},			#name : #'aClassRepackaged:',			#protocol : #updating,			#sourceCode : 'aClassRepackaged: anEvent\r\t"Pass through that event."\r\r\t^ self contents inject: false into: [ :bool :each | (each aClassRepackaged: anEvent) or: [ bool ] ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '919' ],		#self : OmReference [ '920' ],		#time : DateAndTime [ '2018-01-14T19:02:29.72157-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMetacelloRegistryNode,				#isMetaSide : false			},			#name : #'aMCWorkingCopyCreated:',			#protocol : #updating,			#sourceCode : 'aMCWorkingCopyCreated: anEvent\r\t"Either match to itself or pass to its children."\r\r\tself contents size = self registrations size\r\t\tifFalse: [ AltBrowser aNodeToRebuilt: self ].\r\t^ self contents\r\t\tanySatisfy: [ :each | each aMCWorkingCopyCreated: anEvent ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '920' ],		#self : OmReference [ '921' ],		#time : DateAndTime [ '2018-01-14T19:02:29.722631-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMetacelloRegistryNode,				#isMetaSide : false			},			#name : #'aMCWorkingCopyDeleted:',			#protocol : #updating,			#sourceCode : 'aMCWorkingCopyDeleted: anEvent\r\t"If one of our children say yes, rebuilt ourselves! Property we use here: a MCWorkingCopy is unique in a package category. Remember that."\r\r\t"Note: we will have to remove from this node items only if the MCWorkingCopy was stored at that level. This is checked by the double call to aMCWorkingCopyDeleted: which will only answer true if node is the AltPackageCategoryNode for the MCWorkingCopy."\r\r\t(self contents\r\t\tdetect: [ :each | each aMCWorkingCopyDeleted: anEvent ]\r\t\tifNone: [ nil ])\r\t\tifNotNil:\r\t\t\t[ :node | \r\t\t\t(node aMCWorkingCopyDeleted: anEvent)\r\t\t\t\tifTrue:\r\t\t\t\t\t[ self removeRPackage: node packageName.\r\t\t\t\t\tAltBrowser aNodeToRebuilt: self ].\r\t\t\t^ true ].\r\t^ false',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '921' ],		#self : OmReference [ '922' ],		#time : DateAndTime [ '2018-01-14T19:02:29.723662-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMetacelloRegistryNode,				#isMetaSide : false			},			#name : #'aMCWorkingCopyModified:',			#protocol : #updating,			#sourceCode : 'aMCWorkingCopyModified: anEvent\r\t"Just propagate the event."\r\r\t^ self contents inject: false into: [ :bool :each | (each aMCWorkingCopyModified: anEvent) or: [ bool ] ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '922' ],		#self : OmReference [ '923' ],		#time : DateAndTime [ '2018-01-14T19:02:29.724636-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMetacelloRegistryNode,				#isMetaSide : false			},			#name : #'aMethodAdded:',			#protocol : #updating,			#sourceCode : 'aMethodAdded: anEvent\r\t"Pass through to childrens."\r\r\t^ self contents inject: false into: [ :bool :each | (each aMethodAdded: anEvent) or: [ bool ] ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '923' ],		#self : OmReference [ '924' ],		#time : DateAndTime [ '2018-01-14T19:02:29.725949-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMetacelloRegistryNode,				#isMetaSide : false			},			#name : #'aMethodRecategorized:',			#protocol : #updating,			#sourceCode : 'aMethodRecategorized: anEvent\r\t"Pass through to childrens."\r\r\t^ self contents inject: false into: [ :bool :each | (each aMethodRecategorized: anEvent) or: [ bool ] ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '924' ],		#self : OmReference [ '925' ],		#time : DateAndTime [ '2018-01-14T19:02:29.727264-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMetacelloRegistryNode,				#isMetaSide : false			},			#name : #'aMethodRemoved:',			#protocol : #updating,			#sourceCode : 'aMethodRemoved: anEvent\r\t"Pass through to childrens."\r\r\t^ self contents inject: false into: [ :bool :each | (each aMethodRemoved: anEvent) or: [ bool ] ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '925' ],		#self : OmReference [ '926' ],		#time : DateAndTime [ '2018-01-14T19:02:29.728393-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMetacelloRegistryNode,				#isMetaSide : false			},			#name : #'aRPackageCreated:',			#protocol : #updating,			#sourceCode : 'aRPackageCreated: anEvent\r\t^ self contents inject: false into: [ :bool :each | (each aRPackageCreated: anEvent) or: [ bool ] ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '926' ],		#self : OmReference [ '927' ],		#time : DateAndTime [ '2018-01-14T19:02:29.729401-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMetacelloRegistryNode,				#isMetaSide : false			},			#name : #'aRPackageUnregistered:',			#protocol : #updating,			#sourceCode : 'aRPackageUnregistered: anEvent\r\t^ self contents inject: false into: [ :bool :each | (each aRPackageUnregistered: anEvent) or: [ bool ] ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '927' ],		#self : OmReference [ '928' ],		#time : DateAndTime [ '2018-01-14T19:02:29.730465-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMetacelloRegistryNode,				#isMetaSide : false			},			#name : #'asPerRBEnvironment:',			#protocol : #querying,			#sourceCode : 'asPerRBEnvironment: aRBEnvironment\r\t"Check if it exists in this environment. If yes, return self or a transform of self (a child, for example); if no return nil causing the node to disappear."\r\r\t| sz sc |\r\taRBEnvironment isSystem\r\t\tifTrue: [ ^ self ].\r\tsz := (sc := self contents select: [ :e | e isInRBEnvironment: aRBEnvironment ]) size.\r\t^ sz = 1\r\t\tifTrue: [ sc first asPerRBEnvironment: aRBEnvironment ]\r\t\tifFalse: [ \r\t\t\tsz = 0\r\t\t\t\tifTrue: [ nil ]\r\t\t\t\tifFalse: [ self ] ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '928' ],		#self : OmReference [ '929' ],		#time : DateAndTime [ '2018-01-14T19:02:29.731544-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMetacelloRegistryNode,				#isMetaSide : false			},			#name : #asString,			#protocol : #printing,			#sourceCode : 'asString\r\t^ self title',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '929' ],		#self : OmReference [ '930' ],		#time : DateAndTime [ '2018-01-14T19:02:29.732719-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMetacelloRegistryNode,				#isMetaSide : false			},			#name : #contents,			#protocol : #accessing,			#sourceCode : 'contents\r\t^ contents\r\t\tifNil: [ contents := self registrations\r\t\t\t\tcollect:\r\t\t\t\t\t[ :each | AltMetacelloProjectNode with: each projectSpec className parent: self ] ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '930' ],		#self : OmReference [ '931' ],		#time : DateAndTime [ '2018-01-14T19:02:29.733713-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMetacelloRegistryNode,				#isMetaSide : false			},			#name : #'findKeywordsCategory:',			#protocol : #querying,			#sourceCode : 'findKeywordsCategory: keywords\r\t"Not matching"\r\r\t^ nil',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '931' ],		#self : OmReference [ '932' ],		#time : DateAndTime [ '2018-01-14T19:02:29.734723-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMetacelloRegistryNode,				#isMetaSide : false			},			#name : #'findMethod:in:',			#protocol : #querying,			#sourceCode : 'findMethod: aSelector in: aClass\r\t"Return the node if the item matches. By default, search among the kids."\r\r\t"Not  lazy : force contents generation."\r\r\t| res |\r\tself contents\r\t\tdo: [ :each | \r\t\t\t(res := each findMethod: aSelector in: aClass) notNil\r\t\t\t\tifTrue: [ ^ res ] ].\r\t^ nil',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '932' ],		#self : OmReference [ '933' ],		#time : DateAndTime [ '2018-01-14T19:02:29.735719-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMetacelloRegistryNode,				#isMetaSide : false			},			#name : #'findPackage:',			#protocol : #querying,			#sourceCode : 'findPackage: aRPackage\r\tself contents\r\t\tdo: [ :each | (each findPackage: aRPackage) ifNotNil: [ :f | ^ f ] ].\r\t^ nil',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '933' ],		#self : OmReference [ '934' ],		#time : DateAndTime [ '2018-01-14T19:02:29.737131-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMetacelloRegistryNode,				#isMetaSide : false			},			#name : #'findPackageCategory:',			#protocol : #querying,			#sourceCode : 'findPackageCategory: ignored\r\t^ nil',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '934' ],		#self : OmReference [ '935' ],		#time : DateAndTime [ '2018-01-14T19:02:29.738176-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMetacelloRegistryNode,				#isMetaSide : false			},			#name : #icon,			#protocol : #accessing,			#sourceCode : 'icon\r\t^ #groupIcon',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '935' ],		#self : OmReference [ '936' ],		#time : DateAndTime [ '2018-01-14T19:02:29.739139-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMetacelloRegistryNode,				#isMetaSide : false			},			#name : #'isInRBEnvironment:',			#protocol : #querying,			#sourceCode : 'isInRBEnvironment: aRBEnvironment\r\t^ self contents anySatisfy: [ :e | e isInRBEnvironment: aRBEnvironment ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '936' ],		#self : OmReference [ '937' ],		#time : DateAndTime [ '2018-01-14T19:02:29.740101-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMetacelloRegistryNode,				#isMetaSide : false			},			#name : #item,			#protocol : #private,			#sourceCode : 'item\r\t^ Metacello',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '937' ],		#self : OmReference [ '938' ],		#time : DateAndTime [ '2018-01-14T19:02:29.741086-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMetacelloRegistryNode,				#isMetaSide : false			},			#name : #'packagesDo:',			#protocol : #querying,			#sourceCode : 'packagesDo: aBlock\r\tself contents do: [ :e | e packagesDo: aBlock ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '938' ],		#self : OmReference [ '939' ],		#time : DateAndTime [ '2018-01-14T19:02:29.74221-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMetacelloRegistryNode,				#isMetaSide : false			},			#name : #registrations,			#protocol : #private,			#sourceCode : 'registrations\r\t^ self item registrations',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '939' ],		#self : OmReference [ '940' ],		#time : DateAndTime [ '2018-01-14T19:02:29.743212-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMetacelloRegistryNode,				#isMetaSide : false			},			#name : #title,			#protocol : #accessing,			#sourceCode : 'title\r\t^ \'Metacello Registry\'',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '940' ],		#self : OmReference [ '941' ],		#time : DateAndTime [ '2018-01-14T19:02:29.744207-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMethodCategoryNode,				#isMetaSide : false			},			#name : #'aClassCommented:',			#protocol : #updating,			#sourceCode : 'aClassCommented: anEvent\r\t"Filter out based on the class."\r\r\t^ false',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '941' ],		#self : OmReference [ '942' ],		#time : DateAndTime [ '2018-01-14T19:02:29.745248-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMethodCategoryNode,				#isMetaSide : false			},			#name : #'aMethodAdded:',			#protocol : #updating,			#sourceCode : 'aMethodAdded: anEvent\r\t"Are we concerned by that event ? Yes if we are the right class and the right method category."\r\r\t(anEvent methodClass == self sourceClass\r\t\tand: [ anEvent protocol = self methodCategory ])\r\t\tifTrue: [ AltBrowser aNodeToRebuilt: self.\r\t\t\t^ true ].\r\t^ false',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '942' ],		#self : OmReference [ '943' ],		#time : DateAndTime [ '2018-01-14T19:02:29.746445-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMethodCategoryNode,				#isMetaSide : false			},			#name : #'aMethodRecategorized:',			#protocol : #updating,			#sourceCode : 'aMethodRecategorized: anEvent\r\t"Are we concerned by that event ? Yes if we are the right class and the right method category."\r\r\t(anEvent methodClass == self sourceClass\r\t\tand:\r\t\t\t[ anEvent newProtocol = self methodCategory\r\t\t\t\tor: [ anEvent oldProtocol = self methodCategory ] ])\r\t\tifTrue:\r\t\t\t[ AltBrowser aNodeToRebuilt: self.\r\t\t\tself methodCategory = \'as yet unclassified\'\r\t\t\t\tifTrue:\r\t\t\t\t\t[ (self sourceClass organization\r\t\t\t\t\t\tprotocolNamed: self methodCategory)\r\t\t\t\t\t\tifNotNil:\r\t\t\t\t\t\t\t[ :protocol | \r\t\t\t\t\t\t\tprotocol isEmpty\r\t\t\t\t\t\t\t\tifTrue: [ self sourceClass removeProtocol: self methodCategory ] ] ].\r\t\t\t^ true ].\r\t^ false',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '943' ],		#self : OmReference [ '944' ],		#time : DateAndTime [ '2018-01-14T19:02:29.747995-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMethodCategoryNode,				#isMetaSide : false			},			#name : #'aMethodRemoved:',			#protocol : #updating,			#sourceCode : 'aMethodRemoved: anEvent\r\t"Are we concerned by that event ? Yes if we are the right class and the right method category."\r\r\t"There should be some logic here to handle an empty \'as yet unclassified\' category here, but it seems that in 2.0 it isn\'t removed automagically."\r\r\t(anEvent methodClass == self sourceClass\r\t\tand: [ anEvent protocol = self methodCategory ])\r\t\tifTrue:\r\t\t\t[ AltBrowser aNodeToRebuilt: self.\r\t\t\tself methodCategory = \'as yet unclassified\'\r\t\t\t\tifTrue:\r\t\t\t\t\t[ (self sourceClass organization\r\t\t\t\t\t\tprotocolNamed: self methodCategory) isEmpty\r\t\t\t\t\t\tifTrue: [ self sourceClass removeProtocol: self methodCategory ] ].\r\t\t\t^ true ].\r\t^ false',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '944' ],		#self : OmReference [ '945' ],		#time : DateAndTime [ '2018-01-14T19:02:29.749085-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMethodCategoryNode,				#isMetaSide : false			},			#name : #'accept:notifying:',			#protocol : #actions,			#sourceCode : 'accept: aText notifying: aController\r\t"Compile the method. Return a target methodNode object for the method. We know it should be one of our children."\r\r\t| aSelector aMethodNode |\r\tself methodCategory = \'no messages\'\r\t\tifTrue: [ \r\t\t\taSelector := self sourceClass compile: aText.\r\t\t\tself parent rebuildContents ]\r\t\tifFalse: [ \r\t\t\taSelector := self sourceClass compile: aText classified: self methodCategory notifying: aController.\r\t\t\tself rebuildContents ].\r\taMethodNode := self parent findMethod: aSelector in: self sourceClass.\r\t^ aMethodNode',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '945' ],		#self : OmReference [ '946' ],		#time : DateAndTime [ '2018-01-14T19:02:29.750126-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMethodCategoryNode,				#isMetaSide : false			},			#name : #'acceptDropItem:',			#protocol : #'drag and drop',			#sourceCode : 'acceptDropItem: anItem\r\t"Only valid for an AltMethodNode."\r\r\t^ anItem isKindOf: AltMethodNode',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '946' ],		#self : OmReference [ '947' ],		#time : DateAndTime [ '2018-01-14T19:02:29.751161-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMethodCategoryNode,				#isMetaSide : false			},			#name : #contents,			#protocol : #accessing,			#sourceCode : 'contents\r\tcontents\r\t\tifNil: [ \r\t\t\tcontents := (self parent itemClass selectorsInProtocol: self methodCategory) asSortedCollection\r\t\t\t\tcollect: [ :each | AltMethodNode with: each parent: self ] ].\r\t^ contents',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '947' ],		#self : OmReference [ '948' ],		#time : DateAndTime [ '2018-01-14T19:02:29.752249-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMethodCategoryNode,				#isMetaSide : false			},			#name : #'doubleClickIn:',			#protocol : #actions,			#sourceCode : 'doubleClickIn: anItem\r\t"If we are an extension protocol, then double click will move us to the package extension place."\r\r\t| aBrowser |\r\tself methodCategory first = $*\r\t\tifFalse: [ ^ false ].\r\taBrowser := anItem model.\r\t(aBrowser class findPackage: self rpackage)\r\t\tifNotNil: [ :aPackage | \r\t\t\t(aPackage\r\t\t\t\tfindMethodCategory: self methodCategory\r\t\t\t\tin: self parent itemClass)\r\t\t\t\tifNotNil: [ :aClassExtension | \r\t\t\t\t\taBrowser history hasPrevious\r\t\t\t\t\t\tifTrue: [ aBrowser history previous ].\r\t\t\t\t\taBrowser openPathForAbstractItem: aClassExtension.\r\t\t\t\t\t(aBrowser root findItem: aClassExtension)\r\t\t\t\t\t\tifNotNil:\r\t\t\t\t\t\t\t[ :n | aBrowser treeMorph moveSelectionIndexTo: (aBrowser root indexOf: n) ]\r\t\t\t\t\t\tifNil: [ ^ false ].\r\t\t\t\t\t^ true ]\r\t\t\t\tifNil: [ ^ false ] ]\r\t\tifNil: [ ^ false ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '948' ],		#self : OmReference [ '949' ],		#time : DateAndTime [ '2018-01-14T19:02:29.753314-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMethodCategoryNode,				#isMetaSide : false			},			#name : #'dropItem:',			#protocol : #'drag and drop',			#sourceCode : 'dropItem: anItem\r\t"Either change a method protocol or copy a method from one class to another. In fact, recompiling the method whatever the context should give us the correct result."\r\r\tself sourceClass compile: anItem sourceCode classified: self methodCategory notifying: nil.\r\t^ self findMethod: anItem selector in: self sourceClass',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '949' ],		#self : OmReference [ '950' ],		#time : DateAndTime [ '2018-01-14T19:02:29.754416-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMethodCategoryNode,				#isMetaSide : false			},			#name : #'findMethod:in:',			#protocol : #querying,			#sourceCode : 'findMethod: aSelector in: aClass\r\tself sourceClass == aClass\r\t\tifTrue: [ \r\t\t\tself contents\r\t\t\t\tdo: [ :each | \r\t\t\t\t\t| res |\r\t\t\t\t\t(res := each findMethod: aSelector in: aClass) notNil\r\t\t\t\t\t\tifTrue: [ ^ res ] ] ].\r\t^ nil',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '950' ],		#self : OmReference [ '951' ],		#time : DateAndTime [ '2018-01-14T19:02:29.755541-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMethodCategoryNode,				#isMetaSide : false			},			#name : #'findMethodCategory:in:',			#protocol : #querying,			#sourceCode : 'findMethodCategory: aMethodCategory in: aClass\r\t^ (aMethodCategory = self methodCategory and: [ aClass == parent itemClass ])\r\t\tifTrue: [ self ]\r\t\tifFalse: [ nil ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '951' ],		#self : OmReference [ '952' ],		#time : DateAndTime [ '2018-01-14T19:02:29.756556-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMethodCategoryNode,				#isMetaSide : false			},			#name : #formatCommand,			#protocol : #commands,			#sourceCode : 'formatCommand\r\t<textAreaCommand>\r\t^ #(#AltRBFormatCommand)',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '952' ],		#self : OmReference [ '953' ],		#time : DateAndTime [ '2018-01-14T19:02:29.757881-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMethodCategoryNode,				#isMetaSide : false			},			#name : #icon,			#protocol : #accessing,			#sourceCode : 'icon\r\t^ #smallOpenIcon',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '953' ],		#self : OmReference [ '954' ],		#time : DateAndTime [ '2018-01-14T19:02:29.759002-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMethodCategoryNode,				#isMetaSide : false			},			#name : #'isInRBEnvironment:',			#protocol : #querying,			#sourceCode : 'isInRBEnvironment: aRBEnvironment\r\t^ aRBEnvironment includesProtocol: self methodCategory in: self sourceClass',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '954' ],		#self : OmReference [ '955' ],		#time : DateAndTime [ '2018-01-14T19:02:29.760025-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMethodCategoryNode,				#isMetaSide : false			},			#name : #isMethodCategoryNode,			#protocol : #testing,			#sourceCode : 'isMethodCategoryNode\r\t^ true',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '955' ],		#self : OmReference [ '956' ],		#time : DateAndTime [ '2018-01-14T19:02:29.761058-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMethodCategoryNode,				#isMetaSide : false			},			#name : #isStyled,			#protocol : #testing,			#sourceCode : 'isStyled\r\t^ true',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '956' ],		#self : OmReference [ '957' ],		#time : DateAndTime [ '2018-01-14T19:02:29.762072-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMethodCategoryNode,				#isMetaSide : false			},			#name : #methodCategory,			#protocol : #accessing,			#sourceCode : 'methodCategory\r\t^ self item',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '957' ],		#self : OmReference [ '958' ],		#time : DateAndTime [ '2018-01-14T19:02:29.763091-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMethodCategoryNode,				#isMetaSide : false			},			#name : #privateClass,			#protocol : #private,			#sourceCode : 'privateClass\r\t^ self parent privateClass',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '958' ],		#self : OmReference [ '959' ],		#time : DateAndTime [ '2018-01-14T19:02:29.7642-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMethodCategoryNode,				#isMetaSide : false			},			#name : #rpackage,			#protocol : #accessing,			#sourceCode : 'rpackage\r\t"Get the package name."\r\r\t^ RPackageOrganizer default\r\t\tpackageForProtocol: self methodCategory\r\t\tinClass: self parent itemClass',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '959' ],		#self : OmReference [ '960' ],		#time : DateAndTime [ '2018-01-14T19:02:29.76522-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMethodCategoryNode,				#isMetaSide : false			},			#name : #sourceClass,			#protocol : #querying,			#sourceCode : 'sourceClass\r\t^ self parent itemClass',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '960' ],		#self : OmReference [ '961' ],		#time : DateAndTime [ '2018-01-14T19:02:29.766382-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMethodCategoryNode,				#isMetaSide : false			},			#name : #sourceCode,			#protocol : #querying,			#sourceCode : 'sourceCode\r\t^ \'message selector and argument names\r\t"comment stating purpose of message"\r\r\t| temporary variable names |\r\tstatements\'',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '961' ],		#self : OmReference [ '962' ],		#time : DateAndTime [ '2018-01-14T19:02:29.767389-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMethodCategoryNode,				#isMetaSide : false			},			#name : #sourceComment,			#protocol : #querying,			#sourceCode : 'sourceComment\r\t^ self parent sourceComment',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '962' ],		#self : OmReference [ '963' ],		#time : DateAndTime [ '2018-01-14T19:02:29.768633-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMethodCategoryNode,				#isMetaSide : false			},			#name : #treeAreaCommands,			#protocol : #commands,			#sourceCode : 'treeAreaCommands\r\t<treeAreaCommand>\r\t^ #(#AltAddProtocolCommand #AltRemoveProtocolCommand)',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '963' ],		#self : OmReference [ '964' ],		#time : DateAndTime [ '2018-01-14T19:02:29.769639-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltPackageCategoryNode class',				#isMetaSide : true			},			#name : #'with:',			#protocol : #'instance creation',			#sourceCode : 'with: anItem\r\t(anItem key == #ConfigurationOf or: [ anItem key == #BaselineOf ])\r\t\tifTrue: [ ^ AltProjectCategoryNode with: anItem ].\r\t^ super with: anItem',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '964' ],		#self : OmReference [ '965' ],		#time : DateAndTime [ '2018-01-14T19:02:29.77062-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltPackageCategoryNode class',				#isMetaSide : true			},			#name : #'with:parent:',			#protocol : #'instance creation',			#sourceCode : 'with: anItem parent: aNode\r\t(anItem key == #ConfigurationOf or: [ anItem key == #BaselineOf ])\r\t\tifTrue: [ ^ AltProjectCategoryNode with: anItem parent: aNode ].\r\t^ super with: anItem parent: aNode',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '965' ],		#self : OmReference [ '966' ],		#time : DateAndTime [ '2018-01-14T19:02:29.771575-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageCategoryNode,				#isMetaSide : false			},			#name : #'aCategoryAdded:',			#protocol : #updating,			#sourceCode : 'aCategoryAdded: anEvent\r\t"Pass through that event."\r\r\t^ self contents inject: false into: [ :bool :each | (each aCategoryAdded: anEvent) or: [ bool ] ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '966' ],		#self : OmReference [ '967' ],		#time : DateAndTime [ '2018-01-14T19:02:29.772543-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageCategoryNode,				#isMetaSide : false			},			#name : #'aCategoryRemoved:',			#protocol : #updating,			#sourceCode : 'aCategoryRemoved: anEvent\r\t"Pass through that event."\r\r\t^ self contents inject: false into: [ :bool :each | (each aCategoryRemoved: anEvent) or: [ bool ] ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '967' ],		#self : OmReference [ '968' ],		#time : DateAndTime [ '2018-01-14T19:02:29.773497-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageCategoryNode,				#isMetaSide : false			},			#name : #'aCategoryRenamed:',			#protocol : #updating,			#sourceCode : 'aCategoryRenamed: anEvent\r\t"Pass through that event."\r\r\t^ self contents inject: false into: [ :bool :each | (each aCategoryRenamed: anEvent) or: [ bool ] ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '968' ],		#self : OmReference [ '969' ],		#time : DateAndTime [ '2018-01-14T19:02:29.77446-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageCategoryNode,				#isMetaSide : false			},			#name : #'aClassAdded:',			#protocol : #updating,			#sourceCode : 'aClassAdded: anEvent\r\t"Pass through that event."\r\r\t^ self contents inject: false into: [ :bool :each | (each aClassAdded: anEvent) or: [ bool ] ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '969' ],		#self : OmReference [ '970' ],		#time : DateAndTime [ '2018-01-14T19:02:29.775396-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageCategoryNode,				#isMetaSide : false			},			#name : #'aClassCommented:',			#protocol : #updating,			#sourceCode : 'aClassCommented: anEvent\r\t"Pass through that event."\r\r\t^ self contents inject: false into: [ :bool :each | (each aClassCommented: anEvent) or: [ bool ] ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '970' ],		#self : OmReference [ '971' ],		#time : DateAndTime [ '2018-01-14T19:02:29.776281-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageCategoryNode,				#isMetaSide : false			},			#name : #'aClassModifiedClassDefinition:',			#protocol : #updating,			#sourceCode : 'aClassModifiedClassDefinition: anEvent\r\t"Pass through that event."\r\r\tself contents do: [ :each | each aClassModifiedClassDefinition: anEvent ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '971' ],		#self : OmReference [ '972' ],		#time : DateAndTime [ '2018-01-14T19:02:29.77723-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageCategoryNode,				#isMetaSide : false			},			#name : #'aClassRecategorized:',			#protocol : #updating,			#sourceCode : 'aClassRecategorized: anEvent\r\t"Pass through that event."\r\r\t^ self contents inject: false into: [ :bool :each | (each aClassRecategorized: anEvent) or: [ bool ] ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '972' ],		#self : OmReference [ '973' ],		#time : DateAndTime [ '2018-01-14T19:02:29.778515-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageCategoryNode,				#isMetaSide : false			},			#name : #'aClassRemoved:',			#protocol : #updating,			#sourceCode : 'aClassRemoved: anEvent\r\t"Pass through that event."\r\r\t^ self contents inject: false into: [ :bool :each | (each aClassRemoved: anEvent) or: [ bool ] ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '973' ],		#self : OmReference [ '974' ],		#time : DateAndTime [ '2018-01-14T19:02:29.779467-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageCategoryNode,				#isMetaSide : false			},			#name : #'aClassRenamed:',			#protocol : #updating,			#sourceCode : 'aClassRenamed: anEvent\r\t"Pass through that event."\r\r\tself contents do: [ :each | each aClassRenamed: anEvent ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '974' ],		#self : OmReference [ '975' ],		#time : DateAndTime [ '2018-01-14T19:02:29.780372-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageCategoryNode,				#isMetaSide : false			},			#name : #'aClassReorganized:',			#protocol : #updating,			#sourceCode : 'aClassReorganized: anEvent\r\t"Pass through that event."\r\r\t^ self contents inject: false into: [ :bool :each | (each aClassReorganized: anEvent) or: [ bool ] ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '975' ],		#self : OmReference [ '976' ],		#time : DateAndTime [ '2018-01-14T19:02:29.781257-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageCategoryNode,				#isMetaSide : false			},			#name : #'aClassRepackaged:',			#protocol : #updating,			#sourceCode : 'aClassRepackaged: anEvent\r\t"Pass through that event."\r\r\t^ self contents inject: false into: [ :bool :each | (each aClassRepackaged: anEvent) or: [ bool ] ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '976' ],		#self : OmReference [ '977' ],		#time : DateAndTime [ '2018-01-14T19:02:29.782206-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageCategoryNode,				#isMetaSide : false			},			#name : #'aMCWorkingCopyCreated:',			#protocol : #updating,			#sourceCode : 'aMCWorkingCopyCreated: anEvent\r\t"Either match to itself or pass to its children."\r\r\t(anEvent workingCopy packageName beginsWith: self trimmedCategoryName)\r\t\tifTrue:\r\t\t\t[ self addRPackage: anEvent workingCopy packageName asSymbol.\r\t\t\tAltBrowser aNodeToRebuilt: self.\r\t\t\t^ true ].\r\t^ self contents\r\t\tanySatisfy: [ :each | each aMCWorkingCopyCreated: anEvent ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '977' ],		#self : OmReference [ '978' ],		#time : DateAndTime [ '2018-01-14T19:02:29.783243-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageCategoryNode,				#isMetaSide : false			},			#name : #'aMCWorkingCopyDeleted:',			#protocol : #updating,			#sourceCode : 'aMCWorkingCopyDeleted: anEvent\r\t"If one of our children say yes, rebuilt ourselves! Property we use here: a MCWorkingCopy is unique in a package category. Remember that."\r\r\t"Note: we will have to remove from this node items only if the MCWorkingCopy was stored at that level. This is checked by the double call to aMCWorkingCopyDeleted: which will only answer true if node is the AltPackageCategoryNode for the MCWorkingCopy."\r\r\t(self contents\r\t\tdetect: [ :each | each aMCWorkingCopyDeleted: anEvent ]\r\t\tifNone: [ nil ])\r\t\tifNotNil:\r\t\t\t[ :node | \r\t\t\t(node aMCWorkingCopyDeleted: anEvent)\r\t\t\t\tifTrue:\r\t\t\t\t\t[ self removeRPackage: node packageName.\r\t\t\t\t\tAltBrowser aNodeToRebuilt: self ].\r\t\t\t^ true ].\r\t^ false',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '978' ],		#self : OmReference [ '979' ],		#time : DateAndTime [ '2018-01-14T19:02:29.784157-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageCategoryNode,				#isMetaSide : false			},			#name : #'aMCWorkingCopyModified:',			#protocol : #updating,			#sourceCode : 'aMCWorkingCopyModified: anEvent\r\t"Just propagate the event."\r\r\t^ self contents inject: false into: [ :bool :each | (each aMCWorkingCopyModified: anEvent) or: [ bool ] ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '979' ],		#self : OmReference [ '980' ],		#time : DateAndTime [ '2018-01-14T19:02:29.785047-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageCategoryNode,				#isMetaSide : false			},			#name : #'aMethodAdded:',			#protocol : #updating,			#sourceCode : 'aMethodAdded: anEvent\r\t"Pass through to childrens."\r\r\t^ self contents inject: false into: [ :bool :each | (each aMethodAdded: anEvent) or: [ bool ] ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '980' ],		#self : OmReference [ '981' ],		#time : DateAndTime [ '2018-01-14T19:02:29.785944-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageCategoryNode,				#isMetaSide : false			},			#name : #'aMethodRecategorized:',			#protocol : #updating,			#sourceCode : 'aMethodRecategorized: anEvent\r\t"Pass through to childrens."\r\r\t^ self contents inject: false into: [ :bool :each | (each aMethodRecategorized: anEvent) or: [ bool ] ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '981' ],		#self : OmReference [ '982' ],		#time : DateAndTime [ '2018-01-14T19:02:29.787363-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageCategoryNode,				#isMetaSide : false			},			#name : #'aMethodRemoved:',			#protocol : #updating,			#sourceCode : 'aMethodRemoved: anEvent\r\t"Pass through to childrens."\r\r\t^ self contents inject: false into: [ :bool :each | (each aMethodRemoved: anEvent) or: [ bool ] ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '982' ],		#self : OmReference [ '983' ],		#time : DateAndTime [ '2018-01-14T19:02:29.788323-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageCategoryNode,				#isMetaSide : false			},			#name : #'aRPackageCreated:',			#protocol : #updating,			#sourceCode : 'aRPackageCreated: anEvent\r\t^ self contents inject: false into: [ :bool :each | (each aRPackageCreated: anEvent) or: [ bool ] ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '983' ],		#self : OmReference [ '984' ],		#time : DateAndTime [ '2018-01-14T19:02:29.789211-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageCategoryNode,				#isMetaSide : false			},			#name : #'aRPackageUnregistered:',			#protocol : #updating,			#sourceCode : 'aRPackageUnregistered: anEvent\r\t^ self contents inject: false into: [ :bool :each | (each aRPackageUnregistered: anEvent) or: [ bool ] ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '984' ],		#self : OmReference [ '985' ],		#time : DateAndTime [ '2018-01-14T19:02:29.790096-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageCategoryNode,				#isMetaSide : false			},			#name : #aRecentPackagesReset,			#protocol : #updating,			#sourceCode : 'aRecentPackagesReset\r\t"Reset the history of pre-existing packages"\r\r\tself contents do: [ :each | each aRecentPackagesReset ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '985' ],		#self : OmReference [ '986' ],		#time : DateAndTime [ '2018-01-14T19:02:29.791037-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageCategoryNode,				#isMetaSide : false			},			#name : #'acceptDropItem:',			#protocol : #'drag and drop',			#sourceCode : 'acceptDropItem: anItem\r\t"Ok. If we receive a category or a package we either add it to its\r\tchildren (if it has no children ?) or add it just before this item?"\r\r\t^ ((anItem isKindOf: self class) and: [ anItem ~= self ]) or: [ anItem isKindOf: AltPackageNode ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '986' ],		#self : OmReference [ '987' ],		#time : DateAndTime [ '2018-01-14T19:02:29.791915-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageCategoryNode,				#isMetaSide : false			},			#name : #'addRPackage:',			#protocol : #accessing,			#sourceCode : 'addRPackage: aRPackageName\r\t"In this type of node, add the item to the value."\r\r\t^ self item value add: aRPackageName',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '987' ],		#self : OmReference [ '988' ],		#time : DateAndTime [ '2018-01-14T19:02:29.792935-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageCategoryNode,				#isMetaSide : false			},			#name : #asCategories,			#protocol : #converting,			#sourceCode : 'asCategories\r\t"Convert this node in a categories setting"\r\r\t| c |\r\tc := OrderedCollection\r\t\tstreamContents: [ :stream | \r\t\t\tstream nextPut: self categoryName.\r\t\t\tself contents do: [ :each | each asCategories ifNotNil: [ :aCat | stream nextPut: aCat ] ] ].\r\t^ c size = 1\r\t\tifTrue: [ c first ]\r\t\tifFalse: [ c asArray ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '988' ],		#self : OmReference [ '989' ],		#time : DateAndTime [ '2018-01-14T19:02:29.793874-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageCategoryNode,				#isMetaSide : false			},			#name : #'asPerRBEnvironment:',			#protocol : #querying,			#sourceCode : 'asPerRBEnvironment: aRBEnvironment\r\t"Check if it exists in this environment. If yes, return self or a transform of self (a child, for example); if no return nil causing the node to disappear."\r\r\t| sz sc |\r\taRBEnvironment isSystem\r\t\tifTrue: [ ^ self ].\r\tsz := (sc := self contents select: [ :e | e isInRBEnvironment: aRBEnvironment ]) size.\r\t^ sz = 1\r\t\tifTrue: [ sc first asPerRBEnvironment: aRBEnvironment ]\r\t\tifFalse: [ \r\t\t\tsz = 0\r\t\t\t\tifTrue: [ nil ]\r\t\t\t\tifFalse: [ self ] ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '989' ],		#self : OmReference [ '990' ],		#time : DateAndTime [ '2018-01-14T19:02:29.794795-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageCategoryNode,				#isMetaSide : false			},			#name : #asString,			#protocol : #printing,			#sourceCode : 'asString\r\t^ self categoryName',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '990' ],		#self : OmReference [ '991' ],		#time : DateAndTime [ '2018-01-14T19:02:29.795748-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageCategoryNode,				#isMetaSide : false			},			#name : #categoryName,			#protocol : #accessing,			#sourceCode : 'categoryName\r\t^ self item key',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '991' ],		#self : OmReference [ '992' ],		#time : DateAndTime [ '2018-01-14T19:02:29.797087-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageCategoryNode,				#isMetaSide : false			},			#name : #contents,			#protocol : #accessing,			#sourceCode : 'contents\r\tcontents\r\t\tifNil: [ \r\t\t\tcontents := (((self item value reject: [ :a | a isSymbol ]) sorted: [ :a :b | a key < b key ])\r\t\t\t\tcollect: [ :a | AltPackageCategoryNode with: a parent: self ])\r\t\t\t\t,\r\t\t\t\t\t(((self item value select: [ :a | a isSymbol ]) sorted: [ :a :b | a < b ])\r\t\t\t\t\t\tcollect: [ :a | AltPackageNode with: a parent: self ]) ].\r\t^ contents',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '992' ],		#self : OmReference [ '993' ],		#time : DateAndTime [ '2018-01-14T19:02:29.798118-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageCategoryNode,				#isMetaSide : false			},			#name : #'doubleClickIn:',			#protocol : #actions,			#sourceCode : 'doubleClickIn: anAltTreeItemModel\r\t"Action! On all packages listed under that category."\r\r\t| aSetOfPackages |\r\taSetOfPackages := IdentitySet new.\r\tself packagesDo: [ :e | aSetOfPackages add: e ].\r\tAltBrowser\r\t\tfullOnEnvironment: (anAltTreeItemModel rbEnvironment forPackages: aSetOfPackages)\r\t\tselect: self\r\t\twith: anAltTreeItemModel findExpanded',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '993' ],		#self : OmReference [ '994' ],		#time : DateAndTime [ '2018-01-14T19:02:29.799055-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageCategoryNode,				#isMetaSide : false			},			#name : #'dropItem:',			#protocol : #'drag and drop',			#sourceCode : 'dropItem: anItem\r\t"Simplify: as things are ordered, the only allowed move is drop inside another. Save changes to the categories."\r\r\tanItem parent removeRPackage: anItem item.\r\tAltBrowser aNodeToRebuilt: anItem parent.\r\tself addRPackage: anItem item.\r\tAltBrowser aNodeToRebuilt: self.\r\tAltBrowser updateCategories.\r\t^ anItem',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '994' ],		#self : OmReference [ '995' ],		#time : DateAndTime [ '2018-01-14T19:02:29.799999-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageCategoryNode,				#isMetaSide : false			},			#name : #'findMethod:in:',			#protocol : #querying,			#sourceCode : 'findMethod: aSelector in: aClass\r\t"Return the node if the item matches. By default, search among the kids."\r\r\t"Not  lazy : force contents generation."\r\r\t| res |\r\tself contents\r\t\tdo: [ :each | \r\t\t\t(res := each findMethod: aSelector in: aClass) notNil\r\t\t\t\tifTrue: [ ^ res ] ].\r\t^ nil',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '995' ],		#self : OmReference [ '996' ],		#time : DateAndTime [ '2018-01-14T19:02:29.800893-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageCategoryNode,				#isMetaSide : false			},			#name : #'findPackage:',			#protocol : #querying,			#sourceCode : 'findPackage: aRPackage\r\t"Return the node if the item matches. By default, search among the kids. Is lazy and will avoid triggering child building."\r\r\t"Not lazy : triggers contents generation."\r\r\t| res |\r\tself contents\r\t\tdo: [ :each | \r\t\t\t(res := each findPackage: aRPackage) notNil\r\t\t\t\tifTrue: [ ^ res ] ].\r\t^ nil',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '996' ],		#self : OmReference [ '997' ],		#time : DateAndTime [ '2018-01-14T19:02:29.801828-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageCategoryNode,				#isMetaSide : false			},			#name : #'findPackageCategory:',			#protocol : #querying,			#sourceCode : 'findPackageCategory: aName\r\t"Return the node if the item matches."\r\r\tself categoryName = aName\r\t\tifTrue: [ ^ self ].\r\tself contents do: [ :each | (each findPackageCategory: aName) ifNotNil: [ :res | ^ res ] ].\r\t^ nil',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '997' ],		#self : OmReference [ '998' ],		#time : DateAndTime [ '2018-01-14T19:02:29.802739-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageCategoryNode,				#isMetaSide : false			},			#name : #icon,			#protocol : #accessing,			#sourceCode : 'icon\r\t^ #smallOpenIcon',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '998' ],		#self : OmReference [ '999' ],		#time : DateAndTime [ '2018-01-14T19:02:29.803645-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageCategoryNode,				#isMetaSide : false			},			#name : #'isInRBEnvironment:',			#protocol : #querying,			#sourceCode : 'isInRBEnvironment: aRBEnvironment\r\t^ self contents anySatisfy: [ :e | e isInRBEnvironment: aRBEnvironment ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '999' ],		#self : OmReference [ '1000' ],		#time : DateAndTime [ '2018-01-14T19:02:29.804547-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageCategoryNode,				#isMetaSide : false			},			#name : #isPackageCategoryNode,			#protocol : #testing,			#sourceCode : 'isPackageCategoryNode\r\t^ true',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1000' ],		#self : OmReference [ '1001' ],		#time : DateAndTime [ '2018-01-14T19:02:29.805826-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageCategoryNode,				#isMetaSide : false			},			#name : #'packagesDo:',			#protocol : #querying,			#sourceCode : 'packagesDo: aBlock\r\tself contents do: [ :e | e packagesDo: aBlock ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1001' ],		#self : OmReference [ '1002' ],		#time : DateAndTime [ '2018-01-14T19:02:29.806979-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageCategoryNode,				#isMetaSide : false			},			#name : #rcTreeCommands,			#protocol : #commands,			#sourceCode : 'rcTreeCommands\r\t<treeAreaCommand>\r\t^ #(#AltRemovePackageCategoryCommand #AltCreatePackageCategoryCommand)',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1002' ],		#self : OmReference [ '1003' ],		#time : DateAndTime [ '2018-01-14T19:02:29.807865-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageCategoryNode,				#isMetaSide : false			},			#name : #'removeRPackage:',			#protocol : #accessing,			#sourceCode : 'removeRPackage: aRPackageName\r\t"Remove a RPackage."\r\r\tself item value remove: aRPackageName',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1003' ],		#self : OmReference [ '1004' ],		#time : DateAndTime [ '2018-01-14T19:02:29.808792-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageCategoryNode,				#isMetaSide : false			},			#name : #sourceCode,			#protocol : #querying,			#sourceCode : 'sourceCode\r\t"A description of the group."\r\t\r\t^ \'Package group : \', self categoryName, \'\r\tAll packages classified under the term \', self categoryName',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1004' ],		#self : OmReference [ '1005' ],		#time : DateAndTime [ '2018-01-14T19:02:29.809707-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageCategoryNode,				#isMetaSide : false			},			#name : #title,			#protocol : #accessing,			#sourceCode : 'title\r\t^ self categoryName',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1005' ],		#self : OmReference [ '1006' ],		#time : DateAndTime [ '2018-01-14T19:02:29.810629-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageCategoryNode,				#isMetaSide : false			},			#name : #trimmedCategoryName,			#protocol : #private,			#sourceCode : 'trimmedCategoryName\r\t"Remove version like numbers at the end of the category name for matching purposes."\r\r\t^ self categoryName trimRight: [ :char | #($0 $1 $2 $3 $4 $5 $6 $7 $8 $9 $.) includes: char ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1006' ],		#self : OmReference [ '1007' ],		#time : DateAndTime [ '2018-01-14T19:02:29.811615-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltProjectCategoryNode class',				#isMetaSide : true			},			#name : #'with:',			#protocol : #'instance creation',			#sourceCode : 'with: anObject\r\t^ self new item: anObject',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1007' ],		#self : OmReference [ '1008' ],		#time : DateAndTime [ '2018-01-14T19:02:29.812532-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltProjectCategoryNode class',				#isMetaSide : true			},			#name : #'with:parent:',			#protocol : #'instance creation',			#sourceCode : 'with: anObject parent: aNode\r\t^ self new\r\t\titem: anObject;\r\t\tparent: aNode;\r\t\tyourself',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1008' ],		#self : OmReference [ '1009' ],		#time : DateAndTime [ '2018-01-14T19:02:29.813548-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltProjectCategoryNode,				#isMetaSide : false			},			#name : #'aMCWorkingCopyCreated:',			#protocol : #updating,			#sourceCode : 'aMCWorkingCopyCreated: anEvent\r\t"Either match to itself or pass to its children."\r\r\t(anEvent workingCopy packageName beginsWith: self trimmedCategoryName)\r\t\tifTrue: [ self\r\t\t\t\taddRPackage: anEvent workingCopy packageName asSymbol -> OrderedCollection new.\r\t\t\tAltBrowser aNodeToRebuilt: self.\r\t\t\t^ true ].\r\t^ self contents\r\t\tanySatisfy: [ :each | each aMCWorkingCopyCreated: anEvent ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1009' ],		#self : OmReference [ '1010' ],		#time : DateAndTime [ '2018-01-14T19:02:29.814604-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltProjectCategoryNode,				#isMetaSide : false			},			#name : #'aMCWorkingCopyDeleted:',			#protocol : #updating,			#sourceCode : 'aMCWorkingCopyDeleted: anEvent\r\t"If one of our children say yes, rebuilt ourselves! Property we use here: a MCWorkingCopy is unique in a package category. Remember that."\r\r\t"Note: we will have to remove from this node items only if the MCWorkingCopy was stored at that level. This is checked by the double call to aMCWorkingCopyDeleted: which will only answer true if node is the AltPackageCategoryNode for the MCWorkingCopy."\r\r\t(self contents\r\t\tdetect: [ :each | each aMCWorkingCopyDeleted: anEvent ]\r\t\tifNone: [ nil ])\r\t\tifNotNil: [ :node | \r\t\t\t(node aMCWorkingCopyDeleted: anEvent)\r\t\t\t\tifTrue: [ self removeRPackage: node item.\r\t\t\t\t\tAltBrowser aNodeToRebuilt: self ].\r\t\t\t^ true ].\r\t^ false',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1010' ],		#self : OmReference [ '1011' ],		#time : DateAndTime [ '2018-01-14T19:02:29.816027-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltProjectCategoryNode,				#isMetaSide : false			},			#name : #'acceptDropItem:',			#protocol : #'drag and drop',			#sourceCode : 'acceptDropItem: anItem\r\t"You can\'t drag and drop there."\r\r\t^ false',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1011' ],		#self : OmReference [ '1012' ],		#time : DateAndTime [ '2018-01-14T19:02:29.817003-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltProjectCategoryNode,				#isMetaSide : false			},			#name : #'addRPackage:',			#protocol : #accessing,			#sourceCode : 'addRPackage: aProjectAsItem\r\t"Prerequisite: aProjectAsItem is a key -> value association or something with a similar behavior."\r\r\tself assert: aProjectAsItem class == Association.\r\t^ super addRPackage: aProjectAsItem',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1012' ],		#self : OmReference [ '1013' ],		#time : DateAndTime [ '2018-01-14T19:02:29.817901-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltProjectCategoryNode,				#isMetaSide : false			},			#name : #asCategories,			#protocol : #converting,			#sourceCode : 'asCategories\r\t"Convert this node in a categories setting"\r\r\t^ self categoryName',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1013' ],		#self : OmReference [ '1014' ],		#time : DateAndTime [ '2018-01-14T19:02:29.818814-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltProjectCategoryNode,				#isMetaSide : false			},			#name : #contents,			#protocol : #accessing,			#sourceCode : 'contents\r\tcontents\r\t\tifNil: [ contents := (self item value sorted: [ :a :b | a < b ])\r\t\t\t\tcollect: [ :a | AltProjectNode with: a parent: self ] ].\r\t^ contents',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1014' ],		#self : OmReference [ '1015' ],		#time : DateAndTime [ '2018-01-14T19:02:29.819686-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltProjectCategoryNode,				#isMetaSide : false			},			#name : #icon,			#protocol : #accessing,			#sourceCode : 'icon\r\t^ #groupIcon',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1015' ],		#self : OmReference [ '1016' ],		#time : DateAndTime [ '2018-01-14T19:02:29.820585-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltProjectCategoryNode,				#isMetaSide : false			},			#name : #'removeRPackage:',			#protocol : #accessing,			#sourceCode : 'removeRPackage: aRPackageName\r\tsuper removeRPackage: aRPackageName',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1016' ],		#self : OmReference [ '1017' ],		#time : DateAndTime [ '2018-01-14T19:02:29.821601-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltProjectNode class',				#isMetaSide : true			},			#name : #'with:',			#protocol : #'instance creation',			#sourceCode : 'with: anObject\r\t^ self new item: anObject',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1017' ],		#self : OmReference [ '1018' ],		#time : DateAndTime [ '2018-01-14T19:02:29.822614-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltProjectNode class',				#isMetaSide : true			},			#name : #'with:parent:',			#protocol : #'instance creation',			#sourceCode : 'with: anObject parent: aNode\r\t^ self new\r\t\titem: anObject;\r\t\tparent: aNode;\r\t\tyourself',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1018' ],		#self : OmReference [ '1019' ],		#time : DateAndTime [ '2018-01-14T19:02:29.823578-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltProjectNode,				#isMetaSide : false			},			#name : #'aMCWorkingCopyCreated:',			#protocol : #updating,			#sourceCode : 'aMCWorkingCopyCreated: anEvent\r\t"Ok, if we reach there then this means it is a new package we don\'t know about yet. If we include it, then add it."\r\r\t(anEvent workingCopy packageName beginsWith: \'BaselineOf\')\r\t\tifTrue: [ ^ false ].\r\t(anEvent workingCopy packageName beginsWith: \'ConfigurationOf\')\r\t\tifTrue: [ ^ false ].\r\t(self projectPackagesIncludes: anEvent workingCopy packageName)\r\t\tifTrue: [ self addRPackage: anEvent workingCopy packageName asSymbol.\r\t\t\tAltBrowser aNodeToRebuilt: self.\r\t\t\t^ true ].\r\t^ false',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1019' ],		#self : OmReference [ '1020' ],		#time : DateAndTime [ '2018-01-14T19:02:29.825036-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltProjectNode,				#isMetaSide : false			},			#name : #'aMCWorkingCopyDeleted:',			#protocol : #updating,			#sourceCode : 'aMCWorkingCopyDeleted: anEvent\r\t"If one of our children say yes, rebuilt ourselves! Property we use here: a MCWorkingCopy is unique in a package category. Remember that."\r\r\t"Note: we may answer true in two cases: one of our packages has been removed, and if we are to be removed."\r\r\t(self contents\r\t\tdetect: [ :each | each aMCWorkingCopyDeleted: anEvent ]\r\t\tifNone: [ nil ])\r\t\tifNotNil: [ :node | \r\t\t\t(node aMCWorkingCopyDeleted: anEvent)\r\t\t\t\tifTrue: [ self removeRPackage: node packageName.\r\t\t\t\t\tAltBrowser aNodeToRebuilt: self ].\r\t\t\t^ true ].\r\t^ item value isEmpty\r\t\tand: [ (Smalltalk at: item key ifAbsent: [  ]) isNil ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1020' ],		#self : OmReference [ '1021' ],		#time : DateAndTime [ '2018-01-14T19:02:29.826004-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltProjectNode,				#isMetaSide : false			},			#name : #asCategories,			#protocol : #converting,			#sourceCode : 'asCategories\r\t^ item key',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1021' ],		#self : OmReference [ '1022' ],		#time : DateAndTime [ '2018-01-14T19:02:29.827022-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltProjectNode,				#isMetaSide : false			},			#name : #asString,			#protocol : #printing,			#sourceCode : 'asString\r\t^ item key',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1022' ],		#self : OmReference [ '1023' ],		#time : DateAndTime [ '2018-01-14T19:02:29.828013-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltProjectNode,				#isMetaSide : false			},			#name : #'asStringIn:',			#protocol : #printing,			#sourceCode : 'asStringIn: anAltTreeNodeModel\r\t"Reduce based on the parent name. The parameter shows the \'visible\' hierarchy, use that to reduce the name, but check first that we are not a root node."\r\r\t| string parentString |\r\tstring := self asString.\r\t(parent isNil or: [ anAltTreeNodeModel parentNode isNil ])\r\t\tifTrue: [ ^ string ].\r\tparentString := anAltTreeNodeModel parentNode item asString.\r\t((string beginsWith: parentString) and: [ string ~= parentString ])\r\t\tifTrue: [ string := string allButFirst: parentString size ].\r\tstring first = $-\r\t\tifTrue: [ ^ string allButFirst ].\r\t^ string',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1023' ],		#self : OmReference [ '1024' ],		#time : DateAndTime [ '2018-01-14T19:02:29.829113-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltProjectNode,				#isMetaSide : false			},			#name : #buildValues,			#protocol : #private,			#sourceCode : 'buildValues\r\t| values projectPackages |\r\tprojectPackages := IdentitySet new.\r\tself projectVersionSpec\r\t\tdo: [ :aSpec | \r\t\t\tprojectPackages\r\t\t\t\taddAll:\r\t\t\t\t\t((aSpec packages select: [ :e | e isKindOf: MetacelloPackageSpec ])\r\t\t\t\t\t\tcollect: [ :p | p name asSymbol ]) ].\r\t^ values := {item key}\r\t\t,\r\t\t\t(projectPackages asSortedCollection\r\t\t\t\tselect: [ :p | \r\t\t\t\t\t(p beginsWith: \'BaselineOf\') not\r\t\t\t\t\t\tand: [ (p beginsWith: \'ConfigurationOf\') not\r\t\t\t\t\t\t\t\tand: [ (MCWorkingCopy hasPackageNamed: p) ~~ false ] ] ])',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1024' ],		#self : OmReference [ '1025' ],		#time : DateAndTime [ '2018-01-14T19:02:29.830079-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltProjectNode,				#isMetaSide : false			},			#name : #categoryName,			#protocol : #accessing,			#sourceCode : 'categoryName\r\t^ self item key asString',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1025' ],		#self : OmReference [ '1026' ],		#time : DateAndTime [ '2018-01-14T19:02:29.831055-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltProjectNode,				#isMetaSide : false			},			#name : #contents,			#protocol : #accessing,			#sourceCode : 'contents\r\t(item value isEmpty\r\t\tand: [ (Smalltalk at: item key ifAbsent: [  ]) notNil ])\r\t\tifTrue: [ item value addAll: self buildValues ].\r\tcontents\r\t\tifNil: [ contents := self item value\r\t\t\t\tcollect: [ :a | AltPackageNode with: a parent: self ] ].\r\t^ contents',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1026' ],		#self : OmReference [ '1027' ],		#time : DateAndTime [ '2018-01-14T19:02:29.831956-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltProjectNode,				#isMetaSide : false			},			#name : #icon,			#protocol : #accessing,			#sourceCode : 'icon\r\t^ self isModified\r\t\tifTrue: [ #dirtyPackageIcon ]\r\t\tifFalse: [ #packageIcon ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1027' ],		#self : OmReference [ '1028' ],		#time : DateAndTime [ '2018-01-14T19:02:29.832841-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltProjectNode,				#isMetaSide : false			},			#name : #isBaseline,			#protocol : #testing,			#sourceCode : 'isBaseline\r\t^ self categoryName beginsWith: \'BaselineOf\'',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1028' ],		#self : OmReference [ '1029' ],		#time : DateAndTime [ '2018-01-14T19:02:29.833767-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltProjectNode,				#isMetaSide : false			},			#name : #isConfiguration,			#protocol : #testing,			#sourceCode : 'isConfiguration\r\t^ self categoryName beginsWith: \'ConfigurationOf\'',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1029' ],		#self : OmReference [ '1030' ],		#time : DateAndTime [ '2018-01-14T19:02:29.835138-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltProjectNode,				#isMetaSide : false			},			#name : #isModified,			#protocol : #testing,			#sourceCode : 'isModified\r\t^ self contents anySatisfy: [ :e | e isModified ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1030' ],		#self : OmReference [ '1031' ],		#time : DateAndTime [ '2018-01-14T19:02:29.83614-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltProjectNode,				#isMetaSide : false			},			#name : #itemClass,			#protocol : #accessing,			#sourceCode : 'itemClass\r\t^ Smalltalk at: self item key ifAbsent: [ ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1031' ],		#self : OmReference [ '1032' ],		#time : DateAndTime [ '2018-01-14T19:02:29.837247-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltProjectNode,				#isMetaSide : false			},			#name : #projectName,			#protocol : #accessing,			#sourceCode : 'projectName\r\t(self categoryName beginsWith: \'ConfigurationOf\')\r\t\tifTrue: [ ^ self categoryName allButFirst: \'ConfigurationOf\' size ].\r\t(self categoryName beginsWith: \'BaselineOf\')\r\t\tifTrue: [ ^ self categoryName allButFirst: \'BaselineOf\' size ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1032' ],		#self : OmReference [ '1033' ],		#time : DateAndTime [ '2018-01-14T19:02:29.838408-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltProjectNode,				#isMetaSide : false			},			#name : #projectPackages,			#protocol : #private,			#sourceCode : 'projectPackages\r\t| values projectPackages |\r\tprojectPackages := IdentitySet new.\r\tself projectVersionSpec\r\t\tdo: [ :aSpec | \r\t\t\tprojectPackages\r\t\t\t\taddAll:\r\t\t\t\t\t((aSpec packages select: [ :e | e isKindOf: MetacelloPackageSpec ])\r\t\t\t\t\t\tcollect: [ :p | p name asSymbol ]) ].\r\t^ projectPackages asSortedCollection\r\t\tselect: [ :p | (MCWorkingCopy hasPackageNamed: p) ~~ false ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1033' ],		#self : OmReference [ '1034' ],		#time : DateAndTime [ '2018-01-14T19:02:29.839408-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltProjectNode,				#isMetaSide : false			},			#name : #'projectPackagesIncludes:',			#protocol : #private,			#sourceCode : 'projectPackagesIncludes: aPackageName\r\t(Smalltalk at: item key ifAbsent: [  ]) isNil\r\t\tifTrue: [ ^ false ].\r\tself projectVersionSpec\r\t\tdo: [ :aSpec | \r\t\t\taSpec packages\r\t\t\t\tdo: [ :p | \r\t\t\t\t\t((p isKindOf: MetacelloPackageSpec) and: [ p name = aPackageName ])\r\t\t\t\t\t\tifTrue: [ ^ true ] ] ].\r\t^ false',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1034' ],		#self : OmReference [ '1035' ],		#time : DateAndTime [ '2018-01-14T19:02:29.84033-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltProjectNode,				#isMetaSide : false			},			#name : #projectRegistration,			#protocol : #private,			#sourceCode : 'projectRegistration\r\t^ MetacelloProjectRegistration registry\r\t\tregistrationForExactClassNamed: item key\r\t\tifAbsent: [  ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1035' ],		#self : OmReference [ '1036' ],		#time : DateAndTime [ '2018-01-14T19:02:29.841296-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltProjectNode,				#isMetaSide : false			},			#name : #projectVersionSpec,			#protocol : #private,			#sourceCode : 'projectVersionSpec\r\t"We need to be protected from potentially incomplete project metadata."\r\r\t^ [ (self itemClass\r\t\tifNil: [ #() ]\r\t\tifNotNil: [ :c | c project versions ]) collect: [ :e | e spec ] ]\r\t\ton: Error\r\t\tdo: [:e | #() ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1036' ],		#self : OmReference [ '1037' ],		#time : DateAndTime [ '2018-01-14T19:02:29.84222-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltProjectNode,				#isMetaSide : false			},			#name : #rcTreeCommands,			#protocol : #commands,			#sourceCode : 'rcTreeCommands\r\t"Add better suited commands: unload project, for example."\r\r\t<treeAreaCommand>\r\t^ #(#AltMetacelloGetProject #AltMetacelloFetchProject #AltMetacelloLockProject #AltMetacelloSaveProject #AltMetacelloUnloadProject)',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1037' ],		#self : OmReference [ '1038' ],		#time : DateAndTime [ '2018-01-14T19:02:29.843154-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltProjectNode,				#isMetaSide : false			},			#name : #repositories,			#protocol : #accessing,			#sourceCode : 'repositories\r\t"Retrieve all repositories from all packages."\r\r\t| repositories |\r\trepositories := Set new.\r\tself contents\r\t\tdo: [ :e | \r\t\t\trepositories\r\t\t\t\taddAll:\r\t\t\t\t\t(e mcWorkingCopy repositoryGroup repositories\r\t\t\t\t\t\treject: [ :r | r isCache ]) ].\r\t^ repositories asArray',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1038' ],		#self : OmReference [ '1039' ],		#time : DateAndTime [ '2018-01-14T19:02:29.844553-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltProjectNode,				#isMetaSide : false			},			#name : #sourceCode,			#protocol : #querying,			#sourceCode : 'sourceCode\r\t"A description of the group."\r\r\t^ self projectRegistration\r\t\tifNotNil: [ :pr | pr printString ]\r\t\tifNil: [ \'Project : \' , self categoryName ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1039' ],		#self : OmReference [ '1040' ],		#time : DateAndTime [ '2018-01-14T19:02:29.84558-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltProjectNode,				#isMetaSide : false			},			#name : #title,			#protocol : #accessing,			#sourceCode : 'title\r\t^ self item key',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1040' ],		#self : OmReference [ '1041' ],		#time : DateAndTime [ '2018-01-14T19:02:29.846532-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltRootNode,				#isMetaSide : false			},			#name : #'aWatchpointInstalled:',			#protocol : #updating,			#sourceCode : 'aWatchpointInstalled: anEvent\r\tself contents do: [ :e | e aWatchPointInstalled: anEvent ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1041' ],		#self : OmReference [ '1042' ],		#time : DateAndTime [ '2018-01-14T19:02:29.847495-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltRootNode,				#isMetaSide : false			},			#name : #'aWatchpointUninstalled:',			#protocol : #updating,			#sourceCode : 'aWatchpointUninstalled: anEvent\r\t^ \tself contents do: [ :e | e aWatchPointUninstalled: anEvent ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1042' ],		#self : OmReference [ '1043' ],		#time : DateAndTime [ '2018-01-14T19:02:29.848427-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltRootNode,				#isMetaSide : false			},			#name : #contents,			#protocol : #accessing,			#sourceCode : 'contents\r\t^ contents\r\t\tifNil: [ contents := (Array\r\t\t\t\twith: (AltRecentPackagesNode with: nil parent: self)\r\t\t\t\twith: (AltWatchpointsNode with: nil parent: self))\r\t\t\t\t, super contents ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1043' ],		#self : OmReference [ '1044' ],		#time : DateAndTime [ '2018-01-14T19:02:29.849813-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltRootNode,				#isMetaSide : false			},			#name : #'findKeywordsCategory:',			#protocol : #querying,			#sourceCode : 'findKeywordsCategory: keywords\r\t"Return the node if the item matches."\r\r\t^ nil',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1044' ],		#self : OmReference [ '1045' ],		#time : DateAndTime [ '2018-01-14T19:02:29.850813-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageExtensionNode,				#isMetaSide : false			},			#name : #'aClassAdded:',			#protocol : #updating,			#sourceCode : 'aClassAdded: anEvent\r\t"Check if the class is an extension class. Is it possible when adding a class?"\r\r\t(self rpackage extendsClass: anEvent classAdded)\r\t\tifTrue: [ AltBrowser aNodeToRebuilt: self.\r\t\t\t^ true ]\r\t\tifFalse: [ ^ false ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1045' ],		#self : OmReference [ '1046' ],		#time : DateAndTime [ '2018-01-14T19:02:29.851768-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageExtensionNode,				#isMetaSide : false			},			#name : #'aClassCommented:',			#protocol : #updating,			#sourceCode : 'aClassCommented: anEvent\r\t"Pass through that event."\r\r\t^ false',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1046' ],		#self : OmReference [ '1047' ],		#time : DateAndTime [ '2018-01-14T19:02:29.852643-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageExtensionNode,				#isMetaSide : false			},			#name : #'aClassModifiedClassDefinition:',			#protocol : #updating,			#sourceCode : 'aClassModifiedClassDefinition: anEvent\r\t"Pass through that event."\r\r\t^ false',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1047' ],		#self : OmReference [ '1048' ],		#time : DateAndTime [ '2018-01-14T19:02:29.853666-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageExtensionNode,				#isMetaSide : false			},			#name : #'aClassRecategorized:',			#protocol : #updating,			#sourceCode : 'aClassRecategorized: anEvent\r\t"In an extension, this doesn\'t matter, we don\'t have directly classes inside."\r\r\t^ false',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1048' ],		#self : OmReference [ '1049' ],		#time : DateAndTime [ '2018-01-14T19:02:29.855231-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageExtensionNode,				#isMetaSide : false			},			#name : #'aClassRemoved:',			#protocol : #updating,			#sourceCode : 'aClassRemoved: anEvent\r\t"If below it\'s true, rebuilt itself. Return false in any case to stop the update propagation above."\r\r\t(self contents\r\t\tinject: false\r\t\tinto: [ :bool :each | (each aClassRemoved: anEvent) or: [ bool ] ])\r\t\tifTrue: [ AltBrowser aNodeToRebuilt: self ].\r\t^ false',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1049' ],		#self : OmReference [ '1050' ],		#time : DateAndTime [ '2018-01-14T19:02:29.856254-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageExtensionNode,				#isMetaSide : false			},			#name : #'aClassRenamed:',			#protocol : #updating,			#sourceCode : 'aClassRenamed: anEvent\r\t"If below it\'s true, rebuilt itself. Return false in any case to stop the update propagation above."\r\r\t^ self contents inject: false into: [ :bool :each | (each aClassRenamed: anEvent) or: [ bool ] ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1050' ],		#self : OmReference [ '1051' ],		#time : DateAndTime [ '2018-01-14T19:02:29.857184-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageExtensionNode,				#isMetaSide : false			},			#name : #'aClassReorganized:',			#protocol : #updating,			#sourceCode : 'aClassReorganized: anEvent\r\t"Note if the reorganized class belong to us. If this is true, update ourselves."\r\r\t(self contents\r\t\tinject: false\r\t\tinto: [ :bool :each | (each aClassReorganized: anEvent) or: [ bool ] ])\r\t\tifTrue: [ AltBrowser aNodeToRebuilt: self.\r\t\t\t^ true ].\r\t^ false',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1051' ],		#self : OmReference [ '1052' ],		#time : DateAndTime [ '2018-01-14T19:02:29.858074-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageExtensionNode,				#isMetaSide : false			},			#name : #'aClassRepackaged:',			#protocol : #updating,			#sourceCode : 'aClassRepackaged: anEvent\r\t"In an extension, this doesn\'t matter, we don\'t have directly classes inside."\r\r\t^ false',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1052' ],		#self : OmReference [ '1053' ],		#time : DateAndTime [ '2018-01-14T19:02:29.859027-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageExtensionNode,				#isMetaSide : false			},			#name : #'aMethodAdded:',			#protocol : #updating,			#sourceCode : 'aMethodAdded: anEvent\r\t"Check that we are the right protocol. Don\'t forget that the underlying class extension could need a rebuilt as well."\r\r\tanEvent protocol isNil\r\t\tifTrue: [ ^ false ].\r\t(anEvent protocol asLowercase beginsWith: self methodCategory)\r\t\tifTrue:\r\t\t\t[ (self contents\r\t\t\t\tinject: false\r\t\t\t\tinto: [ :bool :each | (each aMethodAdded: anEvent) or: [ bool ] ])\r\t\t\t\tifFalse: [ AltBrowser aNodeToRebuilt: self ].\r\t\t\t^ true ].\r\t^ false',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1053' ],		#self : OmReference [ '1054' ],		#time : DateAndTime [ '2018-01-14T19:02:29.860207-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageExtensionNode,				#isMetaSide : false			},			#name : #'aMethodRecategorized:',			#protocol : #updating,			#sourceCode : 'aMethodRecategorized: anEvent\r\t"Check that we are the right protocol. Don\'t forget that the underlying class extension could need a rebuilt as well."\r\r\t((anEvent newProtocol asLowercase beginsWith: self methodCategory)\r\t\tor: [ anEvent oldProtocol asLowercase beginsWith: self methodCategory ])\r\t\tifTrue:\r\t\t\t[ (self contents\r\t\t\t\tinject: false\r\t\t\t\tinto: [ :bool :each | (each aMethodRecategorized: anEvent) or: [ bool ] ])\r\t\t\t\tifFalse: [ AltBrowser aNodeToRebuilt: self ].\r\t\t\t^ true ].\r\t^ false',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1054' ],		#self : OmReference [ '1055' ],		#time : DateAndTime [ '2018-01-14T19:02:29.86135-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageExtensionNode,				#isMetaSide : false			},			#name : #'aMethodRemoved:',			#protocol : #updating,			#sourceCode : 'aMethodRemoved: anEvent\r\t"Check that we are the right protocol. Don\'t forget that the underlying class extension could need a rebuilt as well. There is an issue when the underlying class loses all its extensions but still stay in the extension listing."\r\r\t(anEvent protocol asLowercase beginsWith: self methodCategory)\r\t\tifTrue:\r\t\t\t[ (self contents\r\t\t\t\tinject: false\r\t\t\t\tinto: [ :bool :each | (each aMethodRemoved: anEvent) or: [ bool ] ])\r\t\t\t\tifTrue: [ AltBrowser aNodeToRebuilt: self ].\r\t\t\t^ true ].\r\t^ false',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1055' ],		#self : OmReference [ '1056' ],		#time : DateAndTime [ '2018-01-14T19:02:29.862515-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageExtensionNode,				#isMetaSide : false			},			#name : #'accept:notifying:',			#protocol : #actions,			#sourceCode : 'accept: aText notifying: aController\r\t| res |\r\tres := [ UndefinedObject compilerClass new\r\t\tevaluate: (ReadStream on: aText)\r\t\tin: nil\r\t\tto: nil\r\t\tnotifying: aController\r\t\tifFail: [ ^ nil ]\r\t\tlogged: true ]\r\t\ton: SyntaxErrorNotification\r\t\tdo: [ :ex | ex resume: true ].\r\tres notNil\r\t\tifTrue:\r\t\t\t[ | r |\r\t\t\tAltBrowser rootItems\r\t\t\t\tdetect: [ :aRoot | (r := aRoot findClass: res) notNil ].\r\t\t\t^ r ].\r\t^ nil',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1056' ],		#self : OmReference [ '1057' ],		#time : DateAndTime [ '2018-01-14T19:02:29.863438-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageExtensionNode,				#isMetaSide : false			},			#name : #'acceptDropItem:',			#protocol : #'drag and drop',			#sourceCode : 'acceptDropItem: anItem\r\t"Used to move methods from a package to another, or from a normal category to an extension-labeled one."\r\r\t^ anItem isKindOf: AltMethodNode',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1057' ],		#self : OmReference [ '1058' ],		#time : DateAndTime [ '2018-01-14T19:02:29.864822-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageExtensionNode,				#isMetaSide : false			},			#name : #asString,			#protocol : #printing,			#sourceCode : 'asString\r\t^ \'*extensions*\'',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1058' ],		#self : OmReference [ '1059' ],		#time : DateAndTime [ '2018-01-14T19:02:29.865787-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageExtensionNode,				#isMetaSide : false			},			#name : #categoryCommands,			#protocol : #commands,			#sourceCode : 'categoryCommands\r\t<treeAreaCommand>\r\t^ #(#AltRenameCategoryCommand #AltAddSystemCategoryCommand #AltRemoveCategoryCommand)',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1059' ],		#self : OmReference [ '1060' ],		#time : DateAndTime [ '2018-01-14T19:02:29.866738-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageExtensionNode,				#isMetaSide : false			},			#name : #contents,			#protocol : #accessing,			#sourceCode : 'contents\r\tcontents\r\t\tifNil: [ \r\t\t\tcontents := (self class sortClasses: (self rpackage extendedClasses asSet collect: [ :each | each theNonMetaClass ]))\r\t\t\t\tcollect: [ :each | AltClassExtensionNode with: each name parent: self ] ].\r\t^ contents',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1060' ],		#self : OmReference [ '1061' ],		#time : DateAndTime [ '2018-01-14T19:02:29.867689-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageExtensionNode,				#isMetaSide : false			},			#name : #'doubleClickIn:',			#protocol : #actions,			#sourceCode : 'doubleClickIn: anAltTreeItemModel\r\t"Action!"\r\r\tAltBrowser\r\t\tfullOnPackage: self rpackage\r\t\tin: anAltTreeItemModel model rbEnvironment',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1061' ],		#self : OmReference [ '1062' ],		#time : DateAndTime [ '2018-01-14T19:02:29.868647-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageExtensionNode,				#isMetaSide : false			},			#name : #'dropItem:',			#protocol : #'drag and drop',			#sourceCode : 'dropItem: anItem\r\t"Used to move methods from a package to another, or from a normal category to an extension-labeled one."\r\r\t| cm |\r\tcm := anItem compiledMethod.\r\tcm methodClass organization classify: anItem selector under: self methodCategory suppressIfDefault: false',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1062' ],		#self : OmReference [ '1063' ],		#time : DateAndTime [ '2018-01-14T19:02:29.870138-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageExtensionNode,				#isMetaSide : false			},			#name : #'findClass:',			#protocol : #querying,			#sourceCode : 'findClass: aClass\r\t"Filter out: force contents building if the class belongs to this package."\r\r\t| res |\r\t(self rpackage includesClass: aClass)\r\t\tifTrue: [ \r\t\t\tself contents\r\t\t\t\tdo: [ :each | \r\t\t\t\t\t(res := each findClass: aClass) notNil\r\t\t\t\t\t\tifTrue: [ ^ res ] ] ].\r\t^ nil',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1063' ],		#self : OmReference [ '1064' ],		#time : DateAndTime [ '2018-01-14T19:02:29.871102-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageExtensionNode,				#isMetaSide : false			},			#name : #'findClassCategory:',			#protocol : #querying,			#sourceCode : 'findClassCategory: aCategory\r\t"Force a detection here for class category / RPackage similarity."\r\r\tself packageName = aCategory\r\t\tifTrue: [ ^ self ].\r\t^ nil',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1064' ],		#self : OmReference [ '1065' ],		#time : DateAndTime [ '2018-01-14T19:02:29.872237-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageExtensionNode,				#isMetaSide : false			},			#name : #'findMethod:in:',			#protocol : #querying,			#sourceCode : 'findMethod: aSelector in: aClass\r\t"Filter out: force contents building if the class belongs to this package."\r\r\t| res |\r\t(self rpackage includesClass: aClass)\r\t\tifTrue: [ \r\t\t\tself contents\r\t\t\t\tdo: [ :each | \r\t\t\t\t\t(res := each findMethod: aSelector in: aClass) notNil\r\t\t\t\t\t\tifTrue: [ ^ res ] ] ].\r\t^ nil',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1065' ],		#self : OmReference [ '1066' ],		#time : DateAndTime [ '2018-01-14T19:02:29.873156-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageExtensionNode,				#isMetaSide : false			},			#name : #icon,			#protocol : #accessing,			#sourceCode : 'icon\r\t^ #smallOpenIcon',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1066' ],		#self : OmReference [ '1067' ],		#time : DateAndTime [ '2018-01-14T19:02:29.874179-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageExtensionNode,				#isMetaSide : false			},			#name : #'isInRBEnvironment:',			#protocol : #querying,			#sourceCode : 'isInRBEnvironment: aRBEnvironment\r\t"Hide the extensions when we are just looking at a class."\r\r\t^ (self contents select: [ :e | e isInRBEnvironment: aRBEnvironment ]) notEmpty\r\t\tand: [ aRBEnvironment isClassEnvironment not ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1067' ],		#self : OmReference [ '1068' ],		#time : DateAndTime [ '2018-01-14T19:02:29.875623-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageExtensionNode,				#isMetaSide : false			},			#name : #isStyled,			#protocol : #testing,			#sourceCode : 'isStyled\r\t^ true',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1068' ],		#self : OmReference [ '1069' ],		#time : DateAndTime [ '2018-01-14T19:02:29.876562-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageExtensionNode,				#isMetaSide : false			},			#name : #methodCategory,			#protocol : #accessing,			#sourceCode : 'methodCategory\r\t^ self rpackage methodCategoryPrefix',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1069' ],		#self : OmReference [ '1070' ],		#time : DateAndTime [ '2018-01-14T19:02:29.877606-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageExtensionNode,				#isMetaSide : false			},			#name : #packageName,			#protocol : #accessing,			#sourceCode : 'packageName\r\t^ parent packageName',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1070' ],		#self : OmReference [ '1071' ],		#time : DateAndTime [ '2018-01-14T19:02:29.878583-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageExtensionNode,				#isMetaSide : false			},			#name : #rpackage,			#protocol : #accessing,			#sourceCode : 'rpackage\r\t"Possible contextualisation here? I know sub RPackageOrganizers are possible, but I don\'t see the use of it."\r\r\t^ RPackageOrganizer default packageNamed: self packageName',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1071' ],		#self : OmReference [ '1072' ],		#time : DateAndTime [ '2018-01-14T19:02:29.879486-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageExtensionNode,				#isMetaSide : false			},			#name : #sourceCode,			#protocol : #querying,			#sourceCode : 'sourceCode\r\t"The default class scheme for a package."\r\r\t^ \'Object subclass: #NameOfSubclass\r\tinstanceVariableNames: \'\'\'\'\r\tclassVariableNames: \'\'\'\'\r\tpoolDictionaries: \'\'\'\'\r\tcategory: \'\'\' , self packageName, \'\'\'\'',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1072' ],		#self : OmReference [ '1073' ],		#time : DateAndTime [ '2018-01-14T19:02:29.880381-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageExtensionNode,				#isMetaSide : false			},			#name : #title,			#protocol : #accessing,			#sourceCode : 'title\r\t^ self packageName',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1073' ],		#self : OmReference [ '1074' ],		#time : DateAndTime [ '2018-01-14T19:02:29.881375-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltPackageNode class',				#isMetaSide : true			},			#name : #'with:parent:',			#protocol : #'instance creation',			#sourceCode : 'with: aPackageName parent: aNode\r\t"Check that we don\'t need to return the unpackaged node."\r\r\taPackageName = RPackage defaultPackageName\r\t\tifTrue: [ ^ AltUnpackagedNode with: aPackageName parent: aNode ].\r\t^ super with: aPackageName parent: aNode',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1074' ],		#self : OmReference [ '1075' ],		#time : DateAndTime [ '2018-01-14T19:02:29.882389-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageNode,				#isMetaSide : false			},			#name : #'aCategoryAdded:',			#protocol : #updating,			#sourceCode : 'aCategoryAdded: anEvent\r\t"Rebuilt itself if the event refer to a package belonging to us (with the approximation RPackage = category-name."\r\r\t^ (RPackageOrganizer default\r\t\tcategory: anEvent categoryName\r\t\tmatches: self packageName)\r\t\tifTrue: [ AltBrowser aNodeToRebuilt: self.\r\t\t\ttrue ]\r\t\tifFalse: [ false ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1075' ],		#self : OmReference [ '1076' ],		#time : DateAndTime [ '2018-01-14T19:02:29.88333-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageNode,				#isMetaSide : false			},			#name : #'aCategoryRemoved:',			#protocol : #updating,			#sourceCode : 'aCategoryRemoved: anEvent\r\t"Rebuilt itself if the event refer to a package belonging to us (with the approximation RPackage = category-name."\r\r\t^ (RPackageOrganizer default\r\t\tcategory: anEvent categoryName\r\t\tmatches: self packageName)\r\t\tifTrue: [ AltBrowser aNodeToRebuilt: self.\r\t\t\ttrue ]\r\t\tifFalse: [ false ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1076' ],		#self : OmReference [ '1077' ],		#time : DateAndTime [ '2018-01-14T19:02:29.884763-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageNode,				#isMetaSide : false			},			#name : #'aCategoryRenamed:',			#protocol : #updating,			#sourceCode : 'aCategoryRenamed: anEvent\r\t"Rebuilt itself if the event refer to a package belonging to us (with the approximation RPackage = category-name."\r\r\t^ (RPackageOrganizer default\r\t\tcategory: anEvent newCategoryName\r\t\tmatches: self packageName)\r\t\tifTrue: [ AltBrowser aNodeToRebuilt: self.\r\t\t\ttrue ]\r\t\tifFalse: [ false ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1077' ],		#self : OmReference [ '1078' ],		#time : DateAndTime [ '2018-01-14T19:02:29.885871-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageNode,				#isMetaSide : false			},			#name : #'aClassAdded:',			#protocol : #updating,			#sourceCode : 'aClassAdded: anEvent\r\t"Propagate the event. Note if this belong to our package."\r\r\t| result |\r\t(RPackageOrganizer default\r\t\tcategory: anEvent classCategory\r\t\tmatches: self packageName)\r\t\tifTrue: [ result := self contents\r\t\t\t\tinject: false\r\t\t\t\tinto: [ :bool :each | (each aClassAdded: anEvent) or: [ bool ] ].\r\t\t\tresult\r\t\t\t\tifFalse: [ AltBrowser aNodeToRebuilt: self ].\r\t\t\t^ true ].\r\t^ false',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1078' ],		#self : OmReference [ '1079' ],		#time : DateAndTime [ '2018-01-14T19:02:29.886783-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageNode,				#isMetaSide : false			},			#name : #'aClassCommented:',			#protocol : #updating,			#sourceCode : 'aClassCommented: anEvent\r\t"Pass through that event."\r\r\t^ self contents inject: false into: [ :bool :each | (each aClassCommented: anEvent) or: [ bool ] ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1079' ],		#self : OmReference [ '1080' ],		#time : DateAndTime [ '2018-01-14T19:02:29.887704-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageNode,				#isMetaSide : false			},			#name : #'aClassModifiedClassDefinition:',			#protocol : #updating,			#sourceCode : 'aClassModifiedClassDefinition: anEvent\r\t"Pass through that event."\r\r\t(self contents\r\t\tanySatisfy: [ :each | each aClassModifiedClassDefinition: anEvent ])\r\t\tifFalse: [ ^ false ].\r\tAltBrowser aNodeToRebuilt: self.\r\t^ true',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1080' ],		#self : OmReference [ '1081' ],		#time : DateAndTime [ '2018-01-14T19:02:29.888621-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageNode,				#isMetaSide : false			},			#name : #'aClassRecategorized:',			#protocol : #updating,			#sourceCode : 'aClassRecategorized: anEvent\r\t"Propagate the event. Note if this belong to our package."\r\r\t| result |\r\tresult := self contents\r\t\tinject: false\r\t\tinto: [ :bool :each | (each aClassRecategorized: anEvent) or: [ bool ] ].\r\t(anEvent oldCategory = self packageName\r\t\tor: [ anEvent newCategory = self packageName ])\r\t\tifTrue: [ AltBrowser aNodeToRebuilt: self.\r\t\t\t^ true ].\r\t^ result',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1081' ],		#self : OmReference [ '1082' ],		#time : DateAndTime [ '2018-01-14T19:02:29.890135-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageNode,				#isMetaSide : false			},			#name : #'aClassRemoved:',			#protocol : #updating,			#sourceCode : 'aClassRemoved: anEvent\r\t"Pass through that event."\r\r\t(self contents\r\t\tinject: false\r\t\tinto: [ :bool :each | (each aClassRemoved: anEvent) or: [ bool ] ])\r\t\tifTrue: [ AltBrowser aNodeToRebuilt: self ].\r\t^ false',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1082' ],		#self : OmReference [ '1083' ],		#time : DateAndTime [ '2018-01-14T19:02:29.891084-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageNode,				#isMetaSide : false			},			#name : #'aClassRenamed:',			#protocol : #updating,			#sourceCode : 'aClassRenamed: anEvent\r\t"Pass through that event."\r\r\t(self contents anySatisfy: [ :each | each aClassRenamed: anEvent ])\r\t\tifFalse: [ ^ false ].\r\tAltBrowser aNodeToRebuilt: self.\r\t^ true',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1083' ],		#self : OmReference [ '1084' ],		#time : DateAndTime [ '2018-01-14T19:02:29.892028-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageNode,				#isMetaSide : false			},			#name : #'aClassReorganized:',			#protocol : #updating,			#sourceCode : 'aClassReorganized: anEvent\r\t"Pass through that event."\r\r\t^ self contents inject: false into: [ :bool :each | (each aClassReorganized: anEvent) or: [ bool ] ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1084' ],		#self : OmReference [ '1085' ],		#time : DateAndTime [ '2018-01-14T19:02:29.893058-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageNode,				#isMetaSide : false			},			#name : #'aClassRepackaged:',			#protocol : #updating,			#sourceCode : 'aClassRepackaged: anEvent\r\t"Propagate the event. Note if this belong to our package."\r\r\t| result |\r\tresult := self contents\r\t\tinject: false\r\t\tinto: [ :bool :each | (each aClassRepackaged: anEvent) or: [ bool ] ].\r\t(anEvent oldPackage name = self packageName\r\t\tor: [ anEvent newPackage name = self packageName ])\r\t\tifTrue: [ AltBrowser aNodeToRebuilt: self.\r\t\t\t^ true ].\r\t^ result',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1085' ],		#self : OmReference [ '1086' ],		#time : DateAndTime [ '2018-01-14T19:02:29.894018-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageNode,				#isMetaSide : false			},			#name : #'aMCWorkingCopyCreated:',			#protocol : #updating,			#sourceCode : 'aMCWorkingCopyCreated: anEvent\r\t"stop the visit here."\r\t\r\t^ false',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1086' ],		#self : OmReference [ '1087' ],		#time : DateAndTime [ '2018-01-14T19:02:29.895479-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageNode,				#isMetaSide : false			},			#name : #'aMCWorkingCopyDeleted:',			#protocol : #updating,			#sourceCode : 'aMCWorkingCopyDeleted: anEvent\r\t"Just return true if this is us."\r\t\r\t"Note. this will be called twice on the node if the answer is true. Don\'t forget that if some resource release is done here."\r\r\t\t^ anEvent workingCopy packageName = self packageName',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1087' ],		#self : OmReference [ '1088' ],		#time : DateAndTime [ '2018-01-14T19:02:29.89645-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageNode,				#isMetaSide : false			},			#name : #'aMCWorkingCopyModified:',			#protocol : #updating,			#sourceCode : 'aMCWorkingCopyModified: anEvent\r\t"Just return true if this is us."\r\r\t"Note. this will be called twice on the node if the answer is true. Don\'t forget that if some resource release is done here."\r\r\tanEvent package name = self packageName\r\t\tifTrue: [ AltBrowser aNodeToUpdate: self.\r\t\t\t^ true ].\r\t^ false',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1088' ],		#self : OmReference [ '1089' ],		#time : DateAndTime [ '2018-01-14T19:02:29.897377-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageNode,				#isMetaSide : false			},			#name : #'aMethodAdded:',			#protocol : #updating,			#sourceCode : 'aMethodAdded: anEvent\r\t"Pass through to childrens."\r\r\tself rpackage == anEvent rpackage\r\t\tifTrue: [ ^ self contents inject: false into: [ :bool :each | (each aMethodAdded: anEvent) or: [ bool ] ] ].\r\t^ false',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1089' ],		#self : OmReference [ '1090' ],		#time : DateAndTime [ '2018-01-14T19:02:29.89839-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageNode,				#isMetaSide : false			},			#name : #'aMethodRecategorized:',			#protocol : #updating,			#sourceCode : 'aMethodRecategorized: anEvent\r\t"Pass through to childrens."\r\r\t"If this is the addition of a method as an extension of this package without any extensions yet, then we need to create the extension object (i.e. rebuild ourselves)."\r\r\t| sub rpackage |\r\tsub := self contents\r\t\tinject: false\r\t\tinto: [ :bool :each | (each aMethodRecategorized: anEvent) or: [ bool ] ].\r\trpackage := self rpackage.\r\t((rpackage isYourClassExtension: anEvent newProtocol)\r\t\tor: [ rpackage isYourClassExtension: anEvent oldProtocol ])\r\t\tifTrue: [ AltBrowser aNodeToRebuilt: self.\r\t\t\t^ true ].\r\t^ sub',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1090' ],		#self : OmReference [ '1091' ],		#time : DateAndTime [ '2018-01-14T19:02:29.899353-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageNode,				#isMetaSide : false			},			#name : #'aMethodRemoved:',			#protocol : #updating,			#sourceCode : 'aMethodRemoved: anEvent\r\t"Pass through to childrens."\r\r\t((self rpackage definesClass: anEvent methodClass) or: [ self rpackage isYourClassExtension: anEvent protocol ])\r\t\tifTrue: [ \r\t\t\t^ contents\r\t\t\t\tifNotNil: [ :c | c inject: false into: [ :bool :each | (each aMethodRemoved: anEvent) or: [ bool ] ] ]\r\t\t\t\tifNil: [ false  ] ].\r\t^ false',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1091' ],		#self : OmReference [ '1092' ],		#time : DateAndTime [ '2018-01-14T19:02:29.90023-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageNode,				#isMetaSide : false			},			#name : #'aRPackageCreated:',			#protocol : #updating,			#sourceCode : 'aRPackageCreated: anEvent\r\t"Do we belong to that package set ? It seems that sometimes, at that point, the RPackage is not yet visible in the set."\r\r\tself packageName = anEvent package packageName\r\t\tifTrue: [ AltBrowser aNodeToRebuilt: self.\r\t\t\t^ true ]\r\t\tifFalse: [ ^ false ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1092' ],		#self : OmReference [ '1093' ],		#time : DateAndTime [ '2018-01-14T19:02:29.901297-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageNode,				#isMetaSide : false			},			#name : #'aRPackageUnregistered:',			#protocol : #updating,			#sourceCode : 'aRPackageUnregistered: anEvent\r\t"We may be unregistered and need to erase ourselves."\r\r\t^ self packageName = anEvent package packageName',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1093' ],		#self : OmReference [ '1094' ],		#time : DateAndTime [ '2018-01-14T19:02:29.902235-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageNode,				#isMetaSide : false			},			#name : #aRecentPackagesReset,			#protocol : #updating,			#sourceCode : 'aRecentPackagesReset\r\t"Do nothing on that event"\r\r\t^ self',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1094' ],		#self : OmReference [ '1095' ],		#time : DateAndTime [ '2018-01-14T19:02:29.90333-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageNode,				#isMetaSide : false			},			#name : #'accept:notifying:',			#protocol : #actions,			#sourceCode : 'accept: aText notifying: aController\r\t| res |\r\tres := [ UndefinedObject compilerClass new\r\t\tevaluate: (ReadStream on: aText)\r\t\tin: nil\r\t\tto: nil\r\t\tnotifying: aController\r\t\tifFail: [ ^ nil ]\r\t\tlogged: true ]\r\t\ton: SyntaxErrorNotification\r\t\tdo: [ :ex | ex resume: true ].\r\tres notNil\r\t\tifTrue:\r\t\t\t[ | r |\r\t\t\tAltBrowser rootItems\r\t\t\t\tdetect: [ :aRoot | (r := aRoot findClass: res) notNil ].\r\t\t\t^ r ].\r\t^ nil',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1095' ],		#self : OmReference [ '1096' ],		#time : DateAndTime [ '2018-01-14T19:02:29.904929-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageNode,				#isMetaSide : false			},			#name : #'acceptDropItem:',			#protocol : #'drag and drop',			#sourceCode : 'acceptDropItem: anItem\r\t"Used to move methods from a package to another, or from a normal category to an extension-labeled one."\r\r\t^ anItem class == AltClassNode or: [ anItem isKindOf: AltMethodNode ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1096' ],		#self : OmReference [ '1097' ],		#time : DateAndTime [ '2018-01-14T19:02:29.905943-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageNode,				#isMetaSide : false			},			#name : #asCategories,			#protocol : #converting,			#sourceCode : 'asCategories\r\t"Convert this node in a categories setting"\r\r\tself parent ifNil: [ ^ nil ].\r\t(self packageName beginsWith: self parent categoryName)\r\t\tifTrue: [ ^ nil ].\r\t^ self packageName asString',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1097' ],		#self : OmReference [ '1098' ],		#time : DateAndTime [ '2018-01-14T19:02:29.907111-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageNode,				#isMetaSide : false			},			#name : #'asPerRBEnvironment:',			#protocol : #querying,			#sourceCode : 'asPerRBEnvironment: aRBEnvironment\r\t"Check if the contents exists in this environment. If yes, return self."\r\r\taRBEnvironment isSystem\r\t\tifTrue: [ ^ self ].\r\t^ (self contents anySatisfy: [ :e | e isInRBEnvironment: aRBEnvironment ])\r\t\tifTrue: [ self ]\r\t\tifFalse: [ nil ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1098' ],		#self : OmReference [ '1099' ],		#time : DateAndTime [ '2018-01-14T19:02:29.908069-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageNode,				#isMetaSide : false			},			#name : #asString,			#protocol : #printing,			#sourceCode : 'asString\r\t^ self packageName',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1099' ],		#self : OmReference [ '1100' ],		#time : DateAndTime [ '2018-01-14T19:02:29.909116-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageNode,				#isMetaSide : false			},			#name : #'asStringIn:',			#protocol : #printing,			#sourceCode : 'asStringIn: anAltTreeNodeModel\r\t"Reduce based on the parent name. The parameter shows the \'visible\' hierarchy, use that to reduce the name, but check first that we are not a root node."\r\r\t| string parentString |\r\tstring := self asString.\r\t(parent isNil or: [ anAltTreeNodeModel parentNode isNil ])\r\t\tifTrue: [ ^ string ].\r\tparentString := anAltTreeNodeModel parentNode item asString.\r\t((string beginsWith: parentString) and: [ string ~= parentString ])\r\t\tifTrue: [ string := string allButFirst: parentString size ].\r\tstring first = $-\r\t\tifTrue: [ ^ string allButFirst ].\r\t^ string',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1100' ],		#self : OmReference [ '1101' ],		#time : DateAndTime [ '2018-01-14T19:02:29.910979-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageNode,				#isMetaSide : false			},			#name : #contents,			#protocol : #accessing,			#sourceCode : 'contents\r\t"A Package set is a single RPackage instance with tags now. There are only extensions in the package itself."\r\r\t| aRPackage |\r\tcontents\r\t\tifNil: [ \r\t\t\taRPackage := self rpackage.\r\t\t\taRPackage classTags isEmpty\r\t\t\t\tifTrue: [ \r\t\t\t\t\tcontents := {(AltPackageExtensionNode with: self packageName parent: self)}\r\t\t\t\t\t\t,\r\t\t\t\t\t\t\t((self class sortClasses: aRPackage definedClasses)\r\t\t\t\t\t\t\t\tcollect: [ :e | AltClassNode with: e name parent: self ]) ]\r\t\t\t\tifFalse: [ \r\t\t\t\t\tcontents := OrderedCollection\r\t\t\t\t\t\tstreamContents: [ :stream | \r\t\t\t\t\t\t\t| rootTag |\r\t\t\t\t\t\t\tstream nextPut: (AltPackageExtensionNode with: self packageName parent: self).\r\t\t\t\t\t\t\trootTag := aRPackage classTags detect: [ :e | e name = self packageName ] ifNone: [  ].\r\t\t\t\t\t\t\tstream\r\t\t\t\t\t\t\t\tnextPutAll:\r\t\t\t\t\t\t\t\t\t(((aRPackage classTags reject: [ :a | a name = self packageName ]) sorted: [ :a :b | a name < b name ])\r\t\t\t\t\t\t\t\t\t\tcollect: [ :a | AltPackageTagNode with: a categoryName asSymbol parent: self ]).\r\t\t\t\t\t\t\trootTag\r\t\t\t\t\t\t\t\tifNotNil: [ \r\t\t\t\t\t\t\t\t\tstream\r\t\t\t\t\t\t\t\t\t\tnextPutAll:\r\t\t\t\t\t\t\t\t\t\t\t((self class sortClasses: rootTag classes) collect: [ :e | AltClassNode with: e name parent: self ]) ] ] ] ].\r\t^ contents',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1101' ],		#self : OmReference [ '1102' ],		#time : DateAndTime [ '2018-01-14T19:02:29.91203-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageNode,				#isMetaSide : false			},			#name : #'doubleClickIn:',			#protocol : #actions,			#sourceCode : 'doubleClickIn: anAltTreeItemModel\r\t"Action!"\r\r\tAltBrowser\r\t\tfullOnEnvironment: (anAltTreeItemModel rbEnvironment forPackages: {self rpackage})\r\t\tselect: self\r\t\twith: anAltTreeItemModel findExpanded',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1102' ],		#self : OmReference [ '1103' ],		#time : DateAndTime [ '2018-01-14T19:02:29.913084-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageNode,				#isMetaSide : false			},			#name : #'dropItem:',			#protocol : #'drag and drop',			#sourceCode : 'dropItem: anItem\r\t"Used to move methods from a package to another, or from a normal category to an extension-labeled one."\r\r\t| cm |\r\tanItem class == AltClassNode\r\t\tifTrue: [ \r\t\t\t"This probably works."\r\t\t\tanItem itemClass category: self packageName.\r\t\t\t^ self ].\r\tanItem isMethodNode\r\t\tifFalse: [ ^ self ].\r\tcm := anItem compiledMethod.\r\tcm methodClass organization\r\t\tclassify: anItem selector\r\t\tunder: self rpackage methodCategoryPrefix\r\t\tsuppressIfDefault: false',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1103' ],		#self : OmReference [ '1104' ],		#time : DateAndTime [ '2018-01-14T19:02:29.914-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageNode,				#isMetaSide : false			},			#name : #'findKeywordsCategory:',			#protocol : #querying,			#sourceCode : 'findKeywordsCategory: keywords\r\t"Not matching"\r\r\t^ nil',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1104' ],		#self : OmReference [ '1105' ],		#time : DateAndTime [ '2018-01-14T19:02:29.915473-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageNode,				#isMetaSide : false			},			#name : #'findMethod:in:',			#protocol : #querying,			#sourceCode : 'findMethod: aSelector in: aClass\r\t"Return the node if the item matches. By default, search among the kids."\r\r\t"Not lazy : trigger contents generation."\r\r\t| res |\r\tself contents\r\t\tdo: [ :each | \r\t\t\t(res := each findMethod: aSelector in: aClass) notNil\r\t\t\t\tifTrue: [ ^ res ] ].\r\t^ nil',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1105' ],		#self : OmReference [ '1106' ],		#time : DateAndTime [ '2018-01-14T19:02:29.916455-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageNode,				#isMetaSide : false			},			#name : #'findPackage:',			#protocol : #querying,			#sourceCode : 'findPackage: aRPackage\r\t"Normal case is now that there is a single RPackage per RPackageSet, so we should catch that anyway."\r\r\tself rpackage == aRPackage\r\t\tifTrue: [ ^ self ].\r\t^ nil',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1106' ],		#self : OmReference [ '1107' ],		#time : DateAndTime [ '2018-01-14T19:02:29.917495-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageNode,				#isMetaSide : false			},			#name : #'findPackageCategory:',			#protocol : #querying,			#sourceCode : 'findPackageCategory: aName\r\t"We are not concerned."\r\r\t^ nil',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1107' ],		#self : OmReference [ '1108' ],		#time : DateAndTime [ '2018-01-14T19:02:29.918432-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageNode,				#isMetaSide : false			},			#name : #icon,			#protocol : #accessing,			#sourceCode : 'icon\r\t^ self isModified\r\t\tifTrue: [ #dirtyPackageIcon ]\r\t\tifFalse: [ #packageIcon ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1108' ],		#self : OmReference [ '1109' ],		#time : DateAndTime [ '2018-01-14T19:02:29.919372-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageNode,				#isMetaSide : false			},			#name : #'isInRBEnvironment:',			#protocol : #querying,			#sourceCode : 'isInRBEnvironment: aRBEnvironment\r\t^ aRBEnvironment isSystem or: [ self contents anySatisfy: [ :e | e isInRBEnvironment: aRBEnvironment ] ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1109' ],		#self : OmReference [ '1110' ],		#time : DateAndTime [ '2018-01-14T19:02:29.920283-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageNode,				#isMetaSide : false			},			#name : #isModified,			#protocol : #testing,			#sourceCode : 'isModified\r\t^ self mcWorkingCopy modified',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1110' ],		#self : OmReference [ '1111' ],		#time : DateAndTime [ '2018-01-14T19:02:29.921188-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageNode,				#isMetaSide : false			},			#name : #isPackageNode,			#protocol : #testing,			#sourceCode : 'isPackageNode\r\t^ true',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1111' ],		#self : OmReference [ '1112' ],		#time : DateAndTime [ '2018-01-14T19:02:29.922074-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageNode,				#isMetaSide : false			},			#name : #isStyled,			#protocol : #testing,			#sourceCode : 'isStyled\r\t^ true',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1112' ],		#self : OmReference [ '1113' ],		#time : DateAndTime [ '2018-01-14T19:02:29.922975-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageNode,				#isMetaSide : false			},			#name : #mcWorkingCopy,			#protocol : #accessing,			#sourceCode : 'mcWorkingCopy\r\t"Get the MCWorkingCopy associated with this node. We can expect the direct access to the registry to be faster than doing a detect over all managers."\r\r\t^ MCWorkingCopy registry at: (MCPackage named: self packageName)',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1113' ],		#self : OmReference [ '1114' ],		#time : DateAndTime [ '2018-01-14T19:02:29.924077-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageNode,				#isMetaSide : false			},			#name : #packageName,			#protocol : #accessing,			#sourceCode : 'packageName\r\t^ self item',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1114' ],		#self : OmReference [ '1115' ],		#time : DateAndTime [ '2018-01-14T19:02:29.925701-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageNode,				#isMetaSide : false			},			#name : #'packagesDo:',			#protocol : #querying,			#sourceCode : 'packagesDo: aBlock\r\taBlock value: self rpackage',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1115' ],		#self : OmReference [ '1116' ],		#time : DateAndTime [ '2018-01-14T19:02:29.926725-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageNode,				#isMetaSide : false			},			#name : #rpackage,			#protocol : #accessing,			#sourceCode : 'rpackage\r\t"Possible contextualisation here? I know sub RPackageOrganizers are possible, but I don\'t see the use of it."\r\r\t^ RPackageOrganizer default packageNamed: self packageName',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1116' ],		#self : OmReference [ '1117' ],		#time : DateAndTime [ '2018-01-14T19:02:29.927649-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageNode,				#isMetaSide : false			},			#name : #rpackageCommands,			#protocol : #commands,			#sourceCode : 'rpackageCommands\r\t<treeAreaCommand>\r\t^ #(#AltAddSystemCategoryCommand #AltRenamePackageCommand #AltRemovePackageCommand)',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1117' ],		#self : OmReference [ '1118' ],		#time : DateAndTime [ '2018-01-14T19:02:29.928627-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageNode,				#isMetaSide : false			},			#name : #sourceCode,			#protocol : #querying,			#sourceCode : 'sourceCode\r\t"The default class scheme for a package."\r\r\t^ \'Object subclass: #NameOfSubclass\r\tinstanceVariableNames: \'\'\'\'\r\tclassVariableNames: \'\'\'\'\r\tpoolDictionaries: \'\'\'\'\r\tcategory: \'\'\' , self packageName , \'\'\'\'',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1118' ],		#self : OmReference [ '1119' ],		#time : DateAndTime [ '2018-01-14T19:02:29.929524-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageNode,				#isMetaSide : false			},			#name : #title,			#protocol : #accessing,			#sourceCode : 'title\r\t^ self mcWorkingCopy packageNameWithStar',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1119' ],		#self : OmReference [ '1120' ],		#time : DateAndTime [ '2018-01-14T19:02:29.930823-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltUnpackagedNode class',				#isMetaSide : true			},			#name : #'with:parent:',			#protocol : #'instance creation',			#sourceCode : 'with: anObject parent: aNode\r\t^ self new\r\t\titem: anObject;\r\t\tparent: aNode;\r\t\tyourself',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1120' ],		#self : OmReference [ '1121' ],		#time : DateAndTime [ '2018-01-14T19:02:29.931776-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltUnpackagedNode,				#isMetaSide : false			},			#name : #asCategories,			#protocol : #converting,			#sourceCode : 'asCategories\r\t"Convert this node in a categories setting"\r\r\t^ nil',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1121' ],		#self : OmReference [ '1122' ],		#time : DateAndTime [ '2018-01-14T19:02:29.932657-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltUnpackagedNode,				#isMetaSide : false			},			#name : #asString,			#protocol : #printing,			#sourceCode : 'asString\r\t^ \'Not yet packaged\'',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1122' ],		#self : OmReference [ '1123' ],		#time : DateAndTime [ '2018-01-14T19:02:29.933596-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltUnpackagedNode,				#isMetaSide : false			},			#name : #icon,			#protocol : #accessing,			#sourceCode : 'icon\r\t^ #packageIcon',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1123' ],		#self : OmReference [ '1124' ],		#time : DateAndTime [ '2018-01-14T19:02:29.934461-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltUnpackagedNode,				#isMetaSide : false			},			#name : #title,			#protocol : #accessing,			#sourceCode : 'title\r\t^ \'Not yet packaged\'',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1124' ],		#self : OmReference [ '1125' ],		#time : DateAndTime [ '2018-01-14T19:02:29.936034-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageTagNode,				#isMetaSide : false			},			#name : #'aClassAdded:',			#protocol : #updating,			#sourceCode : 'aClassAdded: anEvent\r\t"Answer true if the category matches."\r\r\tanEvent classCategory = self category\r\t\tifTrue: [ AltBrowser aNodeToRebuilt: self.\r\t\t\t^ true ]\r\t\tifFalse: [ ^ false ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1125' ],		#self : OmReference [ '1126' ],		#time : DateAndTime [ '2018-01-14T19:02:29.937075-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageTagNode,				#isMetaSide : false			},			#name : #'aClassCommented:',			#protocol : #updating,			#sourceCode : 'aClassCommented: anEvent\r\t"Pass through that event."\r\r\t^ self contents inject: false into: [ :bool :each | (each aClassCommented: anEvent) or: [ bool ] ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1126' ],		#self : OmReference [ '1127' ],		#time : DateAndTime [ '2018-01-14T19:02:29.938127-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageTagNode,				#isMetaSide : false			},			#name : #'aClassModifiedClassDefinition:',			#protocol : #updating,			#sourceCode : 'aClassModifiedClassDefinition: anEvent\r\t"Pass through that event."\r\r\t(self contents\r\t\tanySatisfy: [ :each | each aClassModifiedClassDefinition: anEvent ])\r\t\tifFalse: [ ^ false ].\r\tAltBrowser aNodeToRebuilt: self.\r\t^ true',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1127' ],		#self : OmReference [ '1128' ],		#time : DateAndTime [ '2018-01-14T19:02:29.939124-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageTagNode,				#isMetaSide : false			},			#name : #'aClassRecategorized:',			#protocol : #updating,			#sourceCode : 'aClassRecategorized: anEvent\r\t"Answer true if the category matches."\r\r\t(anEvent newCategory = self category\r\t\tor: [ anEvent oldCategory = self category ])\r\t\tifTrue: [ AltBrowser aNodeToRebuilt: self.\r\t\t\t^ true ]\r\t\tifFalse: [ ^ false ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1128' ],		#self : OmReference [ '1129' ],		#time : DateAndTime [ '2018-01-14T19:02:29.940018-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageTagNode,				#isMetaSide : false			},			#name : #'aClassRemoved:',			#protocol : #updating,			#sourceCode : 'aClassRemoved: anEvent\r\t"If below it\'s true, rebuilt itself. Return false in any case to stop the update propagation above."\r\r\t(self contents\r\t\tinject: false\r\t\tinto: [ :bool :each | (each aClassRemoved: anEvent) or: [ bool ] ])\r\t\tifTrue: [ AltBrowser aNodeToRebuilt: self ].\r\t^ false',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1129' ],		#self : OmReference [ '1130' ],		#time : DateAndTime [ '2018-01-14T19:02:29.941569-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageTagNode,				#isMetaSide : false			},			#name : #'aClassRenamed:',			#protocol : #updating,			#sourceCode : 'aClassRenamed: anEvent\r\t"Pass through that event."\r\r\t(self contents anySatisfy: [ :each | each aClassRenamed: anEvent ])\r\t\tifFalse: [ ^ false ].\r\tAltBrowser aNodeToRebuilt: self.\r\t^ true',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1130' ],		#self : OmReference [ '1131' ],		#time : DateAndTime [ '2018-01-14T19:02:29.942628-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageTagNode,				#isMetaSide : false			},			#name : #'aClassReorganized:',			#protocol : #updating,			#sourceCode : 'aClassReorganized: anEvent\r\t"Pass through that event."\r\r\t^ self contents inject: false into: [ :bool :each | (each aClassReorganized: anEvent) or: [ bool ] ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1131' ],		#self : OmReference [ '1132' ],		#time : DateAndTime [ '2018-01-14T19:02:29.94361-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageTagNode,				#isMetaSide : false			},			#name : #'aClassRepackaged:',			#protocol : #updating,			#sourceCode : 'aClassRepackaged: anEvent\r\t"Answer true if the category matches."\r\r\t(anEvent newPackage name = self packageName\r\t\tor: [ anEvent oldPackage name = self packageName ])\r\t\tifTrue: [ AltBrowser aNodeToRebuilt: self.\r\t\t\t^ true ]\r\t\tifFalse: [ ^ false ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1132' ],		#self : OmReference [ '1133' ],		#time : DateAndTime [ '2018-01-14T19:02:29.9445-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageTagNode,				#isMetaSide : false			},			#name : #'aMethodAdded:',			#protocol : #updating,			#sourceCode : 'aMethodAdded: anEvent\r\t"Pass through to childrens."\r\r\t^ self contents inject: false into: [ :bool :each | (each aMethodAdded: anEvent) or: [ bool ] ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1133' ],		#self : OmReference [ '1134' ],		#time : DateAndTime [ '2018-01-14T19:02:29.94601-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageTagNode,				#isMetaSide : false			},			#name : #'aMethodRecategorized:',			#protocol : #updating,			#sourceCode : 'aMethodRecategorized: anEvent\r\t"Pass through to childrens."\r\r\t\t^ self contents inject: false into: [ :bool :each | (each aMethodRecategorized: anEvent) or: [ bool ] ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1134' ],		#self : OmReference [ '1135' ],		#time : DateAndTime [ '2018-01-14T19:02:29.946975-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageTagNode,				#isMetaSide : false			},			#name : #'aMethodRemoved:',			#protocol : #updating,			#sourceCode : 'aMethodRemoved: anEvent\r\t"Pass through to childrens."\r\r\t^ self contents inject: false into: [ :bool :each | (each aMethodRemoved: anEvent) or: [ bool ] ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1135' ],		#self : OmReference [ '1136' ],		#time : DateAndTime [ '2018-01-14T19:02:29.947959-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageTagNode,				#isMetaSide : false			},			#name : #'accept:notifying:',			#protocol : #actions,			#sourceCode : 'accept: aText notifying: aController\r\t| res |\r\tres := [ UndefinedObject compilerClass new\r\t\tevaluate: (ReadStream on: aText)\r\t\tin: nil\r\t\tto: nil\r\t\tnotifying: aController\r\t\tifFail: [ ^ nil ]\r\t\tlogged: true ]\r\t\ton: SyntaxErrorNotification\r\t\tdo: [ :ex | ex resume: true ].\r\tres notNil\r\t\tifTrue:\r\t\t\t[ | r |\r\t\t\tAltBrowser rootItems\r\t\t\t\tdetect: [ :aRoot | (r := aRoot findClass: res) notNil ].\r\t\t\t^ r ].\r\t^ nil',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1136' ],		#self : OmReference [ '1137' ],		#time : DateAndTime [ '2018-01-14T19:02:29.949031-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageTagNode,				#isMetaSide : false			},			#name : #'acceptDropItem:',			#protocol : #'drag and drop',			#sourceCode : 'acceptDropItem: anItem\r\t"Move a class to a tag"\r\r\t^ anItem class == AltClassNode',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1137' ],		#self : OmReference [ '1138' ],		#time : DateAndTime [ '2018-01-14T19:02:29.949976-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageTagNode,				#isMetaSide : false			},			#name : #asString,			#protocol : #printing,			#sourceCode : 'asString\r\t^ self category',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1138' ],		#self : OmReference [ '1139' ],		#time : DateAndTime [ '2018-01-14T19:02:29.951335-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageTagNode,				#isMetaSide : false			},			#name : #'asStringIn:',			#protocol : #printing,			#sourceCode : 'asStringIn: anAltTreeNodeModel\r\t"Reduce based on the parent name. The parameter shows the \'visible\' hierarchy, use that to reduce the name."\r\r\t| string parentString |\r\tstring := self asString.\r\t(parent isNil or: [ anAltTreeNodeModel parentNode isNil ])\r\t\tifTrue: [ ^ string ].\r\tparentString := anAltTreeNodeModel parentNode item asString.\r\t((string beginsWith: parentString) and: [ string ~= parentString ])\r\t\tifTrue: [ string := string allButFirst: parentString size ].\r\tstring first = $-\r\t\tifTrue: [ ^ string allButFirst ].\r\t^ string',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1139' ],		#self : OmReference [ '1140' ],		#time : DateAndTime [ '2018-01-14T19:02:29.952243-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageTagNode,				#isMetaSide : false			},			#name : #category,			#protocol : #accessing,			#sourceCode : 'category\r\t^ self item',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1140' ],		#self : OmReference [ '1141' ],		#time : DateAndTime [ '2018-01-14T19:02:29.953225-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageTagNode,				#isMetaSide : false			},			#name : #contents,			#protocol : #accessing,			#sourceCode : 'contents\r\t"Extract the contents from the tag. There are only classes in there."\r\r\tcontents\r\t\tifNil: [ \r\t\t\tcontents := (self class sortClasses: (self rpackage classesForClassTag: self category))\r\t\t\t\tcollect: [ :each | AltClassNode with: each name parent: self ] ].\r\t^ contents',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1141' ],		#self : OmReference [ '1142' ],		#time : DateAndTime [ '2018-01-14T19:02:29.954215-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageTagNode,				#isMetaSide : false			},			#name : #'doubleClickIn:',			#protocol : #actions,			#sourceCode : 'doubleClickIn: anAltTreeItemModel\r\t"At the moment, a RPackageTag can\'t be used in an environment. So, when double clicking, open with a focus on the package, not the tag (hence the parent for #findExpanded)"\r\r\tAltBrowser\r\t\tfullOnEnvironment: (anAltTreeItemModel rbEnvironment forPackages: {self rpackage})\r\t\tselect: self\r\t\twith: anAltTreeItemModel parent findExpanded',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1142' ],		#self : OmReference [ '1143' ],		#time : DateAndTime [ '2018-01-14T19:02:29.955236-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageTagNode,				#isMetaSide : false			},			#name : #'dropItem:',			#protocol : #'drag and drop',			#sourceCode : 'dropItem: anItem\r\t"Adding a class here will trigger the change category of class."\r\r\tanItem itemClass category: self category.\r\t^ self findClass: anItem itemClass',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1143' ],		#self : OmReference [ '1144' ],		#time : DateAndTime [ '2018-01-14T19:02:29.956811-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageTagNode,				#isMetaSide : false			},			#name : #'findClass:',			#protocol : #querying,			#sourceCode : 'findClass: aClass\r\t"Filter out: force contents building if the class belongs to this package."\r\r\t"Will that work if I\'m looking for a trait class? It seems a trait class meta side has no base class."\r\r\t| res |\r\t(self packageTag\r\t\thasClass:\r\t\t\t(aClass isMeta\r\t\t\t\tifTrue: [ aClass baseClass ]\r\t\t\t\tifFalse: [ aClass ]))\r\t\tifTrue: [ \r\t\t\tself contents\r\t\t\t\tdo: [ :each | \r\t\t\t\t\t(res := each findClass: aClass) notNil\r\t\t\t\t\t\tifTrue: [ ^ res ] ] ].\r\t^ nil',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1144' ],		#self : OmReference [ '1145' ],		#time : DateAndTime [ '2018-01-14T19:02:29.958112-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageTagNode,				#isMetaSide : false			},			#name : #'findClassCategory:',			#protocol : #querying,			#sourceCode : 'findClassCategory: aCategory\r\t"Force a detection here for class category / RPackage similarity."\r\r\tself category = aCategory\r\t\tifTrue: [ ^ self ].\r\t^ nil',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1145' ],		#self : OmReference [ '1146' ],		#time : DateAndTime [ '2018-01-14T19:02:29.959196-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageTagNode,				#isMetaSide : false			},			#name : #'findMethod:in:',			#protocol : #querying,			#sourceCode : 'findMethod: aSelector in: aClass\r\t"Filter out: force contents building if the class belongs to this package."\r\r\t| res |\r\t(self packageTag\r\t\thasClass:\r\t\t\t(aClass isMeta\r\t\t\t\tifTrue: [ aClass baseClass ]\r\t\t\t\tifFalse: [ aClass ]))\r\t\tifTrue: [ \r\t\t\tself contents\r\t\t\t\tdo: [ :each | \r\t\t\t\t\t(res := each findMethod: aSelector in: aClass) notNil\r\t\t\t\t\t\tifTrue: [ ^ res ] ] ].\r\t^ nil',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1146' ],		#self : OmReference [ '1147' ],		#time : DateAndTime [ '2018-01-14T19:02:29.960109-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageTagNode,				#isMetaSide : false			},			#name : #icon,			#protocol : #accessing,			#sourceCode : 'icon\r\t^ #smallOpenIcon',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1147' ],		#self : OmReference [ '1148' ],		#time : DateAndTime [ '2018-01-14T19:02:29.960988-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageTagNode,				#isMetaSide : false			},			#name : #'isInRBEnvironment:',			#protocol : #querying,			#sourceCode : 'isInRBEnvironment: aRBEnvironment\r\t"Use the category name, not the tag name."\r\r\t^ aRBEnvironment includesCategory: self category',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1148' ],		#self : OmReference [ '1149' ],		#time : DateAndTime [ '2018-01-14T19:02:29.961887-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageTagNode,				#isMetaSide : false			},			#name : #isStyled,			#protocol : #testing,			#sourceCode : 'isStyled\r\t^ true',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1149' ],		#self : OmReference [ '1150' ],		#time : DateAndTime [ '2018-01-14T19:02:29.962775-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageTagNode,				#isMetaSide : false			},			#name : #packageName,			#protocol : #accessing,			#sourceCode : 'packageName\r\t^ self parent packageName',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1150' ],		#self : OmReference [ '1151' ],		#time : DateAndTime [ '2018-01-14T19:02:29.963686-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageTagNode,				#isMetaSide : false			},			#name : #packageTag,			#protocol : #accessing,			#sourceCode : 'packageTag\r\t^ self rpackage classTagNamed: (self rpackage toTagName: self category) ifAbsent: [  ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1151' ],		#self : OmReference [ '1152' ],		#time : DateAndTime [ '2018-01-14T19:02:29.964591-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageTagNode,				#isMetaSide : false			},			#name : #packageTagCommands,			#protocol : #commands,			#sourceCode : 'packageTagCommands\r\t<treeAreaCommand>\r\t^ #(#AltRenameCategoryCommand #AltAddSystemCategoryCommand #AltRemoveCategoryCommand)',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1152' ],		#self : OmReference [ '1153' ],		#time : DateAndTime [ '2018-01-14T19:02:29.966181-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageTagNode,				#isMetaSide : false			},			#name : #rpackage,			#protocol : #accessing,			#sourceCode : 'rpackage\r\t"Possible contextualisation here? I know sub RPackageOrganizers are possible, but I don\'t see the use of it."\r\r\t^ self parent rpackage',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1153' ],		#self : OmReference [ '1154' ],		#time : DateAndTime [ '2018-01-14T19:02:29.967218-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageTagNode,				#isMetaSide : false			},			#name : #sourceCode,			#protocol : #querying,			#sourceCode : 'sourceCode\r\t"The default class scheme for a package."\r\r\t^ \'Object subclass: #NameOfSubclass\r\tinstanceVariableNames: \'\'\'\'\r\tclassVariableNames: \'\'\'\'\r\tpoolDictionaries: \'\'\'\'\r\tcategory: \'\'\' , self category , \'\'\'\'',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1154' ],		#self : OmReference [ '1155' ],		#time : DateAndTime [ '2018-01-14T19:02:29.968115-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageTagNode,				#isMetaSide : false			},			#name : #title,			#protocol : #accessing,			#sourceCode : 'title\r\t^ self category',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1155' ],		#self : OmReference [ '1156' ],		#time : DateAndTime [ '2018-01-14T19:02:29.969218-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltRecentPackagesNode,				#isMetaSide : false			},			#name : #'aMCWorkingCopyCreated:',			#protocol : #updating,			#sourceCode : 'aMCWorkingCopyCreated: anEvent\r\t"Either match to itself or pass to its children."\r\r\tself purgeCode.\r\tself item\r\t\tadd: DateAndTime now -> anEvent workingCopy packageName asSymbol.\r\tAltBrowser aNodeToRebuilt: self.\r\t^ false',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1156' ],		#self : OmReference [ '1157' ],		#time : DateAndTime [ '2018-01-14T19:02:29.970236-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltRecentPackagesNode,				#isMetaSide : false			},			#name : #'aMCWorkingCopyDeleted:',			#protocol : #updating,			#sourceCode : 'aMCWorkingCopyDeleted: anEvent\r\t"Remove if present, rebuilt if necessary."\r\r\t| oldSize |\r\toldSize := self item size.\r\tself item\r\t\tremoveAllSuchThat: [ :el | el value = anEvent workingCopy packageName ].\r\tself purgeCode.\r\toldSize > self item size\r\t\tifTrue: [ AltBrowser aNodeToRebuilt: self ].\r\t^ false',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1157' ],		#self : OmReference [ '1158' ],		#time : DateAndTime [ '2018-01-14T19:02:29.971542-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltRecentPackagesNode,				#isMetaSide : false			},			#name : #aRecentPackagesReset,			#protocol : #updating,			#sourceCode : 'aRecentPackagesReset\r\t"Reset the history of pre-existing packages"\r\r\tself reset',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1158' ],		#self : OmReference [ '1159' ],		#time : DateAndTime [ '2018-01-14T19:02:29.972456-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltRecentPackagesNode,				#isMetaSide : false			},			#name : #'asPerRBEnvironment:',			#protocol : #querying,			#sourceCode : 'asPerRBEnvironment: aRBEnvironment\r\t"Check if the contents exists in this environment. If yes, return self."\r\r\taRBEnvironment isSystem\r\t\tifTrue: [ ^ self ].\r\t^ nil',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1159' ],		#self : OmReference [ '1160' ],		#time : DateAndTime [ '2018-01-14T19:02:29.973419-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltRecentPackagesNode,				#isMetaSide : false			},			#name : #asString,			#protocol : #printing,			#sourceCode : 'asString\r\t^ \'Recent Packages\'',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1160' ],		#self : OmReference [ '1161' ],		#time : DateAndTime [ '2018-01-14T19:02:29.974545-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltRecentPackagesNode,				#isMetaSide : false			},			#name : #contents,			#protocol : #accessing,			#sourceCode : 'contents\r\t^ contents\r\t\tifNil: [ contents := self item\r\t\t\t\tcollect: [ :each | AltPackageLinkNode with: each value parent: self ] ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1161' ],		#self : OmReference [ '1162' ],		#time : DateAndTime [ '2018-01-14T19:02:29.975618-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltRecentPackagesNode,				#isMetaSide : false			},			#name : #'findKeywordsCategory:',			#protocol : #querying,			#sourceCode : 'findKeywordsCategory: keywords\r\t"Not matching"\r\r\t^ nil',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1162' ],		#self : OmReference [ '1163' ],		#time : DateAndTime [ '2018-01-14T19:02:29.977164-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltRecentPackagesNode,				#isMetaSide : false			},			#name : #'findPackage:',			#protocol : #querying,			#sourceCode : 'findPackage: ignored\r\t^ nil',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1163' ],		#self : OmReference [ '1164' ],		#time : DateAndTime [ '2018-01-14T19:02:29.978105-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltRecentPackagesNode,				#isMetaSide : false			},			#name : #'findPackageCategory:',			#protocol : #querying,			#sourceCode : 'findPackageCategory: ignored\r\t^ nil',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1164' ],		#self : OmReference [ '1165' ],		#time : DateAndTime [ '2018-01-14T19:02:29.979007-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltRecentPackagesNode,				#isMetaSide : false			},			#name : #icon,			#protocol : #accessing,			#sourceCode : 'icon\r\t^ #groupIcon',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1165' ],		#self : OmReference [ '1166' ],		#time : DateAndTime [ '2018-01-14T19:02:29.979916-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltRecentPackagesNode,				#isMetaSide : false			},			#name : #'isInRBEnvironment:',			#protocol : #querying,			#sourceCode : 'isInRBEnvironment: aRBEnvironment\r\t^ aRBEnvironment isSystem',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1166' ],		#self : OmReference [ '1167' ],		#time : DateAndTime [ '2018-01-14T19:02:29.98083-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltRecentPackagesNode,				#isMetaSide : false			},			#name : #item,			#protocol : #private,			#sourceCode : 'item\r\t^ AltBrowser recentPackages',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1167' ],		#self : OmReference [ '1168' ],		#time : DateAndTime [ '2018-01-14T19:02:29.981839-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltRecentPackagesNode,				#isMetaSide : false			},			#name : #'packagesDo:',			#protocol : #querying,			#sourceCode : 'packagesDo: aBlock\r\tself contents do: [ :each | each packagesDo: aBlock ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1168' ],		#self : OmReference [ '1169' ],		#time : DateAndTime [ '2018-01-14T19:02:29.982836-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltRecentPackagesNode,				#isMetaSide : false			},			#name : #purgeCode,			#protocol : #private,			#sourceCode : 'purgeCode\r\t"Scan code to remove all old entries."\r\r\t[ self item size > 10 ]\r\t\twhileTrue: [ \r\t\t\tself item first key < DateAndTime yesterday\r\t\t\t\tifTrue: [ self item removeFirst ]\r\t\t\t\tifFalse: [ ^ self ] ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1169' ],		#self : OmReference [ '1170' ],		#time : DateAndTime [ '2018-01-14T19:02:29.983736-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltRecentPackagesNode,				#isMetaSide : false			},			#name : #reset,			#protocol : #accessing,			#sourceCode : 'reset\r\t"Reset this node: purge all, rebuilt."\r\r\tself item removeAll.\r\tAltBrowser aNodeToRebuilt: self',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1170' ],		#self : OmReference [ '1171' ],		#time : DateAndTime [ '2018-01-14T19:02:29.984678-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltRecentPackagesNode,				#isMetaSide : false			},			#name : #title,			#protocol : #accessing,			#sourceCode : 'title\r\t^ \'Recent Packages\'',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1171' ],		#self : OmReference [ '1172' ],		#time : DateAndTime [ '2018-01-14T19:02:29.985616-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltWatchpointsClassNode,				#isMetaSide : false			},			#name : #asString,			#protocol : #printing,			#sourceCode : 'asString\r\t^ self itemClass name',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1172' ],		#self : OmReference [ '1173' ],		#time : DateAndTime [ '2018-01-14T19:02:29.987342-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltWatchpointsClassNode,				#isMetaSide : false			},			#name : #contents,			#protocol : #accessing,			#sourceCode : 'contents\r\t^ contents\r\t\tifNil:\r\t\t\t[ contents := self watchpoints\r\t\t\t\tcollect: [ :e | AltWatchpointNode with: e parent: self ] ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1173' ],		#self : OmReference [ '1174' ],		#time : DateAndTime [ '2018-01-14T19:02:29.988213-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltWatchpointsClassNode,				#isMetaSide : false			},			#name : #icon,			#protocol : #accessing,			#sourceCode : 'icon\r\t^ #groupIcon',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1174' ],		#self : OmReference [ '1175' ],		#time : DateAndTime [ '2018-01-14T19:02:29.989256-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltWatchpointsClassNode,				#isMetaSide : false			},			#name : #'isInRBEnvironment:',			#protocol : #querying,			#sourceCode : 'isInRBEnvironment: aRBEnvironment\r\t^ (aRBEnvironment includesClass: self itemClass)\r\t\tor: [ aRBEnvironment includesClass: self itemClass class ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1175' ],		#self : OmReference [ '1176' ],		#time : DateAndTime [ '2018-01-14T19:02:29.990221-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltWatchpointsClassNode,				#isMetaSide : false			},			#name : #itemClass,			#protocol : #accessing,			#sourceCode : 'itemClass\r\t^ item',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1176' ],		#self : OmReference [ '1177' ],		#time : DateAndTime [ '2018-01-14T19:02:29.991694-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltWatchpointsClassNode,				#isMetaSide : false			},			#name : #title,			#protocol : #accessing,			#sourceCode : 'title\r\t^ self itemClass name',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1177' ],		#self : OmReference [ '1178' ],		#time : DateAndTime [ '2018-01-14T19:02:29.992848-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltWatchpointsClassNode,				#isMetaSide : false			},			#name : #watchpoints,			#protocol : #accessing,			#sourceCode : 'watchpoints\r\t^ Watchpoint allWatchpoints values\r\t\tselect:\r\t\t\t[ :e | \r\t\t\te compiledMethod methodClass == self itemClass\r\t\t\t\tand: [ e compiledMethod == (self itemClass >> e compiledMethod selector) ] ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1178' ],		#self : OmReference [ '1179' ],		#time : DateAndTime [ '2018-01-14T19:02:29.994123-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltWatchpointsNode,				#isMetaSide : false			},			#name : #'aMetalinkChanged:',			#protocol : #updating,			#sourceCode : 'aMetalinkChanged: anEvent\r\tAltBrowser aNodeToRebuilt: self',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1179' ],		#self : OmReference [ '1180' ],		#time : DateAndTime [ '2018-01-14T19:02:29.995402-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltWatchpointsNode,				#isMetaSide : false			},			#name : #'aMethodRemoved:',			#protocol : #updating,			#sourceCode : 'aMethodRemoved: anEvent\r\t"I\'ll have to do something there:"\r\r\tAltBrowser aNodeToRebuilt: self.\r\t^ false',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1180' ],		#self : OmReference [ '1181' ],		#time : DateAndTime [ '2018-01-14T19:02:29.996622-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltWatchpointsNode,				#isMetaSide : false			},			#name : #'aWatchpointInstalled:',			#protocol : #updating,			#sourceCode : 'aWatchpointInstalled: anEvent\r\tAltBrowser aNodeToRebuilt: self',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1181' ],		#self : OmReference [ '1182' ],		#time : DateAndTime [ '2018-01-14T19:02:29.998387-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltWatchpointsNode,				#isMetaSide : false			},			#name : #'aWatchpointUninstalled:',			#protocol : #updating,			#sourceCode : 'aWatchpointUninstalled: anEvent\r\tAltBrowser aNodeToRebuilt: self',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1182' ],		#self : OmReference [ '1183' ],		#time : DateAndTime [ '2018-01-14T19:02:29.999368-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltWatchpointsNode,				#isMetaSide : false			},			#name : #asString,			#protocol : #printing,			#sourceCode : 'asString\r\t^ \'Watchpoints\'',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1183' ],		#self : OmReference [ '1184' ],		#time : DateAndTime [ '2018-01-14T19:02:30.000313-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltWatchpointsNode,				#isMetaSide : false			},			#name : #contents,			#protocol : #accessing,			#sourceCode : 'contents\r\t^ ((self watchpoints collect: [ :e | e compiledMethod methodClass ])\r\t\tasSet collect: [ :e | AltWatchpointsClassNode with: e parent: self ])\r\t\tasOrderedCollection',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1184' ],		#self : OmReference [ '1185' ],		#time : DateAndTime [ '2018-01-14T19:02:30.001216-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltWatchpointsNode,				#isMetaSide : false			},			#name : #'findPackage:',			#protocol : #querying,			#sourceCode : 'findPackage: ignored\r\t^ nil',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1185' ],		#self : OmReference [ '1186' ],		#time : DateAndTime [ '2018-01-14T19:02:30.002131-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltWatchpointsNode,				#isMetaSide : false			},			#name : #'findPackageCategory:',			#protocol : #querying,			#sourceCode : 'findPackageCategory: ignored\r\t^ nil',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1186' ],		#self : OmReference [ '1187' ],		#time : DateAndTime [ '2018-01-14T19:02:30.003012-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltWatchpointsNode,				#isMetaSide : false			},			#name : #icon,			#protocol : #accessing,			#sourceCode : 'icon\r\t^ #groupIcon',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1187' ],		#self : OmReference [ '1188' ],		#time : DateAndTime [ '2018-01-14T19:02:30.003917-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltWatchpointsNode,				#isMetaSide : false			},			#name : #title,			#protocol : #accessing,			#sourceCode : 'title\r\t^ \'Watchpoints\'',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1188' ],		#self : OmReference [ '1189' ],		#time : DateAndTime [ '2018-01-14T19:02:30.004859-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltWatchpointsNode,				#isMetaSide : false			},			#name : #watchpoints,			#protocol : #accessing,			#sourceCode : 'watchpoints\r\t^ Watchpoint allWatchpoints',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1189' ],		#self : OmReference [ '1190' ],		#time : DateAndTime [ '2018-01-14T19:02:30.005837-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltWatchpointsNode,				#isMetaSide : false			},			#name : #watchpointsCommand,			#protocol : #commands,			#sourceCode : 'watchpointsCommand\r\t<treeAreaCommand>\r\t^ #(#AltWatchpointsEraseHistoryAll #AltWatchpointsRemoveAll)',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1190' ],		#self : OmReference [ '1191' ],		#time : DateAndTime [ '2018-01-14T19:02:30.006864-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltMethodNode class',				#isMetaSide : true			},			#name : #'at:and:putMethod:',			#protocol : #accessing,			#sourceCode : 'at: aClassName and: aSelector putMethod: aMethodSource\r\t"Add this method to the register."\r\r\t| key |\r\tkey := Array with: aClassName with: aSelector.\r\tself assert: (self protectedMethods includesKey: key) not.\r\tself protectedMethods at: key put: aMethodSource',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1191' ],		#self : OmReference [ '1192' ],		#time : DateAndTime [ '2018-01-14T19:02:30.008704-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltMethodNode class',				#isMetaSide : true			},			#name : #protectedMethods,			#protocol : #accessing,			#sourceCode : 'protectedMethods\r\t^ ProtectedMethods ifNil: [ ProtectedMethods := Dictionary new ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1192' ],		#self : OmReference [ '1193' ],		#time : DateAndTime [ '2018-01-14T19:02:30.009798-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltMethodNode class',				#isMetaSide : true			},			#name : #'removeMethodAt:and:',			#protocol : #accessing,			#sourceCode : 'removeMethodAt: aClassName and: aSelector\r\t"Add this method to the register."\r\r\t| key |\r\tkey := Array with: aClassName with: aSelector.\r\tself assert: (self protectedMethods includesKey: key).\r\tself protectedMethods removeKey: key',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1193' ],		#self : OmReference [ '1194' ],		#time : DateAndTime [ '2018-01-14T19:02:30.010787-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMethodNode,				#isMetaSide : false			},			#name : #'accept:notifying:',			#protocol : #actions,			#sourceCode : 'accept: aText notifying: aController\r\t"Compile the method. All accept: methods should return the relevant object created or modified, for tracking by the GUI."\r\r\t"There is something about notifying here."\r\r\t| aSelector |\r\taSelector := self sourceClass compile: aText classified: self parent methodCategory notifying: aController.\r\taSelector isNil\r\t\tifTrue: [ ^ nil ].\r\tself parent rebuildContents.\r\t^ self parent contents detect: [ :each | each selector == aSelector ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1194' ],		#self : OmReference [ '1195' ],		#time : DateAndTime [ '2018-01-14T19:02:30.011754-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMethodNode,				#isMetaSide : false			},			#name : #'acceptDropItem:',			#protocol : #'drag and drop',			#sourceCode : 'acceptDropItem: anItem\r\t"Only valid for an AltMethodNode."\r\r\t^ (anItem isKindOf: self class) and: [ anItem ~= self ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1195' ],		#self : OmReference [ '1196' ],		#time : DateAndTime [ '2018-01-14T19:02:30.012923-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMethodNode,				#isMetaSide : false			},			#name : #'buildTextMenu:on:with:',			#protocol : #querying,			#sourceCode : 'buildTextMenu: aMenu on: aTarget with: aRequestor\r\t"Ok. Two steps: first, create the menu linked with the node. second, parse the method and create menu items linked to the selected node."\r\r\t| ast node |\r\tsuper buildTextMenu: aMenu on: aTarget with: aRequestor.\r\tast := RBParser\r\t\tparseMethod: aTarget text asString\r\t\tonError: [ :msg :pos | ^ self ].\r\tast doSemanticAnalysisIn: self sourceClass.\r\t(node := ast bestNodeFor: aTarget selectionInterval) notNil\r\t\tifFalse: [ ^ self ].\r\taMenu\r\t\taddLine;\r\t\taddLine.\r\tnode altTextCommands\r\t\tdo: [ :c | \r\t\t\t(c asClass on: aTarget for: aRequestor node: node)\r\t\t\t\taddItemToMenu: aMenu ].\r\tnode canSelect\r\t\tifFalse: [ ^ self ].\r\taTarget textMorph paragraph secondarySelection: node textIntervals.\r\taTarget textMorph selectionChanged',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1196' ],		#self : OmReference [ '1197' ],		#time : DateAndTime [ '2018-01-14T19:02:30.014367-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMethodNode,				#isMetaSide : false			},			#name : #compiledMethod,			#protocol : #accessing,			#sourceCode : 'compiledMethod\r\t^ self parent privateClass >> self selector',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1197' ],		#self : OmReference [ '1198' ],		#time : DateAndTime [ '2018-01-14T19:02:30.015298-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMethodNode,				#isMetaSide : false			},			#name : #contents,			#protocol : #accessing,			#sourceCode : 'contents\r\t^ #()',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1198' ],		#self : OmReference [ '1199' ],		#time : DateAndTime [ '2018-01-14T19:02:30.016294-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMethodNode,				#isMetaSide : false			},			#name : #'dropItem:',			#protocol : #'drag and drop',			#sourceCode : 'dropItem: anItem\r\t"Either change a method protocol or copy a method from one class to another."\r\r\tself sourceClass compile: anItem sourceCode classified: self methodCategory notifying: nil.\r\t^ self parent findMethod: anItem selector in: self sourceClass',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1199' ],		#self : OmReference [ '1200' ],		#time : DateAndTime [ '2018-01-14T19:02:30.017185-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMethodNode,				#isMetaSide : false			},			#name : #'findMethod:in:',			#protocol : #querying,			#sourceCode : 'findMethod: anItem in: aClass\r\t^ (self selector == anItem and: [ self sourceClass == aClass ])\r\t\tifTrue: [ self ]\r\t\tifFalse: [ nil ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1200' ],		#self : OmReference [ '1201' ],		#time : DateAndTime [ '2018-01-14T19:02:30.01899-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMethodNode,				#isMetaSide : false			},			#name : #formatCommand,			#protocol : #commands,			#sourceCode : 'formatCommand\r\t<textAreaCommand>\r\t^ #(#AltRBFormatCommand)',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1201' ],		#self : OmReference [ '1202' ],		#time : DateAndTime [ '2018-01-14T19:02:30.020249-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMethodNode,				#isMetaSide : false			},			#name : #icon,			#protocol : #accessing,			#sourceCode : 'icon\r\tself compiledMethod isOverride\r\t\tifTrue: [ \r\t\t\tself compiledMethod isOverridden\r\t\t\t\tifTrue: [ ^ #arrowUpAndDownIcon ].\r\t\t\t^ #arrowUpIcon ].\r\tself compiledMethod isOverridden\r\t\tifTrue: [ ^ #arrowDownIcon ].\r\t^ nil',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1202' ],		#self : OmReference [ '1203' ],		#time : DateAndTime [ '2018-01-14T19:02:30.021328-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMethodNode,				#isMetaSide : false			},			#name : #'isInRBEnvironment:',			#protocol : #querying,			#sourceCode : 'isInRBEnvironment: aRBEnvironment\r\t^ aRBEnvironment includesSelector: self selector in: self sourceClass',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1203' ],		#self : OmReference [ '1204' ],		#time : DateAndTime [ '2018-01-14T19:02:30.022365-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMethodNode,				#isMetaSide : false			},			#name : #isMethodNode,			#protocol : #testing,			#sourceCode : 'isMethodNode\r\t^ true',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1204' ],		#self : OmReference [ '1205' ],		#time : DateAndTime [ '2018-01-14T19:02:30.023334-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMethodNode,				#isMetaSide : false			},			#name : #isProtected,			#protocol : #testing,			#sourceCode : 'isProtected\r\t^ self compiledMethod\r\t\tin: [ :aCompiledMethod | \r\t\t\tself class protectedMethods\r\t\t\t\tincludesKey:\r\t\t\t\t\t(Array\r\t\t\t\t\t\twith: aCompiledMethod methodClass name\r\t\t\t\t\t\twith: aCompiledMethod selector) ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1205' ],		#self : OmReference [ '1206' ],		#time : DateAndTime [ '2018-01-14T19:02:30.024198-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMethodNode,				#isMetaSide : false			},			#name : #isStyled,			#protocol : #testing,			#sourceCode : 'isStyled\r\t^ true',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1206' ],		#self : OmReference [ '1207' ],		#time : DateAndTime [ '2018-01-14T19:02:30.025145-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMethodNode,				#isMetaSide : false			},			#name : #methodCategory,			#protocol : #accessing,			#sourceCode : 'methodCategory\r\t^ self parent methodCategory',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1207' ],		#self : OmReference [ '1208' ],		#time : DateAndTime [ '2018-01-14T19:02:30.026199-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMethodNode,				#isMetaSide : false			},			#name : #navigationCommands,			#protocol : #commands,			#sourceCode : 'navigationCommands\r\t<treeAreaCommand>\r\t^ #(#AltGoToSuperMethodCommand #AltImplementorsOfCommand #AltSendersOfCommand #AltBrowseVersionsCommand)',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1208' ],		#self : OmReference [ '1209' ],		#time : DateAndTime [ '2018-01-14T19:02:30.027174-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMethodNode,				#isMetaSide : false			},			#name : #removeCommand,			#protocol : #commands,			#sourceCode : 'removeCommand\r\t<treeAreaCommand>\r\t^ #(#AltRemoveMethodCommand)',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1209' ],		#self : OmReference [ '1210' ],		#time : DateAndTime [ '2018-01-14T19:02:30.028082-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMethodNode,				#isMetaSide : false			},			#name : #runTestCommand,			#protocol : #commands,			#sourceCode : 'runTestCommand\r\t<treeAreaCommand>\r\t^ #(#AltDebugTestCommand)',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1210' ],		#self : OmReference [ '1211' ],		#time : DateAndTime [ '2018-01-14T19:02:30.029813-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMethodNode,				#isMetaSide : false			},			#name : #selector,			#protocol : #accessing,			#sourceCode : 'selector\r\t^ self item',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1211' ],		#self : OmReference [ '1212' ],		#time : DateAndTime [ '2018-01-14T19:02:30.030801-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMethodNode,				#isMetaSide : false			},			#name : #sourceClass,			#protocol : #querying,			#sourceCode : 'sourceClass\r\t"Get the class through the parent."\r\r\t^ self compiledMethod methodClass',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1212' ],		#self : OmReference [ '1213' ],		#time : DateAndTime [ '2018-01-14T19:02:30.031782-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMethodNode,				#isMetaSide : false			},			#name : #sourceCode,			#protocol : #querying,			#sourceCode : 'sourceCode\r\t"Get the source code through the parent."\r\r\t| aCompiledMethod |\r\taCompiledMethod := self compiledMethod.\r\t^ self class protectedMethods\r\t\tat:\r\t\t\t(Array\r\t\t\t\twith: aCompiledMethod methodClass name\r\t\t\t\twith: aCompiledMethod selector)\r\t\tifAbsent: [ aCompiledMethod sourceCode ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1213' ],		#self : OmReference [ '1214' ],		#time : DateAndTime [ '2018-01-14T19:02:30.032713-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMethodNode,				#isMetaSide : false			},			#name : #sourceComment,			#protocol : #querying,			#sourceCode : 'sourceComment\r\t"Get the comment through the parent."\r\r\t^ self parent sourceComment',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1214' ],		#self : OmReference [ '1215' ],		#time : DateAndTime [ '2018-01-14T19:02:30.033964-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMethodNode,				#isMetaSide : false			},			#name : #title,			#protocol : #accessing,			#sourceCode : 'title\r\t^ self sourceClass name, \'>>#\', self selector',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1215' ],		#self : OmReference [ '1216' ],		#time : DateAndTime [ '2018-01-14T19:02:30.034919-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMethodNode,				#isMetaSide : false			},			#name : #wDebugTreeCommands,			#protocol : #commands,			#sourceCode : 'wDebugTreeCommands\r\t<treeAreaCommand>\r\t^ #(#AltExploreItemCommand #AltRebuildItemCommand #AltInspectMethodASTCommand)',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1216' ],		#self : OmReference [ '1217' ],		#time : DateAndTime [ '2018-01-14T19:02:30.035922-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageLinkNode,				#isMetaSide : false			},			#name : #asString,			#protocol : #printing,			#sourceCode : 'asString\r\t^ self packageName',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1217' ],		#self : OmReference [ '1218' ],		#time : DateAndTime [ '2018-01-14T19:02:30.037155-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageLinkNode,				#isMetaSide : false			},			#name : #icon,			#protocol : #accessing,			#sourceCode : 'icon\r\t^ #smallForwardIcon',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1218' ],		#self : OmReference [ '1219' ],		#time : DateAndTime [ '2018-01-14T19:02:30.038376-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageLinkNode,				#isMetaSide : false			},			#name : #packageName,			#protocol : #accessing,			#sourceCode : 'packageName\r\t^ self item',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1219' ],		#self : OmReference [ '1220' ],		#time : DateAndTime [ '2018-01-14T19:02:30.039362-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageLinkNode,				#isMetaSide : false			},			#name : #'packagesDo:',			#protocol : #querying,			#sourceCode : 'packagesDo: aBlock\r\taBlock value: self rpackage',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1220' ],		#self : OmReference [ '1221' ],		#time : DateAndTime [ '2018-01-14T19:02:30.041117-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageLinkNode,				#isMetaSide : false			},			#name : #rpackage,			#protocol : #accessing,			#sourceCode : 'rpackage\r\t"Possible contextualisation here? I know sub RPackageOrganizers are possible, but I don\'t see the use of it."\r\r\t^ RPackageOrganizer default packageNamed: self packageName',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1221' ],		#self : OmReference [ '1222' ],		#time : DateAndTime [ '2018-01-14T19:02:30.042123-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageLinkNode,				#isMetaSide : false			},			#name : #'selectIn:',			#protocol : #actions,			#sourceCode : 'selectIn: aBrowser\r\t(aBrowser class findPackage: self rpackage)\r\t\tifNotNil:\r\t\t\t[ :aPackage | \r\t\t\taBrowser history previous.\r\t\t\taBrowser selectPathForAbstractItem: aPackage.\r\t\t\t^ true ]\r\t\tifNil: [ ^ false ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1222' ],		#self : OmReference [ '1223' ],		#time : DateAndTime [ '2018-01-14T19:02:30.043473-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageLinkNode,				#isMetaSide : false			},			#name : #title,			#protocol : #accessing,			#sourceCode : 'title\r\t^ \'\'',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1223' ],		#self : OmReference [ '1224' ],		#time : DateAndTime [ '2018-01-14T19:02:30.044579-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltWatchpointNode,				#isMetaSide : false			},			#name : #compiledMethod,			#protocol : #accessing,			#sourceCode : 'compiledMethod\r\t^ item compiledMethod',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1224' ],		#self : OmReference [ '1225' ],		#time : DateAndTime [ '2018-01-14T19:02:30.045672-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltWatchpointNode,				#isMetaSide : false			},			#name : #'doubleClickIn:',			#protocol : #actions,			#sourceCode : 'doubleClickIn: aTreeItemModel\r\t"Action!"\r\r\tWatchpointWindow openOn: self watchpoint',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1225' ],		#self : OmReference [ '1226' ],		#time : DateAndTime [ '2018-01-14T19:02:30.046576-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltWatchpointNode,				#isMetaSide : false			},			#name : #'isInRBEnvironment:',			#protocol : #querying,			#sourceCode : 'isInRBEnvironment: aRBEnvironment\r\t^ aRBEnvironment includesSelector: self selector in: self sourceClass',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1226' ],		#self : OmReference [ '1227' ],		#time : DateAndTime [ '2018-01-14T19:02:30.047527-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltWatchpointNode,				#isMetaSide : false			},			#name : #selector,			#protocol : #accessing,			#sourceCode : 'selector\r\t^ self compiledMethod selector',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1227' ],		#self : OmReference [ '1228' ],		#time : DateAndTime [ '2018-01-14T19:02:30.048423-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltWatchpointNode,				#isMetaSide : false			},			#name : #sourceClass,			#protocol : #querying,			#sourceCode : 'sourceClass\r\t"Get the class through the compiled method."\r\r\t^ self compiledMethod methodClass',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1228' ],		#self : OmReference [ '1229' ],		#time : DateAndTime [ '2018-01-14T19:02:30.049296-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltWatchpointNode,				#isMetaSide : false			},			#name : #sourceCode,			#protocol : #querying,			#sourceCode : 'sourceCode\r\t"Get the source code through the parent."\r\r\t^ self compiledMethod sourceCode',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1229' ],		#self : OmReference [ '1230' ],		#time : DateAndTime [ '2018-01-14T19:02:30.050904-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltWatchpointNode,				#isMetaSide : false			},			#name : #watchpoint,			#protocol : #accessing,			#sourceCode : 'watchpoint\r\t^ item',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1230' ],		#self : OmReference [ '1231' ],		#time : DateAndTime [ '2018-01-14T19:02:30.051925-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltBrowser class',				#isMetaSide : true			},			#name : #'aCategoryAdded:',			#protocol : #updating,			#sourceCode : 'aCategoryAdded: anEvent\r\t"Ok, a class category was added. Search for that category, rebuilt the parent node (should be a package set)."\r\r\tself root aCategoryAdded: anEvent',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1231' ],		#self : OmReference [ '1232' ],		#time : DateAndTime [ '2018-01-14T19:02:30.052926-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltBrowser class',				#isMetaSide : true			},			#name : #'aCategoryRemoved:',			#protocol : #updating,			#sourceCode : 'aCategoryRemoved: anEvent\r\t"Ok, a class category was removed. What has this become with RPackage ?"\r\r\tself root aCategoryRemoved: anEvent',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1232' ],		#self : OmReference [ '1233' ],		#time : DateAndTime [ '2018-01-14T19:02:30.054207-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltBrowser class',				#isMetaSide : true			},			#name : #'aCategoryRenamed:',			#protocol : #updating,			#sourceCode : 'aCategoryRenamed: anEvent\r\t"A system category was renamed. This means a RPackageTag will have been renamed."\r\r\tself root aCategoryRenamed: anEvent',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1233' ],		#self : OmReference [ '1234' ],		#time : DateAndTime [ '2018-01-14T19:02:30.055145-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltBrowser class',				#isMetaSide : true			},			#name : #'aClassAdded:',			#protocol : #updating,			#sourceCode : 'aClassAdded: anEvent\r\t"Ok, a class was added. Find the package it belongs to (or none)."\r\r\tself root aClassAdded: anEvent',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1234' ],		#self : OmReference [ '1235' ],		#time : DateAndTime [ '2018-01-14T19:02:30.056111-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltBrowser class',				#isMetaSide : true			},			#name : #'aClassCommented:',			#protocol : #updating,			#sourceCode : 'aClassCommented: anEvent\r\t"Find the comment node and refresh it (or the class node, should be good enough)."\r\r\t"Refreshing the class node is bad, because then the comment node is recreated and the accept routine looses the focus."\r\r\tself root aClassCommented: anEvent',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1235' ],		#self : OmReference [ '1236' ],		#time : DateAndTime [ '2018-01-14T19:02:30.057157-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltBrowser class',				#isMetaSide : true			},			#name : #'aClassModifiedClassDefinition:',			#protocol : #updating,			#sourceCode : 'aClassModifiedClassDefinition: anEvent\r\t"Take in account this event."\r\r\t[ self root aClassModifiedClassDefinition: anEvent ] forkAt: Processor activeProcess priority - 1.\r\tProcessor yield',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1236' ],		#self : OmReference [ '1237' ],		#time : DateAndTime [ '2018-01-14T19:02:30.058122-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltBrowser class',				#isMetaSide : true			},			#name : #'aClassRecategorized:',			#protocol : #updating,			#sourceCode : 'aClassRecategorized: anEvent\r\t"Ok, a class was repackaged. Update old and new package."\r\r\tself root aClassRecategorized: anEvent',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1237' ],		#self : OmReference [ '1238' ],		#time : DateAndTime [ '2018-01-14T19:02:30.059076-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltBrowser class',				#isMetaSide : true			},			#name : #'aClassRemoved:',			#protocol : #updating,			#sourceCode : 'aClassRemoved: anEvent\r\t"Ok, a class was removed. If this class has extensions, it should be removed from more than one place."\r\r\tself root aClassRemoved: anEvent',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1238' ],		#self : OmReference [ '1239' ],		#time : DateAndTime [ '2018-01-14T19:02:30.060098-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltBrowser class',				#isMetaSide : true			},			#name : #'aClassRenamed:',			#protocol : #updating,			#sourceCode : 'aClassRenamed: anEvent\r\t"Find the class node, and rebuilt the parent? Overall, there is a lack of correct model integration in those structures."\r\r\tself root aClassRenamed: anEvent',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1239' ],		#self : OmReference [ '1240' ],		#time : DateAndTime [ '2018-01-14T19:02:30.061994-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltBrowser class',				#isMetaSide : true			},			#name : #'aClassReorganized:',			#protocol : #updating,			#sourceCode : 'aClassReorganized: anEvent\r\t"Ok, a class was reorganised (a new protocol, for example). It seems I need to rebuilt all nodes on that class. It\'s not so simple than calling the new rebuilt; we also need to remove the old items or add new ones."\r\r\t"Refactor. Moves logic into each node."\r\r\tself root aClassReorganized: anEvent',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1240' ],		#self : OmReference [ '1241' ],		#time : DateAndTime [ '2018-01-14T19:02:30.062977-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltBrowser class',				#isMetaSide : true			},			#name : #'aClassRepackaged:',			#protocol : #updating,			#sourceCode : 'aClassRepackaged: anEvent\r\t"Ok, a class was repackaged. Update old and new package."\r\r\tself root aClassRepackaged: anEvent',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1241' ],		#self : OmReference [ '1242' ],		#time : DateAndTime [ '2018-01-14T19:02:30.063974-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltBrowser class',				#isMetaSide : true			},			#name : #'aMCWorkingCopyCreated:',			#protocol : #updating,			#sourceCode : 'aMCWorkingCopyCreated: anEvent\r\t"Feature needed: when adding a packagewith the same prefix as another, create the appropriate category."\r\r\t(RPackageOrganizer default\r\t\tpackageNamed: anEvent workingCopy packageName\r\t\tifAbsent: [ nil ])\r\t\tifNotNil: [ :rp | (self root findPackage: rp) ifNotNil: [ ^ self ] ].\r\t(self root aMCWorkingCopyCreated: anEvent)\r\t\tifTrue: [ ^ self ].\r\tself root addRPackage: anEvent workingCopy packageName asSymbol.\r\tself aNodeToRebuilt: self root',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1242' ],		#self : OmReference [ '1243' ],		#time : DateAndTime [ '2018-01-14T19:02:30.064916-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltBrowser class',				#isMetaSide : true			},			#name : #'aMCWorkingCopyDeleted:',			#protocol : #updating,			#sourceCode : 'aMCWorkingCopyDeleted: anEvent\r\t"Depending on the MCPackage, this may appear as a package category or as a RPackage."\r\r\t"Note. Before the removal of the package set (and working copy), all packages have disappeared."\r\r\t"Note: we will have to remove from the root items only if the MCWorkingCopy was stored at the top level. This is checked by the double call to aMCWorkingCopyDeleted: which will only answer true if node is the AltPackageSetNode for the MCWorkingCopy."\r\r\tself root aMCWorkingCopyDeleted: anEvent',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1243' ],		#self : OmReference [ '1244' ],		#time : DateAndTime [ '2018-01-14T19:02:30.06583-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltBrowser class',				#isMetaSide : true			},			#name : #'aMCWorkingCopyModified:',			#protocol : #updating,			#sourceCode : 'aMCWorkingCopyModified: anEvent\r\t"Ok, should force a change in look for the relevant object in the trees."\r\r\tself root aMCWorkingCopyModified: anEvent',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1244' ],		#self : OmReference [ '1245' ],		#time : DateAndTime [ '2018-01-14T19:02:30.066725-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltBrowser class',				#isMetaSide : true			},			#name : #'aMetalinkChanged:',			#protocol : #updating,			#sourceCode : 'aMetalinkChanged: anEvent\r\t"Ok, should force a change in look for the relevant object in the trees."\r\r\tself root aMetalinkChanged: anEvent',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1245' ],		#self : OmReference [ '1246' ],		#time : DateAndTime [ '2018-01-14T19:02:30.067693-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltBrowser class',				#isMetaSide : true			},			#name : #'aMethodAdded:',			#protocol : #updating,			#sourceCode : 'aMethodAdded: anEvent\r\t"Ok, a method was added. Trigger some reorganization if it is a specific method of a configuration."\r\r\t| altEvent |\r\taltEvent := AltMethodAdded method: anEvent method.\r\taltEvent\r\t\trpackage:\r\t\t\t(RPackageOrganizer default\r\t\t\t\tpackageForProtocol: anEvent protocol\r\t\t\t\tinClass: anEvent methodClass).\r\tself root aMethodAdded: altEvent',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1246' ],		#self : OmReference [ '1247' ],		#time : DateAndTime [ '2018-01-14T19:02:30.068576-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltBrowser class',				#isMetaSide : true			},			#name : #'aMethodRecategorized:',			#protocol : #updating,			#sourceCode : 'aMethodRecategorized: anEvent\r\t"Ok, a method protocol has changed. Don\'t forget the method may be in multiple places (extensions) but this may be handled by other announcements."\r\r\t"TOCHECK: if a protocol is removed or added because of this event, suppose that the system will send a ClassReorganized event as well."\r\r\t"TODO: if this moves the method into the extensions of a package, it isn\'t seen. Maybe we need to switch the logic to the nodes of the tree and not the top level class to handle multiple targets to update."\r\r\tself root aMethodRecategorized: anEvent',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1247' ],		#self : OmReference [ '1248' ],		#time : DateAndTime [ '2018-01-14T19:02:30.06958-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltBrowser class',				#isMetaSide : true			},			#name : #'aMethodRemoved:',			#protocol : #updating,			#sourceCode : 'aMethodRemoved: anEvent\r\t"Ok, a method was removed. Don\'t forget the method may be in multiple places."\r\r\t"Change this code; search for places where the method is visible (extensions and protocols)."\r\r\t"Bug: when removing a method, the method having already been removed from the system makes the search for the parent fail... :palm:"\r\r\tself root aMethodRemoved: anEvent',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1248' ],		#self : OmReference [ '1249' ],		#time : DateAndTime [ '2018-01-14T19:02:30.071276-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltBrowser class',				#isMetaSide : true			},			#name : #'aNodeAdded:',			#protocol : #updating,			#sourceCode : 'aNodeAdded: r\r\t"Usually a change to the root nodes. Node additions at the lower level are better handled by rebuilding."\r\r\tself announcer ifNotNil: [ :a | a announce: (AltNodeAdded node: r) ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1249' ],		#self : OmReference [ '1250' ],		#time : DateAndTime [ '2018-01-14T19:02:30.072377-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltBrowser class',				#isMetaSide : true			},			#name : #'aNodeRemoved:',			#protocol : #updating,			#sourceCode : 'aNodeRemoved: r\r\t"Usually a change to the root nodes. Node additions at the lower level are better handled by rebuilding."\r\r\tself announcer\r\t\tifNotNil: [ :a | a announce: (AltNodeRemoved node: r) ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1250' ],		#self : OmReference [ '1251' ],		#time : DateAndTime [ '2018-01-14T19:02:30.073308-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltBrowser class',				#isMetaSide : true			},			#name : #'aNodeToRebuilt:',			#protocol : #updating,			#sourceCode : 'aNodeToRebuilt: r\r\t"Ok. The clever updating is done and it works rather nicely. Will help simplify the extensions to IndentingListItemMorph."\r\r\tr isNil\r\t\tifTrue: [ ^ self ].\r\tr rebuildContents.\r\tself announcer\r\t\tifNotNil: [ :a | a announce: (AltNodeRebuilt node: r) ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1251' ],		#self : OmReference [ '1252' ],		#time : DateAndTime [ '2018-01-14T19:02:30.074679-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltBrowser class',				#isMetaSide : true			},			#name : #'aNodeToUpdate:',			#protocol : #updating,			#sourceCode : 'aNodeToUpdate: r\r\t"Update the node without rebuilding it. Good for PackageSet which may change its label based on its contents."\r\r\tr isNil\r\t\tifTrue: [ ^ self ].\r\tself announcer\r\t\tifNotNil: [ :a | a announce: (AltNodeUpdated node: r) ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1252' ],		#self : OmReference [ '1253' ],		#time : DateAndTime [ '2018-01-14T19:02:30.07564-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltBrowser class',				#isMetaSide : true			},			#name : #'aRPackageCreated:',			#protocol : #updating,			#sourceCode : 'aRPackageCreated: anEvent\r\t"Tracing RPackage creation. There should be a package set containing it."\r\r\tself rootItems do: [ :each | each aRPackageCreated: anEvent ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1253' ],		#self : OmReference [ '1254' ],		#time : DateAndTime [ '2018-01-14T19:02:30.076617-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltBrowser class',				#isMetaSide : true			},			#name : #'aRPackageUnregistered:',			#protocol : #updating,			#sourceCode : 'aRPackageUnregistered: anEvent\r\t"Try to notice that RPackage may be unregistered... i.e. removed from the system.\r\tFor now, the system category still exists, but update the tree accordingly."\r\r\t"Ouch, in the event, we keep track of the same event when renaming it, so, if this code is run a bit late, then this will be all wrong because the package in the event will already have the new name instead. It\'s a very nice bug : looking at the event history does not allow one to replay or understand it, because vital past information is lost."\r\r\tself rootItems do: [ :e | e aRPackageUnregistered: anEvent ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1254' ],		#self : OmReference [ '1255' ],		#time : DateAndTime [ '2018-01-14T19:02:30.077847-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltBrowser class',				#isMetaSide : true			},			#name : #aRecentPackagesReset,			#protocol : #updating,			#sourceCode : 'aRecentPackagesReset\r\t"Reset the history of pre-existing packages"\r\r\tself rootItems do: [ :e | e aRecentPackagesReset ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1255' ],		#self : OmReference [ '1256' ],		#time : DateAndTime [ '2018-01-14T19:02:30.078801-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltBrowser class',				#isMetaSide : true			},			#name : #'aWatchpointInstalled:',			#protocol : #updating,			#sourceCode : 'aWatchpointInstalled: anEvent\r\t"Reset the history of pre-existing packages"\r\r\tself rootItems do: [ :e | e aWatchpointInstalled: anEvent ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1256' ],		#self : OmReference [ '1257' ],		#time : DateAndTime [ '2018-01-14T19:02:30.079745-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltBrowser class',				#isMetaSide : true			},			#name : #'aWatchpointUninstalled:',			#protocol : #updating,			#sourceCode : 'aWatchpointUninstalled: anEvent\r\t"Reset the history of pre-existing packages"\r\r\tself rootItems do: [ :e | e aWatchpointUninstalled: anEvent ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1257' ],		#self : OmReference [ '1258' ],		#time : DateAndTime [ '2018-01-14T19:02:30.080694-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltBrowser class',				#isMetaSide : true			},			#name : #allBaselinesAndConfigurations,			#protocol : #private,			#sourceCode : 'allBaselinesAndConfigurations\r\t^ MCWorkingCopy allManagers\r\t\tselect: [ :e | \r\t\t\t(e packageName beginsWith: \'BaselineOf\')\r\t\t\t\tor: [ e packageName beginsWith: \'ConfigurationOf\' ] ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1258' ],		#self : OmReference [ '1259' ],		#time : DateAndTime [ '2018-01-14T19:02:30.082513-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltBrowser class',				#isMetaSide : true			},			#name : #'altBrowserSettingsOn:',			#protocol : #settings,			#sourceCode : 'altBrowserSettingsOn: aBuilder\r\t<systemsettings>\r\t(aBuilder group: #AltBrowser)\r\t\tlabel: #AltBrowser translated;\r\t\tdescription: \'Alt Browser settings\' translated;\r\t\twith: [ \r\t\t\t\t\t(aBuilder nodeClass: AltSettingDeclaration name: #debug)\r\t\t\t\t\t\tlabel: \'Show debug menu items\' translated;\r\t\t\t\t\t\ttarget: self;\r\t\t\t\t\t\tdescription:\r\t\t\t\t\t\t\t\t\'If checked three debug menu items are added to the tree menu to be able to inspect a node of the tree, rebuilt it and, in case of a method, inspect its AST tree.\'\r\t\t\t\t\t\t\t\t\t\ttranslated.\r\t\t\t\t\t(aBuilder nodeClass: AltSettingDeclaration name: #defaultBrowser)\r\t\t\t\t\t\tlabel: \'Set as default browser\' translated;\r\t\t\t\t\t\ttarget: self;\r\t\t\t\t\t\tdescription: \'To work around a settings bug, add this setting with a correct action.\' translated.\r\t\t\t\t\t(aBuilder nodeClass: AltSettingDeclaration name: #categoriesAsSetting)\r\t\t\t\t\t\tlabel: \'Default Categories\' translated;\r\t\t\t\t\t\ttarget: self;\r\t\t\t\t\t\tdescription: \'List the categories tree as customized by the user.\' translated ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1259' ],		#self : OmReference [ '1260' ],		#time : DateAndTime [ '2018-01-14T19:02:30.083539-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltBrowser class',				#isMetaSide : true			},			#name : #announcer,			#protocol : #accessing,			#sourceCode : 'announcer\r\t^ AltAnnouncer',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1260' ],		#self : OmReference [ '1261' ],		#time : DateAndTime [ '2018-01-14T19:02:30.084496-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltBrowser class',				#isMetaSide : true			},			#name : #asCategories,			#protocol : #categories,			#sourceCode : 'asCategories\r\t^ (OrderedCollection\r\t\tstreamContents: [ :stream | self rootItems do: [ :each | each asCategories ifNotNil: [ :cat | stream nextPut: cat ] ] ])\r\t\tasArray',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1261' ],		#self : OmReference [ '1262' ],		#time : DateAndTime [ '2018-01-14T19:02:30.085596-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltBrowser class',				#isMetaSide : true			},			#name : #categories,			#protocol : #categories,			#sourceCode : 'categories\r\tCategories isNil\r\t\tifTrue: [ ^ self defaultPackageCategoriesNames ].\r\t^ Categories',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1262' ],		#self : OmReference [ '1263' ],		#time : DateAndTime [ '2018-01-14T19:02:30.086566-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltBrowser class',				#isMetaSide : true			},			#name : #'categories:',			#protocol : #categories,			#sourceCode : 'categories: aCollection\r\tCategories := aCollection.\r\tself reset',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1263' ],		#self : OmReference [ '1264' ],		#time : DateAndTime [ '2018-01-14T19:02:30.087508-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltBrowser class',				#isMetaSide : true			},			#name : #categoriesAsSetting,			#protocol : #settings,			#sourceCode : 'categoriesAsSetting\r\t^ self categories printString',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1264' ],		#self : OmReference [ '1265' ],		#time : DateAndTime [ '2018-01-14T19:02:30.088475-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltBrowser class',				#isMetaSide : true			},			#name : #'categoriesAsSetting:',			#protocol : #settings,			#sourceCode : 'categoriesAsSetting: aString\r\t"Loading the settings with open browsers force a reset, which isn\'t nice."\r\r\tCategories ifNotNil: [ ^ self ].\r\tself categories: (self compiler evaluate: aString)',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1265' ],		#self : OmReference [ '1266' ],		#time : DateAndTime [ '2018-01-14T19:02:30.089532-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltBrowser class',				#isMetaSide : true			},			#name : #createRootItems,			#protocol : #private,			#sourceCode : 'createRootItems\r\t"Build the organisation out of some classification and collect all remaining packages from the list of MCWorkingCopy in the system."\r\r\t| convertBlock allBandC |\r\tconvertBlock := [ :entry | \r\tentry isArray\r\t\tifFalse: [ entry -> OrderedCollection new ]\r\t\tifTrue: [ entry first\r\t\t\t\t->\r\t\t\t\t\t(entry allButFirst collect: [ :e | convertBlock value: e ])\r\t\t\t\t\t\tasOrderedCollection ] ].\r\tRoot := AltRootNode\r\t\twith:\r\t\t\t#root\r\t\t\t\t->\r\t\t\t\t\t((self categories collect: [ :e | convertBlock value: e ])\r\t\t\t\t\t\t, {RPackage defaultPackageName}) asOrderedCollection.\r\tallBandC := self allBaselinesAndConfigurations.\r\tallBandC\r\t\tdo: [ :e | \r\t\t\tself\r\t\t\t\taMCWorkingCopyCreated:\r\t\t\t\t\t(MCWorkingCopyCreated\r\t\t\t\t\t\tworkingCopy: e\r\t\t\t\t\t\tpackage: (MCPackage named: e packageName)) ].\r\t(MCWorkingCopy allManagers copyWithoutAll: allBandC)\r\t\tdo: [ :e | \r\t\t\tself\r\t\t\t\taMCWorkingCopyCreated:\r\t\t\t\t\t(MCWorkingCopyCreated\r\t\t\t\t\t\tworkingCopy: e\r\t\t\t\t\t\tpackage: (MCPackage named: e packageName)) ].\r\tself aRecentPackagesReset',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1266' ],		#self : OmReference [ '1267' ],		#time : DateAndTime [ '2018-01-14T19:02:30.090471-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltBrowser class',				#isMetaSide : true			},			#name : #debug,			#protocol : #debug,			#sourceCode : 'debug\r\tDebug isNil\r\t\tifTrue: [ Debug := false ].\r\t^ Debug',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1267' ],		#self : OmReference [ '1268' ],		#time : DateAndTime [ '2018-01-14T19:02:30.092122-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltBrowser class',				#isMetaSide : true			},			#name : #'debug:',			#protocol : #debug,			#sourceCode : 'debug: aBoolean\r\tDebug := aBoolean',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1268' ],		#self : OmReference [ '1269' ],		#time : DateAndTime [ '2018-01-14T19:02:30.093249-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltBrowser class',				#isMetaSide : true			},			#name : #defaultBrowser,			#protocol : #settings,			#sourceCode : 'defaultBrowser\r\t^ Smalltalk tools browser == self',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1269' ],		#self : OmReference [ '1270' ],		#time : DateAndTime [ '2018-01-14T19:02:30.094716-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltBrowser class',				#isMetaSide : true			},			#name : #'defaultBrowser:',			#protocol : #settings,			#sourceCode : 'defaultBrowser: aBoolean\r\taBoolean\r\t\tifTrue: [ self registerInAppRegistry ]\r\t\tifFalse: [ \r\t\t\tNautilus registerToolsOn: Smalltalk tools.\r\t\t\tMessageBrowser registerToolsOn: Smalltalk tools ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1270' ],		#self : OmReference [ '1271' ],		#time : DateAndTime [ '2018-01-14T19:02:30.095817-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltBrowser class',				#isMetaSide : true			},			#name : #defaultPackageCategoriesNames,			#protocol : #private,			#sourceCode : 'defaultPackageCategoriesNames\r\t"As it says: categories for packages who don\'t use the - convention. But also the place where we may start organizing nicely the system to have a better structure. Do a initialize and reopen a window of the AltBrowser to see the changes in the opened browsers."\r\r\t"AltBrowser initialize."\r\r\t^ #(#(#PharoBootstrap) #(#Core #Compiler #Reflectivity #Regex) #(#Development #Scripting #PragmaCollector #SLICE) #(#Network) #(#External #FileSystem #System) #BaselineOf #ConfigurationOf #(#Packages #Gofer #Metacello #Monticello #ConfigurationCommandLine))',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1271' ],		#self : OmReference [ '1272' ],		#time : DateAndTime [ '2018-01-14T19:02:30.096805-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltBrowser class',				#isMetaSide : true			},			#name : #'findPackage:',			#protocol : #querying,			#sourceCode : 'findPackage: aName\r\t"Search for a package in the tree."\r\r\tself rootItems do: [ :e | (e findPackage: aName) ifNotNil: [ :item | ^ item ] ].\r\t^ nil',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1272' ],		#self : OmReference [ '1273' ],		#time : DateAndTime [ '2018-01-14T19:02:30.097777-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltBrowser class',				#isMetaSide : true			},			#name : #'findPackageCategory:',			#protocol : #querying,			#sourceCode : 'findPackageCategory: aName\r\t"Search for a package category in the tree."\r\r\tself rootItems do: [ :e | (e findPackageCategory: aName) ifNotNil: [ :item | ^ item ] ].\r\t^ nil',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1273' ],		#self : OmReference [ '1274' ],		#time : DateAndTime [ '2018-01-14T19:02:30.098722-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltBrowser class',				#isMetaSide : true			},			#name : #'fullHierarchyOnClass:selector:',			#protocol : #'instance creation',			#sourceCode : 'fullHierarchyOnClass: aClass selector: aSelector\r\t"Open in hierarchy mode on a class."\r\r\t^ self fullHierarchyOnClass: aClass selector: aSelector in: RBClassEnvironment default',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1274' ],		#self : OmReference [ '1275' ],		#time : DateAndTime [ '2018-01-14T19:02:30.099769-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltBrowser class',				#isMetaSide : true			},			#name : #'fullHierarchyOnClass:selector:in:',			#protocol : #'instance creation',			#sourceCode : 'fullHierarchyOnClass: aClass selector: aSelectorOrNil in: aRBEnvironment\r\t"Open in hierarchy mode on a class."\r\r\t| a s |\r\taSelectorOrNil\r\t\tifNotNil:\r\t\t\t[ \r\t\t\tself rootItems\r\t\t\t\tanySatisfy:\r\t\t\t\t\t[ :each | (s := each findMethod: aSelectorOrNil in: aClass) notNil ] ].\r\ts\r\t\tifNil:\r\t\t\t[ \r\t\t\tself rootItems\r\t\t\t\tanySatisfy: [ :each | (s := each findClass: aClass) notNil ] ].\r\ts ifNil: [ ^ self ].\r\ta := self new.\r\ta\r\t\trbEnvironment:\r\t\t\t(aRBEnvironment\r\t\t\t\tforClasses:\r\t\t\t\t\t{aClass} , aClass allSuperclasses , aClass allSubclasses).\r\t^ a\r\t\topen;\r\t\tselectPathForAbstractItem: s;\r\t\tyourself',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1275' ],		#self : OmReference [ '1276' ],		#time : DateAndTime [ '2018-01-14T19:02:30.100988-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltBrowser class',				#isMetaSide : true			},			#name : #'fullHierarchyOnClass:selector:in:with:',			#protocol : #'instance creation',			#sourceCode : 'fullHierarchyOnClass: aClass selector: aSelectorOrNil in: aRBEnvironment with: expandedItems\r\t"Open in hierarchy mode on a class."\r\r\t| s |\r\taSelectorOrNil\r\t\tifNotNil:\r\t\t\t[ \r\t\t\tself rootItems\r\t\t\t\tanySatisfy:\r\t\t\t\t\t[ :each | (s := each findMethod: aSelectorOrNil in: aClass) notNil ] ].\r\ts\r\t\tifNil:\r\t\t\t[ \r\t\t\tself rootItems\r\t\t\t\tanySatisfy: [ :each | (s := each findClass: aClass) notNil ] ].\r\ts ifNil: [ ^ self ].\r\t^ self\r\t\topenOnEnvironment:\r\t\t\t(aRBEnvironment\r\t\t\t\tforClasses:\r\t\t\t\t\t{aClass} , aClass allSuperclasses , aClass allSubclasses)\r\t\tselect: s\r\t\twith: expandedItems',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1276' ],		#self : OmReference [ '1277' ],		#time : DateAndTime [ '2018-01-14T19:02:30.102165-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltBrowser class',				#isMetaSide : true			},			#name : #'fullOnEnvironment:select:with:',			#protocol : #'instance creation',			#sourceCode : 'fullOnEnvironment: aRBEnvironment select: anItem with: expandedItems\r\t" I am environment aware. Just open the environment. And open all you can from the expanded items."\r\r\t| items |\r\titems := (expandedItems reject: [ :i | i isNil ])\r\t\tcollect: [ :i | i item ].\r\t^ self new\r\t\trbEnvironment: aRBEnvironment;\r\t\tselectPathForAbstractItem: anItem;\r\t\texpandAllSuchThat: [ :item | items includes: item item ];\r\t\topen;\r\t\tyourself',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1277' ],		#self : OmReference [ '1278' ],		#time : DateAndTime [ '2018-01-14T19:02:30.104082-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltBrowser class',				#isMetaSide : true			},			#name : #'fullOnEnvironment:with:',			#protocol : #'instance creation',			#sourceCode : 'fullOnEnvironment: aRBEnvironment with: expandedItems\r\t" I am environment aware. Just open the environment. And open all you can from the expanded items."\r\r\t^ self new\r\t\trbEnvironment: aRBEnvironment;\r\t\topen;\r\t\texpandAllSuchThat: [ :item | expandedItems includes: item ];\r\t\tyourself',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1278' ],		#self : OmReference [ '1279' ],		#time : DateAndTime [ '2018-01-14T19:02:30.105157-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltBrowser class',				#isMetaSide : true			},			#name : #'fullOnMethods:',			#protocol : #'instance creation',			#sourceCode : 'fullOnMethods: aListOfCM\r\t"Given a list of compiled methods, open, and preselect all of them."\r\r\t| selectorEnvironment |\r\tselectorEnvironment := RBSelectorEnvironment new.\r\taListOfCM\r\t\tdo:\r\t\t\t[ :each | selectorEnvironment addClass: each methodClass selector: each selector ].\r\t^ (self openOnEnvironment: selectorEnvironment)\r\t\texpandAllNodes;\r\t\tyourself',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1279' ],		#self : OmReference [ '1280' ],		#time : DateAndTime [ '2018-01-14T19:02:30.10615-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltBrowser class',				#isMetaSide : true			},			#name : #'fullOnPackage:in:',			#protocol : #'instance creation',			#sourceCode : 'fullOnPackage: aPackage in: aRBEnvironment\r\t"Open on a package, and restrict to it."\r\r\t| s  |\r\t(self rootItems\r\t\tanySatisfy: [ :each | (s := each findPackage: aPackage) notNil ])\r\t\tifFalse: [ ^ self open ].\r\tself new\r\t\trbEnvironment: (aRBEnvironment forPackages: {aPackage});\r\t\topen;\r\t\tselectPathForAbstractItem: s;\r\t\tyourself',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1280' ],		#self : OmReference [ '1281' ],		#time : DateAndTime [ '2018-01-14T19:02:30.107171-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltBrowser class',				#isMetaSide : true			},			#name : #initialize,			#protocol : #'class initialization',			#sourceCode : 'initialize\r\tAltAnnouncer := Announcer new.\r\tCategories := nil.\r\tRoot := nil.\r\tRecentPackages := OrderedCollection new.\r\tself registerOnSystemAnnouncements.\r\tself registerInAppRegistry.\r\tself createRootItems',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1281' ],		#self : OmReference [ '1282' ],		#time : DateAndTime [ '2018-01-14T19:02:30.108119-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltBrowser class',				#isMetaSide : true			},			#name : #open,			#protocol : #'instance creation',			#sourceCode : 'open\r\t^ self new open',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1282' ],		#self : OmReference [ '1283' ],		#time : DateAndTime [ '2018-01-14T19:02:30.109109-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltBrowser class',				#isMetaSide : true			},			#name : #'openMessageList:name:autoSelect:',			#protocol : #'instance creation',			#sourceCode : 'openMessageList: messageList name: aString autoSelect: aSelector\r\t" Tool registry compatibility. Disregard the name and consider autoselect as allways true."\r\r\t^ self fullOnMethods: messageList',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1283' ],		#self : OmReference [ '1284' ],		#time : DateAndTime [ '2018-01-14T19:02:30.110147-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltBrowser class',				#isMetaSide : true			},			#name : #'openMessageList:name:autoSelect:refreshingBlockSelector:',			#protocol : #'instance creation',			#sourceCode : 'openMessageList: messageList name: aString autoSelect: aSelector refreshingBlockSelector: ignored\r\t" Tool registry compatibility. Disregard the name and consider autoselect as allways true."\r\r\t^ self fullOnMethods: messageList',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1284' ],		#self : OmReference [ '1285' ],		#time : DateAndTime [ '2018-01-14T19:02:30.111269-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltBrowser class',				#isMetaSide : true			},			#name : #'openOnClass:',			#protocol : #'instance creation',			#sourceCode : 'openOnClass: aClass\r\t"Open on a class."\r\r\t| s |\r\t(self rootItems\r\t\tanySatisfy: [ :each | (s := each findClass: aClass) notNil ])\r\t\tifFalse: [ ^ nil ].\r\t^ self new\r\t\topen;\r\t\tselectPathForAbstractItem: s;\r\t\tyourself',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1285' ],		#self : OmReference [ '1286' ],		#time : DateAndTime [ '2018-01-14T19:02:30.112364-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltBrowser class',				#isMetaSide : true			},			#name : #'openOnClass:in:',			#protocol : #'instance creation',			#sourceCode : 'openOnClass: aClass in: aRBEnvironment\r\t"Open on a class, and restrict to it."\r\r\t| s  |\r\t(self rootItems\r\t\tanySatisfy: [ :each | (s := each findClass: aClass) notNil ])\r\t\tifFalse: [ ^ self ].\r\tself new\r\t\trbEnvironment: (aRBEnvironment forClasses: {aClass});\r\t\topen;\r\t\tselectPathForAbstractItem: s;\r\t\tyourself',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1286' ],		#self : OmReference [ '1287' ],		#time : DateAndTime [ '2018-01-14T19:02:30.114155-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltBrowser class',				#isMetaSide : true			},			#name : #'openOnClass:selector:',			#protocol : #'instance creation',			#sourceCode : 'openOnClass: aClass selector: aSelector\r\t"Open on a class."\r\r\t| s  |\r\taSelector isNil\r\t\tifTrue: [ ^ self openOnClass: aClass ].\r\tself rootItems\r\t\tanySatisfy:\r\t\t\t[ :each | (s := each findMethod: aSelector in: aClass) notNil ].\r\tself new\r\t\topen;\r\t\tselectPathForAbstractItem: s;\r\t\tyourself',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1287' ],		#self : OmReference [ '1288' ],		#time : DateAndTime [ '2018-01-14T19:02:30.115857-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltBrowser class',				#isMetaSide : true			},			#name : #'openOnClass:selector:highlight:',			#protocol : #'instance creation',			#sourceCode : 'openOnClass: aClass selector: aSelector highlight: autoSelectString\r\t"Open on a class."\r\r\t| s a |\r\taSelector isNil\r\t\tifTrue: [ ^ self openOnClass: aClass ].\r\t(self rootItems\r\t\tanySatisfy:\r\t\t\t[ :each | (s := each findMethod: aSelector in: aClass) notNil ])\r\t\tifFalse: [ ^ self openOnClass: aClass ].\r\ta := self open.\r\ta selectPathForAbstractItem: s.\r\t^ a',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1288' ],		#self : OmReference [ '1289' ],		#time : DateAndTime [ '2018-01-14T19:02:30.116958-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltBrowser class',				#isMetaSide : true			},			#name : #'openOnEnvironment:',			#protocol : #'instance creation',			#sourceCode : 'openOnEnvironment: aRBEnvironment\r\t" I am environment aware. Just open the environment."\r\r\t^ self new\r\t\trbEnvironment: aRBEnvironment;\r\t\topen;\r\t\tyourself',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1289' ],		#self : OmReference [ '1290' ],		#time : DateAndTime [ '2018-01-14T19:02:30.117984-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltBrowser class',				#isMetaSide : true			},			#name : #'openOnEnvironment:select:with:',			#protocol : #'instance creation',			#sourceCode : 'openOnEnvironment: aRBEnvironment select: anItem with: expandedItems\r\t" I am environment aware. Just open the environment. And open all you can from the expanded items."\r\r\t| items |\r\titems := (expandedItems reject: [ :i | i isNil ]) collect: [ :i | i item ].\r\t^ self new\r\t\trbEnvironment: aRBEnvironment;\r\t\topen;\r\t\tselectPathForAbstractItem: anItem;\r\t\texpandAllSuchThat: [ :item | items includes: item item ];\r\t\tyourself',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1290' ],		#self : OmReference [ '1291' ],		#time : DateAndTime [ '2018-01-14T19:02:30.118966-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltBrowser class',				#isMetaSide : true			},			#name : #recentPackages,			#protocol : #accessing,			#sourceCode : 'recentPackages\r\t^ RecentPackages ifNil: [ RecentPackages := OrderedCollection new ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1291' ],		#self : OmReference [ '1292' ],		#time : DateAndTime [ '2018-01-14T19:02:30.119962-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltBrowser class',				#isMetaSide : true			},			#name : #registerInAppRegistry,			#protocol : #'class initialization',			#sourceCode : 'registerInAppRegistry\r\t"Register the receiver in the SystemBrowser AppRegistry"\r\r\tSmalltalk tools register: self as: #browser',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1292' ],		#self : OmReference [ '1293' ],		#time : DateAndTime [ '2018-01-14T19:02:30.121059-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltBrowser class',				#isMetaSide : true			},			#name : #registerOnSystemAnnouncements,			#protocol : #'class initialization',			#sourceCode : 'registerOnSystemAnnouncements\r\t"Global registration to update the list."\r\r\t"self registerOnSystemAnnouncements."\r\r\t"I do need to track system categories. RPackageTag is a bit erratic, yet. Not tracking ProtocolRemoved and ProtocolAdded."\r\r\tSystemAnnouncer uniqueInstance unsubscribe: self.\r\tSystemAnnouncer uniqueInstance\r\t\twhen: MCWorkingCopyCreated send: #aMCWorkingCopyCreated: to: self;\r\t\twhen: MCWorkingCopyDeleted send: #aMCWorkingCopyDeleted: to: self;\r\t\twhen: MCPackageModified send: #aMCWorkingCopyModified: to: self;\r\t\twhen: CategoryAdded send: #aCategoryAdded: to: self;\r\t\twhen: CategoryRemoved send: #aCategoryRemoved: to: self;\r\t\twhen: CategoryRenamed send: #aCategoryRenamed: to: self;\r\t\twhen: MethodAdded send: #aMethodAdded: to: self;\r\t\twhen: MethodRemoved send: #aMethodRemoved: to: self;\r\t\twhen: MethodRecategorized send: #aMethodRecategorized: to: self;\r\t\twhen: ClassAdded send: #aClassAdded: to: self;\r\t\twhen: ClassRemoved send: #aClassRemoved: to: self;\r\t\twhen: ClassReorganized send: #aClassReorganized: to: self;\r\t\twhen: ClassCommented send: #aClassCommented: to: self;\r\t\twhen: ClassRenamed send: #aClassRenamed: to: self;\r\t\twhen: ClassRepackaged send: #aClassRepackaged: to: self;\r\t\twhen: ClassRecategorized send: #aClassRecategorized: to: self;\r\t\twhen: ClassModifiedClassDefinition send: #aClassModifiedClassDefinition: to: self;\r\t\twhen: MetalinkChanged send: #aMetalinkChanged: to: self.\r\tRPackage organizer announcer unsubscribe: self.\r\tRPackage organizer announcer\r\t\twhen: RPackageUnregistered send: #aRPackageUnregistered: to: self;\r\t\twhen: RPackageRegistered send: #aRPackageCreated: to: self',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1293' ],		#self : OmReference [ '1294' ],		#time : DateAndTime [ '2018-01-14T19:02:30.122096-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltBrowser class',				#isMetaSide : true			},			#name : #reset,			#protocol : #accessing,			#sourceCode : 'reset\r\t"reset the rootItems. Should propagate to all instances as well."\r\r\t"AltBrowser reset"\r\r\tRoot := nil.\r\tself announcer announce: AltRootsReset new',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1294' ],		#self : OmReference [ '1295' ],		#time : DateAndTime [ '2018-01-14T19:02:30.123064-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltBrowser class',				#isMetaSide : true			},			#name : #root,			#protocol : #accessing,			#sourceCode : 'root\r\tRoot ifNil: [ self createRootItems ].\r\t^ Root',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1295' ],		#self : OmReference [ '1296' ],		#time : DateAndTime [ '2018-01-14T19:02:30.124048-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltBrowser class',				#isMetaSide : true			},			#name : #rootItems,			#protocol : #accessing,			#sourceCode : 'rootItems\r\t^ self root contents',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1296' ],		#self : OmReference [ '1297' ],		#time : DateAndTime [ '2018-01-14T19:02:30.126073-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltBrowser class',				#isMetaSide : true			},			#name : #taskbarIcon,			#protocol : #'user interface',			#sourceCode : 'taskbarIcon\r\t^ Smalltalk ui icons smallSystemBrowserIcon',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1297' ],		#self : OmReference [ '1298' ],		#time : DateAndTime [ '2018-01-14T19:02:30.127034-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltBrowser class',				#isMetaSide : true			},			#name : #temporary,			#protocol : #accessing,			#sourceCode : 'temporary\r\t^ Temporary ',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1298' ],		#self : OmReference [ '1299' ],		#time : DateAndTime [ '2018-01-14T19:02:30.128056-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltBrowser class',				#isMetaSide : true			},			#name : #'temporary:',			#protocol : #accessing,			#sourceCode : 'temporary: aValue\r\tTemporary := aValue',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1299' ],		#self : OmReference [ '1300' ],		#time : DateAndTime [ '2018-01-14T19:02:30.129176-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltBrowser class',				#isMetaSide : true			},			#name : #updateCategories,			#protocol : #categories,			#sourceCode : 'updateCategories\r\t"We suppose the caller will update things properly."\r\r\tCategories := self asCategories',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1300' ],		#self : OmReference [ '1301' ],		#time : DateAndTime [ '2018-01-14T19:02:30.130182-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltBrowser,				#isMetaSide : false			},			#name : #'aMethodUpdated:',			#protocol : #updating,			#sourceCode : 'aMethodUpdated: anEvent\r\t"A method has changed. Check if this is the one we are selecting; if yes, update it."\r\r\t| sItem |\r\tself selectedItem isNil\r\t\tifTrue: [ ^ self ].\r\tsItem := self selectedItem.\r\tsItem isMethodNode\r\t\tifFalse: [ ^ self ].\r\t(sItem sourceClass == anEvent methodClass and: [ sItem selector == anEvent oldMethod selector ])\r\t\tifTrue: [ source contents: self selectedItem sourceCode ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1301' ],		#self : OmReference [ '1302' ],		#time : DateAndTime [ '2018-01-14T19:02:30.131202-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltBrowser,				#isMetaSide : false			},			#name : #'aNodeAdded:',			#protocol : #updating,			#sourceCode : 'aNodeAdded: anEvent\r\t"If a node is added, then what we need is to rebuild its parent."\r\r\t| found |\r\t(self root\r\t\tanySatisfy:\r\t\t\t[ :each | \r\t\t\teach item = anEvent node parent\r\t\t\t\tifTrue: [ found := each.\r\t\t\t\t\ttrue ]\r\t\t\t\tifFalse: [ false ] ])\r\t\tifTrue: [ found rebuildContents.\r\t\t\troot changed ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1302' ],		#self : OmReference [ '1303' ],		#time : DateAndTime [ '2018-01-14T19:02:30.132118-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltBrowser,				#isMetaSide : false			},			#name : #'aNodeRebuilt:',			#protocol : #updating,			#sourceCode : 'aNodeRebuilt: anEvent\r\t"Similar to others. Search for the node, force a rebuild of the node. Note that if the parent node is nil, this is a root change."\r\r\t(self root findItem: anEvent node)\r\t\tifNotNil: [ :found | \r\t\t\tfound rebuildContents.\r\t\t\troot changed ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1303' ],		#self : OmReference [ '1304' ],		#time : DateAndTime [ '2018-01-14T19:02:30.133173-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltBrowser,				#isMetaSide : false			},			#name : #'aNodeRemoved:',			#protocol : #updating,			#sourceCode : 'aNodeRemoved: anEvent\r\t"If a node is removed, then what we need is to rebuild its parent."\r\r\t| found |\r\t(self root\r\t\tanySatisfy:\r\t\t\t[ :each | \r\t\t\teach item = anEvent node parent\r\t\t\t\tifTrue: [ found := each.\r\t\t\t\t\ttrue ]\r\t\t\t\tifFalse: [ false ] ])\r\t\tifTrue: [ found rebuildContents.\r\t\t\troot changed ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1304' ],		#self : OmReference [ '1305' ],		#time : DateAndTime [ '2018-01-14T19:02:30.134165-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltBrowser,				#isMetaSide : false			},			#name : #'aNodeUpdated:',			#protocol : #updating,			#sourceCode : 'aNodeUpdated: anEvent\r\t"Don\'t forget to update the title and the contents if appropriate."\r\r\t| sItem |\r\tself selectedNode\r\t\tifNotNil:\r\t\t\t[ :sNode | \r\t\t\tsItem := sNode item.\r\t\t\tanEvent node == sItem\r\t\t\t\tifTrue: [ self updateTitle.\r\t\t\t\t\tsource contents: sNode sourceCode ] ].\r\tself root changed',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1305' ],		#self : OmReference [ '1306' ],		#time : DateAndTime [ '2018-01-14T19:02:30.136356-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltBrowser,				#isMetaSide : false			},			#name : #aRootsChanged,			#protocol : #updating,			#sourceCode : 'aRootsChanged\r\t"C\'est vraiment bourrin, mais ça marche, tout en perdant la selection cependant."\r\r\tself root rebuildContents.\r\tself root changed',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1306' ],		#self : OmReference [ '1307' ],		#time : DateAndTime [ '2018-01-14T19:02:30.13744-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltBrowser,				#isMetaSide : false			},			#name : #'addModelItemsToWindowMenu:',			#protocol : #'user interface',			#sourceCode : 'addModelItemsToWindowMenu: aMenu\r\taMenu addLine.\r\taMenu add: \'Reset\' translated target: self class selector: #reset.\r\taMenu add: \'Initialize\' translated target: self class selector: #initialize',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1307' ],		#self : OmReference [ '1308' ],		#time : DateAndTime [ '2018-01-14T19:02:30.138445-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltBrowser,				#isMetaSide : false			},			#name : #browseFinderResults,			#protocol : #'user actions',			#sourceCode : 'browseFinderResults\r\t"The finder interface has given us a result. Open a browser on it."\r\r\t| environment |\r\tself assert: finder notNil.\r\tfinder resultDictionary ifEmpty: [ ^ self ].\r\tenvironment := RBSelectorEnvironment onEnvironment: self rbEnvironment.\r\tfinder resultDictionary\r\t\tkeysAndValuesDo: [ :aSelector :classes | \r\t\t\tclasses isDictionary\r\t\t\t\tifTrue: [ \r\t\t\t\t\tclasses\r\t\t\t\t\t\tkeysAndValuesDo: [ :aSelector2 :classes2 | classes2 do: [ :aClass | environment addClass: aClass selector: aSelector2 ] ] ]\r\t\t\t\tifFalse: [ classes do: [ :aClass | environment addClass: aClass selector: aSelector ] ] ].\r\t(self class openOnEnvironment: environment) expandAllNodes',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1308' ],		#self : OmReference [ '1309' ],		#time : DateAndTime [ '2018-01-14T19:02:30.139384-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltBrowser,				#isMetaSide : false			},			#name : #'buildTextMenu:',			#protocol : #menus,			#sourceCode : 'buildTextMenu: aMenu\r\tself selectedItem notNil\r\t\tifTrue: [ self selectedItem buildTextMenu: aMenu on: textMorph with: self ].\r\t^ aMenu',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1309' ],		#self : OmReference [ '1310' ],		#time : DateAndTime [ '2018-01-14T19:02:30.14044-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltBrowser,				#isMetaSide : false			},			#name : #'buildTreeMenu:',			#protocol : #menus,			#sourceCode : 'buildTreeMenu: aMenu\r\t"Ask the selection for builidng a menu, otherwise create a default one."\r\r\tself selectedItem notNil\r\t\tifTrue:\r\t\t\t[ self selectedItem buildTreeMenu: aMenu on: self treeMorph with: self ]\r\t\tifFalse: [ | t |\r\t\t\tt := false.\r\t\t\t(Pragma allNamed: #treeAreaCommand from: self class to: self class)\r\t\t\t\tdo: [ :e | \r\t\t\t\t\tt\r\t\t\t\t\t\tifTrue: [ aMenu addLine ]\r\t\t\t\t\t\tifFalse: [ t := true ].\r\t\t\t\t\t(self perform: e methodSelector)\r\t\t\t\t\t\tdo: [ :c | (c asClass on: self treeMorph for: self) addItemToMenu: aMenu ] ] ].\r\t^ aMenu',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1310' ],		#self : OmReference [ '1311' ],		#time : DateAndTime [ '2018-01-14T19:02:30.141525-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltBrowser,				#isMetaSide : false			},			#name : #canDiscardEdits,			#protocol : #'user interface',			#sourceCode : 'canDiscardEdits\r\t"Link to textMorph for change."\r\t\r\t^ textMorph hasUnacceptedEdits not',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1311' ],		#self : OmReference [ '1312' ],		#time : DateAndTime [ '2018-01-14T19:02:30.14253-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltBrowser,				#isMetaSide : false			},			#name : #close,			#protocol : #'user interface',			#sourceCode : 'close\r\twindow ifNotNil: [ window close ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1312' ],		#self : OmReference [ '1313' ],		#time : DateAndTime [ '2018-01-14T19:02:30.143469-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltBrowser,				#isMetaSide : false			},			#name : #defaultCommands,			#protocol : #menus,			#sourceCode : 'defaultCommands\r\t<treeAreaCommand>\r\t^ #(#AltCreatePackageCategoryCommand #AltFindClassCommand #AltSelectNextItem #AltSelectPreviousItem #AltSelectMoveDown #AltSelectMoveUp #AltFinderCommand #AltFinderOffCommand)',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1313' ],		#self : OmReference [ '1314' ],		#time : DateAndTime [ '2018-01-14T19:02:30.144372-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltBrowser,				#isMetaSide : false			},			#name : #delete,			#protocol : #initialize-release,			#sourceCode : 'delete\r\tself release',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1314' ],		#self : OmReference [ '1315' ],		#time : DateAndTime [ '2018-01-14T19:02:30.145557-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltBrowser,				#isMetaSide : false			},			#name : #expandAllNodes,			#protocol : #'user interface',			#sourceCode : 'expandAllNodes\r\tself expandAllSuchThat: [ :e | true ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1315' ],		#self : OmReference [ '1316' ],		#time : DateAndTime [ '2018-01-14T19:02:30.147671-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltBrowser,				#isMetaSide : false			},			#name : #'expandAllSuchThat:',			#protocol : #'user interface',			#sourceCode : 'expandAllSuchThat: aBlock\r\tself root\r\t\tanySatisfy:\r\t\t\t[ :each | \r\t\t\t(aBlock value: each)\r\t\t\t\tifTrue: [ each expand ].\r\t\t\tfalse ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1316' ],		#self : OmReference [ '1317' ],		#time : DateAndTime [ '2018-01-14T19:02:30.148634-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltBrowser,				#isMetaSide : false			},			#name : #finder,			#protocol : #accessing,			#sourceCode : 'finder\r\t^ finder',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1317' ],		#self : OmReference [ '1318' ],		#time : DateAndTime [ '2018-01-14T19:02:30.149654-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltBrowser,				#isMetaSide : false			},			#name : #hasComment,			#protocol : #'user interface',			#sourceCode : 'hasComment\r\t^ commentMorph notNil',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1318' ],		#self : OmReference [ '1319' ],		#time : DateAndTime [ '2018-01-14T19:02:30.150602-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltBrowser,				#isMetaSide : false			},			#name : #hasFinder,			#protocol : #'user interface',			#sourceCode : 'hasFinder\r\t^ finder notNil',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1319' ],		#self : OmReference [ '1320' ],		#time : DateAndTime [ '2018-01-14T19:02:30.151561-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltBrowser,				#isMetaSide : false			},			#name : #history,			#protocol : #accessing,			#sourceCode : 'history\r\thistory isNil\r\t\tifTrue: [ \r\t\t\thistory := NavigationHistory new.\r\t\t\thistory maxSize: 50 ].\r\t^ history',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1320' ],		#self : OmReference [ '1321' ],		#time : DateAndTime [ '2018-01-14T19:02:30.152834-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltBrowser,				#isMetaSide : false			},			#name : #open,			#protocol : #'user interface',			#sourceCode : 'open\r\t"Open the window, as simple as that."\r\r\t| pane group |\r\tpane := PanelMorph new\r\t\thResizing: #spaceFill;\r\t\tvResizing: #spaceFill;\r\t\tfillStyle: Color transparent;\r\t\tchangeTableLayout;\r\t\tcellInset: 3 @ 3;\r\t\tcellPositioning: #leftCenter;\r\t\tyourself.\t"non pane color tracking"\r\tgroup := Morph new\r\t\thResizing: #spaceFill;\r\t\tvResizing: #spaceFill;\r\t\tfillStyle: Color transparent;\r\t\tchangeProportionalLayout;\r\t\tyourself.\t"non pane color tracking"\r\twindow := Smalltalk ui theme\r\t\tnewWindowIn: World\r\t\tfor: self\r\t\ttitle: self title.\r\twindow addMorph: pane frame: (0 @ 0 corner: 1 @ 1).\r\tself treeMorph\r\t\ton: #keyStroke\r\t\tsend: #startSearch:for:\r\t\tto: AltKeyboardSearchInTree.\r\tpane addMorph: group.\r\tgroup\r\t\taddMorph: self treeMorph\r\t\tfullFrame:\r\t\t\t(AltLayoutFrame\r\t\t\t\tfractions: (0.0 @ 0.0 corner: 0.3 @ 1.0)\r\t\t\t\ttopLeftOffsets: 1 @ 0\r\t\t\t\tbottomRightOffsets: -1 @ 0).\r\tgroup\r\t\taddMorph: self textMorph\r\t\tfullFrame:\r\t\t\t(AltLayoutFrame\r\t\t\t\tfractions: (0.3 @ 0.0 corner: 1 @ 1)\r\t\t\t\ttopLeftOffsets: 1 @ 0\r\t\t\t\tbottomRightOffsets: -1 @ 0).\r\tgroup\r\t\taddMorph:\r\t\t\t(ProportionalSplitterMorph new\r\t\t\t\tlayoutFrame:\r\t\t\t\t\t(AltLayoutFrame\r\t\t\t\t\t\tfractions: (0.3 @ 0.0 corner: 0.3 @ 1.0)\r\t\t\t\t\t\ttopLeftOffsets: -1 @ 0\r\t\t\t\t\t\tbottomRightOffsets: 1 @ 0);\r\t\t\t\taddLeftOrTop: self treeMorph;\r\t\t\t\taddRightOrBottom: self textMorph).\r\twindow minimumExtent: 500 @ 500.\r\twindow announcer when: WindowClosed send: #release to: self.\r\twindow open.\r\tself\r\t\tupdateTreeKeymap;\r\t\tupdateTextKeymap.\r\tself treeMorph takeKeyboardFocus.\r\tself registerToAnnouncements',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1321' ],		#self : OmReference [ '1322' ],		#time : DateAndTime [ '2018-01-14T19:02:30.153893-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltBrowser,				#isMetaSide : false			},			#name : #'openPathForAbstractItem:',			#protocol : #accessing,			#sourceCode : 'openPathForAbstractItem: anItem\r\t"Open the path for this item, but do not select it at the end."\r\r\t| nPath aNode anItemModel |\r\tnPath := OrderedCollection new.\r\taNode := anItem.\r\t[ aNode notNil ]\r\t\twhileTrue: [ nPath addFirst: aNode.\r\t\t\taNode := aNode parent ].\r\tanItemModel := self root.\r\tnPath isEmpty\r\t\tifTrue: [ ^ self ].\r\tnPath removeFirst.\r\t[ nPath notEmpty ]\r\t\twhileTrue: [ | next |\r\t\t\tnext := nPath removeFirst.\r\t\t\tanItemModel := anItemModel contents\r\t\t\t\tdetect: [ :i | i item == next ]\r\t\t\t\tifNone: [ anItemModel ].\t"Do not iterate if not found: filtering."\r\t\t\tanItemModel expand ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1322' ],		#self : OmReference [ '1323' ],		#time : DateAndTime [ '2018-01-14T19:02:30.155042-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltBrowser,				#isMetaSide : false			},			#name : #rbEnvironment,			#protocol : #accessing,			#sourceCode : 'rbEnvironment\r\t^ rbEnvironment\r\t\tifNil: [ rbEnvironment := RBBrowserEnvironment new ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1323' ],		#self : OmReference [ '1324' ],		#time : DateAndTime [ '2018-01-14T19:02:30.156459-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltBrowser,				#isMetaSide : false			},			#name : #'rbEnvironment:',			#protocol : #accessing,			#sourceCode : 'rbEnvironment: aRBBrowserEnvironment\r\t"Beware: if the browser is already open, shown items won\'t be updated with the new environment."\r\r\trbEnvironment := aRBBrowserEnvironment',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1324' ],		#self : OmReference [ '1325' ],		#time : DateAndTime [ '2018-01-14T19:02:30.15853-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltBrowser,				#isMetaSide : false			},			#name : #registerToAnnouncements,			#protocol : #initialize-release,			#sourceCode : 'registerToAnnouncements\r\t"Link to the AltBrowser class for most updates. But only do that once we are opened."\r\r\t"Simple, reset everything update."\r\r\tself class announcer when: AltRootsReset send: #aRootsChanged to: self.\r\t\t"Complete, complex and more efficient update handling."\r\tself class announcer when: AltNodeRebuilt send: #aNodeRebuilt: to: self.\r\tself class announcer when: AltNodeRemoved send: #aNodeRemoved: to: self.\r\tself class announcer when: AltNodeAdded send: #aNodeAdded: to: self.\r\tself class announcer when: AltNodeUpdated send: #aNodeUpdated: to: self.\r\t\t"Track changes on the method or class definition we are editing."\r\tSystemAnnouncer uniqueInstance when: MethodModified send: #aMethodUpdated: to: self',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1325' ],		#self : OmReference [ '1326' ],		#time : DateAndTime [ '2018-01-14T19:02:30.159679-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltBrowser,				#isMetaSide : false			},			#name : #release,			#protocol : #initialize-release,			#sourceCode : 'release\r\t"Very strange release sequence with the EditorFindReplaceDialogWindow initialize."\r\r\tself class announcer unsubscribe: self.\r\tSystemAnnouncer uniqueInstance unsubscribe: self.\r\troot ifNotNil: [ root announcer unsubscribe: self ].\r\twindow ifNotNil: [ window announcer unsubscribe: self ].\r\ttreeMorph ifNotNil: [ treeMorph release ].\r\tEditorFindReplaceDialogWindow initialize.\r\tself class announcer unsubscribe: self.\r\tsuper release',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1326' ],		#self : OmReference [ '1327' ],		#time : DateAndTime [ '2018-01-14T19:02:30.16068-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltBrowser,				#isMetaSide : false			},			#name : #root,			#protocol : #accessing,			#sourceCode : 'root\r\t"Get the root item of the tree. Is invisible in the view."\r\r\t^ root\r\t\tifNil: [ root := (AltCodeItemRootModel on: self class root)\r\t\t\t\tmodel: self;\r\t\t\t\trbEnvironment: self rbEnvironment;\r\t\t\t\tyourself.\r\t\t\troot announcer\r\t\t\t\twhen: AltSelectionChanged send: #updateSelection to: self;\r\t\t\t\twhen: AltListChanged send: #updateSelection to: self.\r\t\t\troot ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1327' ],		#self : OmReference [ '1328' ],		#time : DateAndTime [ '2018-01-14T19:02:30.161621-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltBrowser,				#isMetaSide : false			},			#name : #'selectPathForAbstractItem:',			#protocol : #accessing,			#sourceCode : 'selectPathForAbstractItem: anItem\r\t"Stronger than the item version, will force an opening of the AltTreeItemNodes."\r\r\tself openPathForAbstractItem: anItem.\r\t^ (self root findItem: anItem)\r\t\tifNotNil: [ :m | \r\t\t\tm select.\r\t\t\ttrue ]\r\t\tifNil: [ false ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1328' ],		#self : OmReference [ '1329' ],		#time : DateAndTime [ '2018-01-14T19:02:30.162786-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltBrowser,				#isMetaSide : false			},			#name : #selectedItem,			#protocol : #accessing,			#sourceCode : 'selectedItem\r\t"Return the currently selected item."\r\r\t^ selection ifNotNil: [ selection item ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1329' ],		#self : OmReference [ '1330' ],		#time : DateAndTime [ '2018-01-14T19:02:30.163732-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltBrowser,				#isMetaSide : false			},			#name : #selectedNode,			#protocol : #accessing,			#sourceCode : 'selectedNode\r\t"Return the currently selected item."\r\r\t^ selection',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1330' ],		#self : OmReference [ '1331' ],		#time : DateAndTime [ '2018-01-14T19:02:30.164669-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltBrowser,				#isMetaSide : false			},			#name : #source,			#protocol : #accessing,			#sourceCode : 'source\r\t^ source isNil\r\t\tifTrue: [ \r\t\t\tsource := AltBrowserCodeModel new.\r\t\t\tsource browser: self ]\r\t\tifFalse: [ source ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1331' ],		#self : OmReference [ '1332' ],		#time : DateAndTime [ '2018-01-14T19:02:30.165741-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltBrowser,				#isMetaSide : false			},			#name : #'spawnHierarchyForClass:selector:',			#protocol : #'user interface',			#sourceCode : 'spawnHierarchyForClass: aClass selector: aSelectorOrNil\r\t"Handle hierarchy browsing on a class and a selector or nil. Why, on earth are we reaching that at the instance level? Discard the current instance we are in when receiving that message, anyway, initialisation is only done when reaching open."\r\r\t^ self class fullHierarchyOnClass: aClass selector: aSelectorOrNil',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1332' ],		#self : OmReference [ '1333' ],		#time : DateAndTime [ '2018-01-14T19:02:30.166684-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltBrowser,				#isMetaSide : false			},			#name : #taskbarIcon,			#protocol : #accessing,			#sourceCode : 'taskbarIcon\r\t^ Smalltalk ui icons smallSystemBrowserIcon',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1333' ],		#self : OmReference [ '1334' ],		#time : DateAndTime [ '2018-01-14T19:02:30.168634-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltBrowser,				#isMetaSide : false			},			#name : #textMorph,			#protocol : #view,			#sourceCode : 'textMorph\r\t^ textMorph\r\t\tifNil: [ PluggableTextMorph stylingClass isNil\r\t\t\t\tifTrue: [ PluggableTextMorph stylingClass: SHTextStylerST80 ].\r\t\t\ttextMorph := (AltPluggableTextMorph\r\t\t\t\ton: self source\r\t\t\t\ttext: #contents\r\t\t\t\taccept: #contents:\r\t\t\t\treadSelection: nil\r\t\t\t\tmenu: #buildTextMenu:)\r\t\t\t\tfont: StandardFonts codeFont;\r\t\t\t\thResizing: #spaceFill;\r\t\t\t\tvResizing: #spaceFill;\r\t\t\t\tyourself ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1334' ],		#self : OmReference [ '1335' ],		#time : DateAndTime [ '2018-01-14T19:02:30.169764-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltBrowser,				#isMetaSide : false			},			#name : #title,			#protocol : #accessing,			#sourceCode : 'title\r\tself selectedItem notNil\r\t\tifTrue:\r\t\t\t[ ^ \'Alt (\' , self rbEnvironment label , \'): \'\r\t\t\t\t, self selectedItem title ]\r\t\tifFalse: [ ^ \'Alt (\' , self rbEnvironment label , \')\' ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1335' ],		#self : OmReference [ '1336' ],		#time : DateAndTime [ '2018-01-14T19:02:30.170939-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltBrowser,				#isMetaSide : false			},			#name : #toggleFinder,			#protocol : #'user interface',			#sourceCode : 'toggleFinder\r\t"Should use a sligthly better approach to make space for the toolbar, really."\r\r\t"Ugly: not all elements of the finder toolbar have the same height?"\r\r\tfinder isNil\r\t\tifTrue: [ \r\t\t\tfinder := Finder new.\r\t\t\tfinder when: #updateResultDictionary send: #browseFinderResults to: self.\r\t\t\tfinderUI := FinderUI on: finder.\r\t\t\ttoolbar := window\r\t\t\t\tnewToolbar:\r\t\t\t\t\t{(finderUI buildSearchingTextArea).\r\t\t\t\t\t(finderUI buildSearchButton).\r\t\t\t\t\t(finderUI buildRegExChooser).\r\t\t\t\t\t(finderUI buildSearchModeDropListIn: window)}.\r\t\t\ttoolbar hResizing: #spaceFill.\r\t\t\ttoolbar bindKeyCombination: Character escape asKeyCombination toAction: [ self toggleFinder ].\r\t\t\tfinderUI searchingTextArea contentMorph takeKeyboardFocus.\r\t\t\t"window paneMorphs do: [ :each | each layoutFrame topOffset: toolbar height ]."\r\t\t\twindow paneMorphs first addMorph: toolbar "fullFrame: ((0 @ 0 corner: 1 @ 0) asLayoutFrame bottomOffset: toolbar height)" ]\r\t\tifFalse: [ \r"\t\t\twindow paneMorphs do: [ :each | each layoutFrame topOffset: 0 ].\r"\t\t\tfinder removeActionsWithReceiver: self.\r\t\t\ttoolbar delete.\r\t\t\ttoolbar := nil.\r\t\t\tfinderUI := nil.\r\t\t\tfinder := nil ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1336' ],		#self : OmReference [ '1337' ],		#time : DateAndTime [ '2018-01-14T19:02:30.17192-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltBrowser,				#isMetaSide : false			},			#name : #treeMorph,			#protocol : #view,			#sourceCode : 'treeMorph\r\t^ treeMorph\r\t\tifNil: [ treeMorph := AltListMorph new\r\t\t\t\tmodel: self root;\r\t\t\t\tyourself ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1337' ],		#self : OmReference [ '1338' ],		#time : DateAndTime [ '2018-01-14T19:02:30.17305-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltBrowser,				#isMetaSide : false			},			#name : #updateSelection,			#protocol : #selecting,			#sourceCode : 'updateSelection\r\t"Update from the model if needed."\r\r\t| modelSelection |\r\tmodelSelection := self root selectedItem.\r\tmodelSelection == selection\r\t\tifTrue: [ ^ self ]\r\t\tifFalse: [ selection := modelSelection ].\r\tself updateTextKeymap.\r\tself updateTreeKeymap.\r\tself updateTitle.\r\tselection isNil\r\t\tifTrue:\r\t\t\t[ textMorph ifNotNil: [ :t | t classOrMetaClass: nil ].\r\t\t\tself source aboutToStyle: false.\r\t\t\tself source contents: \'\' ]\r\t\tifFalse:\r\t\t\t[ textMorph\r\t\t\t\tifNotNil: [ :t | t classOrMetaClass: selection styleClass ].\r\t\t\tself source aboutToStyle: selection isStyled.\r\t\t\tself source contents: selection sourceCode.\r\t\t\tself history add: selection ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1338' ],		#self : OmReference [ '1339' ],		#time : DateAndTime [ '2018-01-14T19:02:30.174142-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltBrowser,				#isMetaSide : false			},			#name : #updateTextKeymap,			#protocol : #shortcuts,			#sourceCode : 'updateTextKeymap\r\t"Update the text keymap. Reset the dispatcher and make it an AltKMDispatcher if needed."\r\r\ttextMorph ifNil: [ ^ self ].\r\t(textMorph kmDispatcher isKindOf: AltKMDispatcher)\r\t\tifFalse: [ textMorph setProperty: #kmDispatcher toValue: (AltKMDispatcher target: textMorph) ].\r\t(textMorph textMorph kmDispatcher isKindOf: AltKMDispatcher)\r\t\tifFalse: [ textMorph textMorph setProperty: #kmDispatcher toValue: (AltKMDispatcher target: textMorph textMorph) ].\r\t{(textMorph kmDispatcher).\r\t(textMorph textMorph kmDispatcher)}\r\t\tdo: [ :aKMDispatcher | \r\t\t\taKMDispatcher reset.\r\t\t\taKMDispatcher attachCategory: #MorphFocusCtrlNavigation.\r\t\t\tself selectedItem notNil\r\t\t\t\tifTrue: [ self selectedItem buildTextShortcutsOn: aKMDispatcher with: self ] ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1339' ],		#self : OmReference [ '1340' ],		#time : DateAndTime [ '2018-01-14T19:02:30.175076-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltBrowser,				#isMetaSide : false			},			#name : #updateTitle,			#protocol : #updating,			#sourceCode : 'updateTitle\r\twindow ifNotNil: [:w | w title: self title ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1340' ],		#self : OmReference [ '1341' ],		#time : DateAndTime [ '2018-01-14T19:02:30.176485-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltBrowser,				#isMetaSide : false			},			#name : #updateTreeKeymap,			#protocol : #shortcuts,			#sourceCode : 'updateTreeKeymap\r\t"Update the tree keymap."\r\r\t"Don\'t forget to update the tree."\r\r\ttreeMorph ifNil: [ ^ self ].\r\t(self treeMorph kmDispatcher isKindOf: AltKMDispatcher)\r\t\tifFalse:\r\t\t\t[ textMorph setProperty: #kmdispatcher toValue: AltKMDispatcher new ].\r\tself treeMorph kmDispatcher\r\t\treset;\r\t\tattachCategory: #MorphFocusNavigation;\r\t\tattachCategory: #MorphFocusCtrlNavigation.\r\tself selectedItem notNil\r\t\tifTrue: [ self selectedItem\r\t\t\t\tbuildTreeShortcutsOn: self treeMorph kmDispatcher\r\t\t\t\twith: self ]\r\t\tifFalse: [ (Pragma allNamed: #treeAreaCommand from: self class to: self class)\r\t\t\t\tdo: [ :e | \r\t\t\t\t\t(self perform: e methodSelector)\r\t\t\t\t\t\tdo: [ :c | \r\t\t\t\t\t\t\t(c asClass on: self treeMorph for: self)\r\t\t\t\t\t\t\t\tbuildShortcut: self treeMorph kmDispatcher ] ] ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1341' ],		#self : OmReference [ '1342' ],		#time : DateAndTime [ '2018-01-14T19:02:30.17744-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltMessageList class',				#isMetaSide : true			},			#name : #'browse:title:',			#protocol : #'instance creation',			#sourceCode : 'browse: anOrderedCollectionOfCompiledMethod title: aString\r\t^ (self fullOnMethods: anOrderedCollectionOfCompiledMethod)\r\t\ttitle: aString',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1342' ],		#self : OmReference [ '1343' ],		#time : DateAndTime [ '2018-01-14T19:02:30.179392-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltMessageList class',				#isMetaSide : true			},			#name : #initialize,			#protocol : #'class initialization',			#sourceCode : 'initialize\r\tself registerInAppRegistry',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1343' ],		#self : OmReference [ '1344' ],		#time : DateAndTime [ '2018-01-14T19:02:30.18065-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltMessageList class',				#isMetaSide : true			},			#name : #registerInAppRegistry,			#protocol : #'class initialization',			#sourceCode : 'registerInAppRegistry\r\t"Register the receiver in the SystemBrowser AppRegistry"\r\r\tSmalltalk tools register: self as: #messageList',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1344' ],		#self : OmReference [ '1345' ],		#time : DateAndTime [ '2018-01-14T19:02:30.181723-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMessageList,				#isMetaSide : false			},			#name : #'autoSelect:',			#protocol : #'accessing-message list',			#sourceCode : 'autoSelect: ignored\r\t"Stupid message list tools API"\r',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1345' ],		#self : OmReference [ '1346' ],		#time : DateAndTime [ '2018-01-14T19:02:30.182739-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMessageList,				#isMetaSide : false			},			#name : #'messages:',			#protocol : #'accessing-message list',			#sourceCode : 'messages: aListOfMethods\r\t"Stupid message list tools API"\r\r\trbEnvironment := RBSelectorEnvironment\r\t\tonEnvironment: self rbEnvironment.\r\taListOfMethods do: [ :e | rbEnvironment addMethod: e ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1346' ],		#self : OmReference [ '1347' ],		#time : DateAndTime [ '2018-01-14T19:02:30.183665-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMessageList,				#isMetaSide : false			},			#name : #open,			#protocol : #'user interface',			#sourceCode : 'open\r\t"Open the window, as simple as that."\r\r\tself expandAllNodes.\r\tsuper open',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1347' ],		#self : OmReference [ '1348' ],		#time : DateAndTime [ '2018-01-14T19:02:30.184546-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMessageList,				#isMetaSide : false			},			#name : #'refreshingBlock:',			#protocol : #'accessing-message list',			#sourceCode : 'refreshingBlock: ignored\r\t"Stupid message list tools API"\r\r\t',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1348' ],		#self : OmReference [ '1349' ],		#time : DateAndTime [ '2018-01-14T19:02:30.185452-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMessageList,				#isMetaSide : false			},			#name : #'title:',			#protocol : #'accessing-message list',			#sourceCode : 'title: aString\r\t"Stupid message list tools API"\r\r\tself rbEnvironment label: aString.\r\tself updateTitle',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1349' ],		#self : OmReference [ '1350' ],		#time : DateAndTime [ '2018-01-14T19:02:30.186416-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltAcceptTextCommand,				#isMetaSide : false			},			#name : #execute,			#protocol : #execution,			#sourceCode : 'execute\r\t"The execute may create an object or return us one."\r\r\t| result selection |\r\ttarget accept.\r\tselection := requestor selectedNode item.\r\tresult := selection accept: target text notifying: target.\r\t(result isNil or: [ result == selection ])\r\t\tifTrue: [ ^ self ].\r\trequestor selectPathForAbstractItem: result',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1350' ],		#self : OmReference [ '1351' ],		#time : DateAndTime [ '2018-01-14T19:02:30.187367-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltAcceptTextCommand,				#isMetaSide : false			},			#name : #icon,			#protocol : #accessing,			#sourceCode : 'icon\r\t^ #smallOkIcon',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1351' ],		#self : OmReference [ '1352' ],		#time : DateAndTime [ '2018-01-14T19:02:30.18834-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltAcceptTextCommand,				#isMetaSide : false			},			#name : #isActive,			#protocol : #testing,			#sourceCode : 'isActive\r\t^ true',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1352' ],		#self : OmReference [ '1353' ],		#time : DateAndTime [ '2018-01-14T19:02:30.190425-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltAcceptTextCommand,				#isMetaSide : false			},			#name : #keystroke,			#protocol : #accessing,			#sourceCode : 'keystroke\r\t^ $s ctrl ',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1353' ],		#self : OmReference [ '1354' ],		#time : DateAndTime [ '2018-01-14T19:02:30.191547-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltAcceptTextCommand,				#isMetaSide : false			},			#name : #label,			#protocol : #accessing,			#sourceCode : 'label\r\t^ \'Accept\'',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1354' ],		#self : OmReference [ '1355' ],		#time : DateAndTime [ '2018-01-14T19:02:30.192693-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltAddProtocolCommand,				#isMetaSide : false			},			#name : #execute,			#protocol : #execution,			#sourceCode : 'execute\r\t"Reuse code from Browser>>addCategory"\r\r\t"Present a choice of categories or prompt for a new category name and add it before the current selection, or at the end if no current selection"\r\r\t"Usability comment : far too many choices in most cases to be user-friendly."\r\r\t| labels reject lines newName tClass sItem |\r\trequestor okToChange\r\t\tifFalse: [ ^ self ].\r\tlabels := OrderedCollection new.\r\tsItem := requestor selectedNode.\r\ttClass := sItem sourceClass.\r\treject := Set new.\r\treject\r\t\taddAll: tClass protocols;\r\t\tadd: Protocol nullCategory.\r\tlines := OrderedCollection new.\r\ttClass allSuperclasses\r\t\tdo: [ :cls | \r\t\t\t| cats |\r\t\t\tcls = Object\r\t\t\t\tifFalse: [ \r\t\t\t\t\tcats := cls protocols reject: [ :cat | (reject includes: cat) or: [ cat beginsWith: \'*\' ] ].\r\t\t\t\t\t(cats isEmpty or: [ labels size > 10 ])\r\t\t\t\t\t\tifFalse: [ \r\t\t\t\t\t\t\tlines add: labels size.\r\t\t\t\t\t\t\tlabels addAll: cats asSortedCollection.\r\t\t\t\t\t\t\treject addAll: cats ] ] ].\r\tnewName := UIManager default\r\t\tchooseOrRequestFrom: labels\r\t\tlines: lines\r\t\ttitle: \'Add Protocol\'.\r\tnewName ifNil: [ ^ self ].\r\tnewName := newName asSymbol.\r\ttClass organization addCategory: newName.\r\trequestor\r\t\tselectPathForAbstractItem:\r\t\t\t(sItem parentNode findItem: (sItem parentNode item findMethodCategory: newName in: tClass)) item',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1355' ],		#self : OmReference [ '1356' ],		#time : DateAndTime [ '2018-01-14T19:02:30.193684-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltAddProtocolCommand,				#isMetaSide : false			},			#name : #isActive,			#protocol : #testing,			#sourceCode : 'isActive\r\t^ true',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1356' ],		#self : OmReference [ '1357' ],		#time : DateAndTime [ '2018-01-14T19:02:30.194649-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltAddProtocolCommand,				#isMetaSide : false			},			#name : #label,			#protocol : #accessing,			#sourceCode : 'label\r\t^ \'Add protocol\'',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1357' ],		#self : OmReference [ '1358' ],		#time : DateAndTime [ '2018-01-14T19:02:30.196131-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltAddSystemCategoryCommand,				#isMetaSide : false			},			#name : #execute,			#protocol : #execution,			#sourceCode : 'execute\r\t| name sItem found |\r\tsItem := requestor selectedNode item.\r\tname := UIManager default\r\t\trequest: \'Enter the new category name:\'\r\t\tinitialAnswer: sItem packageName.\r\tname notNil\r\t\tifTrue: [ Smalltalk globals organization addCategory: name ].\r\trequestor class rootItems\r\t\tdo:\r\t\t\t[ :each | \r\t\t\t| res |\r\t\t\t(res := each findClassCategory: name) notNil\r\t\t\t\tifTrue: [ found := res ] ].\r\tfound isNil\r\t\tifTrue: [ ^ self ].\r\trequestor selectPathForAbstractItem: found',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1358' ],		#self : OmReference [ '1359' ],		#time : DateAndTime [ '2018-01-14T19:02:30.197349-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltAddSystemCategoryCommand,				#isMetaSide : false			},			#name : #isActive,			#protocol : #testing,			#sourceCode : 'isActive\r\t^ true',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1359' ],		#self : OmReference [ '1360' ],		#time : DateAndTime [ '2018-01-14T19:02:30.198307-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltAddSystemCategoryCommand,				#isMetaSide : false			},			#name : #label,			#protocol : #accessing,			#sourceCode : 'label\r\t^ \'Add category\'',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1360' ],		#self : OmReference [ '1361' ],		#time : DateAndTime [ '2018-01-14T19:02:30.199337-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltAstNodeCommand class',				#isMetaSide : true			},			#name : #'on:for:node:',			#protocol : #'instance creation',			#sourceCode : 'on: aTarget for: aRequestor node: aNode\r\t^ (self on: aTarget for: aRequestor) node: aNode',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1361' ],		#self : OmReference [ '1362' ],		#time : DateAndTime [ '2018-01-14T19:02:30.200302-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltAstNodeCommand,				#isMetaSide : false			},			#name : #node,			#protocol : #accessing,			#sourceCode : 'node\r\t^ astNode',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1362' ],		#self : OmReference [ '1363' ],		#time : DateAndTime [ '2018-01-14T19:02:30.202265-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltAstNodeCommand,				#isMetaSide : false			},			#name : #'node:',			#protocol : #accessing,			#sourceCode : 'node: aRBNode\r\tastNode := aRBNode',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1363' ],		#self : OmReference [ '1364' ],		#time : DateAndTime [ '2018-01-14T19:02:30.203303-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltBreakOnceCommand,				#isMetaSide : false			},			#name : #execute,			#protocol : #execution,			#sourceCode : 'execute\r\t(Breakpoint in: astNode) once',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1364' ],		#self : OmReference [ '1365' ],		#time : DateAndTime [ '2018-01-14T19:02:30.204233-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltBreakOnceCommand,				#isMetaSide : false			},			#name : #icon,			#protocol : #accessing,			#sourceCode : 'icon\r\t^ #smallCancelIcon',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1365' ],		#self : OmReference [ '1366' ],		#time : DateAndTime [ '2018-01-14T19:02:30.205254-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltBreakOnceCommand,				#isMetaSide : false			},			#name : #isActive,			#protocol : #testing,			#sourceCode : 'isActive\r\t^ target hasUnacceptedEdits not',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1366' ],		#self : OmReference [ '1367' ],		#time : DateAndTime [ '2018-01-14T19:02:30.206203-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltBreakOnceCommand,				#isMetaSide : false			},			#name : #isEnabled,			#protocol : #testing,			#sourceCode : 'isEnabled\r\t^ astNode hasMetalink not',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1367' ],		#self : OmReference [ '1368' ],		#time : DateAndTime [ '2018-01-14T19:02:30.207128-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltBreakOnceCommand,				#isMetaSide : false			},			#name : #label,			#protocol : #accessing,			#sourceCode : 'label\r\t^ \'Set halt once\'',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1368' ],		#self : OmReference [ '1369' ],		#time : DateAndTime [ '2018-01-14T19:02:30.208085-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltBreakPointCommand,				#isMetaSide : false			},			#name : #execute,			#protocol : #execution,			#sourceCode : 'execute\r\t"Reuse smart suggestion code."\r\r\tastNode hasMetalink\r\t\tifFalse: [ (Breakpoint in: astNode) always ]\r\t\tifTrue: [ Breakpoint removeFrom: astNode ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1369' ],		#self : OmReference [ '1370' ],		#time : DateAndTime [ '2018-01-14T19:02:30.209007-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltBreakPointCommand,				#isMetaSide : false			},			#name : #icon,			#protocol : #accessing,			#sourceCode : 'icon\r\t^ #smallCancelIcon',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1370' ],		#self : OmReference [ '1371' ],		#time : DateAndTime [ '2018-01-14T19:02:30.209933-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltBreakPointCommand,				#isMetaSide : false			},			#name : #isActive,			#protocol : #testing,			#sourceCode : 'isActive\r\t^ target hasUnacceptedEdits not',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1371' ],		#self : OmReference [ '1372' ],		#time : DateAndTime [ '2018-01-14T19:02:30.211823-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltBreakPointCommand,				#isMetaSide : false			},			#name : #isEnabled,			#protocol : #testing,			#sourceCode : 'isEnabled\r\t^ astNode hasMetalink not',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1372' ],		#self : OmReference [ '1373' ],		#time : DateAndTime [ '2018-01-14T19:02:30.213029-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltBreakPointCommand,				#isMetaSide : false			},			#name : #label,			#protocol : #accessing,			#sourceCode : 'label\r\t^ astNode hasMetalink\r\t\tifTrue: [ \'Remove breakpoint\' ]\r\t\tifFalse: [ \'Set breakpoint\' ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1373' ],		#self : OmReference [ '1374' ],		#time : DateAndTime [ '2018-01-14T19:02:30.214202-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltBreakWhenCommand,				#isMetaSide : false			},			#name : #execute,			#protocol : #execution,			#sourceCode : 'execute\r\t"Reuse smart suggestion code."\r\r\tself assert: astNode hasMetalink not.\r\t(UIManager default request: \'Break on what condition?\')\r\t\tifNotNil:\r\t\t\t[ :condition | (Breakpoint in: astNode) when: {(OpalCompiler evaluate: condition)} ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1374' ],		#self : OmReference [ '1375' ],		#time : DateAndTime [ '2018-01-14T19:02:30.215135-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltBreakWhenCommand,				#isMetaSide : false			},			#name : #icon,			#protocol : #accessing,			#sourceCode : 'icon\r\t^ #smallCancelIcon',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1375' ],		#self : OmReference [ '1376' ],		#time : DateAndTime [ '2018-01-14T19:02:30.216006-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltBreakWhenCommand,				#isMetaSide : false			},			#name : #isActive,			#protocol : #testing,			#sourceCode : 'isActive\r\t^ target hasUnacceptedEdits not',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1376' ],		#self : OmReference [ '1377' ],		#time : DateAndTime [ '2018-01-14T19:02:30.2173-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltBreakWhenCommand,				#isMetaSide : false			},			#name : #isEnabled,			#protocol : #testing,			#sourceCode : 'isEnabled\r\t^ astNode hasMetalink not',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1377' ],		#self : OmReference [ '1378' ],		#time : DateAndTime [ '2018-01-14T19:02:30.21818-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltBreakWhenCommand,				#isMetaSide : false			},			#name : #label,			#protocol : #accessing,			#sourceCode : 'label\r\t^  \'Break when ...\'',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1378' ],		#self : OmReference [ '1379' ],		#time : DateAndTime [ '2018-01-14T19:02:30.219193-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltBrowseTextCommand,				#isMetaSide : false			},			#name : #execute,			#protocol : #execution,			#sourceCode : 'execute\r\tself node binding value isBehavior\r\t\tifTrue: [ requestor class openOnClass: self node binding value ]\r\t\tifFalse: [ self node binding value inspect ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1379' ],		#self : OmReference [ '1380' ],		#time : DateAndTime [ '2018-01-14T19:02:30.220124-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltBrowseTextCommand,				#isMetaSide : false			},			#name : #icon,			#protocol : #accessing,			#sourceCode : 'icon\r\t^ #smallInspectItIcon',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1380' ],		#self : OmReference [ '1381' ],		#time : DateAndTime [ '2018-01-14T19:02:30.22108-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltBrowseTextCommand,				#isMetaSide : false			},			#name : #isActive,			#protocol : #testing,			#sourceCode : 'isActive\r\t^ true',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1381' ],		#self : OmReference [ '1382' ],		#time : DateAndTime [ '2018-01-14T19:02:30.223092-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltBrowseTextCommand,				#isMetaSide : false			},			#name : #keystroke,			#protocol : #accessing,			#sourceCode : 'keystroke\r\t^ $b ctrl',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1382' ],		#self : OmReference [ '1383' ],		#time : DateAndTime [ '2018-01-14T19:02:30.22405-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltBrowseTextCommand,				#isMetaSide : false			},			#name : #label,			#protocol : #accessing,			#sourceCode : 'label\r\t^ \'Browse ...\'',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1383' ],		#self : OmReference [ '1384' ],		#time : DateAndTime [ '2018-01-14T19:02:30.225219-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltImplementorsOfSymbolCommand,				#isMetaSide : false			},			#name : #execute,			#protocol : #execution,			#sourceCode : 'execute\r\t| aSelector anEnvironment classDict |\r\tanEnvironment := requestor rbEnvironment isSelectorEnvironment\r\t\tifTrue: [ requestor rbEnvironment environment ]\r\t\tifFalse: [ requestor rbEnvironment ].\r\taSelector := self node value.\r\tclassDict := IdentityDictionary new.\r\tanEnvironment\r\t\tclassesAndMetaClassesDo: [ :class | \r\t\t\t((class includesLocalSelector: aSelector) and: [ anEnvironment includesSelector: aSelector in: class ])\r\t\t\t\tifTrue: [ classDict at: class put: {aSelector} ] ].\r\tclassDict isEmpty ifTrue: [ ^ self inform: \'No implementors of \', aSelector, \' found.\' ].\r\t(requestor class\r\t\topenOnEnvironment:\r\t\t\t((RBSelectorEnvironment onEnvironment: anEnvironment)\r\t\t\t\ton: classDict;\r\t\t\t\tlabel: \'Implementors of \' , aSelector;\r\t\t\t\tyourself)) expandAllNodes',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1384' ],		#self : OmReference [ '1385' ],		#time : DateAndTime [ '2018-01-14T19:02:30.226221-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltImplementorsOfSymbolCommand,				#isMetaSide : false			},			#name : #icon,			#protocol : #accessing,			#sourceCode : 'icon\r\t^ #smallFindIcon',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1385' ],		#self : OmReference [ '1386' ],		#time : DateAndTime [ '2018-01-14T19:02:30.227135-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltImplementorsOfSymbolCommand,				#isMetaSide : false			},			#name : #isActive,			#protocol : #testing,			#sourceCode : 'isActive\r\t^ true',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1386' ],		#self : OmReference [ '1387' ],		#time : DateAndTime [ '2018-01-14T19:02:30.228072-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltImplementorsOfSymbolCommand,				#isMetaSide : false			},			#name : #label,			#protocol : #accessing,			#sourceCode : 'label\r\t^ \'Implementors of \' , astNode value',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1387' ],		#self : OmReference [ '1388' ],		#time : DateAndTime [ '2018-01-14T19:02:30.22929-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltImplementorsOfTextCommand,				#isMetaSide : false			},			#name : #execute,			#protocol : #execution,			#sourceCode : 'execute\r\t| aSelector anEnvironment classDict |\r\tanEnvironment := requestor rbEnvironment isSelectorEnvironment\r\t\tifTrue: [ requestor rbEnvironment environment ]\r\t\tifFalse: [ requestor rbEnvironment ].\r\taSelector := self node selector.\r\tclassDict := IdentityDictionary new.\r\tanEnvironment\r\t\tclassesAndMetaClassesDo: [ :class | \r\t\t\t((class includesLocalSelector: aSelector) and: [ anEnvironment includesSelector: aSelector in: class ])\r\t\t\t\tifTrue: [ classDict at: class put: {aSelector} ] ].\r\tclassDict isEmpty ifTrue: [ ^ self inform: \'No implementors of \', aSelector, \' found.\' ].\r\t(requestor class\r\t\topenOnEnvironment:\r\t\t\t((RBSelectorEnvironment onEnvironment: anEnvironment)\r\t\t\t\ton: classDict;\r\t\t\t\tlabel: \'Implementors of \' , aSelector;\r\t\t\t\tyourself)) expandAllNodes',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1388' ],		#self : OmReference [ '1389' ],		#time : DateAndTime [ '2018-01-14T19:02:30.230406-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltImplementorsOfTextCommand,				#isMetaSide : false			},			#name : #icon,			#protocol : #accessing,			#sourceCode : 'icon\r\t^ #smallFindIcon',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1389' ],		#self : OmReference [ '1390' ],		#time : DateAndTime [ '2018-01-14T19:02:30.231346-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltImplementorsOfTextCommand,				#isMetaSide : false			},			#name : #isActive,			#protocol : #testing,			#sourceCode : 'isActive\r\t^ true',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1390' ],		#self : OmReference [ '1391' ],		#time : DateAndTime [ '2018-01-14T19:02:30.233209-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltImplementorsOfTextCommand,				#isMetaSide : false			},			#name : #keystroke,			#protocol : #accessing,			#sourceCode : 'keystroke\r\t^ $m ctrl',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1391' ],		#self : OmReference [ '1392' ],		#time : DateAndTime [ '2018-01-14T19:02:30.234343-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltImplementorsOfTextCommand,				#isMetaSide : false			},			#name : #label,			#protocol : #accessing,			#sourceCode : 'label\r\t^ \'Implementors...\'',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1392' ],		#self : OmReference [ '1393' ],		#time : DateAndTime [ '2018-01-14T19:02:30.23531-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltInstVarDefs,				#isMetaSide : false			},			#name : #execute,			#protocol : #execution,			#sourceCode : 'execute\r\tself systemNavigation browseAllStoresInto: self node name from: requestor selectedItem sourceClass',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1393' ],		#self : OmReference [ '1394' ],		#time : DateAndTime [ '2018-01-14T19:02:30.236247-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltInstVarDefs,				#isMetaSide : false			},			#name : #icon,			#protocol : #accessing,			#sourceCode : 'icon\r\t^ #smallFindIcon',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1394' ],		#self : OmReference [ '1395' ],		#time : DateAndTime [ '2018-01-14T19:02:30.237628-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltInstVarDefs,				#isMetaSide : false			},			#name : #isActive,			#protocol : #testing,			#sourceCode : 'isActive\r\t^ true',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1395' ],		#self : OmReference [ '1396' ],		#time : DateAndTime [ '2018-01-14T19:02:30.238569-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltInstVarDefs,				#isMetaSide : false			},			#name : #label,			#protocol : #accessing,			#sourceCode : 'label\r\t^ \'Stores into \' , self node name',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1396' ],		#self : OmReference [ '1397' ],		#time : DateAndTime [ '2018-01-14T19:02:30.23953-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltInstVarRefs,				#isMetaSide : false			},			#name : #execute,			#protocol : #execution,			#sourceCode : 'execute\r\tself systemNavigation browseAllAccessesTo: self node name from: requestor selectedItem sourceClass',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1397' ],		#self : OmReference [ '1398' ],		#time : DateAndTime [ '2018-01-14T19:02:30.240444-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltInstVarRefs,				#isMetaSide : false			},			#name : #icon,			#protocol : #accessing,			#sourceCode : 'icon\r\t^ #smallFindIcon',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1398' ],		#self : OmReference [ '1399' ],		#time : DateAndTime [ '2018-01-14T19:02:30.24132-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltInstVarRefs,				#isMetaSide : false			},			#name : #isActive,			#protocol : #testing,			#sourceCode : 'isActive\r\t^ true',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1399' ],		#self : OmReference [ '1400' ],		#time : DateAndTime [ '2018-01-14T19:02:30.242196-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltInstVarRefs,				#isMetaSide : false			},			#name : #label,			#protocol : #accessing,			#sourceCode : 'label\r\t^ \'Accesses to \' , self node name',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1400' ],		#self : OmReference [ '1401' ],		#time : DateAndTime [ '2018-01-14T19:02:30.244256-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMethodDoItCommand,				#isMetaSide : false			},			#name : #execute,			#protocol : #execution,			#sourceCode : 'execute\r\trequestor selectedItem sourceClass theNonMetaClass  perform: self node parent selector',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1401' ],		#self : OmReference [ '1402' ],		#time : DateAndTime [ '2018-01-14T19:02:30.245525-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMethodDoItCommand,				#isMetaSide : false			},			#name : #isActive,			#protocol : #testing,			#sourceCode : 'isActive\r\t^ true',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1402' ],		#self : OmReference [ '1403' ],		#time : DateAndTime [ '2018-01-14T19:02:30.246517-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMethodDoItCommand,				#isMetaSide : false			},			#name : #label,			#protocol : #accessing,			#sourceCode : 'label\r\t^ \'Run \' , self node selector , \'...\'',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1403' ],		#self : OmReference [ '1404' ],		#time : DateAndTime [ '2018-01-14T19:02:30.2477-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltRBAstNodeCommand,				#isMetaSide : false			},			#name : #'execute:',			#protocol : #execution,			#sourceCode : 'execute: aRefactoringCommand\r\t^ AltRBCommand new execute: aRefactoringCommand',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1404' ],		#self : OmReference [ '1405' ],		#time : DateAndTime [ '2018-01-14T19:02:30.248906-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltRBInstVarAccessorCommand,				#isMetaSide : false			},			#name : #execute,			#protocol : #execution,			#sourceCode : 'execute\r\t"Create accessors for an instance variable"\r\r\tself\r\t\texecute:\r\t\t\t(RBCreateAccessorsForVariableRefactoring\r\t\t\t\tvariable: self node name\r\t\t\t\tclass: requestor selectedNode sourceClass\r\t\t\t\tclassVariable: requestor selectedNode sourceClass isMeta)',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1405' ],		#self : OmReference [ '1406' ],		#time : DateAndTime [ '2018-01-14T19:02:30.249927-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltRBInstVarAccessorCommand,				#isMetaSide : false			},			#name : #isActive,			#protocol : #testing,			#sourceCode : 'isActive\r\t^ true',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1406' ],		#self : OmReference [ '1407' ],		#time : DateAndTime [ '2018-01-14T19:02:30.250867-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltRBInstVarAccessorCommand,				#isMetaSide : false			},			#name : #label,			#protocol : #accessing,			#sourceCode : 'label\r\t^ \'Create accessors on \' , self node name',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1407' ],		#self : OmReference [ '1408' ],		#time : DateAndTime [ '2018-01-14T19:02:30.251849-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltRBInstVarPullUpCommand,				#isMetaSide : false			},			#name : #execute,			#protocol : #execution,			#sourceCode : 'execute\r\tself\r\t\texecute:\r\t\t\t(RBPullUpInstanceVariableRefactoring\r\t\t\t\tmodel: (RBNamespace onEnvironment: requestor rbEnvironment)\r\t\t\t\tvariable: self node name\r\t\t\t\tclass: requestor selectedNode sourceClass superclass)',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1408' ],		#self : OmReference [ '1409' ],		#time : DateAndTime [ '2018-01-14T19:02:30.252822-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltRBInstVarPullUpCommand,				#isMetaSide : false			},			#name : #isActive,			#protocol : #testing,			#sourceCode : 'isActive\r\t^ true',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1409' ],		#self : OmReference [ '1410' ],		#time : DateAndTime [ '2018-01-14T19:02:30.25381-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltRBInstVarPullUpCommand,				#isMetaSide : false			},			#name : #label,			#protocol : #accessing,			#sourceCode : 'label\r\t^ \'Pull up \' , self node name',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1410' ],		#self : OmReference [ '1411' ],		#time : DateAndTime [ '2018-01-14T19:02:30.256-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltRBInstVarPushDownCommand,				#isMetaSide : false			},			#name : #execute,			#protocol : #execution,			#sourceCode : 'execute\r\tself\r\t\texecute:\r\t\t\t(RBPushDownInstanceVariableRefactoring\r\t\t\t\tmodel: (RBNamespace onEnvironment: requestor rbEnvironment)\r\t\t\t\tvariable: self node name\r\t\t\t\tclass: requestor selectedNode sourceClass)',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1411' ],		#self : OmReference [ '1412' ],		#time : DateAndTime [ '2018-01-14T19:02:30.257351-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltRBInstVarPushDownCommand,				#isMetaSide : false			},			#name : #isActive,			#protocol : #testing,			#sourceCode : 'isActive\r\t^ true',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1412' ],		#self : OmReference [ '1413' ],		#time : DateAndTime [ '2018-01-14T19:02:30.258315-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltRBInstVarPushDownCommand,				#isMetaSide : false			},			#name : #label,			#protocol : #accessing,			#sourceCode : 'label\r\t^ \'Push down \' , self node name',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1413' ],		#self : OmReference [ '1414' ],		#time : DateAndTime [ '2018-01-14T19:02:30.259395-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltRBInstVarRenameCommand,				#isMetaSide : false			},			#name : #execute,			#protocol : #execution,			#sourceCode : 'execute\r\t"Rename an instance variable"\r\r\t| name |\r\tname := UIManager default\r\t\trequest: \'Rename instance var \' , self node name , \' to:\'\r\t\tinitialAnswer: self node name.\r\tname ifNil: [ ^ nil ].\r\tself\r\t\texecute:\r\t\t\t(RBRenameInstanceVariableRefactoring\r\t\t\t\trename: self node name\r\t\t\t\tto: name asSymbol\r\t\t\t\tin: requestor selectedNode sourceClass)',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1414' ],		#self : OmReference [ '1415' ],		#time : DateAndTime [ '2018-01-14T19:02:30.260328-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltRBInstVarRenameCommand,				#isMetaSide : false			},			#name : #isActive,			#protocol : #testing,			#sourceCode : 'isActive\r\t^ true',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1415' ],		#self : OmReference [ '1416' ],		#time : DateAndTime [ '2018-01-14T19:02:30.26136-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltRBInstVarRenameCommand,				#isMetaSide : false			},			#name : #label,			#protocol : #accessing,			#sourceCode : 'label\r\t^ \'Rename \' , self node name',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1416' ],		#self : OmReference [ '1417' ],		#time : DateAndTime [ '2018-01-14T19:02:30.262364-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltRBRemoveClassVariableCommand,				#isMetaSide : false			},			#name : #execute,			#protocol : #execution,			#sourceCode : 'execute\r\tself\r\t\texecute:\r\t\t\t(RBRemoveInstanceVariableRefactoring\r\t\t\t\tremove: self node name\r\t\t\t\tfrom: requestor selectedNode sourceClass)',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1417' ],		#self : OmReference [ '1418' ],		#time : DateAndTime [ '2018-01-14T19:02:30.263321-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltRBRemoveClassVariableCommand,				#isMetaSide : false			},			#name : #isActive,			#protocol : #testing,			#sourceCode : 'isActive\r\t^ true',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1418' ],		#self : OmReference [ '1419' ],		#time : DateAndTime [ '2018-01-14T19:02:30.264411-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltRBRemoveClassVariableCommand,				#isMetaSide : false			},			#name : #label,			#protocol : #accessing,			#sourceCode : 'label\r\t^ \'Remove \', self node name\r\t',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1419' ],		#self : OmReference [ '1420' ],		#time : DateAndTime [ '2018-01-14T19:02:30.266484-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltRBRemoveInstanceVariableCommand,				#isMetaSide : false			},			#name : #execute,			#protocol : #execution,			#sourceCode : 'execute\r\tself\r\t\texecute:\r\t\t\t(RBRemoveInstanceVariableRefactoring\r\t\t\t\tremove: self node name\r\t\t\t\tfrom: requestor selectedNode sourceClass)',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1420' ],		#self : OmReference [ '1421' ],		#time : DateAndTime [ '2018-01-14T19:02:30.267571-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltRBRemoveInstanceVariableCommand,				#isMetaSide : false			},			#name : #isActive,			#protocol : #testing,			#sourceCode : 'isActive\r\t^ true',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1421' ],		#self : OmReference [ '1422' ],		#time : DateAndTime [ '2018-01-14T19:02:30.268507-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltRBRemoveInstanceVariableCommand,				#isMetaSide : false			},			#name : #label,			#protocol : #accessing,			#sourceCode : 'label\r\t^ \'Remove \', self node name\r\t',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1422' ],		#self : OmReference [ '1423' ],		#time : DateAndTime [ '2018-01-14T19:02:30.269668-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltRBTemporaryRenameCommand,				#isMetaSide : false			},			#name : #execute,			#protocol : #execution,			#sourceCode : 'execute\r\t| newName |\r\tnewName := UIManager default\r\t\trequest: \'Rename variable \' , self node name , \' to:\'\r\t\tinitialAnswer: self node name.\r\tnewName ifNil: [ ^ nil ].\r\tself\r\t\texecute:\r\t\t\t(RBRenameTemporaryRefactoring\r\t\t\t\trenameTemporaryFrom: (self node start to: self node stop)\r\t\t\t\tto: newName\r\t\t\t\tin: requestor selectedNode sourceClass\r\t\t\t\tselector: requestor selectedNode item selector)',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1423' ],		#self : OmReference [ '1424' ],		#time : DateAndTime [ '2018-01-14T19:02:30.270637-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltRBTemporaryRenameCommand,				#isMetaSide : false			},			#name : #isActive,			#protocol : #testing,			#sourceCode : 'isActive\r\t^ true',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1424' ],		#self : OmReference [ '1425' ],		#time : DateAndTime [ '2018-01-14T19:02:30.271562-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltRBTemporaryRenameCommand,				#isMetaSide : false			},			#name : #isEnabled,			#protocol : #testing,			#sourceCode : 'isEnabled\r\t^ requestor selectedItem isProtected not\r\t\tand: [ target hasUnacceptedEdits not ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1425' ],		#self : OmReference [ '1426' ],		#time : DateAndTime [ '2018-01-14T19:02:30.272446-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltRBTemporaryRenameCommand,				#isMetaSide : false			},			#name : #label,			#protocol : #accessing,			#sourceCode : 'label\r\t^ \'Rename \' , self node name',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1426' ],		#self : OmReference [ '1427' ],		#time : DateAndTime [ '2018-01-14T19:02:30.273606-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltSendersOfSymbolCommand,				#isMetaSide : false			},			#name : #execute,			#protocol : #execution,			#sourceCode : 'execute\r\t| aSelector anEnvironment classDict |\r\tanEnvironment := requestor rbEnvironment isSelectorEnvironment\r\t\tifTrue: [ requestor rbEnvironment environment ]\r\t\tifFalse: [ requestor rbEnvironment ].\r\taSelector := self node value.\r\tclassDict := IdentityDictionary new.\r\tanEnvironment\r\t\tclassesAndMetaClassesDo:\r\t\t\t[ :class | \r\t\t\t((class thoroughWhichSelectorsReferTo: aSelector)\r\t\t\t\tselect:\r\t\t\t\t\t[ :selector | anEnvironment includesSelector: selector in: class ])\r\t\t\t\tin:\r\t\t\t\t\t[ :selectors | \r\t\t\t\t\tselectors isEmpty\r\t\t\t\t\t\tifFalse: [ classDict at: class put: selectors asIdentitySet ] ] ].\r\t(requestor class\r\t\topenOnEnvironment:\r\t\t\t((RBSelectorEnvironment onEnvironment: anEnvironment)\r\t\t\t\ton: classDict;\r\t\t\t\tlabel: \'References to: \' , aSelector;\r\t\t\t\tsearchStrings: (Array with: aSelector);\r\t\t\t\tyourself)) expandAllNodes',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1427' ],		#self : OmReference [ '1428' ],		#time : DateAndTime [ '2018-01-14T19:02:30.274584-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltSendersOfSymbolCommand,				#isMetaSide : false			},			#name : #icon,			#protocol : #accessing,			#sourceCode : 'icon\r\t^ #smallFindIcon',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1428' ],		#self : OmReference [ '1429' ],		#time : DateAndTime [ '2018-01-14T19:02:30.2755-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltSendersOfSymbolCommand,				#isMetaSide : false			},			#name : #isActive,			#protocol : #testing,			#sourceCode : 'isActive\r\t^ true',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1429' ],		#self : OmReference [ '1430' ],		#time : DateAndTime [ '2018-01-14T19:02:30.278094-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltSendersOfSymbolCommand,				#isMetaSide : false			},			#name : #label,			#protocol : #accessing,			#sourceCode : 'label\r\t^ \'Senders of \' , astNode value',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1430' ],		#self : OmReference [ '1431' ],		#time : DateAndTime [ '2018-01-14T19:02:30.279416-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltSendersTextCommand,				#isMetaSide : false			},			#name : #execute,			#protocol : #execution,			#sourceCode : 'execute\r\t| aSelector anEnvironment classDict |\r\tanEnvironment := requestor rbEnvironment isSelectorEnvironment\r\t\tifTrue: [ requestor rbEnvironment environment ]\r\t\tifFalse: [ requestor rbEnvironment ].\r\taSelector := self node selector.\r\tclassDict := IdentityDictionary new.\r\tanEnvironment\r\t\tclassesAndMetaClassesDo:\r\t\t\t[ :class | \r\t\t\t((class thoroughWhichSelectorsReferTo: aSelector)\r\t\t\t\tselect:\r\t\t\t\t\t[ :selector | anEnvironment includesSelector: selector in: class ])\r\t\t\t\tin:\r\t\t\t\t\t[ :selectors | \r\t\t\t\t\tselectors isEmpty\r\t\t\t\t\t\tifFalse: [ classDict at: class put: selectors asIdentitySet ] ] ].\r\t(requestor class\r\t\topenOnEnvironment:\r\t\t\t((RBSelectorEnvironment onEnvironment: anEnvironment)\r\t\t\t\ton: classDict;\r\t\t\t\tlabel: \'References to: \' , aSelector;\r\t\t\t\tsearchStrings: (Array with: aSelector);\r\t\t\t\tyourself)) expandAllNodes',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1431' ],		#self : OmReference [ '1432' ],		#time : DateAndTime [ '2018-01-14T19:02:30.280336-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltSendersTextCommand,				#isMetaSide : false			},			#name : #icon,			#protocol : #accessing,			#sourceCode : 'icon\r\t^ #smallFindIcon',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1432' ],		#self : OmReference [ '1433' ],		#time : DateAndTime [ '2018-01-14T19:02:30.281213-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltSendersTextCommand,				#isMetaSide : false			},			#name : #isActive,			#protocol : #testing,			#sourceCode : 'isActive\r\t^ true',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1433' ],		#self : OmReference [ '1434' ],		#time : DateAndTime [ '2018-01-14T19:02:30.28213-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltSendersTextCommand,				#isMetaSide : false			},			#name : #keystroke,			#protocol : #accessing,			#sourceCode : 'keystroke\r\t^ $n ctrl',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1434' ],		#self : OmReference [ '1435' ],		#time : DateAndTime [ '2018-01-14T19:02:30.283023-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltSendersTextCommand,				#isMetaSide : false			},			#name : #label,			#protocol : #accessing,			#sourceCode : 'label\r\t^ \'Senders...\'',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1435' ],		#self : OmReference [ '1436' ],		#time : DateAndTime [ '2018-01-14T19:02:30.284082-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltWatchpointCommand,				#isMetaSide : false			},			#name : #execute,			#protocol : #execution,			#sourceCode : 'execute\r\tastNode hasWatchpoint\r\t\tifFalse:\r\t\t\t[ (UIManager default request: \'Name for Watchpoint\')\r\t\t\t\tifNotNil:\r\t\t\t\t\t[ :tagname | \r\t\t\t\t\tAltBrowser\r\t\t\t\t\t\taWatchpointInstalled:\r\t\t\t\t\t\t\t(AltWatchpointInstalled new\r\t\t\t\t\t\t\t\twatchpoint: (Watchpoint in: astNode named: tagname)) ] ]\r\t\tifTrue:\r\t\t\t[ AltBrowser\r\t\t\t\taWatchpointUninstalled:\r\t\t\t\t\t(AltWatchpointInstalled new\r\t\t\t\t\t\twatchpoint: (Watchpoint allWatchpoints at: astNode)).\r\t\t\tWatchpoint removeFrom: astNode ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1436' ],		#self : OmReference [ '1437' ],		#time : DateAndTime [ '2018-01-14T19:02:30.285109-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltWatchpointCommand,				#isMetaSide : false			},			#name : #icon,			#protocol : #accessing,			#sourceCode : 'icon\r\t^ #smallFindIcon',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1437' ],		#self : OmReference [ '1438' ],		#time : DateAndTime [ '2018-01-14T19:02:30.286097-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltWatchpointCommand,				#isMetaSide : false			},			#name : #isActive,			#protocol : #testing,			#sourceCode : 'isActive\r\t^ true',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1438' ],		#self : OmReference [ '1439' ],		#time : DateAndTime [ '2018-01-14T19:02:30.288257-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltWatchpointCommand,				#isMetaSide : false			},			#name : #label,			#protocol : #accessing,			#sourceCode : 'label\r\t^ astNode hasWatchpoint\r\t\tifTrue: [ \'Remove that watchpoint\' ]\r\t\tifFalse: [ \'Add a Watchpoint\' ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1439' ],		#self : OmReference [ '1440' ],		#time : DateAndTime [ '2018-01-14T19:02:30.289492-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltBrowseVersionsCommand,				#isMetaSide : false			},			#name : #execute,			#protocol : #execution,			#sourceCode : 'execute\r\tAltVersionBrowser\r\t\tbrowseVersionsForMethod: requestor selectedNode item compiledMethod',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1440' ],		#self : OmReference [ '1441' ],		#time : DateAndTime [ '2018-01-14T19:02:30.29043-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltBrowseVersionsCommand,				#isMetaSide : false			},			#name : #icon,			#protocol : #accessing,			#sourceCode : 'icon\r\t^ #smallSystemBrowserIcon',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1441' ],		#self : OmReference [ '1442' ],		#time : DateAndTime [ '2018-01-14T19:02:30.291313-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltBrowseVersionsCommand,				#isMetaSide : false			},			#name : #isActive,			#protocol : #testing,			#sourceCode : 'isActive\r\t^ true',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1442' ],		#self : OmReference [ '1443' ],		#time : DateAndTime [ '2018-01-14T19:02:30.292208-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltBrowseVersionsCommand,				#isMetaSide : false			},			#name : #keystroke,			#protocol : #accessing,			#sourceCode : 'keystroke\r\t^ $v command',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1443' ],		#self : OmReference [ '1444' ],		#time : DateAndTime [ '2018-01-14T19:02:30.293213-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltBrowseVersionsCommand,				#isMetaSide : false			},			#name : #label,			#protocol : #accessing,			#sourceCode : 'label\r\t^ \'Versions\'',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1444' ],		#self : OmReference [ '1445' ],		#time : DateAndTime [ '2018-01-14T19:02:30.294234-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltCancelTextCommand,				#isMetaSide : false			},			#name : #execute,			#protocol : #execution,			#sourceCode : 'execute\r\t"Avoid the confirmation dialog"\r\r\ttarget setText: target getText.\r\ttarget setSelection: target getSelection',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1445' ],		#self : OmReference [ '1446' ],		#time : DateAndTime [ '2018-01-14T19:02:30.295201-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltCancelTextCommand,				#isMetaSide : false			},			#name : #icon,			#protocol : #accessing,			#sourceCode : 'icon\r\t^ #smallCancelIcon',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1446' ],		#self : OmReference [ '1447' ],		#time : DateAndTime [ '2018-01-14T19:02:30.296081-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltCancelTextCommand,				#isMetaSide : false			},			#name : #isActive,			#protocol : #testing,			#sourceCode : 'isActive\r\t^ true',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1447' ],		#self : OmReference [ '1448' ],		#time : DateAndTime [ '2018-01-14T19:02:30.296927-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltCancelTextCommand,				#isMetaSide : false			},			#name : #keystroke,			#protocol : #accessing,			#sourceCode : 'keystroke\r\t^ $l ctrl',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1448' ],		#self : OmReference [ '1449' ],		#time : DateAndTime [ '2018-01-14T19:02:30.2996-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltCancelTextCommand,				#isMetaSide : false			},			#name : #label,			#protocol : #accessing,			#sourceCode : 'label\r\t^ \'Cancel\'',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1449' ],		#self : OmReference [ '1450' ],		#time : DateAndTime [ '2018-01-14T19:02:30.300854-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltClassFileOutCommand,				#isMetaSide : false			},			#name : #execute,			#protocol : #execution,			#sourceCode : 'execute\r\trequestor selectedNode item itemClass fileOut',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1450' ],		#self : OmReference [ '1451' ],		#time : DateAndTime [ '2018-01-14T19:02:30.301873-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltClassFileOutCommand,				#isMetaSide : false			},			#name : #isActive,			#protocol : #testing,			#sourceCode : 'isActive\r\t^ true',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1451' ],		#self : OmReference [ '1452' ],		#time : DateAndTime [ '2018-01-14T19:02:30.3028-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltClassFileOutCommand,				#isMetaSide : false			},			#name : #label,			#protocol : #accessing,			#sourceCode : 'label\r\t^ \'File out...\'',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1452' ],		#self : OmReference [ '1453' ],		#time : DateAndTime [ '2018-01-14T19:02:30.304028-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltClassHierarchyCommand,				#isMetaSide : false			},			#name : #execute,			#protocol : #execution,			#sourceCode : 'execute\r\t"Per object system navigation looks cool, but in practice it isn\'t that powerfull or offer any strong benefit."\r\r\t| aClass |\r\taClass := requestor selectedNode item itemClass theNonMetaClass ifNil: [ ^ self ].\r\trequestor class\r\t\topenOnEnvironment: (requestor rbEnvironment forClasses: {aClass} , aClass allSuperclasses , aClass allSubclasses)\r\t\tselect: requestor selectedNode item\r\t\twith: requestor selectedNode findExpanded',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1453' ],		#self : OmReference [ '1454' ],		#time : DateAndTime [ '2018-01-14T19:02:30.304959-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltClassHierarchyCommand,				#isMetaSide : false			},			#name : #icon,			#protocol : #accessing,			#sourceCode : 'icon\r\t^ #smallSystemBrowserIcon',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1454' ],		#self : OmReference [ '1455' ],		#time : DateAndTime [ '2018-01-14T19:02:30.305889-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltClassHierarchyCommand,				#isMetaSide : false			},			#name : #isActive,			#protocol : #testing,			#sourceCode : 'isActive\r\t^ true',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1455' ],		#self : OmReference [ '1456' ],		#time : DateAndTime [ '2018-01-14T19:02:30.306783-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltClassHierarchyCommand,				#isMetaSide : false			},			#name : #label,			#protocol : #accessing,			#sourceCode : 'label\r\t^ \'Hierarchy\'',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1456' ],		#self : OmReference [ '1457' ],		#time : DateAndTime [ '2018-01-14T19:02:30.307774-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltClassRefsCommand,				#isMetaSide : false			},			#name : #execute,			#protocol : #execution,			#sourceCode : 'execute\r\t"Strange, but convenient, to see that systemNavigation is defined for every object."\r\r\t| class |\r\tclass := requestor selectedNode item itemClass theNonMetaClass\r\t\tifNil: [ ^ self ].\r\tclass isTrait\r\t\tifTrue: [ self systemNavigation browseAllUsersOfTrait: class ]\r\t\tifFalse: [ AltBrowser\r\t\t\t\tfullOnMethods: (class allCallsOnIn: SystemNavigation default) ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1457' ],		#self : OmReference [ '1458' ],		#time : DateAndTime [ '2018-01-14T19:02:30.308698-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltClassRefsCommand,				#isMetaSide : false			},			#name : #icon,			#protocol : #accessing,			#sourceCode : 'icon\r\t^ #smallFindIcon',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1458' ],		#self : OmReference [ '1459' ],		#time : DateAndTime [ '2018-01-14T19:02:30.310959-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltClassRefsCommand,				#isMetaSide : false			},			#name : #isActive,			#protocol : #testing,			#sourceCode : 'isActive\r\t^ true',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1459' ],		#self : OmReference [ '1460' ],		#time : DateAndTime [ '2018-01-14T19:02:30.31186-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltClassRefsCommand,				#isMetaSide : false			},			#name : #label,			#protocol : #accessing,			#sourceCode : 'label\r\t^ \'Class refs\'',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1460' ],		#self : OmReference [ '1461' ],		#time : DateAndTime [ '2018-01-14T19:02:30.312833-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltCommand class',				#isMetaSide : true			},			#name : #'on:for:',			#protocol : #'instance creation',			#sourceCode : 'on: target for: requestor\r\t^ self new setTarget: target requestor: requestor',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1461' ],		#self : OmReference [ '1462' ],		#time : DateAndTime [ '2018-01-14T19:02:30.313873-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltCommand,				#isMetaSide : false			},			#name : #'addItemToMenu:',			#protocol : #'user interface',			#sourceCode : 'addItemToMenu: aMenu\r\t(self isActive and: [ self wantsMenu ])\r\t\tifTrue: [ \r\t\t\t(aMenu add: self label target: self selector: #execute)\r\t\t\t\tenablementSelector: #isEnabled;\r\t\t\t\ticon:\r\t\t\t\t\t\t(self icon ifNotNil: [ :iconSelector | Smalltalk ui icons iconNamed: iconSelector ]);\r\t\t\t\tkeyText: self keyString ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1462' ],		#self : OmReference [ '1463' ],		#time : DateAndTime [ '2018-01-14T19:02:30.314808-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltCommand,				#isMetaSide : false			},			#name : #'buildShortcut:',			#protocol : #'user interface',			#sourceCode : 'buildShortcut: aKMDispatcher\r\t"Add a shortcut to the keymap. Conditions : must have a keystroke, must wantsKeyboard and must be active."\r\r\t(self keystroke isNil or: [ self isActive not ])\r\t\tifTrue: [ ^ self ].\r\taKMDispatcher bindKeyCombination: self keystroke asKeyCombination toAction: [ self execute ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1463' ],		#self : OmReference [ '1464' ],		#time : DateAndTime [ '2018-01-14T19:02:30.315724-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltCommand,				#isMetaSide : false			},			#name : #execute,			#protocol : #execution,			#sourceCode : 'execute\r\tself subclassResponsibility',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1464' ],		#self : OmReference [ '1465' ],		#time : DateAndTime [ '2018-01-14T19:02:30.316596-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltCommand,				#isMetaSide : false			},			#name : #getItem,			#protocol : #accessing,			#sourceCode : 'getItem\r\t"Tree commands have an item the command may be interested in."\r\r\t^ requestor selectedNode item',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1465' ],		#self : OmReference [ '1466' ],		#time : DateAndTime [ '2018-01-14T19:02:30.317614-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltCommand,				#isMetaSide : false			},			#name : #icon,			#protocol : #accessing,			#sourceCode : 'icon\r\t^ nil',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1466' ],		#self : OmReference [ '1467' ],		#time : DateAndTime [ '2018-01-14T19:02:30.318512-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltCommand,				#isMetaSide : false			},			#name : #isActive,			#protocol : #testing,			#sourceCode : 'isActive\r\t^ false',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1467' ],		#self : OmReference [ '1468' ],		#time : DateAndTime [ '2018-01-14T19:02:30.321091-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltCommand,				#isMetaSide : false			},			#name : #isEnabled,			#protocol : #testing,			#sourceCode : 'isEnabled\r\t^ true',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1468' ],		#self : OmReference [ '1469' ],		#time : DateAndTime [ '2018-01-14T19:02:30.322252-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltCommand,				#isMetaSide : false			},			#name : #keyString,			#protocol : #accessing,			#sourceCode : 'keyString\r\t"Note: printing is broken on KeyCombination."\r\t\r\t| c |\r\t^ (c := self keystroke) isNil\r\t\tifFalse: [ (String streamContents: [ :stream | c printOn: stream ]) copyWithout: Character space ]\r\t\tifTrue: [ nil ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1469' ],		#self : OmReference [ '1470' ],		#time : DateAndTime [ '2018-01-14T19:02:30.32317-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltCommand,				#isMetaSide : false			},			#name : #keystroke,			#protocol : #accessing,			#sourceCode : 'keystroke\r\t^ nil\r',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1470' ],		#self : OmReference [ '1471' ],		#time : DateAndTime [ '2018-01-14T19:02:30.324084-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltCommand,				#isMetaSide : false			},			#name : #label,			#protocol : #accessing,			#sourceCode : 'label\r\tself subclassResponsibility\r',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1471' ],		#self : OmReference [ '1472' ],		#time : DateAndTime [ '2018-01-14T19:02:30.325206-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltCommand,				#isMetaSide : false			},			#name : #'on:for:',			#protocol : #accessing,			#sourceCode : 'on: anObject for: aRequestor\r\t^ self class on: anObject for: aRequestor',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1472' ],		#self : OmReference [ '1473' ],		#time : DateAndTime [ '2018-01-14T19:02:30.32626-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltCommand,				#isMetaSide : false			},			#name : #'setTarget:requestor:',			#protocol : #initialization,			#sourceCode : 'setTarget: anObject requestor: aRequestor \r\ttarget := anObject.\r\trequestor := aRequestor',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1473' ],		#self : OmReference [ '1474' ],		#time : DateAndTime [ '2018-01-14T19:02:30.327199-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltCommand,				#isMetaSide : false			},			#name : #wantsMenu,			#protocol : #testing,			#sourceCode : 'wantsMenu\r\t"true if the command wants to be in Menus."\r\r\t^ true\r',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1474' ],		#self : OmReference [ '1475' ],		#time : DateAndTime [ '2018-01-14T19:02:30.32813-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltCopyTextCommand,				#isMetaSide : false			},			#name : #execute,			#protocol : #execution,			#sourceCode : 'execute\r\ttarget copySelection',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1475' ],		#self : OmReference [ '1476' ],		#time : DateAndTime [ '2018-01-14T19:02:30.32909-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltCopyTextCommand,				#isMetaSide : false			},			#name : #icon,			#protocol : #accessing,			#sourceCode : 'icon\r\t^ #smallCopyIcon',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1476' ],		#self : OmReference [ '1477' ],		#time : DateAndTime [ '2018-01-14T19:02:30.329976-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltCopyTextCommand,				#isMetaSide : false			},			#name : #isActive,			#protocol : #testing,			#sourceCode : 'isActive\r\t^ true',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1477' ],		#self : OmReference [ '1478' ],		#time : DateAndTime [ '2018-01-14T19:02:30.332128-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltCopyTextCommand,				#isMetaSide : false			},			#name : #isEnabled,			#protocol : #testing,			#sourceCode : 'isEnabled\r\t^ target trueSelection isEmpty not',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1478' ],		#self : OmReference [ '1479' ],		#time : DateAndTime [ '2018-01-14T19:02:30.33325-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltCopyTextCommand,				#isMetaSide : false			},			#name : #keystroke,			#protocol : #accessing,			#sourceCode : 'keystroke\r\t^ $c ctrl',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1479' ],		#self : OmReference [ '1480' ],		#time : DateAndTime [ '2018-01-14T19:02:30.334378-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltCopyTextCommand,				#isMetaSide : false			},			#name : #label,			#protocol : #accessing,			#sourceCode : 'label\r\t^ \'Copy\'',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1480' ],		#self : OmReference [ '1481' ],		#time : DateAndTime [ '2018-01-14T19:02:30.335995-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltCreatePackageCategoryCommand,				#isMetaSide : false			},			#name : #execute,			#protocol : #execution,			#sourceCode : 'execute\r\t"Ask for a category name and create it."\r\r\t| name cat |\r\tname := UIManager default request: \'New Category name?\'.\r\tname ifNil: [ ^ self ].\r\t(requestor class findPackageCategory: name)\r\t\tifNotNil: [ :item | \r\t\t\tself inform: name , \' already exists\'.\r\t\t\t^ item ].\r\tcat := name -> OrderedCollection new.\r\trequestor selectedNode notNil\r\t\tifTrue: [ \r\t\t\trequestor selectedNode item addRPackage: cat.\r\t\t\trequestor class aNodeToRebuilt: requestor selectedNode item ]\r\t\tifFalse: [ \r\t\t\trequestor class root addRPackage: cat.\r\t\t\trequestor class aNodeToRebuilt: requestor class root ].\r\trequestor class updateCategories.\r\t^ requestor class findPackageCategory: name',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1481' ],		#self : OmReference [ '1482' ],		#time : DateAndTime [ '2018-01-14T19:02:30.337648-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltCreatePackageCategoryCommand,				#isMetaSide : false			},			#name : #isActive,			#protocol : #testing,			#sourceCode : 'isActive\r\t^ true',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1482' ],		#self : OmReference [ '1483' ],		#time : DateAndTime [ '2018-01-14T19:02:30.339185-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltCreatePackageCategoryCommand,				#isMetaSide : false			},			#name : #isEnabled,			#protocol : #testing,			#sourceCode : 'isEnabled\r\t^ requestor selectedNode isNil or: [ requestor selectedNode item isPackageCategoryNode ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1483' ],		#self : OmReference [ '1484' ],		#time : DateAndTime [ '2018-01-14T19:02:30.341116-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltCreatePackageCategoryCommand,				#isMetaSide : false			},			#name : #label,			#protocol : #accessing,			#sourceCode : 'label\r\t^\'Create \'',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1484' ],		#self : OmReference [ '1485' ],		#time : DateAndTime [ '2018-01-14T19:02:30.342629-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltCutCommand,				#isMetaSide : false			},			#name : #execute,			#protocol : #execution,			#sourceCode : 'execute\r\t"Use the AltBrowser temporary to store the item."\r\r\trequestor class temporary: requestor selectedNode item',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1485' ],		#self : OmReference [ '1486' ],		#time : DateAndTime [ '2018-01-14T19:02:30.343841-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltCutCommand,				#isMetaSide : false			},			#name : #icon,			#protocol : #accessing,			#sourceCode : 'icon\r\t^ #smallCutIcon',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1486' ],		#self : OmReference [ '1487' ],		#time : DateAndTime [ '2018-01-14T19:02:30.345987-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltCutCommand,				#isMetaSide : false			},			#name : #isActive,			#protocol : #testing,			#sourceCode : 'isActive\r\t^ true',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1487' ],		#self : OmReference [ '1488' ],		#time : DateAndTime [ '2018-01-14T19:02:30.34738-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltCutCommand,				#isMetaSide : false			},			#name : #keystroke,			#protocol : #accessing,			#sourceCode : 'keystroke\r\t^ $x ctrl',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1488' ],		#self : OmReference [ '1489' ],		#time : DateAndTime [ '2018-01-14T19:02:30.348403-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltCutCommand,				#isMetaSide : false			},			#name : #label,			#protocol : #accessing,			#sourceCode : 'label\r\t^ \'Cut\'\r\t',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1489' ],		#self : OmReference [ '1490' ],		#time : DateAndTime [ '2018-01-14T19:02:30.349574-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltCutTextCommand,				#isMetaSide : false			},			#name : #execute,			#protocol : #execution,			#sourceCode : 'execute\r\ttarget cut',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1490' ],		#self : OmReference [ '1491' ],		#time : DateAndTime [ '2018-01-14T19:02:30.350655-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltCutTextCommand,				#isMetaSide : false			},			#name : #icon,			#protocol : #accessing,			#sourceCode : 'icon\r\t^ #smallCutIcon',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1491' ],		#self : OmReference [ '1492' ],		#time : DateAndTime [ '2018-01-14T19:02:30.35216-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltCutTextCommand,				#isMetaSide : false			},			#name : #isActive,			#protocol : #testing,			#sourceCode : 'isActive\r\t^ true',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1492' ],		#self : OmReference [ '1493' ],		#time : DateAndTime [ '2018-01-14T19:02:30.353386-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltCutTextCommand,				#isMetaSide : false			},			#name : #isEnabled,			#protocol : #testing,			#sourceCode : 'isEnabled\r\t^ target trueSelection isEmpty not',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1493' ],		#self : OmReference [ '1494' ],		#time : DateAndTime [ '2018-01-14T19:02:30.354721-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltCutTextCommand,				#isMetaSide : false			},			#name : #keystroke,			#protocol : #accessing,			#sourceCode : 'keystroke\r\t^ $x ctrl',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1494' ],		#self : OmReference [ '1495' ],		#time : DateAndTime [ '2018-01-14T19:02:30.355946-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltCutTextCommand,				#isMetaSide : false			},			#name : #label,			#protocol : #accessing,			#sourceCode : 'label\r\t^ \'Cut\'',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1495' ],		#self : OmReference [ '1496' ],		#time : DateAndTime [ '2018-01-14T19:02:30.357227-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltCutTextCommand,				#isMetaSide : false			},			#name : #order,			#protocol : #accessing,			#sourceCode : 'order\r\t^ \'1\'',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1496' ],		#self : OmReference [ '1497' ],		#time : DateAndTime [ '2018-01-14T19:02:30.359892-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltDebugTestCommand,				#isMetaSide : false			},			#name : #execute,			#protocol : #execution,			#sourceCode : 'execute\r\t"Run the test and notify."\r\r\t| testSelector testClass testMethod color |\r\ttestSelector := requestor selectedNode item selector.\r\ttestClass := requestor selectedNode sourceClass.\r\ttestClass debug: testSelector.\r\tcolor := (testClass methodPassed: testSelector)\r\t\tifTrue: [ Color green ]\r\t\tifFalse: [ (testClass methodFailed: testSelector)\r\t\t\t\tifTrue: [ Color yellow ]\r\t\t\t\tifFalse: [ (testClass methodRaisedError: testSelector)\r\t\t\t\t\t\tifTrue: [ Color red ]\r\t\t\t\t\t\tifFalse: [ Color gray ] ] ].\r\tGrowlMorph\r\t\topenWithLabel: \'Test ended\'\r\t\tcontents: \'Method: \' , testClass asString , \'>>#\' , testSelector asString\r\t\tbackgroundColor: color\r\t\tlabelColor: Color black',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1497' ],		#self : OmReference [ '1498' ],		#time : DateAndTime [ '2018-01-14T19:02:30.361636-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltDebugTestCommand,				#isMetaSide : false			},			#name : #icon,			#protocol : #accessing,			#sourceCode : 'icon\r\t^ #smallDoItIcon',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1498' ],		#self : OmReference [ '1499' ],		#time : DateAndTime [ '2018-01-14T19:02:30.362877-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltDebugTestCommand,				#isMetaSide : false			},			#name : #isActive,			#protocol : #testing,			#sourceCode : 'isActive\r\t^ requestor selectedNode sourceClass inheritsFrom: TestCase',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1499' ],		#self : OmReference [ '1500' ],		#time : DateAndTime [ '2018-01-14T19:02:30.36404-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltDebugTestCommand,				#isMetaSide : false			},			#name : #isEnabled,			#protocol : #testing,			#sourceCode : 'isEnabled\r\t^ (requestor selectedNode sourceClass inheritsFrom: TestCase)\r\t\tand: [ requestor selectedNode item selector beginsWith: \'test\' ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1500' ],		#self : OmReference [ '1501' ],		#time : DateAndTime [ '2018-01-14T19:02:30.365187-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltDebugTestCommand,				#isMetaSide : false			},			#name : #label,			#protocol : #accessing,			#sourceCode : 'label\r\t^ \'Run test\'',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1501' ],		#self : OmReference [ '1502' ],		#time : DateAndTime [ '2018-01-14T19:02:30.366668-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltDebugItTextCommand,				#isMetaSide : false			},			#name : #execute,			#protocol : #execution,			#sourceCode : 'execute\r\t| result rcvr methodNode aCompiledMethod guineaPig context debugSession |\r\trcvr := requestor selectedNode doItReceiver.\r\tmethodNode := rcvr class compiler\r\t\tsource: (ReadStream on: target trueSelection);\r\t\tclass: rcvr class;\r\t\tcontext: nil;\r\t\trequestor: target;\r\t\tnoPattern: true;\r\t\tfailBlock: [ ^ nil ];\r\t\ttranslate.\r\taCompiledMethod := methodNode generateWithSource.\r\tguineaPig := [ aCompiledMethod valueWithReceiver: rcvr arguments: #() ]\r\t\tnewProcess.\r\tcontext := guineaPig suspendedContext.\r\tdebugSession := guineaPig\r\t\tnewDebugSessionNamed: \'debug it\'\r\t\tstartedAt: context.\r\tdebugSession\r\t\tstepIntoUntil: [ :currentContext | currentContext method == aCompiledMethod ].\r\tSmalltalk tools debugger openOn: debugSession withFullView: true',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1502' ],		#self : OmReference [ '1503' ],		#time : DateAndTime [ '2018-01-14T19:02:30.367887-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltDebugItTextCommand,				#isMetaSide : false			},			#name : #icon,			#protocol : #accessing,			#sourceCode : 'icon\r\t^ #smallDebugIcon',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1503' ],		#self : OmReference [ '1504' ],		#time : DateAndTime [ '2018-01-14T19:02:30.368941-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltDebugItTextCommand,				#isMetaSide : false			},			#name : #isActive,			#protocol : #testing,			#sourceCode : 'isActive\r\t^ true',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1504' ],		#self : OmReference [ '1505' ],		#time : DateAndTime [ '2018-01-14T19:02:30.370029-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltDebugItTextCommand,				#isMetaSide : false			},			#name : #keystroke,			#protocol : #accessing,			#sourceCode : 'keystroke\r\t^ $d ctrl shift',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1505' ],		#self : OmReference [ '1506' ],		#time : DateAndTime [ '2018-01-14T19:02:30.371217-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltDebugItTextCommand,				#isMetaSide : false			},			#name : #label,			#protocol : #accessing,			#sourceCode : 'label\r\t^ \'Debug it\'',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1506' ],		#self : OmReference [ '1507' ],		#time : DateAndTime [ '2018-01-14T19:02:30.374113-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltDoItTextCommand,				#isMetaSide : false			},			#name : #execute,			#protocol : #execution,			#sourceCode : 'execute\r\t"Treat the current selection as an expression; evaluate it."\r\r\t| result rcvr |\r\trcvr := requestor selectedNode doItReceiver.\r\tresult := [ rcvr class compilerClass new\r\t\tevaluate: (ReadStream on: target trueSelection)\r\t\tin: requestor selectedNode doItContext\r\t\tto: rcvr\r\t\tnotifying: target\r\t\tifFail: [ target flash.\r\t\t\t^ nil ]\r\t\tlogged: true\t"don\'t set it to self.. The receiver can be destroyed as a result of evaluateSelection" ]\r\t\ton: SyntaxErrorNotification\r\t\tdo: [ :ex | ex resume: true ].\r\t^ result',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1507' ],		#self : OmReference [ '1508' ],		#time : DateAndTime [ '2018-01-14T19:02:30.375275-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltDoItTextCommand,				#isMetaSide : false			},			#name : #icon,			#protocol : #accessing,			#sourceCode : 'icon\r\t^ #smallDoItIcon',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1508' ],		#self : OmReference [ '1509' ],		#time : DateAndTime [ '2018-01-14T19:02:30.376426-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltDoItTextCommand,				#isMetaSide : false			},			#name : #isActive,			#protocol : #testing,			#sourceCode : 'isActive\r\t^ target readSelection notNil',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1509' ],		#self : OmReference [ '1510' ],		#time : DateAndTime [ '2018-01-14T19:02:30.377459-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltDoItTextCommand,				#isMetaSide : false			},			#name : #isEnabled,			#protocol : #testing,			#sourceCode : 'isEnabled\r\t^ target trueSelection notEmpty',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1510' ],		#self : OmReference [ '1511' ],		#time : DateAndTime [ '2018-01-14T19:02:30.378549-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltDoItTextCommand,				#isMetaSide : false			},			#name : #keystroke,			#protocol : #accessing,			#sourceCode : 'keystroke\r\t^ $d ctrl',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1511' ],		#self : OmReference [ '1512' ],		#time : DateAndTime [ '2018-01-14T19:02:30.379725-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltDoItTextCommand,				#isMetaSide : false			},			#name : #label,			#protocol : #accessing,			#sourceCode : 'label\r\t^ \'Do it\'',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1512' ],		#self : OmReference [ '1513' ],		#time : DateAndTime [ '2018-01-14T19:02:30.381529-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltInspectItTextCommand,				#isMetaSide : false			},			#name : #execute,			#protocol : #execution,			#sourceCode : 'execute\r\tsuper execute inspect',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1513' ],		#self : OmReference [ '1514' ],		#time : DateAndTime [ '2018-01-14T19:02:30.38279-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltInspectItTextCommand,				#isMetaSide : false			},			#name : #icon,			#protocol : #accessing,			#sourceCode : 'icon\r\t^ #smallInspectItIcon',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1514' ],		#self : OmReference [ '1515' ],		#time : DateAndTime [ '2018-01-14T19:02:30.383793-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltInspectItTextCommand,				#isMetaSide : false			},			#name : #isActive,			#protocol : #testing,			#sourceCode : 'isActive\r\t^ true',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1515' ],		#self : OmReference [ '1516' ],		#time : DateAndTime [ '2018-01-14T19:02:30.386098-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltInspectItTextCommand,				#isMetaSide : false			},			#name : #keystroke,			#protocol : #accessing,			#sourceCode : 'keystroke\r\t^ $i ctrl',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1516' ],		#self : OmReference [ '1517' ],		#time : DateAndTime [ '2018-01-14T19:02:30.387393-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltInspectItTextCommand,				#isMetaSide : false			},			#name : #label,			#protocol : #accessing,			#sourceCode : 'label\r\t^ \'Inspect it\'',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1517' ],		#self : OmReference [ '1518' ],		#time : DateAndTime [ '2018-01-14T19:02:30.388612-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltInspectItTextCommand,				#isMetaSide : false			},			#name : #order,			#protocol : #accessing,			#sourceCode : 'order\r\t^ \'3\'',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1518' ],		#self : OmReference [ '1519' ],		#time : DateAndTime [ '2018-01-14T19:02:30.390033-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPrintItTextCommand,				#isMetaSide : false			},			#name : #execute,			#protocol : #execution,			#sourceCode : 'execute\r\t| result printString oldEditor selectionInterval |\r\ttarget textMorph\r\t\thandleEdit: [ oldEditor := target textMorph editor.\r\t\t\tresult := super execute.\r\t\t\tprintString := [ result printString ]\r\t\t\t\ton: Error\r\t\t\t\tdo: [ \'<error in printString: try \'\'Inspect it\'\' to debug>\' ].\r\t\t\tselectionInterval := oldEditor selectionInterval.\r\t\t\ttarget textMorph installEditorToReplace: oldEditor.\r\t\t\ttarget textMorph\r\t\t\t\thandleEdit: [ oldEditor afterSelectionInsertAndSelect: printString ].\r\t\t\tselectionInterval := oldEditor selectionInterval.\r\t\t\ttarget textMorph editor\r\t\t\t\tselectFrom: selectionInterval first\r\t\t\t\tto: selectionInterval last.\r\t\t\ttarget scrollSelectionIntoView ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1519' ],		#self : OmReference [ '1520' ],		#time : DateAndTime [ '2018-01-14T19:02:30.391212-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPrintItTextCommand,				#isMetaSide : false			},			#name : #icon,			#protocol : #accessing,			#sourceCode : 'icon\r\t^ #smallPrintIcon',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1520' ],		#self : OmReference [ '1521' ],		#time : DateAndTime [ '2018-01-14T19:02:30.39229-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPrintItTextCommand,				#isMetaSide : false			},			#name : #isActive,			#protocol : #testing,			#sourceCode : 'isActive\r\t^ true',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1521' ],		#self : OmReference [ '1522' ],		#time : DateAndTime [ '2018-01-14T19:02:30.393293-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPrintItTextCommand,				#isMetaSide : false			},			#name : #keystroke,			#protocol : #accessing,			#sourceCode : 'keystroke\r\t^ $p ctrl',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1522' ],		#self : OmReference [ '1523' ],		#time : DateAndTime [ '2018-01-14T19:02:30.394298-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPrintItTextCommand,				#isMetaSide : false			},			#name : #label,			#protocol : #accessing,			#sourceCode : 'label\r\t^ \'Print it\'',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1523' ],		#self : OmReference [ '1524' ],		#time : DateAndTime [ '2018-01-14T19:02:30.395346-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltCurlyBracketsTextCommand,				#isMetaSide : false			},			#name : #closingChar,			#protocol : #accessing,			#sourceCode : 'closingChar\r\t^ $}',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1524' ],		#self : OmReference [ '1525' ],		#time : DateAndTime [ '2018-01-14T19:02:30.396463-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltCurlyBracketsTextCommand,				#isMetaSide : false			},			#name : #emptyEnclosingString,			#protocol : #accessing,			#sourceCode : 'emptyEnclosingString\r\t"To be customized for enclosing with spaces after and before the enclosing chars."\r\r\t^ String\r\t\twith: self openingChar\r\t\twith: $ \r\t\twith: $ \r\t\twith: self closingChar',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1525' ],		#self : OmReference [ '1526' ],		#time : DateAndTime [ '2018-01-14T19:02:30.399803-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltCurlyBracketsTextCommand,				#isMetaSide : false			},			#name : #openingChar,			#protocol : #accessing,			#sourceCode : 'openingChar\r\t^ ${',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1526' ],		#self : OmReference [ '1527' ],		#time : DateAndTime [ '2018-01-14T19:02:30.401034-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltDoubleQuotesTextCommand,				#isMetaSide : false			},			#name : #closingChar,			#protocol : #accessing,			#sourceCode : 'closingChar\r\t^ $"',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1527' ],		#self : OmReference [ '1528' ],		#time : DateAndTime [ '2018-01-14T19:02:30.402814-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltDoubleQuotesTextCommand,				#isMetaSide : false			},			#name : #execute,			#protocol : #execution,			#sourceCode : 'execute\r\t"Either add the character or put parenthesis around the selection. Remove the parenthesis around the selection if they exist."\r\r\t"What I need in fact are the character just before the selection and just after the selection."\r\r\t| interval text int aTextMorph beforeChar afterChar |\r\tinterval := target trueSelectionInterval.\r\taTextMorph := target textMorph.\r\ttext := aTextMorph text.\r\tbeforeChar := self\r\t\ttextMorph: aTextMorph\r\t\tcharacterAt: interval first - 1.\r\tafterChar := self\r\t\ttextMorph: aTextMorph\r\t\tcharacterAt: interval last + 1.\r\taTextMorph\r\t\thandleEdit: [ interval size = 0\r\t\t\t\tifTrue: [ ((afterChar isNil or: [ afterChar isSeparator ]) and: [ beforeChar ~= $$ ])\r\t\t\t\t\t\tifTrue: [ | newPos |\r\t\t\t\t\t\t\taTextMorph replaceSelectionWith: self emptyEnclosingString.\r\t\t\t\t\t\t\tnewPos := interval first\r\t\t\t\t\t\t\t\t+ (self emptyEnclosingString size / 2) truncated.\r\t\t\t\t\t\t\taTextMorph selectFrom: newPos to: newPos - 1 ]\r\t\t\t\t\t\tifFalse: [ aTextMorph simulateKeyStroke: self openingChar ] ]\r\t\t\t\tifFalse:\r\t\t\t\t\t[ int := (interval first - 1 max: 1) to: (interval last + 1 min: text size).\r\t\t\t\t\t(beforeChar = self openingChar\r\t\t\t\t\t\tand: [ afterChar = self closingChar ])\r\t\t\t\t\t\tifTrue: [ aTextMorph selectFrom: int first to: int last.\r\t\t\t\t\t\t\taTextMorph\r\t\t\t\t\t\t\t\treplaceSelectionWith:\r\t\t\t\t\t\t\t\t\t((text copyFrom: interval first to: interval last)\r\t\t\t\t\t\t\t\t\t\tcopyReplaceAll: \'""\'\r\t\t\t\t\t\t\t\t\t\twith: \'"\') ]\r\t\t\t\t\t\tifFalse: [ aTextMorph\r\t\t\t\t\t\t\t\treplaceSelectionWith:\r\t\t\t\t\t\t\t\t\t(String with: self openingChar)\r\t\t\t\t\t\t\t\t\t\t,\r\t\t\t\t\t\t\t\t\t\t\t((text copyFrom: interval first to: interval last)\r\t\t\t\t\t\t\t\t\t\t\t\tcopyReplaceAll: \'"\'\r\t\t\t\t\t\t\t\t\t\t\t\twith: \'""\') , (String with: self closingChar) ] ] ].\r\t(aTextMorph respondsTo: #editView)\r\t\tifTrue: [ aTextMorph editView\r\t\t\t\tselectionInterval: aTextMorph editor selectionInterval ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1528' ],		#self : OmReference [ '1529' ],		#time : DateAndTime [ '2018-01-14T19:02:30.403991-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltDoubleQuotesTextCommand,				#isMetaSide : false			},			#name : #openingChar,			#protocol : #accessing,			#sourceCode : 'openingChar\r\t^ $"',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1529' ],		#self : OmReference [ '1530' ],		#time : DateAndTime [ '2018-01-14T19:02:30.405221-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltEncloseTextCommand,				#isMetaSide : false			},			#name : #closingChar,			#protocol : #accessing,			#sourceCode : 'closingChar\r\t^ self subclassResponsability',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1530' ],		#self : OmReference [ '1531' ],		#time : DateAndTime [ '2018-01-14T19:02:30.406369-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltEncloseTextCommand,				#isMetaSide : false			},			#name : #emptyEnclosingString,			#protocol : #accessing,			#sourceCode : 'emptyEnclosingString\r\t"To be customized for enclosing with spaces after and before the enclosing chars."\r\t\r\t^ String with: self openingChar with: self closingChar',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1531' ],		#self : OmReference [ '1532' ],		#time : DateAndTime [ '2018-01-14T19:02:30.407695-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltEncloseTextCommand,				#isMetaSide : false			},			#name : #execute,			#protocol : #execution,			#sourceCode : 'execute\r\t"Either add the character or put parenthesis around the selection. Remove the parenthesis around the selection if they exist."\r\r\t"What I need in fact are the character just before the selection and just after the selection."\r\r\t| interval text int aTextMorph beforeChar afterChar |\r\tinterval := target trueSelectionInterval.\r\taTextMorph := target textMorph.\r\ttext := aTextMorph text.\r\tbeforeChar := self\r\t\ttextMorph: aTextMorph\r\t\tcharacterAt: interval first - 1.\r\tafterChar := self\r\t\ttextMorph: aTextMorph\r\t\tcharacterAt: interval last + 1.\r\taTextMorph\r\t\thandleEdit: [ interval size = 0\r\t\t\t\tifTrue: [ ((afterChar isNil or: [ afterChar isSeparator ])\r\t\t\t\t\t\tand: [ beforeChar ~= $$ ])\r\t\t\t\t\t\tifTrue: [ | newPos |\r\t\t\t\t\t\t\taTextMorph replaceSelectionWith: self emptyEnclosingString.\r\t\t\t\t\t\t\tnewPos := interval first\r\t\t\t\t\t\t\t\t+ (self emptyEnclosingString size / 2) truncated.\r\t\t\t\t\t\t\taTextMorph selectFrom: newPos to: newPos - 1 ]\r\t\t\t\t\t\tifFalse: [ aTextMorph simulateKeyStroke: self openingChar ] ]\r\t\t\t\tifFalse:\r\t\t\t\t\t[ int := (interval first - 1 max: 1) to: (interval last + 1 min: text size).\r\t\t\t\t\t(beforeChar = self openingChar\r\t\t\t\t\t\tand: [ afterChar = self closingChar ])\r\t\t\t\t\t\tifTrue: [ aTextMorph selectFrom: int first to: int last.\r\t\t\t\t\t\t\taTextMorph\r\t\t\t\t\t\t\t\treplaceSelectionWith: (text copyFrom: interval first to: interval last) ]\r\t\t\t\t\t\tifFalse: [ aTextMorph\r\t\t\t\t\t\t\t\treplaceSelectionWith:\r\t\t\t\t\t\t\t\t\t(String with: self openingChar) , target trueSelection\r\t\t\t\t\t\t\t\t\t\t, (String with: self closingChar) ] ] ].\r\t(aTextMorph respondsTo: #editView)\r\t\tifTrue: [ aTextMorph editView\r\t\t\t\tselectionInterval: aTextMorph editor selectionInterval ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1532' ],		#self : OmReference [ '1533' ],		#time : DateAndTime [ '2018-01-14T19:02:30.408788-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltEncloseTextCommand,				#isMetaSide : false			},			#name : #isActive,			#protocol : #testing,			#sourceCode : 'isActive\r\t^ true',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1533' ],		#self : OmReference [ '1534' ],		#time : DateAndTime [ '2018-01-14T19:02:30.409818-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltEncloseTextCommand,				#isMetaSide : false			},			#name : #keystroke,			#protocol : #accessing,			#sourceCode : 'keystroke\r\t^ self openingChar',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1534' ],		#self : OmReference [ '1535' ],		#time : DateAndTime [ '2018-01-14T19:02:30.411135-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltEncloseTextCommand,				#isMetaSide : false			},			#name : #openingChar,			#protocol : #accessing,			#sourceCode : 'openingChar\r\t^ self subclassResponsability',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1535' ],		#self : OmReference [ '1536' ],		#time : DateAndTime [ '2018-01-14T19:02:30.412537-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltEncloseTextCommand,				#isMetaSide : false			},			#name : #'textMorph:characterAt:',			#protocol : #private,			#sourceCode : 'textMorph: aTextMorph characterAt: anIndex\r\t"This should be part of the API of a text morph, really."\r\t\r\t| text |\r\ttext := aTextMorph text.\r\tanIndex < 1 ifTrue: [ ^ nil ].\r\tanIndex > text size ifTrue: [ ^ nil ].\r\t^ text at: anIndex\r\t',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1536' ],		#self : OmReference [ '1537' ],		#time : DateAndTime [ '2018-01-14T19:02:30.41402-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltEncloseTextCommand,				#isMetaSide : false			},			#name : #wantsMenu,			#protocol : #testing,			#sourceCode : 'wantsMenu\r\t^ false',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1537' ],		#self : OmReference [ '1538' ],		#time : DateAndTime [ '2018-01-14T19:02:30.41538-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltParenthesisTextCommand,				#isMetaSide : false			},			#name : #closingChar,			#protocol : #accessing,			#sourceCode : 'closingChar\r\t^ $)',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1538' ],		#self : OmReference [ '1539' ],		#time : DateAndTime [ '2018-01-14T19:02:30.417064-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltParenthesisTextCommand,				#isMetaSide : false			},			#name : #openingChar,			#protocol : #accessing,			#sourceCode : 'openingChar\r\t^ $(',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1539' ],		#self : OmReference [ '1540' ],		#time : DateAndTime [ '2018-01-14T19:02:30.41927-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltSquareBracketsTextCommand,				#isMetaSide : false			},			#name : #closingChar,			#protocol : #accessing,			#sourceCode : 'closingChar\r\t^ $]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1540' ],		#self : OmReference [ '1541' ],		#time : DateAndTime [ '2018-01-14T19:02:30.421067-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltSquareBracketsTextCommand,				#isMetaSide : false			},			#name : #emptyEnclosingString,			#protocol : #accessing,			#sourceCode : 'emptyEnclosingString\r\t"To be customized for enclosing with spaces after and before the enclosing chars."\r\r\t^ String\r\t\twith: self openingChar\r\t\twith: $ \r\t\twith: $ \r\t\twith: self closingChar',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1541' ],		#self : OmReference [ '1542' ],		#time : DateAndTime [ '2018-01-14T19:02:30.422608-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltSquareBracketsTextCommand,				#isMetaSide : false			},			#name : #openingChar,			#protocol : #accessing,			#sourceCode : 'openingChar\r\t^ $[',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1542' ],		#self : OmReference [ '1543' ],		#time : DateAndTime [ '2018-01-14T19:02:30.424099-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltExpandCommand,				#isMetaSide : false			},			#name : #execute,			#protocol : #execution,			#sourceCode : 'execute\r\t"Toggle the node."\r\r\trequestor selectedNode\r\t\tifNil: [ ^ self ]\r\t\tifNotNil: [ :node | \r\t\t\tnode hasContents\r\t\t\t\tifTrue: [ node toggleExpanded ] ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1543' ],		#self : OmReference [ '1544' ],		#time : DateAndTime [ '2018-01-14T19:02:30.425903-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltExpandCommand,				#isMetaSide : false			},			#name : #isActive,			#protocol : #testing,			#sourceCode : 'isActive\r\t"Can also be achieved by associating it with AltAbstractNode; in which case it will only be active if a node is selected."\r\r\t^ requestor selectedNode notNil',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1544' ],		#self : OmReference [ '1545' ],		#time : DateAndTime [ '2018-01-14T19:02:30.427632-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltExpandCommand,				#isMetaSide : false			},			#name : #keystroke,			#protocol : #accessing,			#sourceCode : 'keystroke\r\t^ Character cr asKeyCombination',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1545' ],		#self : OmReference [ '1546' ],		#time : DateAndTime [ '2018-01-14T19:02:30.429261-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltExpandCommand,				#isMetaSide : false			},			#name : #wantsMenu,			#protocol : #testing,			#sourceCode : 'wantsMenu\r\t^ false',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1546' ],		#self : OmReference [ '1547' ],		#time : DateAndTime [ '2018-01-14T19:02:30.430405-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltExploreItemCommand,				#isMetaSide : false			},			#name : #execute,			#protocol : #execution,			#sourceCode : 'execute\r\trequestor selectedNode item inspect',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1547' ],		#self : OmReference [ '1548' ],		#time : DateAndTime [ '2018-01-14T19:02:30.431366-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltExploreItemCommand,				#isMetaSide : false			},			#name : #icon,			#protocol : #accessing,			#sourceCode : 'icon\r\t^ #smallInspectItIcon',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1548' ],		#self : OmReference [ '1549' ],		#time : DateAndTime [ '2018-01-14T19:02:30.432271-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltExploreItemCommand,				#isMetaSide : false			},			#name : #isActive,			#protocol : #testing,			#sourceCode : 'isActive\r\t^ requestor class debug',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1549' ],		#self : OmReference [ '1550' ],		#time : DateAndTime [ '2018-01-14T19:02:30.433155-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltExploreItemCommand,				#isMetaSide : false			},			#name : #isEnabled,			#protocol : #testing,			#sourceCode : 'isEnabled\r\t^ requestor selectedNode notNil',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1550' ],		#self : OmReference [ '1551' ],		#time : DateAndTime [ '2018-01-14T19:02:30.434106-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltExploreItemCommand,				#isMetaSide : false			},			#name : #keystroke,			#protocol : #accessing,			#sourceCode : 'keystroke\r\t^ $l ctrl',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1551' ],		#self : OmReference [ '1552' ],		#time : DateAndTime [ '2018-01-14T19:02:30.435001-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltExploreItemCommand,				#isMetaSide : false			},			#name : #label,			#protocol : #accessing,			#sourceCode : 'label\r\t^ \'ExploreIt\'',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1552' ],		#self : OmReference [ '1553' ],		#time : DateAndTime [ '2018-01-14T19:02:30.436115-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltFindClassCommand,				#isMetaSide : false			},			#name : #execute,			#protocol : #execution,			#sourceCode : 'execute\r\t"Find a class."\r\r\t| aClass found |\r\taClass := (SearchFacade classSearchIn: (requestor rbEnvironment classesAndTraits sorted: [ :a :b | a name < b name ]))\r\t\tchooseFromOwner: target owner.\r\taClass isNil\r\t\tifTrue: [ \r\t\t\tself inform: \'Class search canceled \'.\r\t\t\t^ self ].\r\trequestor class rootItems\r\t\tdo: [ :each | \r\t\t\t| res |\r\t\t\t(res := each findClass: aClass) notNil\r\t\t\t\tifTrue: [ found := res ] ].\r\tfound isNil\r\t\tifTrue: [ \r\t\t\tself inform: \'Unable to select class \' , aClass name.\r\t\t\t^ self ].\r\trequestor selectPathForAbstractItem: found',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1553' ],		#self : OmReference [ '1554' ],		#time : DateAndTime [ '2018-01-14T19:02:30.437169-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltFindClassCommand,				#isMetaSide : false			},			#name : #isActive,			#protocol : #testing,			#sourceCode : 'isActive\r\t^ true',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1554' ],		#self : OmReference [ '1555' ],		#time : DateAndTime [ '2018-01-14T19:02:30.438494-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltFindClassCommand,				#isMetaSide : false			},			#name : #keystroke,			#protocol : #accessing,			#sourceCode : 'keystroke\r\t^ $c command',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1555' ],		#self : OmReference [ '1556' ],		#time : DateAndTime [ '2018-01-14T19:02:30.439561-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltFindClassCommand,				#isMetaSide : false			},			#name : #label,			#protocol : #accessing,			#sourceCode : 'label\r\t^ \'Find Class\'',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1556' ],		#self : OmReference [ '1557' ],		#time : DateAndTime [ '2018-01-14T19:02:30.440577-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltFinderCommand,				#isMetaSide : false			},			#name : #execute,			#protocol : #execution,			#sourceCode : 'execute\r\t"It is a toggle. Either the toolbar is there or not."\r\t\r\trequestor toggleFinder',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1557' ],		#self : OmReference [ '1558' ],		#time : DateAndTime [ '2018-01-14T19:02:30.441501-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltFinderCommand,				#isMetaSide : false			},			#name : #isActive,			#protocol : #testing,			#sourceCode : 'isActive\r\t^ true',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1558' ],		#self : OmReference [ '1559' ],		#time : DateAndTime [ '2018-01-14T19:02:30.442453-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltFinderCommand,				#isMetaSide : false			},			#name : #keystroke,			#protocol : #accessing,			#sourceCode : 'keystroke\r\t^ $f ctrl asKeyCombination',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1559' ],		#self : OmReference [ '1560' ],		#time : DateAndTime [ '2018-01-14T19:02:30.443331-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltFinderCommand,				#isMetaSide : false			},			#name : #label,			#protocol : #accessing,			#sourceCode : 'label\r\t^ \'Finder\'',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1560' ],		#self : OmReference [ '1561' ],		#time : DateAndTime [ '2018-01-14T19:02:30.444247-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltFinderOffCommand,				#isMetaSide : false			},			#name : #isActive,			#protocol : #testing,			#sourceCode : 'isActive\r\t^ requestor hasFinder',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1561' ],		#self : OmReference [ '1562' ],		#time : DateAndTime [ '2018-01-14T19:02:30.445706-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltFinderOffCommand,				#isMetaSide : false			},			#name : #keystroke,			#protocol : #accessing,			#sourceCode : 'keystroke\r\t^ Character escape asKeyCombination',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1562' ],		#self : OmReference [ '1563' ],		#time : DateAndTime [ '2018-01-14T19:02:30.446636-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltFinderOffCommand,				#isMetaSide : false			},			#name : #wantsMenu,			#protocol : #testing,			#sourceCode : 'wantsMenu\r\t^ false',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1563' ],		#self : OmReference [ '1564' ],		#time : DateAndTime [ '2018-01-14T19:02:30.447981-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltGoToSubclassCommand,				#isMetaSide : false			},			#name : #execute,			#protocol : #execution,			#sourceCode : 'execute\r\t"To be done."\r\t\r\t| found aClass |\r\taClass := requestor selectedNode item subclasses first.\r\trequestor class rootItems\r\t\tdo: [ :each | \r\t\t\t| res |\r\t\t\t(res := each findClass: aClass) notNil\r\t\t\t\tifTrue: [ found := res ] ].\r\tfound isNil ifTrue: [  ^ nil ].\r\trequestor selectPathForAbstractItem: found',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1564' ],		#self : OmReference [ '1565' ],		#time : DateAndTime [ '2018-01-14T19:02:30.449007-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltGoToSubclassCommand,				#isMetaSide : false			},			#name : #isActive,			#protocol : #testing,			#sourceCode : 'isActive\r\t^ true',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1565' ],		#self : OmReference [ '1566' ],		#time : DateAndTime [ '2018-01-14T19:02:30.449955-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltGoToSubclassCommand,				#isMetaSide : false			},			#name : #isEnabled,			#protocol : #testing,			#sourceCode : 'isEnabled\r\t^ requestor selectedNode item subclasses notEmpty',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1566' ],		#self : OmReference [ '1567' ],		#time : DateAndTime [ '2018-01-14T19:02:30.450857-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltGoToSubclassCommand,				#isMetaSide : false			},			#name : #keystroke,			#protocol : #accessing,			#sourceCode : 'keystroke\r\t^ $n command, $u',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1567' ],		#self : OmReference [ '1568' ],		#time : DateAndTime [ '2018-01-14T19:02:30.451767-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltGoToSubclassCommand,				#isMetaSide : false			},			#name : #label,			#protocol : #accessing,			#sourceCode : 'label\r\t^ \'Subclass\'',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1568' ],		#self : OmReference [ '1569' ],		#time : DateAndTime [ '2018-01-14T19:02:30.452932-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltGoToSuperMethodCommand,				#isMetaSide : false			},			#name : #execute,			#protocol : #execution,			#sourceCode : 'execute\r\t"Move to that place. Can only be called if enabled."\r\r\t| tClass tClassNode tMethodNode |\r\ttClass := self findTargetClass.\r\tself assert: tClass notNil.\r\t(requestor class rootItems anySatisfy: [ :each | (tClassNode := each findClass: tClass) notNil ])\r\t\tifFalse: [ ^ self ].\r\ttMethodNode := tClassNode findMethod: requestor selectedNode item selector in: tClass.\r\trequestor selectPathForAbstractItem: tMethodNode',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1569' ],		#self : OmReference [ '1570' ],		#time : DateAndTime [ '2018-01-14T19:02:30.454301-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltGoToSuperMethodCommand,				#isMetaSide : false			},			#name : #findTargetClass,			#protocol : #execution,			#sourceCode : 'findTargetClass\r\t"Move to that place. We will check if this works for selection first."\r\r\trequestor selectedNode sourceClass\r\t\tallSuperclassesDo: [ :each | \r\t\t\t(each includesSelector: requestor selectedNode item selector)\r\t\t\t\tifTrue: [ ^ each ] ].\r\t^ nil',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1570' ],		#self : OmReference [ '1571' ],		#time : DateAndTime [ '2018-01-14T19:02:30.455286-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltGoToSuperMethodCommand,				#isMetaSide : false			},			#name : #isActive,			#protocol : #testing,			#sourceCode : 'isActive\r\t^ true',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1571' ],		#self : OmReference [ '1572' ],		#time : DateAndTime [ '2018-01-14T19:02:30.456366-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltGoToSuperMethodCommand,				#isMetaSide : false			},			#name : #isEnabled,			#protocol : #testing,			#sourceCode : 'isEnabled\r\trequestor selectedNode sourceClass\r\t\tallSuperclassesDo: [ :each | \r\t\t\t(each includesSelector: requestor selectedNode item selector)\r\t\t\t\tifTrue: [ ^ true ] ].\r\t^ false',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1572' ],		#self : OmReference [ '1573' ],		#time : DateAndTime [ '2018-01-14T19:02:30.45746-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltGoToSuperMethodCommand,				#isMetaSide : false			},			#name : #keystroke,			#protocol : #accessing,			#sourceCode : 'keystroke\r\t^ $n command, $s',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1573' ],		#self : OmReference [ '1574' ],		#time : DateAndTime [ '2018-01-14T19:02:30.458722-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltGoToSuperMethodCommand,				#isMetaSide : false			},			#name : #label,			#protocol : #accessing,			#sourceCode : 'label\r\t^ \'Super ...\'',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1574' ],		#self : OmReference [ '1575' ],		#time : DateAndTime [ '2018-01-14T19:02:30.459878-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltGoToSuperclassCommand,				#isMetaSide : false			},			#name : #execute,			#protocol : #execution,			#sourceCode : 'execute\r\t"Find the superclass and jump to it."\r\r\t| found aClass   |\r\taClass := requestor selectedNode item superclass.\r\trequestor class rootItems contents\r\t\tdo: [ :each | \r\t\t\t| res |\r\t\t\t(res := each findClass: aClass) notNil\r\t\t\t\tifTrue: [ found := res ] ].\r\tfound ifNil: [ ^ self ].\r\trequestor selectPathForAbstractItem: found',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1575' ],		#self : OmReference [ '1576' ],		#time : DateAndTime [ '2018-01-14T19:02:30.461002-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltGoToSuperclassCommand,				#isMetaSide : false			},			#name : #isActive,			#protocol : #testing,			#sourceCode : 'isActive\r\t^ true',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1576' ],		#self : OmReference [ '1577' ],		#time : DateAndTime [ '2018-01-14T19:02:30.461934-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltGoToSuperclassCommand,				#isMetaSide : false			},			#name : #keystroke,			#protocol : #accessing,			#sourceCode : 'keystroke\r\t^ $n command, $s',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1577' ],		#self : OmReference [ '1578' ],		#time : DateAndTime [ '2018-01-14T19:02:30.462897-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltGoToSuperclassCommand,				#isMetaSide : false			},			#name : #label,			#protocol : #accessing,			#sourceCode : 'label\r\t^ \'Superclass\'',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1578' ],		#self : OmReference [ '1579' ],		#time : DateAndTime [ '2018-01-14T19:02:30.463947-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltImplementorsOfCommand,				#isMetaSide : false			},			#name : #execute,			#protocol : #execution,			#sourceCode : 'execute\r\t| aSelector anEnvironment classDict |\r\taSelector := requestor selectedNode item selector.\r\tanEnvironment := requestor rbEnvironment isSelectorEnvironment\r\t\tifTrue: [ requestor rbEnvironment environment ]\r\t\tifFalse: [ requestor rbEnvironment ].\r\tclassDict := IdentityDictionary new.\r\tanEnvironment\r\t\tclassesAndMetaClassesDo:\r\t\t\t[ :class | \r\t\t\t((class includesLocalSelector: aSelector)\r\t\t\t\tand: [ anEnvironment includesSelector: aSelector in: class ])\r\t\t\t\tifTrue: [ classDict at: class put: {aSelector} ] ].\r\t(requestor class\r\t\topenOnEnvironment:\r\t\t\t((RBSelectorEnvironment onEnvironment: anEnvironment)\r\t\t\t\ton: classDict;\r\t\t\t\tlabel: \'Implementors of \' , aSelector;\r\t\t\t\tyourself)) expandAllNodes',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1579' ],		#self : OmReference [ '1580' ],		#time : DateAndTime [ '2018-01-14T19:02:30.46491-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltImplementorsOfCommand,				#isMetaSide : false			},			#name : #icon,			#protocol : #accessing,			#sourceCode : 'icon\r\t^ #smallFindIcon',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1580' ],		#self : OmReference [ '1581' ],		#time : DateAndTime [ '2018-01-14T19:02:30.465807-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltImplementorsOfCommand,				#isMetaSide : false			},			#name : #isActive,			#protocol : #testing,			#sourceCode : 'isActive\r\t^ true',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1581' ],		#self : OmReference [ '1582' ],		#time : DateAndTime [ '2018-01-14T19:02:30.466671-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltImplementorsOfCommand,				#isMetaSide : false			},			#name : #label,			#protocol : #accessing,			#sourceCode : 'label\r\t^ \'Implementors\'',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1582' ],		#self : OmReference [ '1583' ],		#time : DateAndTime [ '2018-01-14T19:02:30.468372-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltInspectMethodASTCommand,				#isMetaSide : false			},			#name : #execute,			#protocol : #execution,			#sourceCode : 'execute\r\t| ast |\r\tast := RBParser\r\t\tparseMethod: requestor selectedNode sourceCode\r\t\tonError: [ :msg :pos | ^ self ].\r\tast doSemanticAnalysisIn: requestor selectedNode sourceClass.\r\tast inspect',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1583' ],		#self : OmReference [ '1584' ],		#time : DateAndTime [ '2018-01-14T19:02:30.469609-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltInspectMethodASTCommand,				#isMetaSide : false			},			#name : #icon,			#protocol : #accessing,			#sourceCode : 'icon\r\t^ #smallDebugIcon',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1584' ],		#self : OmReference [ '1585' ],		#time : DateAndTime [ '2018-01-14T19:02:30.470607-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltInspectMethodASTCommand,				#isMetaSide : false			},			#name : #isActive,			#protocol : #testing,			#sourceCode : 'isActive\r\t^ requestor class debug',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1585' ],		#self : OmReference [ '1586' ],		#time : DateAndTime [ '2018-01-14T19:02:30.471528-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltInspectMethodASTCommand,				#isMetaSide : false			},			#name : #label,			#protocol : #accessing,			#sourceCode : 'label\r\t^ \'Inspect AST\'',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1586' ],		#self : OmReference [ '1587' ],		#time : DateAndTime [ '2018-01-14T19:02:30.472555-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMetacelloFetchProject,				#isMetaSide : false			},			#name : #execute,			#protocol : #execution,			#sourceCode : 'execute\r\t| item mt |\r\titem := requestor selectedNode item.\r\tmt := Metacello new.\r\titem isBaseline\r\t\tifTrue: [ mt baseline: item projectName ].\r\titem isConfiguration\r\t\tifTrue: [ mt configuration: item projectName ].\r\tmt repository: item repositories.\r\tmt fetch',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1587' ],		#self : OmReference [ '1588' ],		#time : DateAndTime [ '2018-01-14T19:02:30.473753-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMetacelloFetchProject,				#isMetaSide : false			},			#name : #isActive,			#protocol : #testing,			#sourceCode : 'isActive\r\t^ true',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1588' ],		#self : OmReference [ '1589' ],		#time : DateAndTime [ '2018-01-14T19:02:30.47471-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMetacelloFetchProject,				#isMetaSide : false			},			#name : #label,			#protocol : #accessing,			#sourceCode : 'label\r\t^ \'Fetch \', self getItem projectName',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1589' ],		#self : OmReference [ '1590' ],		#time : DateAndTime [ '2018-01-14T19:02:30.475686-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMetacelloGetProject,				#isMetaSide : false			},			#name : #execute,			#protocol : #execution,			#sourceCode : 'execute\r\t| item mt |\r\titem := requestor selectedNode item.\r\tmt := Metacello new.\r\titem isBaseline\r\t\tifTrue: [ mt baseline: item projectName ].\r\titem isConfiguration\r\t\tifTrue: [ mt configuration: item projectName ].\r\tmt repository: item repositories.\r\tmt get',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1590' ],		#self : OmReference [ '1591' ],		#time : DateAndTime [ '2018-01-14T19:02:30.47665-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMetacelloGetProject,				#isMetaSide : false			},			#name : #isActive,			#protocol : #testing,			#sourceCode : 'isActive\r\t^ true',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1591' ],		#self : OmReference [ '1592' ],		#time : DateAndTime [ '2018-01-14T19:02:30.477646-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMetacelloGetProject,				#isMetaSide : false			},			#name : #label,			#protocol : #accessing,			#sourceCode : 'label\r\t^ \'Get \', self getItem projectName',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1592' ],		#self : OmReference [ '1593' ],		#time : DateAndTime [ '2018-01-14T19:02:30.479153-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMetacelloLockProject,				#isMetaSide : false			},			#name : #execution,			#protocol : #execution,			#sourceCode : 'execution\r\t"Depending on the state, lock or unlock the project."\r\r\t| item |\r\titem := requestor selectedNode item.\r\titem projectRegistration locked == true\r\t\tifTrue: [ Metacello image\r\t\t\t\tproject: item projectName;\r\t\t\t\tunlock ]\r\t\tifFalse: [ Metacello image\r\t\t\t\tproject: item projectName;\r\t\t\t\tlock ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1593' ],		#self : OmReference [ '1594' ],		#time : DateAndTime [ '2018-01-14T19:02:30.480145-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMetacelloLockProject,				#isMetaSide : false			},			#name : #isActive,			#protocol : #testing,			#sourceCode : 'isActive\r\t^ true',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1594' ],		#self : OmReference [ '1595' ],		#time : DateAndTime [ '2018-01-14T19:02:30.481074-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMetacelloLockProject,				#isMetaSide : false			},			#name : #isEnabled,			#protocol : #testing,			#sourceCode : 'isEnabled\r\t^ self getItem projectRegistration notNil',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1595' ],		#self : OmReference [ '1596' ],		#time : DateAndTime [ '2018-01-14T19:02:30.48199-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMetacelloLockProject,				#isMetaSide : false			},			#name : #label,			#protocol : #accessing,			#sourceCode : 'label\r\t^ (self getItem projectRegistration\r\t\tifNil: [ \'Lock/Unlock \' ]\r\t\tifNotNil: [ :pr | \r\t\t\tpr locked == true\r\t\t\t\tifTrue: [ \'Unlock \' ]\r\t\t\t\tifFalse: [ \'Lock \' ] ]) , self getItem projectName',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1596' ],		#self : OmReference [ '1597' ],		#time : DateAndTime [ '2018-01-14T19:02:30.483125-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMetacelloSaveProject,				#isMetaSide : false			},			#name : #execute,			#protocol : #execution,			#sourceCode : 'execute\r\t"Get versions and save them, if possible in a single commit. Need to work out that message thing."\r\r\t| item versions repositories message |\r\titem := self getItem.\r\trepositories := item repositories.\r\tversions := (item contents select: [ :e | e mcWorkingCopy modified ])\r\t\tcollect: [ :e | \r\t\t\tmessage\r\t\t\t\tifNil: [ | v |\r\t\t\t\t\tv := e mcWorkingCopy newVersionIn: repositories first.\r\t\t\t\t\tv ifNil: [ ^ self ].\r\t\t\t\t\tmessage := v info message.\r\t\t\t\t\tv ]\r\t\t\t\tifNotNil: [ e mcWorkingCopy\r\t\t\t\t\t\tnewVersionWithMessage: message\r\t\t\t\t\t\tin: repositories first ] ].\r\trepositories\r\t\tdo: [ :e | \r\t\t\t(e respondsTo: #storeVersions:)\r\t\t\t\tifFalse: [ versions do: [ :v | e storeVersion: v ] ]\r\t\t\t\tifTrue: [ e storeVersions: versions ] ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1597' ],		#self : OmReference [ '1598' ],		#time : DateAndTime [ '2018-01-14T19:02:30.484054-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMetacelloSaveProject,				#isMetaSide : false			},			#name : #isActive,			#protocol : #testing,			#sourceCode : 'isActive\r\t^ true',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1598' ],		#self : OmReference [ '1599' ],		#time : DateAndTime [ '2018-01-14T19:02:30.485-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMetacelloSaveProject,				#isMetaSide : false			},			#name : #isEnabled,			#protocol : #testing,			#sourceCode : 'isEnabled\r\t^ self getItem projectRegistration notNil\r\t\tand: [ self getItem isBaseline ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1599' ],		#self : OmReference [ '1600' ],		#time : DateAndTime [ '2018-01-14T19:02:30.485903-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMetacelloSaveProject,				#isMetaSide : false			},			#name : #label,			#protocol : #accessing,			#sourceCode : 'label\r\t^ \'Save \' , self getItem projectName',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1600' ],		#self : OmReference [ '1601' ],		#time : DateAndTime [ '2018-01-14T19:02:30.486826-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMetacelloUnloadProject,				#isMetaSide : false			},			#name : #execute,			#protocol : #execution,			#sourceCode : 'execute\r\t"Unload all those packages."\r\r\t(self getItem contents collect: [ :e | e mcWorkingCopy ])\r\t\treverseDo: [ :e | e unload ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1601' ],		#self : OmReference [ '1602' ],		#time : DateAndTime [ '2018-01-14T19:02:30.488142-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMetacelloUnloadProject,				#isMetaSide : false			},			#name : #isActive,			#protocol : #testing,			#sourceCode : 'isActive\r\t^ true',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1602' ],		#self : OmReference [ '1603' ],		#time : DateAndTime [ '2018-01-14T19:02:30.48958-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMetacelloUnloadProject,				#isMetaSide : false			},			#name : #isEnabled,			#protocol : #testing,			#sourceCode : 'isEnabled\r\t^ self getItem isModified not',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1603' ],		#self : OmReference [ '1604' ],		#time : DateAndTime [ '2018-01-14T19:02:30.490776-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMetacelloUnloadProject,				#isMetaSide : false			},			#name : #label,			#protocol : #accessing,			#sourceCode : 'label\r\t^ \'Unload \' , self getItem projectName',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1604' ],		#self : OmReference [ '1605' ],		#time : DateAndTime [ '2018-01-14T19:02:30.491883-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltNextCommand,				#isMetaSide : false			},			#name : #execute,			#protocol : #execution,			#sourceCode : 'execute\r\t[ requestor selectPathForAbstractItem: requestor history next key item ]\r\t\twhileFalse: [ \r\t\t\trequestor history hasNext\r\t\t\t\tifFalse: [ ^ self ] ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1605' ],		#self : OmReference [ '1606' ],		#time : DateAndTime [ '2018-01-14T19:02:30.492881-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltNextCommand,				#isMetaSide : false			},			#name : #icon,			#protocol : #accessing,			#sourceCode : 'icon\r\t^ #smallForwardIcon',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1606' ],		#self : OmReference [ '1607' ],		#time : DateAndTime [ '2018-01-14T19:02:30.493904-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltNextCommand,				#isMetaSide : false			},			#name : #isActive,			#protocol : #testing,			#sourceCode : 'isActive\r\t^ true',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1607' ],		#self : OmReference [ '1608' ],		#time : DateAndTime [ '2018-01-14T19:02:30.495246-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltNextCommand,				#isMetaSide : false			},			#name : #isEnabled,			#protocol : #testing,			#sourceCode : 'isEnabled\r\t^ requestor history hasNext',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1608' ],		#self : OmReference [ '1609' ],		#time : DateAndTime [ '2018-01-14T19:02:30.496578-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltNextCommand,				#isMetaSide : false			},			#name : #keyString,			#protocol : #accessing,			#sourceCode : 'keyString\r\t^ \'Cmd+ →\'',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1609' ],		#self : OmReference [ '1610' ],		#time : DateAndTime [ '2018-01-14T19:02:30.497708-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltNextCommand,				#isMetaSide : false			},			#name : #keystroke,			#protocol : #accessing,			#sourceCode : 'keystroke\r\t^ Character arrowRight ctrl',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1610' ],		#self : OmReference [ '1611' ],		#time : DateAndTime [ '2018-01-14T19:02:30.498619-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltNextCommand,				#isMetaSide : false			},			#name : #label,			#protocol : #accessing,			#sourceCode : 'label\r\t^ \'Forward\'',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1611' ],		#self : OmReference [ '1612' ],		#time : DateAndTime [ '2018-01-14T19:02:30.500076-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltNextSiblingClassCommand,				#isMetaSide : false			},			#name : #execute,			#protocol : #execution,			#sourceCode : 'execute\r\t| found aClass aClassIndex siblings nextClass |\r\taClass := requestor selectedNode item itemClass.\r\tsiblings := aClass superclass subclasses.\r\taClassIndex := siblings indexOf: aClass.\r\tnextClass := siblings at: ((aClassIndex rem: siblings size) + 1).\r\trequestor class rootItems\r\t\tdo: [ :each | \r\t\t\t| res |\r\t\t\t(res := each findClass: nextClass) notNil\r\t\t\t\tifTrue: [ found := res ] ].\r\tfound ifNil: [  ^ self ].\r\trequestor selectPathForAbstractItem: found',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1612' ],		#self : OmReference [ '1613' ],		#time : DateAndTime [ '2018-01-14T19:02:30.501193-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltNextSiblingClassCommand,				#isMetaSide : false			},			#name : #isActive,			#protocol : #testing,			#sourceCode : 'isActive\r\t^ true',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1613' ],		#self : OmReference [ '1614' ],		#time : DateAndTime [ '2018-01-14T19:02:30.502164-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltNextSiblingClassCommand,				#isMetaSide : false			},			#name : #isEnabled,			#protocol : #testing,			#sourceCode : 'isEnabled\r\t^ requestor selectedNode item superclass notNil',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1614' ],		#self : OmReference [ '1615' ],		#time : DateAndTime [ '2018-01-14T19:02:30.503182-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltNextSiblingClassCommand,				#isMetaSide : false			},			#name : #keystroke,			#protocol : #accessing,			#sourceCode : 'keystroke\r\t^ $n command, $d',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1615' ],		#self : OmReference [ '1616' ],		#time : DateAndTime [ '2018-01-14T19:02:30.504101-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltNextSiblingClassCommand,				#isMetaSide : false			},			#name : #label,			#protocol : #accessing,			#sourceCode : 'label\r\t^ \'Next sibling class\'',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1616' ],		#self : OmReference [ '1617' ],		#time : DateAndTime [ '2018-01-14T19:02:30.505088-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPasteCommand,				#isMetaSide : false			},			#name : #execute,			#protocol : #execution,			#sourceCode : 'execute\r\t"Get the temporary from the AltBrowser and try a move (a drop, maybe ?)"\r\r\t((requestor selectedNode item acceptDropItem: requestor class temporary)\r\t\tand: [ (requestor selectedNode item dropItem: requestor class temporary) isNil ])\r\t\tifFalse: [ requestor class temporary: nil ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1617' ],		#self : OmReference [ '1618' ],		#time : DateAndTime [ '2018-01-14T19:02:30.506004-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPasteCommand,				#isMetaSide : false			},			#name : #icon,			#protocol : #accessing,			#sourceCode : 'icon\r\t^ #smallPasteIcon',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1618' ],		#self : OmReference [ '1619' ],		#time : DateAndTime [ '2018-01-14T19:02:30.506872-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPasteCommand,				#isMetaSide : false			},			#name : #isActive,			#protocol : #testing,			#sourceCode : 'isActive\r\t^ true',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1619' ],		#self : OmReference [ '1620' ],		#time : DateAndTime [ '2018-01-14T19:02:30.508466-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPasteCommand,				#isMetaSide : false			},			#name : #keystroke,			#protocol : #accessing,			#sourceCode : 'keystroke\r\t^ $v ctrl',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1620' ],		#self : OmReference [ '1621' ],		#time : DateAndTime [ '2018-01-14T19:02:30.509537-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPasteCommand,				#isMetaSide : false			},			#name : #label,			#protocol : #accessing,			#sourceCode : 'label\r\t^ \'Paste\'\r\t',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1621' ],		#self : OmReference [ '1622' ],		#time : DateAndTime [ '2018-01-14T19:02:30.510974-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPasteTextCommand,				#isMetaSide : false			},			#name : #execute,			#protocol : #execution,			#sourceCode : 'execute\r\ttarget textMorph editor replace: target trueSelectionInterval with: Clipboard clipboardText and: [  ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1622' ],		#self : OmReference [ '1623' ],		#time : DateAndTime [ '2018-01-14T19:02:30.511944-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPasteTextCommand,				#isMetaSide : false			},			#name : #icon,			#protocol : #accessing,			#sourceCode : 'icon\r\t^ #smallPasteIcon',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1623' ],		#self : OmReference [ '1624' ],		#time : DateAndTime [ '2018-01-14T19:02:30.512815-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPasteTextCommand,				#isMetaSide : false			},			#name : #isActive,			#protocol : #testing,			#sourceCode : 'isActive\r\t^ true',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1624' ],		#self : OmReference [ '1625' ],		#time : DateAndTime [ '2018-01-14T19:02:30.513738-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPasteTextCommand,				#isMetaSide : false			},			#name : #isEnabled,			#protocol : #testing,			#sourceCode : 'isEnabled\r\t^ [Clipboard clipboardText notEmpty] on: ZnInvalidUTF8 do:[false]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1625' ],		#self : OmReference [ '1626' ],		#time : DateAndTime [ '2018-01-14T19:02:30.514632-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPasteTextCommand,				#isMetaSide : false			},			#name : #keystroke,			#protocol : #accessing,			#sourceCode : 'keystroke\r\t^ $v ctrl',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1626' ],		#self : OmReference [ '1627' ],		#time : DateAndTime [ '2018-01-14T19:02:30.515508-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPasteTextCommand,				#isMetaSide : false			},			#name : #label,			#protocol : #accessing,			#sourceCode : 'label\r\t^ \'Paste\'',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1627' ],		#self : OmReference [ '1628' ],		#time : DateAndTime [ '2018-01-14T19:02:30.516472-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPreviousCommand,				#isMetaSide : false			},			#name : #execute,			#protocol : #execution,			#sourceCode : 'execute\r\t[ requestor selectPathForAbstractItem: requestor history previous key item ]\r\t\twhileFalse: [ \r\t\t\trequestor history hasPrevious\r\t\t\t\tifFalse: [ ^ self ] ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1628' ],		#self : OmReference [ '1629' ],		#time : DateAndTime [ '2018-01-14T19:02:30.517495-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPreviousCommand,				#isMetaSide : false			},			#name : #icon,			#protocol : #accessing,			#sourceCode : 'icon\r\t^ #smallBackIcon',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1629' ],		#self : OmReference [ '1630' ],		#time : DateAndTime [ '2018-01-14T19:02:30.518347-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPreviousCommand,				#isMetaSide : false			},			#name : #isActive,			#protocol : #testing,			#sourceCode : 'isActive\r\t^ true',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1630' ],		#self : OmReference [ '1631' ],		#time : DateAndTime [ '2018-01-14T19:02:30.519253-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPreviousCommand,				#isMetaSide : false			},			#name : #isEnabled,			#protocol : #testing,			#sourceCode : 'isEnabled\r\t^ requestor history hasPrevious',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1631' ],		#self : OmReference [ '1632' ],		#time : DateAndTime [ '2018-01-14T19:02:30.520699-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPreviousCommand,				#isMetaSide : false			},			#name : #keyString,			#protocol : #accessing,			#sourceCode : 'keyString\r\t^ \'Cmd+ ←\'',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1632' ],		#self : OmReference [ '1633' ],		#time : DateAndTime [ '2018-01-14T19:02:30.521634-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPreviousCommand,				#isMetaSide : false			},			#name : #keystroke,			#protocol : #accessing,			#sourceCode : 'keystroke \r\t^ Character arrowLeft ctrl',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1633' ],		#self : OmReference [ '1634' ],		#time : DateAndTime [ '2018-01-14T19:02:30.522532-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPreviousCommand,				#isMetaSide : false			},			#name : #label,			#protocol : #accessing,			#sourceCode : 'label\r\t^ \'Back\'',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1634' ],		#self : OmReference [ '1635' ],		#time : DateAndTime [ '2018-01-14T19:02:30.523543-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltRBClassRenameCommand,				#isMetaSide : false			},			#name : #execute,			#protocol : #execution,			#sourceCode : 'execute\r\t| sItem |\r\tsItem := requestor selectedNode item.\r\tself\r\t\texecute:\r\t\t\t(RBRenameClassRefactoring\r\t\t\t\trename: sItem itemClass theNonMetaClass\r\t\t\t\tto:\r\t\t\t\t\t(UIManager default\r\t\t\t\t\t\trequest: \'Enter the new class name:\'\r\t\t\t\t\t\tinitialAnswer: sItem itemClass theNonMetaClass name))',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1635' ],		#self : OmReference [ '1636' ],		#time : DateAndTime [ '2018-01-14T19:02:30.52474-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltRBClassRenameCommand,				#isMetaSide : false			},			#name : #isActive,			#protocol : #testing,			#sourceCode : 'isActive\r\t^ true',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1636' ],		#self : OmReference [ '1637' ],		#time : DateAndTime [ '2018-01-14T19:02:30.525872-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltRBClassRenameCommand,				#isMetaSide : false			},			#name : #keystroke,			#protocol : #accessing,			#sourceCode : 'keystroke\r\t^ $r command',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1637' ],		#self : OmReference [ '1638' ],		#time : DateAndTime [ '2018-01-14T19:02:30.526773-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltRBClassRenameCommand,				#isMetaSide : false			},			#name : #label,			#protocol : #accessing,			#sourceCode : 'label\r\t^ \'Rename\'',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1638' ],		#self : OmReference [ '1639' ],		#time : DateAndTime [ '2018-01-14T19:02:30.528067-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltRBCommand,				#isMetaSide : false			},			#name : #'applyOptionsOn:',			#protocol : #private,			#sourceCode : 'applyOptionsOn: aRefactoringCommand\r\t"Set options to a refactoring command."\r\r\taRefactoringCommand\r\t\tsetOption: #openBrowser\r\t\ttoUse: [ :ref :env | AltBrowser openOnEnvironment: env ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1639' ],		#self : OmReference [ '1640' ],		#time : DateAndTime [ '2018-01-14T19:02:30.529157-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltRBCommand,				#isMetaSide : false			},			#name : #'execute:',			#protocol : #execution,			#sourceCode : 'execute: aRefactoringCommand\r\t[ [ self applyOptionsOn: aRefactoringCommand.\r\taRefactoringCommand execute ]\r\t\ton: RBRefactoringError , RBRefactoringFailure\r\t\tdo:\r\t\t\t[ :e | \r\t\t\te actionBlock\r\t\t\t\tifNil: [ self inform: e messageText ]\r\t\t\t\tifNotNil:\r\t\t\t\t\t[ :aBlock | \r\t\t\t\t\t(self confirm: e messageText)\r\t\t\t\t\t\tifTrue: [ aBlock value ] ] ] ]\r\t\ton: RBRefactoringWarning\r\t\tdo: [ :e | \r\t\t\tself inform: e messageText.\r\t\t\te resume ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1640' ],		#self : OmReference [ '1641' ],		#time : DateAndTime [ '2018-01-14T19:02:30.530607-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltRBRemoveClassCommand,				#isMetaSide : false			},			#name : #execute,			#protocol : #execution,			#sourceCode : 'execute\r\t| classToRemove |\r\trequestor okToChange\r\t\tifFalse: [ ^ nil ].\r\tclassToRemove := requestor selectedNode item itemClass.\r\tself\r\t\texecute: (RBRemoveClassRefactoring classNames: {classToRemove name}).\r\t^ nil',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1641' ],		#self : OmReference [ '1642' ],		#time : DateAndTime [ '2018-01-14T19:02:30.531597-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltRBRemoveClassCommand,				#isMetaSide : false			},			#name : #icon,			#protocol : #accessing,			#sourceCode : 'icon\r\t^ #smallDeleteIcon',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1642' ],		#self : OmReference [ '1643' ],		#time : DateAndTime [ '2018-01-14T19:02:30.532506-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltRBRemoveClassCommand,				#isMetaSide : false			},			#name : #isActive,			#protocol : #testing,			#sourceCode : 'isActive\r\t^ true',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1643' ],		#self : OmReference [ '1644' ],		#time : DateAndTime [ '2018-01-14T19:02:30.533532-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltRBRemoveClassCommand,				#isMetaSide : false			},			#name : #keystroke,			#protocol : #accessing,			#sourceCode : 'keystroke\r\t^ Character delete asKeyCombination ',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1644' ],		#self : OmReference [ '1645' ],		#time : DateAndTime [ '2018-01-14T19:02:30.534452-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltRBRemoveClassCommand,				#isMetaSide : false			},			#name : #label,			#protocol : #accessing,			#sourceCode : 'label\r\t^ \'Remove\'',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1645' ],		#self : OmReference [ '1646' ],		#time : DateAndTime [ '2018-01-14T19:02:30.535499-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltRBFormatCommand,				#isMetaSide : false			},			#name : #execute,			#protocol : #execution,			#sourceCode : 'execute\r\t"Code derived from ORFormatCmd (OmniBrowser) and simplified. Will fail silently if the code is incorrect."\r\r\t| source tree formatted |\r\tsource := target text asString.\r\ttree := RBParser parseMethod: source onError: [ :msg :pos | ^ self ].\r\tformatted := tree formattedCode.\r\tformatted = source\r\t\tifTrue: [ ^ self ].\r\ttarget\r\t\teditString: formatted;\r\t\thasUnacceptedEdits: true',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1646' ],		#self : OmReference [ '1647' ],		#time : DateAndTime [ '2018-01-14T19:02:30.536441-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltRBFormatCommand,				#isMetaSide : false			},			#name : #isActive,			#protocol : #testing,			#sourceCode : 'isActive\r\t^ true',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1647' ],		#self : OmReference [ '1648' ],		#time : DateAndTime [ '2018-01-14T19:02:30.537348-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltRBFormatCommand,				#isMetaSide : false			},			#name : #keystroke,			#protocol : #accessing,			#sourceCode : 'keystroke\r\t^ $r ctrl',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1648' ],		#self : OmReference [ '1649' ],		#time : DateAndTime [ '2018-01-14T19:02:30.538229-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltRBFormatCommand,				#isMetaSide : false			},			#name : #label,			#protocol : #accessing,			#sourceCode : 'label\r\t^ \'Format\'',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1649' ],		#self : OmReference [ '1650' ],		#time : DateAndTime [ '2018-01-14T19:02:30.539166-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltRBRedoCommand,				#isMetaSide : false			},			#name : #execute,			#protocol : #execution,			#sourceCode : 'execute\r\tRBRefactoryChangeManager instance redoOperation',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1650' ],		#self : OmReference [ '1651' ],		#time : DateAndTime [ '2018-01-14T19:02:30.540626-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltRBRedoCommand,				#isMetaSide : false			},			#name : #icon,			#protocol : #accessing,			#sourceCode : 'icon\r\t^ #smallRedoIcon',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1651' ],		#self : OmReference [ '1652' ],		#time : DateAndTime [ '2018-01-14T19:02:30.541738-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltRBRedoCommand,				#isMetaSide : false			},			#name : #isActive,			#protocol : #testing,			#sourceCode : 'isActive\r\t^ true',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1652' ],		#self : OmReference [ '1653' ],		#time : DateAndTime [ '2018-01-14T19:02:30.542818-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltRBRedoCommand,				#isMetaSide : false			},			#name : #isEnabled,			#protocol : #testing,			#sourceCode : 'isEnabled\r\t^ RBRefactoryChangeManager instance hasRedoableOperations',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1653' ],		#self : OmReference [ '1654' ],		#time : DateAndTime [ '2018-01-14T19:02:30.543754-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltRBRedoCommand,				#isMetaSide : false			},			#name : #keystroke,			#protocol : #accessing,			#sourceCode : 'keystroke\r\t^ $y ctrl',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1654' ],		#self : OmReference [ '1655' ],		#time : DateAndTime [ '2018-01-14T19:02:30.544741-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltRBRedoCommand,				#isMetaSide : false			},			#name : #label,			#protocol : #accessing,			#sourceCode : 'label\r\t"Depends on whether there is anything to redo or not."\r\r\tRBRefactoryChangeManager instance hasRedoableOperations\r\t\tifTrue: [ ^ \'Redo \' , RBRefactoryChangeManager instance redoChange changeString contractTo: 20 ]\r\t\tifFalse: [ ^ \'Redo ...\' ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1655' ],		#self : OmReference [ '1656' ],		#time : DateAndTime [ '2018-01-14T19:02:30.54567-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltRBUndoCommand,				#isMetaSide : false			},			#name : #execute,			#protocol : #execution,			#sourceCode : 'execute\r\tRBRefactoryChangeManager instance undoOperation',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1656' ],		#self : OmReference [ '1657' ],		#time : DateAndTime [ '2018-01-14T19:02:30.546619-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltRBUndoCommand,				#isMetaSide : false			},			#name : #icon,			#protocol : #accessing,			#sourceCode : 'icon\r\t^ #smallUndoIcon',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1657' ],		#self : OmReference [ '1658' ],		#time : DateAndTime [ '2018-01-14T19:02:30.547511-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltRBUndoCommand,				#isMetaSide : false			},			#name : #isActive,			#protocol : #testing,			#sourceCode : 'isActive\r\t^ true',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1658' ],		#self : OmReference [ '1659' ],		#time : DateAndTime [ '2018-01-14T19:02:30.548738-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltRBUndoCommand,				#isMetaSide : false			},			#name : #isEnabled,			#protocol : #testing,			#sourceCode : 'isEnabled\r\t^ RBRefactoryChangeManager instance hasUndoableOperations',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1659' ],		#self : OmReference [ '1660' ],		#time : DateAndTime [ '2018-01-14T19:02:30.550135-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltRBUndoCommand,				#isMetaSide : false			},			#name : #keystroke,			#protocol : #accessing,			#sourceCode : 'keystroke\r\t^ $z ctrl',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1660' ],		#self : OmReference [ '1661' ],		#time : DateAndTime [ '2018-01-14T19:02:30.55118-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltRBUndoCommand,				#isMetaSide : false			},			#name : #label,			#protocol : #accessing,			#sourceCode : 'label\r\t"Depends on the state of the undoing facility of RB and what it contains."\r\r\t(RBRefactoryChangeManager instance hasUndoableOperations\r\t\tand: [ RBRefactoryChangeManager instance undoChange changes notEmpty ])\r\t\tifTrue: [ ^ \'Undo \'\r\t\t\t\t, RBRefactoryChangeManager instance undoChange changes first printString\r\t\t\t\tcontractTo: 20 ]\r\t\tifFalse: [ ^ \'Undo ...\' ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1661' ],		#self : OmReference [ '1662' ],		#time : DateAndTime [ '2018-01-14T19:02:30.552842-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltRebuildItemCommand,				#isMetaSide : false			},			#name : #execute,			#protocol : #execution,			#sourceCode : 'execute\r\t"requestor selectedItem rebuildChildren."\r\r\trequestor class aNodeToRebuilt: requestor selectedNode item',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1662' ],		#self : OmReference [ '1663' ],		#time : DateAndTime [ '2018-01-14T19:02:30.553807-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltRebuildItemCommand,				#isMetaSide : false			},			#name : #icon,			#protocol : #accessing,			#sourceCode : 'icon\r\t^ #smallDebugIcon',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1663' ],		#self : OmReference [ '1664' ],		#time : DateAndTime [ '2018-01-14T19:02:30.554704-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltRebuildItemCommand,				#isMetaSide : false			},			#name : #isActive,			#protocol : #testing,			#sourceCode : 'isActive\r\t^ requestor class debug',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1664' ],		#self : OmReference [ '1665' ],		#time : DateAndTime [ '2018-01-14T19:02:30.5556-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltRebuildItemCommand,				#isMetaSide : false			},			#name : #isEnabled,			#protocol : #testing,			#sourceCode : 'isEnabled\r\t^ requestor selectedNode notNil',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1665' ],		#self : OmReference [ '1666' ],		#time : DateAndTime [ '2018-01-14T19:02:30.556476-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltRebuildItemCommand,				#isMetaSide : false			},			#name : #label,			#protocol : #accessing,			#sourceCode : 'label\r\t^ \'Rebuild It\'',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1666' ],		#self : OmReference [ '1667' ],		#time : DateAndTime [ '2018-01-14T19:02:30.557434-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltRedoTextCommand,				#isMetaSide : false			},			#name : #execute,			#protocol : #execution,			#sourceCode : 'execute\r\ttarget textMorph editor redo',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1667' ],		#self : OmReference [ '1668' ],		#time : DateAndTime [ '2018-01-14T19:02:30.55839-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltRedoTextCommand,				#isMetaSide : false			},			#name : #group,			#protocol : #accessing,			#sourceCode : 'group\r\t^ #adapting',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1668' ],		#self : OmReference [ '1669' ],		#time : DateAndTime [ '2018-01-14T19:02:30.559319-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltRedoTextCommand,				#isMetaSide : false			},			#name : #icon,			#protocol : #accessing,			#sourceCode : 'icon\r\t^ #smallRedoIcon',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1669' ],		#self : OmReference [ '1670' ],		#time : DateAndTime [ '2018-01-14T19:02:30.56074-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltRedoTextCommand,				#isMetaSide : false			},			#name : #isActive,			#protocol : #testing,			#sourceCode : 'isActive\r\t^ true',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1670' ],		#self : OmReference [ '1671' ],		#time : DateAndTime [ '2018-01-14T19:02:30.561704-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltRedoTextCommand,				#isMetaSide : false			},			#name : #keystroke,			#protocol : #accessing,			#sourceCode : 'keystroke\r\t^ $j ctrl',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1671' ],		#self : OmReference [ '1672' ],		#time : DateAndTime [ '2018-01-14T19:02:30.562574-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltRedoTextCommand,				#isMetaSide : false			},			#name : #label,			#protocol : #accessing,			#sourceCode : 'label\r\t^ \'Redo\'',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1672' ],		#self : OmReference [ '1673' ],		#time : DateAndTime [ '2018-01-14T19:02:30.563618-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltRemoveCategoryCommand,				#isMetaSide : false			},			#name : #execute,			#protocol : #execution,			#sourceCode : 'execute\r\t| name sItem |\r\tsItem := requestor selectedNode item.\r\tname := sItem asString.\r\tname notNil\r\t\tifTrue: [ \r\t\t\tSmalltalk globals organization removeCategory: name.\r\t\t\tsItem rpackage removeClassTag: name ].\r\trequestor selectPathForAbstractItem: sItem parent',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1673' ],		#self : OmReference [ '1674' ],		#time : DateAndTime [ '2018-01-14T19:02:30.564563-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltRemoveCategoryCommand,				#isMetaSide : false			},			#name : #icon,			#protocol : #accessing,			#sourceCode : 'icon\r\t^ #smallDeleteIcon',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1674' ],		#self : OmReference [ '1675' ],		#time : DateAndTime [ '2018-01-14T19:02:30.565526-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltRemoveCategoryCommand,				#isMetaSide : false			},			#name : #isActive,			#protocol : #testing,			#sourceCode : 'isActive\r\t^ true',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1675' ],		#self : OmReference [ '1676' ],		#time : DateAndTime [ '2018-01-14T19:02:30.566461-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltRemoveCategoryCommand,				#isMetaSide : false			},			#name : #label,			#protocol : #accessing,			#sourceCode : 'label\r\t^ \'Delete\'',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1676' ],		#self : OmReference [ '1677' ],		#time : DateAndTime [ '2018-01-14T19:02:30.567427-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltRemoveMethodCommand,				#isMetaSide : false			},			#name : #execute,			#protocol : #execution,			#sourceCode : 'execute\r\t"As simple as that ?"\r\r\trequestor selectedNode sourceClass removeSelector: requestor selectedNode item selector',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1677' ],		#self : OmReference [ '1678' ],		#time : DateAndTime [ '2018-01-14T19:02:30.568497-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltRemoveMethodCommand,				#isMetaSide : false			},			#name : #icon,			#protocol : #accessing,			#sourceCode : 'icon\r\t^ #smallDeleteIcon',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1678' ],		#self : OmReference [ '1679' ],		#time : DateAndTime [ '2018-01-14T19:02:30.5694-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltRemoveMethodCommand,				#isMetaSide : false			},			#name : #isActive,			#protocol : #testing,			#sourceCode : 'isActive\r\t^ true',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1679' ],		#self : OmReference [ '1680' ],		#time : DateAndTime [ '2018-01-14T19:02:30.570932-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltRemoveMethodCommand,				#isMetaSide : false			},			#name : #keystroke,			#protocol : #accessing,			#sourceCode : 'keystroke\r\t^ Character delete asKeyCombination',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1680' ],		#self : OmReference [ '1681' ],		#time : DateAndTime [ '2018-01-14T19:02:30.571849-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltRemoveMethodCommand,				#isMetaSide : false			},			#name : #label,			#protocol : #accessing,			#sourceCode : 'label\r\t^ \'Remove\'',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1681' ],		#self : OmReference [ '1682' ],		#time : DateAndTime [ '2018-01-14T19:02:30.572909-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltRemovePackageCategoryCommand,				#isMetaSide : false			},			#name : #execute,			#protocol : #execution,			#sourceCode : 'execute\r\t"Remove the package category."\r\r\t| item |\r\titem := requestor selectedNode item.\r\titem parent removeRPackage: item item.\r\trequestor class aNodeToRebuilt: item parent.\r\trequestor class updateCategories',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1682' ],		#self : OmReference [ '1683' ],		#time : DateAndTime [ '2018-01-14T19:02:30.573918-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltRemovePackageCategoryCommand,				#isMetaSide : false			},			#name : #icon,			#protocol : #accessing,			#sourceCode : 'icon\r\t^ #smallCutIcon',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1683' ],		#self : OmReference [ '1684' ],		#time : DateAndTime [ '2018-01-14T19:02:30.57481-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltRemovePackageCategoryCommand,				#isMetaSide : false			},			#name : #isActive,			#protocol : #testing,			#sourceCode : 'isActive\r\t^ true',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1684' ],		#self : OmReference [ '1685' ],		#time : DateAndTime [ '2018-01-14T19:02:30.575753-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltRemovePackageCategoryCommand,				#isMetaSide : false			},			#name : #isEnabled,			#protocol : #testing,			#sourceCode : 'isEnabled\r\t"Only enabled if the category is empty."\r\t\r\t^ requestor selectedNode item item value isEmpty',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1685' ],		#self : OmReference [ '1686' ],		#time : DateAndTime [ '2018-01-14T19:02:30.576679-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltRemovePackageCategoryCommand,				#isMetaSide : false			},			#name : #keystroke,			#protocol : #accessing,			#sourceCode : 'keystroke\r\t^ Character delete asKeyCombination',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1686' ],		#self : OmReference [ '1687' ],		#time : DateAndTime [ '2018-01-14T19:02:30.577633-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltRemovePackageCategoryCommand,				#isMetaSide : false			},			#name : #label,			#protocol : #accessing,			#sourceCode : 'label\r\t^ \'Remove\'',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1687' ],		#self : OmReference [ '1688' ],		#time : DateAndTime [ '2018-01-14T19:02:30.578595-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltRemovePackageCommand,				#isMetaSide : false			},			#name : #execute,			#protocol : #execution,			#sourceCode : 'execute\r\trequestor selectedItem mcWorkingCopy unload',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1688' ],		#self : OmReference [ '1689' ],		#time : DateAndTime [ '2018-01-14T19:02:30.580085-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltRemovePackageCommand,				#isMetaSide : false			},			#name : #icon,			#protocol : #accessing,			#sourceCode : 'icon\r\t^ #smallDeleteIcon',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1689' ],		#self : OmReference [ '1690' ],		#time : DateAndTime [ '2018-01-14T19:02:30.581237-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltRemovePackageCommand,				#isMetaSide : false			},			#name : #isActive,			#protocol : #testing,			#sourceCode : 'isActive\r\t^ true',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1690' ],		#self : OmReference [ '1691' ],		#time : DateAndTime [ '2018-01-14T19:02:30.582244-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltRemovePackageCommand,				#isMetaSide : false			},			#name : #keystroke,			#protocol : #accessing,			#sourceCode : 'keystroke\r\t^ Character delete asKeyCombination',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1691' ],		#self : OmReference [ '1692' ],		#time : DateAndTime [ '2018-01-14T19:02:30.583158-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltRemovePackageCommand,				#isMetaSide : false			},			#name : #label,			#protocol : #accessing,			#sourceCode : 'label\r\t^ \'Unload\'',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1692' ],		#self : OmReference [ '1693' ],		#time : DateAndTime [ '2018-01-14T19:02:30.584149-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltRemoveProtocolCommand,				#isMetaSide : false			},			#name : #execute,			#protocol : #execution,			#sourceCode : 'execute\r\t| tClass tItem |\r\ttClass := requestor selectedNode sourceClass.\r\ttItem := requestor selectedNode.\r\ttClass removeProtocol: tItem item methodCategory',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1693' ],		#self : OmReference [ '1694' ],		#time : DateAndTime [ '2018-01-14T19:02:30.58509-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltRemoveProtocolCommand,				#isMetaSide : false			},			#name : #icon,			#protocol : #accessing,			#sourceCode : 'icon\r\t^ #smallDeleteIcon',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1694' ],		#self : OmReference [ '1695' ],		#time : DateAndTime [ '2018-01-14T19:02:30.585974-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltRemoveProtocolCommand,				#isMetaSide : false			},			#name : #isActive,			#protocol : #testing,			#sourceCode : 'isActive\r\t^ true',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1695' ],		#self : OmReference [ '1696' ],		#time : DateAndTime [ '2018-01-14T19:02:30.586862-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltRemoveProtocolCommand,				#isMetaSide : false			},			#name : #keystroke,			#protocol : #accessing,			#sourceCode : 'keystroke\r\t^ Character delete asKeyCombination',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1696' ],		#self : OmReference [ '1697' ],		#time : DateAndTime [ '2018-01-14T19:02:30.587742-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltRemoveProtocolCommand,				#isMetaSide : false			},			#name : #label,			#protocol : #accessing,			#sourceCode : 'label\r\t^ \'Remove\'',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1697' ],		#self : OmReference [ '1698' ],		#time : DateAndTime [ '2018-01-14T19:02:30.589248-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltRenameCategoryCommand,				#isMetaSide : false			},			#name : #execute,			#protocol : #execution,			#sourceCode : 'execute\r\t"Category name checking is done here. It is extracted from Nautilus, but is it correct?"\r\r\t| newName systemCategory |\r\tsystemCategory := requestor selectedNode item packageTag categoryName.\r\tnewName := UIManager default\r\t\trequest: \'New name of the category\'\r\t\tinitialAnswer: systemCategory\r\t\ttitle: \'Rename a category\'.\r\t(newName = systemCategory name or: [ newName isNil or: [ newName isEmpty or: [ newName first = $* ] ] ])\r\t\tifTrue: [ ^ self ].\r\tself class environment organization renameCategory: systemCategory name toBe: newName',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1698' ],		#self : OmReference [ '1699' ],		#time : DateAndTime [ '2018-01-14T19:02:30.590943-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltRenameCategoryCommand,				#isMetaSide : false			},			#name : #isActive,			#protocol : #testing,			#sourceCode : 'isActive\r\t^ true',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1699' ],		#self : OmReference [ '1700' ],		#time : DateAndTime [ '2018-01-14T19:02:30.591919-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltRenameCategoryCommand,				#isMetaSide : false			},			#name : #label,			#protocol : #accessing,			#sourceCode : 'label\r\t^ \'Rename\'',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1700' ],		#self : OmReference [ '1701' ],		#time : DateAndTime [ '2018-01-14T19:02:30.592976-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltRenamePackageCommand,				#isMetaSide : false			},			#name : #execute,			#protocol : #execution,			#sourceCode : 'execute\r\t"Category name checking is done here. It is extracted from Nautilus, but is it correct?"\r\r\t| newName systemCategory |\r\tsystemCategory := requestor selectedNode item rpackage.\r\tnewName := UIManager default\r\t\trequest: \'New name of the package\'\r\t\tinitialAnswer: systemCategory categoryName\r\t\ttitle: \'Rename a category\'.\r\t(newName = systemCategory categoryName\r\t\tor: [ newName isNil or: [ newName isEmpty or: [ newName first = $* ] ] ])\r\t\tifTrue: [ ^ self inform: \'Incorrect package name\' ].\r\tsystemCategory renameTo: newName',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1701' ],		#self : OmReference [ '1702' ],		#time : DateAndTime [ '2018-01-14T19:02:30.593966-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltRenamePackageCommand,				#isMetaSide : false			},			#name : #isActive,			#protocol : #testing,			#sourceCode : 'isActive\r\t^ true',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1702' ],		#self : OmReference [ '1703' ],		#time : DateAndTime [ '2018-01-14T19:02:30.594864-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltRenamePackageCommand,				#isMetaSide : false			},			#name : #label,			#protocol : #accessing,			#sourceCode : 'label\r\t^ \'Rename\'',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1703' ],		#self : OmReference [ '1704' ],		#time : DateAndTime [ '2018-01-14T19:02:30.595834-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltSelectAllTextCommand,				#isMetaSide : false			},			#name : #execute,			#protocol : #execution,			#sourceCode : 'execute\r\ttarget handleEdit: [ target textMorph editor selectAll: nil ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1704' ],		#self : OmReference [ '1705' ],		#time : DateAndTime [ '2018-01-14T19:02:30.596847-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltSelectAllTextCommand,				#isMetaSide : false			},			#name : #isActive,			#protocol : #testing,			#sourceCode : 'isActive\r\t^ true',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1705' ],		#self : OmReference [ '1706' ],		#time : DateAndTime [ '2018-01-14T19:02:30.597824-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltSelectAllTextCommand,				#isMetaSide : false			},			#name : #isEnabled,			#protocol : #testing,			#sourceCode : 'isEnabled\r\t^ true',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1706' ],		#self : OmReference [ '1707' ],		#time : DateAndTime [ '2018-01-14T19:02:30.598812-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltSelectAllTextCommand,				#isMetaSide : false			},			#name : #keystroke,			#protocol : #accessing,			#sourceCode : 'keystroke\r\t^ $a ctrl',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1707' ],		#self : OmReference [ '1708' ],		#time : DateAndTime [ '2018-01-14T19:02:30.599808-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltSelectAllTextCommand,				#isMetaSide : false			},			#name : #wantsMenu,			#protocol : #testing,			#sourceCode : 'wantsMenu\r\t^ false',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1708' ],		#self : OmReference [ '1709' ],		#time : DateAndTime [ '2018-01-14T19:02:30.60144-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltSelectMoveDown,				#isMetaSide : false			},			#name : #execute,			#protocol : #execution,			#sourceCode : 'execute\r\trequestor selectedNode\r\t\tifNil: [ ^ target selectRowIndex: 1 ]\r\t\tifNotNil:\r\t\t\t[ :node | \r\t\t\t(node isExpanded or: [ node hasContents not ])\r\t\t\t\tifFalse: [ requestor selectedNode toggleExpanded ]\r\t\t\t\tifTrue:\r\t\t\t\t\t[ target\r\t\t\t\t\t\tselectRowIndex:\r\t\t\t\t\t\t\t((target selectedRowIndex + 1 min: target model size) max: 1) ] ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1709' ],		#self : OmReference [ '1710' ],		#time : DateAndTime [ '2018-01-14T19:02:30.602399-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltSelectMoveDown,				#isMetaSide : false			},			#name : #isActive,			#protocol : #testing,			#sourceCode : 'isActive\r\t^ true',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1710' ],		#self : OmReference [ '1711' ],		#time : DateAndTime [ '2018-01-14T19:02:30.6033-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltSelectMoveDown,				#isMetaSide : false			},			#name : #keystroke,			#protocol : #accessing,			#sourceCode : 'keystroke\r\t^ Character arrowRight',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1711' ],		#self : OmReference [ '1712' ],		#time : DateAndTime [ '2018-01-14T19:02:30.604188-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltSelectMoveDown,				#isMetaSide : false			},			#name : #wantsMenu,			#protocol : #testing,			#sourceCode : 'wantsMenu\r\t^ false',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1712' ],		#self : OmReference [ '1713' ],		#time : DateAndTime [ '2018-01-14T19:02:30.605295-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltSelectMoveUp,				#isMetaSide : false			},			#name : #execute,			#protocol : #execution,			#sourceCode : 'execute\r\trequestor selectedNode\r\t\tifNil: [ ^ target selectRowIndex: 1 ]\r\t\tifNotNil:\r\t\t\t[ :node | \r\t\t\t(node isExpanded not or: [ node hasContents not ])\r\t\t\t\tifFalse: [ node toggleExpanded ]\r\t\t\t\tifTrue:\r\t\t\t\t\t[ (node root indexOf: node parent)\r\t\t\t\t\t\tifNil: [ target selectRowIndex: (target selectRowIndex - 1 max: 1) ]\r\t\t\t\t\t\tifNotNil: [ :i | target selectRowIndex: (i max: 1) ] ] ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1713' ],		#self : OmReference [ '1714' ],		#time : DateAndTime [ '2018-01-14T19:02:30.606234-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltSelectMoveUp,				#isMetaSide : false			},			#name : #isActive,			#protocol : #testing,			#sourceCode : 'isActive\r\t^ true',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1714' ],		#self : OmReference [ '1715' ],		#time : DateAndTime [ '2018-01-14T19:02:30.607155-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltSelectMoveUp,				#isMetaSide : false			},			#name : #keystroke,			#protocol : #accessing,			#sourceCode : 'keystroke\r\t^ Character arrowLeft',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1715' ],		#self : OmReference [ '1716' ],		#time : DateAndTime [ '2018-01-14T19:02:30.608027-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltSelectMoveUp,				#isMetaSide : false			},			#name : #wantsMenu,			#protocol : #testing,			#sourceCode : 'wantsMenu\r\t^ false',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1716' ],		#self : OmReference [ '1717' ],		#time : DateAndTime [ '2018-01-14T19:02:30.609355-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltSelectNextItem,				#isMetaSide : false			},			#name : #execute,			#protocol : #execution,			#sourceCode : 'execute\r\ttarget\r\t\tselectRowIndex:\r\t\t\t((target selectedRowIndex + 1 min: target model size) max: 1)',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1717' ],		#self : OmReference [ '1718' ],		#time : DateAndTime [ '2018-01-14T19:02:30.610926-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltSelectNextItem,				#isMetaSide : false			},			#name : #isActive,			#protocol : #testing,			#sourceCode : 'isActive\r\t^ true',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1718' ],		#self : OmReference [ '1719' ],		#time : DateAndTime [ '2018-01-14T19:02:30.611898-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltSelectNextItem,				#isMetaSide : false			},			#name : #keystroke,			#protocol : #accessing,			#sourceCode : 'keystroke\r\t^ Character arrowDown',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1719' ],		#self : OmReference [ '1720' ],		#time : DateAndTime [ '2018-01-14T19:02:30.612853-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltSelectNextItem,				#isMetaSide : false			},			#name : #wantsMenu,			#protocol : #testing,			#sourceCode : 'wantsMenu\r\t^ false',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1720' ],		#self : OmReference [ '1721' ],		#time : DateAndTime [ '2018-01-14T19:02:30.613907-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltSelectPreviousItem,				#isMetaSide : false			},			#name : #execute,			#protocol : #execution,			#sourceCode : 'execute\r\ttarget selectRowIndex: (target selectedRowIndex - 1 max: 1)',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1721' ],		#self : OmReference [ '1722' ],		#time : DateAndTime [ '2018-01-14T19:02:30.614872-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltSelectPreviousItem,				#isMetaSide : false			},			#name : #isActive,			#protocol : #testing,			#sourceCode : 'isActive\r\t^ true',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1722' ],		#self : OmReference [ '1723' ],		#time : DateAndTime [ '2018-01-14T19:02:30.615934-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltSelectPreviousItem,				#isMetaSide : false			},			#name : #keystroke,			#protocol : #accessing,			#sourceCode : 'keystroke\r\t^ Character arrowUp',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1723' ],		#self : OmReference [ '1724' ],		#time : DateAndTime [ '2018-01-14T19:02:30.616876-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltSelectPreviousItem,				#isMetaSide : false			},			#name : #wantsMenu,			#protocol : #testing,			#sourceCode : 'wantsMenu\r\t^ false',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1724' ],		#self : OmReference [ '1725' ],		#time : DateAndTime [ '2018-01-14T19:02:30.617989-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltSendersOfCommand,				#isMetaSide : false			},			#name : #execute,			#protocol : #execution,			#sourceCode : 'execute\r\t"Execute an all senders of."\r\r\t| aSelector anEnvironment classDict |\r\tanEnvironment := requestor rbEnvironment isSelectorEnvironment\r\t\tifTrue: [ requestor rbEnvironment environment ]\r\t\tifFalse: [ requestor rbEnvironment ].\r\taSelector := requestor selectedNode item selector.\r\tclassDict := IdentityDictionary new.\r\tanEnvironment\r\t\tclassesAndMetaClassesDo:\r\t\t\t[ :class | \r\t\t\t((class thoroughWhichSelectorsReferTo: aSelector)\r\t\t\t\tselect: [ :selector | anEnvironment includesSelector: selector in: class ])\r\t\t\t\tin:\r\t\t\t\t\t[ :selectors | \r\t\t\t\t\tselectors isEmpty\r\t\t\t\t\t\tifFalse: [ classDict at: class put: selectors asIdentitySet ] ] ].\r\tclassDict isEmpty\r\t\tifTrue: [ ^ self inform: aSelector, \': no sender found\' ].\r\t(requestor class\r\t\topenOnEnvironment:\r\t\t\t((RBSelectorEnvironment onEnvironment: anEnvironment)\r\t\t\t\ton: classDict;\r\t\t\t\tlabel: \'References to: \' , aSelector;\r\t\t\t\tsearchStrings: (Array with: aSelector);\r\t\t\t\tyourself)) expandAllNodes',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1725' ],		#self : OmReference [ '1726' ],		#time : DateAndTime [ '2018-01-14T19:02:30.618921-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltSendersOfCommand,				#isMetaSide : false			},			#name : #icon,			#protocol : #accessing,			#sourceCode : 'icon\r\t^ #smallFindIcon',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1726' ],		#self : OmReference [ '1727' ],		#time : DateAndTime [ '2018-01-14T19:02:30.619799-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltSendersOfCommand,				#isMetaSide : false			},			#name : #isActive,			#protocol : #testing,			#sourceCode : 'isActive\r\t^ true',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1727' ],		#self : OmReference [ '1728' ],		#time : DateAndTime [ '2018-01-14T19:02:30.621347-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltSendersOfCommand,				#isMetaSide : false			},			#name : #label,			#protocol : #accessing,			#sourceCode : 'label\r\t^ \'Senders\'',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1728' ],		#self : OmReference [ '1729' ],		#time : DateAndTime [ '2018-01-14T19:02:30.62235-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltUndoTextCommand,				#isMetaSide : false			},			#name : #execute,			#protocol : #execution,			#sourceCode : 'execute\r\ttarget textMorph editor undo',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1729' ],		#self : OmReference [ '1730' ],		#time : DateAndTime [ '2018-01-14T19:02:30.623319-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltUndoTextCommand,				#isMetaSide : false			},			#name : #group,			#protocol : #accessing,			#sourceCode : 'group\r\t^ #adapting',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1730' ],		#self : OmReference [ '1731' ],		#time : DateAndTime [ '2018-01-14T19:02:30.624233-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltUndoTextCommand,				#isMetaSide : false			},			#name : #icon,			#protocol : #accessing,			#sourceCode : 'icon\r\t^ #smallUndoIcon',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1731' ],		#self : OmReference [ '1732' ],		#time : DateAndTime [ '2018-01-14T19:02:30.625086-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltUndoTextCommand,				#isMetaSide : false			},			#name : #isActive,			#protocol : #testing,			#sourceCode : 'isActive\r\t^ true',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1732' ],		#self : OmReference [ '1733' ],		#time : DateAndTime [ '2018-01-14T19:02:30.625962-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltUndoTextCommand,				#isMetaSide : false			},			#name : #keystroke,			#protocol : #accessing,			#sourceCode : 'keystroke\r\t^ $z ctrl',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1733' ],		#self : OmReference [ '1734' ],		#time : DateAndTime [ '2018-01-14T19:02:30.626905-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltUndoTextCommand,				#isMetaSide : false			},			#name : #label,			#protocol : #accessing,			#sourceCode : 'label\r\t^ \'Undo\'',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1734' ],		#self : OmReference [ '1735' ],		#time : DateAndTime [ '2018-01-14T19:02:30.62788-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltWatchpointsEraseHistoryAll,				#isMetaSide : false			},			#name : #execute,			#protocol : #execution,			#sourceCode : 'execute\r\tWatchpoint deleteAllHistory',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1735' ],		#self : OmReference [ '1736' ],		#time : DateAndTime [ '2018-01-14T19:02:30.628866-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltWatchpointsEraseHistoryAll,				#isMetaSide : false			},			#name : #icon,			#protocol : #accessing,			#sourceCode : 'icon\r\t^ #smallDeleteIcon',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1736' ],		#self : OmReference [ '1737' ],		#time : DateAndTime [ '2018-01-14T19:02:30.629774-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltWatchpointsEraseHistoryAll,				#isMetaSide : false			},			#name : #isActive,			#protocol : #testing,			#sourceCode : 'isActive\r\t^ true',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1737' ],		#self : OmReference [ '1738' ],		#time : DateAndTime [ '2018-01-14T19:02:30.631737-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltWatchpointsEraseHistoryAll,				#isMetaSide : false			},			#name : #isEnabled,			#protocol : #testing,			#sourceCode : 'isEnabled\r\t^ Watchpoint allWatchpoints notEmpty',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1738' ],		#self : OmReference [ '1739' ],		#time : DateAndTime [ '2018-01-14T19:02:30.632669-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltWatchpointsEraseHistoryAll,				#isMetaSide : false			},			#name : #label,			#protocol : #accessing,			#sourceCode : 'label\r\t^ \'Erase all history\'',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1739' ],		#self : OmReference [ '1740' ],		#time : DateAndTime [ '2018-01-14T19:02:30.633703-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltWatchpointsRemoveAll,				#isMetaSide : false			},			#name : #execute,			#protocol : #execution,			#sourceCode : 'execute\r\tWatchpoint removeAll.\r\tSmalltalk garbageCollect.\r\tAltBrowser aNodeToRebuilt: requestor selectedNode',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1740' ],		#self : OmReference [ '1741' ],		#time : DateAndTime [ '2018-01-14T19:02:30.634624-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltWatchpointsRemoveAll,				#isMetaSide : false			},			#name : #icon,			#protocol : #accessing,			#sourceCode : 'icon\r\t^ #smallDeleteIcon',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1741' ],		#self : OmReference [ '1742' ],		#time : DateAndTime [ '2018-01-14T19:02:30.635565-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltWatchpointsRemoveAll,				#isMetaSide : false			},			#name : #isActive,			#protocol : #testing,			#sourceCode : 'isActive\r\t^ true',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1742' ],		#self : OmReference [ '1743' ],		#time : DateAndTime [ '2018-01-14T19:02:30.636463-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltWatchpointsRemoveAll,				#isMetaSide : false			},			#name : #isEnabled,			#protocol : #testing,			#sourceCode : 'isEnabled\r\t^ Watchpoint allWatchpoints notEmpty',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1743' ],		#self : OmReference [ '1744' ],		#time : DateAndTime [ '2018-01-14T19:02:30.637369-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltWatchpointsRemoveAll,				#isMetaSide : false			},			#name : #keystroke,			#protocol : #accessing,			#sourceCode : 'keystroke\r\t^ Character delete asKeyCombination ',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1744' ],		#self : OmReference [ '1745' ],		#time : DateAndTime [ '2018-01-14T19:02:30.638265-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltWatchpointsRemoveAll,				#isMetaSide : false			},			#name : #label,			#protocol : #accessing,			#sourceCode : 'label\r\t^ \'Remove all\'',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1745' ],		#self : OmReference [ '1746' ],		#time : DateAndTime [ '2018-01-14T19:02:30.639234-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltKeyboardSearchInTree class',				#isMetaSide : true			},			#name : #'startSearch:for:',			#protocol : #'instance creation',			#sourceCode : 'startSearch: anEvent for: aMorph\r\t"This is a generic entry point for searching in a tree. Should refuse meta and alt key ."\r\r\t(anEvent keyCharacter isAlphaNumeric and: [ anEvent anyModifierKeyPressed not ])\r\t\tifTrue: [ self new execute: anEvent for: aMorph ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1746' ],		#self : OmReference [ '1747' ],		#time : DateAndTime [ '2018-01-14T19:02:30.640899-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltKeyboardSearchInTree,				#isMetaSide : false			},			#name : #completionKeys,			#protocol : #private,			#sourceCode : 'completionKeys\r\t^ Character tab asKeyCombination | Character cr asKeyCombination | Character lf asKeyCombination | $/ asKeyCombination',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1747' ],		#self : OmReference [ '1748' ],		#time : DateAndTime [ '2018-01-14T19:02:30.641883-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltKeyboardSearchInTree,				#isMetaSide : false			},			#name : #'eventIsCompletion:',			#protocol : #private,			#sourceCode : 'eventIsCompletion: anEvt\r\t^ self completionKeys matchesCompletely: anEvt',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1748' ],		#self : OmReference [ '1749' ],		#time : DateAndTime [ '2018-01-14T19:02:30.642798-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltKeyboardSearchInTree,				#isMetaSide : false			},			#name : #'eventIsTrapped:',			#protocol : #private,			#sourceCode : 'eventIsTrapped: anEvt\r\t^ self trappedKeys matchesCompletely: anEvt',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1749' ],		#self : OmReference [ '1750' ],		#time : DateAndTime [ '2018-01-14T19:02:30.644013-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltKeyboardSearchInTree,				#isMetaSide : false			},			#name : #'execute:for:',			#protocol : #execution,			#sourceCode : 'execute: anEvt for: aMorph\r\t"OK. anEvt is the event that is triggering the command. aMorph is the tree."\r\r\t| textMorph aMorphBounds |\r\trequestor := aMorph.\r\ttextMorph := AltTextSearchMorph new\r\t\tcontents: (String with: anEvt keyCharacter).\r\taMorphBounds := aMorph boundsInWorld.\r\ttextMorph\r\t\tbounds:\r\t\t\t(aMorphBounds origin + (10 @ 10)\r\t\t\t\tcorner: aMorphBounds corner + (-20 @ (StandardFonts defaultFont height + 4))).\r\ttextMorph addDropShadow.\r\ttextMorph setBorderStyle: #simple.\r\ttextMorph\r\t\tbindKeyCombination: self completionKeys\r\t\ttoAction:\r\t\t\t[ :targetMorph :targetMorph2 :keyEvent | self onCompletionKey: keyEvent for: targetMorph ].\r\ttextMorph\r\t\tbindKeyCombination: self trappedKeys\r\t\ttoAction:\r\t\t\t[ :targetMorph :targetMorph2 :keyEvent | self onTrappedKey: keyEvent for: targetMorph ].\r\ttextMorph editor\r\t\tselectFrom: 2\r\t\tto: textMorph paragraph text string size.\r\ttextMorph on: #keyStroke send: #onKey:for: to: self.\r\taMorph pasteUpMorph addMorph: textMorph.\r\tanEvt hand newKeyboardFocus: textMorph.\r\tself onKey: anEvt for: textMorph\t"To call the standard processing on the key used to open the text."',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1750' ],		#self : OmReference [ '1751' ],		#time : DateAndTime [ '2018-01-14T19:02:30.645037-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltKeyboardSearchInTree,				#isMetaSide : false			},			#name : #'nodeDetect:ifNone:',			#protocol : #private,			#sourceCode : 'nodeDetect: aBlock ifNone: aNoneBlock\r\t"The base search technique for matching nodes. Take the node list, start the search one morph after the selection, loop to beginning if needed."\r\r\t| searchList |\r\tsearchList := baseIndex\r\t\tifNil:\r\t\t\t[ requestor selectedRowIndex\r\t\t\t\tifNil: [ requestor model ]\r\t\t\t\tifNotNil:\r\t\t\t\t\t[ :sel | \r\t\t\t\t\t(requestor model allButFirst: sel)\r\t\t\t\t\t\t, (requestor model first: sel) ] ]\r\t\tifNotNil:\r\t\t\t[ :i | (requestor model allButFirst: i - 1) , (requestor model first: i - 1) ].\r\t^ searchList detect: aBlock ifNone: aNoneBlock',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1751' ],		#self : OmReference [ '1752' ],		#time : DateAndTime [ '2018-01-14T19:02:30.645982-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltKeyboardSearchInTree,				#isMetaSide : false			},			#name : #'onCompletionKey:for:',			#protocol : #'user actions',			#sourceCode : 'onCompletionKey: anEvent for: targetMorph\r\t"Complete the best match, open the selected node."\r\r\t"Consider that, when the completion key is hit, it\'s the selected node that we open. If no selection, select the first node. Expand, ensure display is correct, then delete the command."\r\r\trequestor selectedRowIndex = 0\r\t\tifTrue: [ requestor selectRowIndex: 1 ].\r\t(requestor model at: requestor selectedRowIndex) expand.\r\trequestor ensureVisibleSelection.\r\ttargetMorph delete.\r\tanEvent hand newKeyboardFocus: requestor',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1752' ],		#self : OmReference [ '1753' ],		#time : DateAndTime [ '2018-01-14T19:02:30.647022-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltKeyboardSearchInTree,				#isMetaSide : false			},			#name : #'onKey:for:',			#protocol : #'user actions',			#sourceCode : 'onKey: anEvt for: aMorph\r\t"On each key, track and select."\r\r\t"Improve: start one after the current selection and loop over the list of nodes in the tree. It allows for a multi-level search without having to track the selected path (parent node is selected, search starts among the childrens). Ok, should not do that on each key, but only on the first one, i.e. upon starting the command itself."\r\r\t"Bad: the completion keys also end up there and, as a consequence, trigger additional searches here if we don\'t filter then out."\r\r\t((self eventIsCompletion: anEvt) or: [ self eventIsTrapped: anEvt ])\r\t\tifTrue: [ ^ self ].\r\t(self\r\t\tnodeDetect:\r\t\t\t[ :each | each complexContents asString trimBoth beginsWith: aMorph contents ]\r\t\tifNone: [  ])\r\t\tifNotNil:\r\t\t\t[ :anItem | \r\t\t\tbaseIndex := requestor model indexOf: anItem.\r\t\t\trequestor selectedRowIndex == baseIndex\r\t\t\t\tifFalse:\r\t\t\t\t\t[ requestor selectRowIndex: baseIndex.\r\t\t\t\t\trequestor ensureVisibleSelection ] ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1753' ],		#self : OmReference [ '1754' ],		#time : DateAndTime [ '2018-01-14T19:02:30.64793-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltKeyboardSearchInTree,				#isMetaSide : false			},			#name : #'onTrappedKey:for:',			#protocol : #'user actions',			#sourceCode : 'onTrappedKey: anEvent for: targetMorph\r\t"Trapped keys trigger deleting the target morph and sending them to the requestor."\r\r\ttargetMorph delete.\r\tanEvent hand newKeyboardFocus: requestor.\r\tanEvent wasHandled: false.\r\trequestor handleKeystroke: anEvent',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1754' ],		#self : OmReference [ '1755' ],		#time : DateAndTime [ '2018-01-14T19:02:30.648905-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltKeyboardSearchInTree,				#isMetaSide : false			},			#name : #trappedKeys,			#protocol : #private,			#sourceCode : 'trappedKeys\r\t^ Character arrowUp asKeyCombination | Character arrowDown asKeyCombination | Character arrowLeft asKeyCombination\r\t\t| Character arrowRight asKeyCombination',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1755' ],		#self : OmReference [ '1756' ],		#time : DateAndTime [ '2018-01-14T19:02:30.650471-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltCodeItemModel,				#isMetaSide : false			},			#name : #asMorph,			#protocol : #'user interface',			#sourceCode : 'asMorph\r\t^ self asString asMorph',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1756' ],		#self : OmReference [ '1757' ],		#time : DateAndTime [ '2018-01-14T19:02:30.651627-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltCodeItemModel,				#isMetaSide : false			},			#name : #asString,			#protocol : #printing,			#sourceCode : 'asString\r\t^ item asStringIn: self',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1757' ],		#self : OmReference [ '1758' ],		#time : DateAndTime [ '2018-01-14T19:02:30.652548-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltCodeItemModel,				#isMetaSide : false			},			#name : #'buildMenu:',			#protocol : #actions,			#sourceCode : 'buildMenu: aMenu\r\t^ self item\r\t\tbuildTreeMenu: aMenu\r\t\ton: self model treeMorph\r\t\twith: self model',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1758' ],		#self : OmReference [ '1759' ],		#time : DateAndTime [ '2018-01-14T19:02:30.653471-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltCodeItemModel,				#isMetaSide : false			},			#name : #'buildTextMenu:on:with:',			#protocol : #querying,			#sourceCode : 'buildTextMenu: aMenu on: aTarget with: aRequestor\r\t^ self item buildTextMenu: aMenu on: aTarget with: aRequestor',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1759' ],		#self : OmReference [ '1760' ],		#time : DateAndTime [ '2018-01-14T19:02:30.654372-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltCodeItemModel,				#isMetaSide : false			},			#name : #'buildTreeMenu:on:with:',			#protocol : #querying,			#sourceCode : 'buildTreeMenu: aMenu on: aTarget with: aRequestor\r\t^ self item buildTreeMenu: aMenu on: aTarget with: aRequestor',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1760' ],		#self : OmReference [ '1761' ],		#time : DateAndTime [ '2018-01-14T19:02:30.655254-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltCodeItemModel,				#isMetaSide : false			},			#name : #'childNodeFromItem:',			#protocol : #accessing,			#sourceCode : 'childNodeFromItem: anItem\r\t"When creating a node model, tell which environment it\'s being created in (parent gives environment to children)."\r\r\t^ (super childNodeFromItem: anItem)\r\t\trbEnvironment: self rbEnvironment;\r\t\tyourself',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1761' ],		#self : OmReference [ '1762' ],		#time : DateAndTime [ '2018-01-14T19:02:30.656264-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltCodeItemModel,				#isMetaSide : false			},			#name : #childrenItems,			#protocol : #accessing,			#sourceCode : 'childrenItems\r\t"When retrieving the items to build the children nodes, give them the ability to filter themselves according to the environment."\r\r\t^ (item contents\r\t\tcollect: [ :e | e asPerRBEnvironment: self rbEnvironment ])\r\t\treject: [ :e | e isNil ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1762' ],		#self : OmReference [ '1763' ],		#time : DateAndTime [ '2018-01-14T19:02:30.657258-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltCodeItemModel,				#isMetaSide : false			},			#name : #doItContext,			#protocol : #accessing,			#sourceCode : 'doItContext\r\t^ item doItContext',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1763' ],		#self : OmReference [ '1764' ],		#time : DateAndTime [ '2018-01-14T19:02:30.658244-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltCodeItemModel,				#isMetaSide : false			},			#name : #doItReceiver,			#protocol : #accessing,			#sourceCode : 'doItReceiver\r\t^ item doItReceiver',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1764' ],		#self : OmReference [ '1765' ],		#time : DateAndTime [ '2018-01-14T19:02:30.659184-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltCodeItemModel,				#isMetaSide : false			},			#name : #'doubleClickIn:',			#protocol : #actions,			#sourceCode : 'doubleClickIn: anAltTreeMorph\r\t^ self item doubleClickIn: self',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1765' ],		#self : OmReference [ '1766' ],		#time : DateAndTime [ '2018-01-14T19:02:30.660896-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltCodeItemModel,				#isMetaSide : false			},			#name : #findExpanded,			#protocol : #protocol,			#sourceCode : 'findExpanded\r\t"Return all children which are expanded."\r\r\t| currentlyExpanded |\r\tcurrentlyExpanded := OrderedCollection new.\r\tself isExpanded\r\t\tifTrue: [ \r\t\t\tcurrentlyExpanded add: self.\r\t\t\tcontents do: [ :aNode | currentlyExpanded addAll: aNode findExpanded ] ].\r\t^ currentlyExpanded',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1766' ],		#self : OmReference [ '1767' ],		#time : DateAndTime [ '2018-01-14T19:02:30.662003-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltCodeItemModel,				#isMetaSide : false			},			#name : #'findItem:',			#protocol : #querying,			#sourceCode : 'findItem: anItem\r\t"searching for an item, returns a node. Account for expanded nodes."\r\r\tself item == anItem\r\t\tifTrue: [ ^ self ].\r\tself isExpanded\r\t\tifFalse: [ ^ nil ].\r\tself contents\r\t\tdo:\r\t\t\t[ :e | \r\t\t\t| s |\r\t\t\t(s := e findItem: anItem) notNil\r\t\t\t\tifTrue: [ ^ s ] ].\r\t^ nil',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1767' ],		#self : OmReference [ '1768' ],		#time : DateAndTime [ '2018-01-14T19:02:30.662967-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltCodeItemModel,				#isMetaSide : false			},			#name : #icon,			#protocol : #accessing,			#sourceCode : 'icon\r\t"When returned an icon symbol, sees if it exists before trying to get it. We depend on some packages which may not exist or be unloaded."\r\r\t| iconSelector |\r\ticonSelector := self item icon.\r\ticonSelector ifNil: [ ^ nil ].\r\t^ Smalltalk ui icons iconNamed: iconSelector',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1768' ],		#self : OmReference [ '1769' ],		#time : DateAndTime [ '2018-01-14T19:02:30.663897-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltCodeItemModel,				#isMetaSide : false			},			#name : #'isAnAncestor:',			#protocol : #testing,			#sourceCode : 'isAnAncestor: anItem\r\t"Check if one parent is equal to us."\r\r\tself == anItem\r\t\tifTrue: [ ^ false ].\r\tparent ifNil: [ ^ false ].\r\tparent == anItem\r\t\tifTrue: [ ^ true ].\r\t^ parent isAnAncestor: anItem',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1769' ],		#self : OmReference [ '1770' ],		#time : DateAndTime [ '2018-01-14T19:02:30.664816-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltCodeItemModel,				#isMetaSide : false			},			#name : #'isExpanded:',			#protocol : #accessing,			#sourceCode : 'isExpanded: aBoolean\r\texpanded := aBoolean.\r\texpanded\r\t\tifFalse: [ contents := nil ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1770' ],		#self : OmReference [ '1771' ],		#time : DateAndTime [ '2018-01-14T19:02:30.665706-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltCodeItemModel,				#isMetaSide : false			},			#name : #isStyled,			#protocol : #accessing,			#sourceCode : 'isStyled\r\t^ item isStyled',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1771' ],		#self : OmReference [ '1772' ],		#time : DateAndTime [ '2018-01-14T19:02:30.666573-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltCodeItemModel,				#isMetaSide : false			},			#name : #model,			#protocol : #querying,			#sourceCode : 'model\r\t^ parent model',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1772' ],		#self : OmReference [ '1773' ],		#time : DateAndTime [ '2018-01-14T19:02:30.667465-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltCodeItemModel,				#isMetaSide : false			},			#name : #parentNode,			#protocol : #accessing,			#sourceCode : 'parentNode\r\t^ parent',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1773' ],		#self : OmReference [ '1774' ],		#time : DateAndTime [ '2018-01-14T19:02:30.668374-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltCodeItemModel,				#isMetaSide : false			},			#name : #rbEnvironment,			#protocol : #accessing,			#sourceCode : 'rbEnvironment\r\t^ rbEnvironment\r\t\tifNil: [ rbEnvironment := RBBrowserEnvironment new ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1774' ],		#self : OmReference [ '1775' ],		#time : DateAndTime [ '2018-01-14T19:02:30.66934-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltCodeItemModel,				#isMetaSide : false			},			#name : #'rbEnvironment:',			#protocol : #accessing,			#sourceCode : 'rbEnvironment: aRBEnvironment\r\trbEnvironment := aRBEnvironment',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1775' ],		#self : OmReference [ '1776' ],		#time : DateAndTime [ '2018-01-14T19:02:30.671241-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltCodeItemModel,				#isMetaSide : false			},			#name : #rebuildContents,			#protocol : #accessing,			#sourceCode : 'rebuildContents\r\t"This rebuilding, by avoiding recreation of the items, retain expand/collapse."\r\r\tcontents notNil\r\t\tifTrue: [ self\r\t\t\t\tcontents:\r\t\t\t\t\t(self childrenItems\r\t\t\t\t\t\tcollect: [ :i | \r\t\t\t\t\t\t\t| n |\r\t\t\t\t\t\t\tn := contents detect: [ :e | e item == i ] ifNone: [ nil ].\r\t\t\t\t\t\t\tn isNil\r\t\t\t\t\t\t\t\tifTrue: [ self childNodeFromItem: i ]\r\t\t\t\t\t\t\t\tifFalse: [ n ] ]) asOrderedCollection ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1776' ],		#self : OmReference [ '1777' ],		#time : DateAndTime [ '2018-01-14T19:02:30.672227-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltCodeItemModel,				#isMetaSide : false			},			#name : #'selectAt:',			#protocol : #selection,			#sourceCode : 'selectAt: anIndex\r\t(item selectIn: self root model)\r\t\tifFalse: [ super selectAt: anIndex ]',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1777' ],		#self : OmReference [ '1778' ],		#time : DateAndTime [ '2018-01-14T19:02:30.673114-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltCodeItemModel,				#isMetaSide : false			},			#name : #sourceClass,			#protocol : #accessing,			#sourceCode : 'sourceClass\r\t^ item sourceClass',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1778' ],		#self : OmReference [ '1779' ],		#time : DateAndTime [ '2018-01-14T19:02:30.674078-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltCodeItemModel,				#isMetaSide : false			},			#name : #sourceCode,			#protocol : #accessing,			#sourceCode : 'sourceCode\r\t^ item sourceCode',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1779' ],		#self : OmReference [ '1780' ],		#time : DateAndTime [ '2018-01-14T19:02:30.674987-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltCodeItemModel,				#isMetaSide : false			},			#name : #styleClass,			#protocol : #accessing,			#sourceCode : 'styleClass\r\t^ item styleClass',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1780' ],		#self : OmReference [ '1781' ],		#time : DateAndTime [ '2018-01-14T19:02:30.675914-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltCodeItemModel,				#isMetaSide : false			},			#name : #title,			#protocol : #accessing,			#sourceCode : 'title\r\t^ item title',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1781' ],		#self : OmReference [ '1782' ],		#time : DateAndTime [ '2018-01-14T19:02:30.677038-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltCodeItemModel,				#isMetaSide : false			},			#name : #toggleExpanded,			#protocol : #'user interface',			#sourceCode : 'toggleExpanded\r\t"Ensure we don\'t toggle if we have changes."\r\r\tself root selectedItem\r\t\tifNotNil:\r\t\t\t[ :s | \r\t\t\t(s ~~ self and: [ self anySatisfy: [ :e | e == s ] ])\r\t\t\t\tifTrue:\r\t\t\t\t\t[ (self root model notNil\r\t\t\t\t\t\tand:\r\t\t\t\t\t\t\t[ self root model textMorph notNil\r\t\t\t\t\t\t\t\tand: [ self root model textMorph hasUnacceptedEdits ] ])\r\t\t\t\t\t\tifTrue: [ ^ self ] ] ].\r\tsuper toggleExpanded',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1782' ],		#self : OmReference [ '1783' ],		#time : DateAndTime [ '2018-01-14T19:02:30.678177-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltCodeItemModel,				#isMetaSide : false			},			#name : #'wantsDroppedElement:',			#protocol : #'drag and drop',			#sourceCode : 'wantsDroppedElement: aMorphPassenger\r\t^ item acceptDropItem: aMorphPassenger',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1783' ],		#self : OmReference [ '1784' ],		#time : DateAndTime [ '2018-01-14T19:02:30.679161-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltCodeItemRootModel,				#isMetaSide : false			},			#name : #'buildMenu:',			#protocol : #actions,			#sourceCode : 'buildMenu: aMenu\r\t^ self model buildTreeMenu: aMenu',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1784' ],		#self : OmReference [ '1785' ],		#time : DateAndTime [ '2018-01-14T19:02:30.680846-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltCodeItemRootModel,				#isMetaSide : false			},			#name : #'childNodeFromItem:',			#protocol : #accessing,			#sourceCode : 'childNodeFromItem: anItem\r\t"Only one root item. All others are normal items."\r\r\t^ (self class superclass on: anItem)\r\t\tparent: self;\r\t\trbEnvironment: self rbEnvironment;\r\t\tyourself',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1785' ],		#self : OmReference [ '1786' ],		#time : DateAndTime [ '2018-01-14T19:02:30.681826-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltCodeItemRootModel,				#isMetaSide : false			},			#name : #'dropElement:index:',			#protocol : #'drag and drop',			#sourceCode : 'dropElement: aPassenger index: anId\r\tanId = 0\r\t\tifTrue: [ ^ self ].\r\t(self at: anId) item dropItem: aPassenger',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1786' ],		#self : OmReference [ '1787' ],		#time : DateAndTime [ '2018-01-14T19:02:30.682755-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltCodeItemRootModel,				#isMetaSide : false			},			#name : #model,			#protocol : #accessing,			#sourceCode : 'model\r\t^ model',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1787' ],		#self : OmReference [ '1788' ],		#time : DateAndTime [ '2018-01-14T19:02:30.683621-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltCodeItemRootModel,				#isMetaSide : false			},			#name : #'model:',			#protocol : #accessing,			#sourceCode : 'model: anObject\r\tmodel := anObject',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1788' ],		#self : OmReference [ '1789' ],		#time : DateAndTime [ '2018-01-14T19:02:30.68452-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltCodeItemRootModel,				#isMetaSide : false			},			#name : #'selectIndex:',			#protocol : #selection,			#sourceCode : 'selectIndex: anIndex\r\tmodel\r\t\tifNotNil: [ model textMorph\r\t\t\t\tifNotNil: [ :t | \r\t\t\t\t\tt hasUnacceptedEdits\r\t\t\t\t\t\tifTrue: [ t flash.\r\t\t\t\t\t\t\t^ self ] ] ].\r\tsuper selectIndex: anIndex',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1789' ],		#self : OmReference [ '1790' ],		#time : DateAndTime [ '2018-01-14T19:02:30.685568-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltCodeItemRootModel,				#isMetaSide : false			},			#name : #'selectItem:index:',			#protocol : #selection,			#sourceCode : 'selectItem: anItem index: anIndex\r\tmodel\r\t\tifNotNil:\r\t\t\t[ model textMorph\r\t\t\t\tifNotNil: [ :t | \r\t\t\t\t\tt hasUnacceptedEdits\r\t\t\t\t\t\tifTrue: [ ^ self ] ] ].\r\tsuper selectItem: anItem index: anIndex',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1790' ],		#self : OmReference [ '1791' ],		#time : DateAndTime [ '2018-01-14T19:02:30.686522-05:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltCodeItemRootModel,				#isMetaSide : false			},			#name : #'transferFor:from:',			#protocol : #'drag and drop',			#sourceCode : 'transferFor: aSetOfItems from: aMorph\r\t"Create a draggable object."\r\r\taSetOfItems size = 1\r\t\tifTrue:\r\t\t\t[ ^ super transferFor: aSetOfItems first item from: aMorph ].\r\t^ super transferFor: aSetOfItems from: aMorph',			#stamp : ' 1/14/2018 19:02:21',			#package : #Alt-Browser		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#time : DateAndTime [ '2018-01-14T19:02:35.310425-05:00' ],		#prior : OmReference [ '1791' ],		#self : OmReference [ '1792' ]	},	#content : EpMonticelloVersionsLoad {		#versionNames : OrderedCollection [			'Alt-TypeCheck-cypress.1'		]	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1792' ],		#self : OmReference [ '1793' ],		#time : DateAndTime [ '2018-01-14T19:02:35.700854-05:00' ],		#trigger : @3	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'DynamicVariable',				#traitCompositionSource : '{}',				#definitionSource : 'DynamicVariable subclass: #AltTypeCheckVariable\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltTypeCheckVariable,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltTypeCheckVariable class\r\tinstanceVariableNames: \'\''				},				#name : #'AltTypeCheckVariable class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltTypeCheckVariable,					#isMetaSide : false				},				#parent : @7,				#content : 'I hold a check underway in the current process',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I hold a check underway in the current process',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1793' ],		#self : OmReference [ '1794' ],		#time : DateAndTime [ '2018-01-14T19:02:35.702595-05:00' ],		#trigger : OmReference [ '1792' ]	},	#content : EpCategoryAddition {		#classCategoryName : #Alt-TypeCheck,		#affectedPackageName : #Alt-TypeCheck	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1794' ],		#self : OmReference [ '1795' ],		#time : DateAndTime [ '2018-01-14T19:02:35.851209-05:00' ],		#trigger : OmReference [ '1792' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'DynamicVariable',				#traitCompositionSource : '{}',				#definitionSource : 'DynamicVariable subclass: #AltTypeCheckVariable\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-TypeCheck\''			},			#name : #AltTypeCheckVariable,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltTypeCheckVariable class\r\tinstanceVariableNames: \'\''				},				#name : #'AltTypeCheckVariable class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltTypeCheckVariable,					#isMetaSide : false				},				#parent : @8,				#content : 'I hold a check underway in the current process',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-TypeCheck,			#package : #Alt-TypeCheck,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1795' ],		#self : OmReference [ '1796' ],		#time : DateAndTime [ '2018-01-14T19:02:35.91371-05:00' ],		#trigger : OmReference [ '1792' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltTypeCheckClassCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltTypeCheckClassCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltTypeCheckClassCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltTypeCheckClassCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltTypeCheckClassCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'I integrate the type-checking command for a class into the AltBrowser',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I integrate the type-checking command for a class into the AltBrowser',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1796' ],		#self : OmReference [ '1797' ],		#time : DateAndTime [ '2018-01-14T19:02:35.917757-05:00' ],		#trigger : OmReference [ '1792' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltTypeCheckClassCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-TypeCheck\''			},			#name : #AltTypeCheckClassCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltTypeCheckClassCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltTypeCheckClassCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltTypeCheckClassCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'I integrate the type-checking command for a class into the AltBrowser',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-TypeCheck,			#package : #Alt-TypeCheck,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1797' ],		#self : OmReference [ '1798' ],		#time : DateAndTime [ '2018-01-14T19:02:35.944522-05:00' ],		#trigger : OmReference [ '1792' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltTypeCheckClassCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltTypeCheckClassCommand subclass: #AltTypeCheckPackageCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltTypeCheckPackageCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltTypeCheckPackageCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltTypeCheckPackageCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltTypeCheckPackageCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'I integrate the type check command for a package in the AltBrowser',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I integrate the type check command for a package in the AltBrowser',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1798' ],		#self : OmReference [ '1799' ],		#time : DateAndTime [ '2018-01-14T19:02:35.948048-05:00' ],		#trigger : OmReference [ '1792' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltTypeCheckClassCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltTypeCheckClassCommand subclass: #AltTypeCheckPackageCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-TypeCheck\''			},			#name : #AltTypeCheckPackageCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltTypeCheckPackageCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltTypeCheckPackageCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltTypeCheckPackageCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'I integrate the type check command for a package in the AltBrowser',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-TypeCheck,			#package : #Alt-TypeCheck,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1799' ],		#self : OmReference [ '1800' ],		#time : DateAndTime [ '2018-01-14T19:02:35.96353-05:00' ],		#trigger : OmReference [ '1792' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #AltTypeCheckTests\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltTypeCheckTests,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltTypeCheckTests class\r\tinstanceVariableNames: \'\''				},				#name : #'AltTypeCheckTests class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltTypeCheckTests,					#isMetaSide : false				},				#parent : @8,				#content : 'I test the scanner and the typing logic and the way to add metalinks.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I test the scanner and the typing logic and the way to add metalinks.',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1800' ],		#self : OmReference [ '1801' ],		#time : DateAndTime [ '2018-01-14T19:02:35.965783-05:00' ],		#trigger : OmReference [ '1792' ]	},	#content : EpCategoryAddition {		#classCategoryName : #Alt-TypeCheck-Tests,		#affectedPackageName : #Alt-TypeCheck	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1801' ],		#self : OmReference [ '1802' ],		#time : DateAndTime [ '2018-01-14T19:02:35.969444-05:00' ],		#trigger : OmReference [ '1792' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #AltTypeCheckTests\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-TypeCheck-Tests\''			},			#name : #AltTypeCheckTests,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltTypeCheckTests class\r\tinstanceVariableNames: \'\''				},				#name : #'AltTypeCheckTests class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltTypeCheckTests,					#isMetaSide : false				},				#parent : @8,				#content : 'I test the scanner and the typing logic and the way to add metalinks.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-TypeCheck-Tests,			#package : #Alt-TypeCheck,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1802' ],		#self : OmReference [ '1803' ],		#time : DateAndTime [ '2018-01-14T19:02:35.984029-05:00' ],		#trigger : OmReference [ '1792' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #AltAbstractType\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltAbstractType,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltAbstractType class\r\tinstanceVariableNames: \'\''				},				#name : #'AltAbstractType class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltAbstractType,					#isMetaSide : false				},				#parent : @8,				#content : 'I represent an abstract type in Smalltalk. Essentially a class (or combination of).\r\rI hold the ability to write an expression to check a type.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I represent an abstract type in Smalltalk. Essentially a class (or combination of).\r\rI hold the ability to write an expression to check a type.',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1803' ],		#self : OmReference [ '1804' ],		#time : DateAndTime [ '2018-01-14T19:02:35.98582-05:00' ],		#trigger : OmReference [ '1792' ]	},	#content : EpCategoryAddition {		#classCategoryName : #Alt-TypeCheck-Types,		#affectedPackageName : #Alt-TypeCheck	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1804' ],		#self : OmReference [ '1805' ],		#time : DateAndTime [ '2018-01-14T19:02:35.989199-05:00' ],		#trigger : OmReference [ '1792' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #AltAbstractType\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-TypeCheck-Types\''			},			#name : #AltAbstractType,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltAbstractType class\r\tinstanceVariableNames: \'\''				},				#name : #'AltAbstractType class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltAbstractType,					#isMetaSide : false				},				#parent : @8,				#content : 'I represent an abstract type in Smalltalk. Essentially a class (or combination of).\r\rI hold the ability to write an expression to check a type.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-TypeCheck-Types,			#package : #Alt-TypeCheck,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1805' ],		#self : OmReference [ '1806' ],		#time : DateAndTime [ '2018-01-14T19:02:36.020938-05:00' ],		#trigger : OmReference [ '1792' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltAbstractType',				#traitCompositionSource : '{}',				#definitionSource : 'AltAbstractType subclass: #AltAndType\r\tinstanceVariableNames: \'left right\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltAndType,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltAndType,						#isMetaSide : false					},					#name : #left,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltAndType,						#isMetaSide : false					},					#name : #right,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltAndType class\r\tinstanceVariableNames: \'\''				},				#name : #'AltAndType class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltAndType,					#isMetaSide : false				},				#parent : @8,				#content : 'I represent an AND between two types expressions',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I represent an AND between two types expressions',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1806' ],		#self : OmReference [ '1807' ],		#time : DateAndTime [ '2018-01-14T19:02:36.025345-05:00' ],		#trigger : OmReference [ '1792' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltAbstractType',				#traitCompositionSource : '{}',				#definitionSource : 'AltAbstractType subclass: #AltAndType\r\tinstanceVariableNames: \'left right\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-TypeCheck-Types\''			},			#name : #AltAndType,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltAndType,						#isMetaSide : false					},					#name : #left,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltAndType,						#isMetaSide : false					},					#name : #right,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltAndType class\r\tinstanceVariableNames: \'\''				},				#name : #'AltAndType class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltAndType,					#isMetaSide : false				},				#parent : @8,				#content : 'I represent an AND between two types expressions',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-TypeCheck-Types,			#package : #Alt-TypeCheck,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1807' ],		#self : OmReference [ '1808' ],		#time : DateAndTime [ '2018-01-14T19:02:36.039621-05:00' ],		#trigger : OmReference [ '1792' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltAbstractType',				#traitCompositionSource : '{}',				#definitionSource : 'AltAbstractType subclass: #AltAnyType\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltAnyType,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltAnyType class\r\tinstanceVariableNames: \'\''				},				#name : #'AltAnyType class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltAnyType,					#isMetaSide : false				},				#parent : @8,				#content : 'I represent an any type, that is answers true to anything not specified',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I represent an any type, that is answers true to anything not specified',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1808' ],		#self : OmReference [ '1809' ],		#time : DateAndTime [ '2018-01-14T19:02:36.043392-05:00' ],		#trigger : OmReference [ '1792' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltAbstractType',				#traitCompositionSource : '{}',				#definitionSource : 'AltAbstractType subclass: #AltAnyType\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-TypeCheck-Types\''			},			#name : #AltAnyType,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltAnyType class\r\tinstanceVariableNames: \'\''				},				#name : #'AltAnyType class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltAnyType,					#isMetaSide : false				},				#parent : @8,				#content : 'I represent an any type, that is answers true to anything not specified',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-TypeCheck-Types,			#package : #Alt-TypeCheck,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1809' ],		#self : OmReference [ '1810' ],		#time : DateAndTime [ '2018-01-14T19:02:36.057125-05:00' ],		#trigger : OmReference [ '1792' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltAbstractType',				#traitCompositionSource : '{}',				#definitionSource : 'AltAbstractType subclass: #AltCollectionType\r\tinstanceVariableNames: \'collectionType elementType\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltCollectionType,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltCollectionType,						#isMetaSide : false					},					#name : #collectionType,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltCollectionType,						#isMetaSide : false					},					#name : #elementType,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltCollectionType class\r\tinstanceVariableNames: \'\''				},				#name : #'AltCollectionType class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltCollectionType,					#isMetaSide : false				},				#parent : @8,				#content : 'I represent a collection type: I have a reference class (or not) and a collection of items',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I represent a collection type: I have a reference class (or not) and a collection of items',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1810' ],		#self : OmReference [ '1811' ],		#time : DateAndTime [ '2018-01-14T19:02:36.060735-05:00' ],		#trigger : OmReference [ '1792' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltAbstractType',				#traitCompositionSource : '{}',				#definitionSource : 'AltAbstractType subclass: #AltCollectionType\r\tinstanceVariableNames: \'collectionType elementType\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-TypeCheck-Types\''			},			#name : #AltCollectionType,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltCollectionType,						#isMetaSide : false					},					#name : #collectionType,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltCollectionType,						#isMetaSide : false					},					#name : #elementType,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltCollectionType class\r\tinstanceVariableNames: \'\''				},				#name : #'AltCollectionType class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltCollectionType,					#isMetaSide : false				},				#parent : @8,				#content : 'I represent a collection type: I have a reference class (or not) and a collection of items',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-TypeCheck-Types,			#package : #Alt-TypeCheck,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1811' ],		#self : OmReference [ '1812' ],		#time : DateAndTime [ '2018-01-14T19:02:36.088977-05:00' ],		#trigger : OmReference [ '1792' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltAbstractType',				#traitCompositionSource : '{}',				#definitionSource : 'AltAbstractType subclass: #AltObjectType\r\tinstanceVariableNames: \'objectClass\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltObjectType,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltObjectType,						#isMetaSide : false					},					#name : #objectClass,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltObjectType class\r\tinstanceVariableNames: \'\''				},				#name : #'AltObjectType class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltObjectType,					#isMetaSide : false				},				#parent : @8,				#content : 'I represent an object type (a class).',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I represent an object type (a class).',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1812' ],		#self : OmReference [ '1813' ],		#time : DateAndTime [ '2018-01-14T19:02:36.093577-05:00' ],		#trigger : OmReference [ '1792' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltAbstractType',				#traitCompositionSource : '{}',				#definitionSource : 'AltAbstractType subclass: #AltObjectType\r\tinstanceVariableNames: \'objectClass\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-TypeCheck-Types\''			},			#name : #AltObjectType,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltObjectType,						#isMetaSide : false					},					#name : #objectClass,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltObjectType class\r\tinstanceVariableNames: \'\''				},				#name : #'AltObjectType class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltObjectType,					#isMetaSide : false				},				#parent : @8,				#content : 'I represent an object type (a class).',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-TypeCheck-Types,			#package : #Alt-TypeCheck,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1813' ],		#self : OmReference [ '1814' ],		#time : DateAndTime [ '2018-01-14T19:02:36.109222-05:00' ],		#trigger : OmReference [ '1792' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltAbstractType',				#traitCompositionSource : '{}',				#definitionSource : 'AltAbstractType subclass: #AltOrType\r\tinstanceVariableNames: \'left right\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltOrType,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltOrType,						#isMetaSide : false					},					#name : #left,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltOrType,						#isMetaSide : false					},					#name : #right,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltOrType class\r\tinstanceVariableNames: \'\''				},				#name : #'AltOrType class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltOrType,					#isMetaSide : false				},				#parent : @8,				#content : 'I represent an or between two type expressions',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I represent an or between two type expressions',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1814' ],		#self : OmReference [ '1815' ],		#time : DateAndTime [ '2018-01-14T19:02:36.113068-05:00' ],		#trigger : OmReference [ '1792' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltAbstractType',				#traitCompositionSource : '{}',				#definitionSource : 'AltAbstractType subclass: #AltOrType\r\tinstanceVariableNames: \'left right\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-TypeCheck-Types\''			},			#name : #AltOrType,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltOrType,						#isMetaSide : false					},					#name : #left,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltOrType,						#isMetaSide : false					},					#name : #right,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltOrType class\r\tinstanceVariableNames: \'\''				},				#name : #'AltOrType class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltOrType,					#isMetaSide : false				},				#parent : @8,				#content : 'I represent an or between two type expressions',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-TypeCheck-Types,			#package : #Alt-TypeCheck,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1815' ],		#self : OmReference [ '1816' ],		#time : DateAndTime [ '2018-01-14T19:02:36.131695-05:00' ],		#trigger : OmReference [ '1792' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #AltArrayOfChecks\r\tinstanceVariableNames: \'checks\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltArrayOfChecks,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltArrayOfChecks,						#isMetaSide : false					},					#name : #checks,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltArrayOfChecks class\r\tinstanceVariableNames: \'\''				},				#name : #'AltArrayOfChecks class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltArrayOfChecks,					#isMetaSide : false				},				#parent : @8,				#content : 'I combine multiple checks (one for each argument)',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I combine multiple checks (one for each argument)',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1816' ],		#self : OmReference [ '1817' ],		#time : DateAndTime [ '2018-01-14T19:02:36.138071-05:00' ],		#trigger : OmReference [ '1792' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #AltArrayOfChecks\r\tinstanceVariableNames: \'checks\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-TypeCheck-Types\''			},			#name : #AltArrayOfChecks,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltArrayOfChecks,						#isMetaSide : false					},					#name : #checks,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltArrayOfChecks class\r\tinstanceVariableNames: \'\''				},				#name : #'AltArrayOfChecks class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltArrayOfChecks,					#isMetaSide : false				},				#parent : @8,				#content : 'I combine multiple checks (one for each argument)',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-TypeCheck-Types,			#package : #Alt-TypeCheck,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1817' ],		#self : OmReference [ '1818' ],		#time : DateAndTime [ '2018-01-14T19:02:36.161726-05:00' ],		#trigger : OmReference [ '1792' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #AltEOFCharacter\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltEOFCharacter,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltEOFCharacter class\r\tinstanceVariableNames: \'instance\''				},				#name : #'AltEOFCharacter class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'AltEOFCharacter class',							#isMetaSide : true						},						#name : #instance,						#parent : @13					}				],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltEOFCharacter,					#isMetaSide : false				},				#parent : @8,				#content : 'I represent an end of input when scanning',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I represent an end of input when scanning',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1818' ],		#self : OmReference [ '1819' ],		#time : DateAndTime [ '2018-01-14T19:02:36.166053-05:00' ],		#trigger : OmReference [ '1792' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #AltEOFCharacter\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-TypeCheck\''			},			#name : #AltEOFCharacter,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltEOFCharacter class\r\tinstanceVariableNames: \'instance\''				},				#name : #'AltEOFCharacter class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'AltEOFCharacter class',							#isMetaSide : true						},						#name : #instance,						#parent : @13					}				],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltEOFCharacter,					#isMetaSide : false				},				#parent : @8,				#content : 'I represent an end of input when scanning',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-TypeCheck,			#package : #Alt-TypeCheck,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1819' ],		#self : OmReference [ '1820' ],		#time : DateAndTime [ '2018-01-14T19:02:36.180515-05:00' ],		#trigger : OmReference [ '1792' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #AltOfChar\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltOfChar,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltOfChar class\r\tinstanceVariableNames: \'\''				},				#name : #'AltOfChar class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltOfChar,					#isMetaSide : false				},				#parent : @8,				#content : 'I am here to test the scan',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I am here to test the scan',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1820' ],		#self : OmReference [ '1821' ],		#time : DateAndTime [ '2018-01-14T19:02:36.185313-05:00' ],		#trigger : OmReference [ '1792' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #AltOfChar\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-TypeCheck-Tests\''			},			#name : #AltOfChar,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltOfChar class\r\tinstanceVariableNames: \'\''				},				#name : #'AltOfChar class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltOfChar,					#isMetaSide : false				},				#parent : @8,				#content : 'I am here to test the scan',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-TypeCheck-Tests,			#package : #Alt-TypeCheck,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1821' ],		#self : OmReference [ '1822' ],		#time : DateAndTime [ '2018-01-14T19:02:36.201509-05:00' ],		#trigger : OmReference [ '1792' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #AltTypeCheck\r\tinstanceVariableNames: \'entity visited links\'\r\tclassVariableNames: \'Register\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltTypeCheck,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltTypeCheck,						#isMetaSide : false					},					#name : #entity,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltTypeCheck,						#isMetaSide : false					},					#name : #visited,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltTypeCheck,						#isMetaSide : false					},					#name : #links,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltTypeCheck class\r\tinstanceVariableNames: \'\''				},				#name : #'AltTypeCheck class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltTypeCheck,					#isMetaSide : false				},				#parent : @8,				#content : 'I apply type guards on all methods, and can also remove them',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltTypeCheck,						#isMetaSide : false					},					#name : #Register,					#parent : @8				}			],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I apply type guards on all methods, and can also remove them',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1822' ],		#self : OmReference [ '1823' ],		#time : DateAndTime [ '2018-01-14T19:02:36.205341-05:00' ],		#trigger : OmReference [ '1792' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #AltTypeCheck\r\tinstanceVariableNames: \'entity visited links\'\r\tclassVariableNames: \'Register\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-TypeCheck\''			},			#name : #AltTypeCheck,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltTypeCheck,						#isMetaSide : false					},					#name : #entity,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltTypeCheck,						#isMetaSide : false					},					#name : #visited,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltTypeCheck,						#isMetaSide : false					},					#name : #links,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltTypeCheck class\r\tinstanceVariableNames: \'\''				},				#name : #'AltTypeCheck class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltTypeCheck,					#isMetaSide : false				},				#parent : @8,				#content : 'I apply type guards on all methods, and can also remove them',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltTypeCheck,						#isMetaSide : false					},					#name : #Register,					#parent : @8				}			],			#category : #Alt-TypeCheck,			#package : #Alt-TypeCheck,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1823' ],		#self : OmReference [ '1824' ],		#time : DateAndTime [ '2018-01-14T19:02:36.247286-05:00' ],		#trigger : OmReference [ '1792' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #AltTypeCheckScanner\r\tinstanceVariableNames: \'stream current type token\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltTypeCheckScanner,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltTypeCheckScanner,						#isMetaSide : false					},					#name : #stream,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltTypeCheckScanner,						#isMetaSide : false					},					#name : #current,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltTypeCheckScanner,						#isMetaSide : false					},					#name : #type,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltTypeCheckScanner,						#isMetaSide : false					},					#name : #token,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltTypeCheckScanner class\r\tinstanceVariableNames: \'\''				},				#name : #'AltTypeCheckScanner class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltTypeCheckScanner,					#isMetaSide : false				},				#parent : @8,				#content : 'I scan a parameter name to determine its type',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I scan a parameter name to determine its type',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1824' ],		#self : OmReference [ '1825' ],		#time : DateAndTime [ '2018-01-14T19:02:36.251998-05:00' ],		#trigger : OmReference [ '1792' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #AltTypeCheckScanner\r\tinstanceVariableNames: \'stream current type token\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-TypeCheck\''			},			#name : #AltTypeCheckScanner,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltTypeCheckScanner,						#isMetaSide : false					},					#name : #stream,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltTypeCheckScanner,						#isMetaSide : false					},					#name : #current,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltTypeCheckScanner,						#isMetaSide : false					},					#name : #type,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltTypeCheckScanner,						#isMetaSide : false					},					#name : #token,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltTypeCheckScanner class\r\tinstanceVariableNames: \'\''				},				#name : #'AltTypeCheckScanner class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltTypeCheckScanner,					#isMetaSide : false				},				#parent : @8,				#content : 'I scan a parameter name to determine its type',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-TypeCheck,			#package : #Alt-TypeCheck,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1825' ],		#self : OmReference [ '1826' ],		#time : DateAndTime [ '2018-01-14T19:02:36.266263-05:00' ],		#trigger : OmReference [ '1792' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #CharOfChar\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #CharOfChar,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'CharOfChar class\r\tinstanceVariableNames: \'\''				},				#name : #'CharOfChar class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #CharOfChar,					#isMetaSide : false				},				#parent : @8,				#content : 'I\'m here to test things',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I\'m here to test things',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1826' ],		#self : OmReference [ '1827' ],		#time : DateAndTime [ '2018-01-14T19:02:36.270215-05:00' ],		#trigger : OmReference [ '1792' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #CharOfChar\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-TypeCheck-Tests\''			},			#name : #CharOfChar,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'CharOfChar class\r\tinstanceVariableNames: \'\''				},				#name : #'CharOfChar class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #CharOfChar,					#isMetaSide : false				},				#parent : @8,				#content : 'I\'m here to test things',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-TypeCheck-Tests,			#package : #Alt-TypeCheck,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1827' ],		#self : OmReference [ '1828' ],		#time : DateAndTime [ '2018-01-14T19:02:36.452247-05:00' ],		#trigger : OmReference [ '1792' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPackageNode,				#isMetaSide : false			},			#name : #typeCheckCommand,			#protocol : #'*alt-typecheck',			#sourceCode : 'typeCheckCommand\r\t<treeAreaCommand>\r\t^ #(#AltTypeCheckPackageCommand)',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-TypeCheck		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1828' ],		#self : OmReference [ '1829' ],		#time : DateAndTime [ '2018-01-14T19:02:36.455031-05:00' ],		#trigger : OmReference [ '1792' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTypeCheckClassCommand,				#isMetaSide : false			},			#name : #execute,			#protocol : #execution,			#sourceCode : 'execute\r\t| aClass |\r\taClass := requestor selectedNode item itemClass.\r\tself requestorIsGuarded\r\t\tifTrue: [ (AltTypeCheck register at: aClass ifAbsent: [  ])\r\t\t\t\tifNotNil: [ :t | t unapply ] ]\r\t\tifFalse: [ AltTypeCheck on: aClass ]',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-TypeCheck		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1829' ],		#self : OmReference [ '1830' ],		#time : DateAndTime [ '2018-01-14T19:02:36.457418-05:00' ],		#trigger : OmReference [ '1792' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTypeCheckClassCommand,				#isMetaSide : false			},			#name : #icon,			#protocol : #accessing,			#sourceCode : 'icon\r\t^ nil',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-TypeCheck		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1830' ],		#self : OmReference [ '1831' ],		#time : DateAndTime [ '2018-01-14T19:02:36.459423-05:00' ],		#trigger : OmReference [ '1792' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTypeCheckClassCommand,				#isMetaSide : false			},			#name : #isActive,			#protocol : #testing,			#sourceCode : 'isActive\r\t^ true',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-TypeCheck		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1831' ],		#self : OmReference [ '1832' ],		#time : DateAndTime [ '2018-01-14T19:02:36.461159-05:00' ],		#trigger : OmReference [ '1792' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTypeCheckClassCommand,				#isMetaSide : false			},			#name : #isEnabled,			#protocol : #testing,			#sourceCode : 'isEnabled\r\t^ true',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-TypeCheck		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1832' ],		#self : OmReference [ '1833' ],		#time : DateAndTime [ '2018-01-14T19:02:36.46392-05:00' ],		#trigger : OmReference [ '1792' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTypeCheckClassCommand,				#isMetaSide : false			},			#name : #label,			#protocol : #accessing,			#sourceCode : 'label\r\tself requestorIsGuarded\r\t\tifTrue: [ ^ \'un-type-check\' ]\r\t\tifFalse: [ ^ \'type-check\' ]',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-TypeCheck		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1833' ],		#self : OmReference [ '1834' ],		#time : DateAndTime [ '2018-01-14T19:02:36.465557-05:00' ],		#trigger : OmReference [ '1792' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTypeCheckClassCommand,				#isMetaSide : false			},			#name : #requestorIsGuarded,			#protocol : #testing,			#sourceCode : 'requestorIsGuarded\r\t| aClass |\r\taClass := requestor selectedNode item itemClass.\r\t^ (AltTypeCheck register includesKey: aClass)\r\t\tor: [ AltTypeCheck register includesKey: aClass package ]',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-TypeCheck		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1834' ],		#self : OmReference [ '1835' ],		#time : DateAndTime [ '2018-01-14T19:02:36.467337-05:00' ],		#trigger : OmReference [ '1792' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTypeCheckPackageCommand,				#isMetaSide : false			},			#name : #execute,			#protocol : #execution,			#sourceCode : 'execute\r\t| aPackage |\r\taPackage := requestor selectedNode item rpackage.\r\tself requestorIsGuarded\r\t\tifTrue: [ (AltTypeCheck register at: aPackage ifAbsent: [  ])\r\t\t\t\tifNotNil: [ :t | t unapply ] ]\r\t\tifFalse: [ AltTypeCheck on: aPackage ]',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-TypeCheck		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1835' ],		#self : OmReference [ '1836' ],		#time : DateAndTime [ '2018-01-14T19:02:36.468883-05:00' ],		#trigger : OmReference [ '1792' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTypeCheckPackageCommand,				#isMetaSide : false			},			#name : #requestorIsGuarded,			#protocol : #testing,			#sourceCode : 'requestorIsGuarded\r\t| aPackage |\r\taPackage := requestor selectedNode item rpackage.\r\t^ AltTypeCheck register includesKey: aPackage',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-TypeCheck		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1836' ],		#self : OmReference [ '1837' ],		#time : DateAndTime [ '2018-01-14T19:02:36.470746-05:00' ],		#trigger : OmReference [ '1792' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltTypeCheckTests class',				#isMetaSide : true			},			#name : #'compare1:with:',			#protocol : #resources,			#sourceCode : 'compare1: anArrayOfChar with: anArrayOfInt\r\tanArrayOfChar size = anArrayOfInt size\r\t\tifTrue: [ ^ true ].\r\tanArrayOfChar\r\t\twith: anArrayOfInt\r\t\tdo: [ :c :i | \r\t\t\tc asciiValue = i\r\t\t\t\tifFalse: [ ^ false ] ].\r\t^ true',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-TypeCheck		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1837' ],		#self : OmReference [ '1838' ],		#time : DateAndTime [ '2018-01-14T19:02:36.472185-05:00' ],		#trigger : OmReference [ '1792' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltTypeCheckTests class',				#isMetaSide : true			},			#name : #'compare2:with:',			#protocol : #resources,			#sourceCode : 'compare2: anArrayOfChar with: somethingElse\r\tsomethingElse isCollection\r\t\tifFalse: [ ^ false ].\r\tanArrayOfChar size = somethingElse size\r\t\tifTrue: [ ^ true ].\r\tanArrayOfChar\r\t\twith: somethingElse\r\t\tdo: [ :c :i | \r\t\t\tc asciiValue = i\r\t\t\t\tifFalse: [ ^ false ] ].\r\t^ true',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-TypeCheck		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1838' ],		#self : OmReference [ '1839' ],		#time : DateAndTime [ '2018-01-14T19:02:36.474657-05:00' ],		#trigger : OmReference [ '1792' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltTypeCheckTests class',				#isMetaSide : true			},			#name : #'compare3:with:',			#protocol : #resources,			#sourceCode : 'compare3: anArrayOfChar with: anAny\r\tanAny isCollection\r\t\tifFalse: [ ^ false ].\r\tanArrayOfChar size = anAny size\r\t\tifTrue: [ ^ true ].\r\tanArrayOfChar\r\t\twith: anAny\r\t\tdo: [ :c :i | \r\t\t\tc asciiValue = i\r\t\t\t\tifFalse: [ ^ false ] ].\r\t^ true',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-TypeCheck		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1839' ],		#self : OmReference [ '1840' ],		#time : DateAndTime [ '2018-01-14T19:02:36.476379-05:00' ],		#trigger : OmReference [ '1792' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTypeCheckTests,				#isMetaSide : false			},			#name : #'compare2:with:',			#protocol : #resources,			#sourceCode : 'compare2: anArrayOfChar with: somethingElse\r\tsomethingElse isCollection\r\t\tifFalse: [ ^ false ].\r\tanArrayOfChar size = somethingElse size\r\t\tifTrue: [ ^ true ].\r\tanArrayOfChar\r\t\twith: somethingElse\r\t\tdo: [ :c :i | \r\t\t\tc asciiValue = i\r\t\t\t\tifFalse: [ ^ false ] ].\r\t^ true',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-TypeCheck		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1840' ],		#self : OmReference [ '1841' ],		#time : DateAndTime [ '2018-01-14T19:02:36.477708-05:00' ],		#trigger : OmReference [ '1792' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTypeCheckTests,				#isMetaSide : false			},			#name : #'compare3:with:',			#protocol : #resources,			#sourceCode : 'compare3: anArrayOfChar with: anAny\r\tanAny isCollection\r\t\tifFalse: [ ^ false ].\r\tanArrayOfChar size = anAny size\r\t\tifTrue: [ ^ true ].\r\tanArrayOfChar\r\t\twith: anAny\r\t\tdo: [ :c :i | \r\t\t\tc asciiValue = i\r\t\t\t\tifFalse: [ ^ false ] ].\r\t^ true',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-TypeCheck		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1841' ],		#self : OmReference [ '1842' ],		#time : DateAndTime [ '2018-01-14T19:02:36.47927-05:00' ],		#trigger : OmReference [ '1792' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTypeCheckTests,				#isMetaSide : false			},			#name : #'compare:with:',			#protocol : #resources,			#sourceCode : 'compare: anArrayOfChar with: anArrayOfInt\r\tanArrayOfChar size = anArrayOfInt size\r\t\tifTrue: [ ^ true ].\r\tanArrayOfChar\r\t\twith: anArrayOfInt\r\t\tdo: [ :c :i | \r\t\t\tc asciiValue = i\r\t\t\t\tifFalse: [ ^ false ] ].\r\t^ true',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-TypeCheck		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1842' ],		#self : OmReference [ '1843' ],		#time : DateAndTime [ '2018-01-14T19:02:36.480693-05:00' ],		#trigger : OmReference [ '1792' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTypeCheckTests,				#isMetaSide : false			},			#name : #'count:',			#protocol : #resources,			#sourceCode : 'count: anArrayOfChar\r\t| i |\r\ti := 0.\r\tanArrayOfChar do: [ :e | i := i + 1 ].\r\t^ i',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-TypeCheck		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1843' ],		#self : OmReference [ '1844' ],		#time : DateAndTime [ '2018-01-14T19:02:36.482232-05:00' ],		#trigger : OmReference [ '1792' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTypeCheckTests,				#isMetaSide : false			},			#name : #testCheckArrayOfChar,			#protocol : #tests-type-checking,			#sourceCode : 'testCheckArrayOfChar\r\tself deny: ((AltTypeCheckScanner scan: \'anArrayOfChar\') check: $a).\r\tself\r\t\tassert: ((AltTypeCheckScanner scan: \'anArrayOfChar\') check: #($a $b))',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-TypeCheck		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1844' ],		#self : OmReference [ '1845' ],		#time : DateAndTime [ '2018-01-14T19:02:36.483742-05:00' ],		#trigger : OmReference [ '1792' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTypeCheckTests,				#isMetaSide : false			},			#name : #testCheckChar,			#protocol : #tests-type-checking,			#sourceCode : 'testCheckChar\r\tself assert: ((AltTypeCheckScanner scan: \'aChar\') check: $a)',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-TypeCheck		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1845' ],		#self : OmReference [ '1846' ],		#time : DateAndTime [ '2018-01-14T19:02:36.486293-05:00' ],		#trigger : OmReference [ '1792' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTypeCheckTests,				#isMetaSide : false			},			#name : #testCheckCharOfChar,			#protocol : #tests-type-checking,			#sourceCode : 'testCheckCharOfChar\r\tself deny: ((AltTypeCheckScanner scan: \'aCharOfChar\') check: $a)',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-TypeCheck		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1846' ],		#self : OmReference [ '1847' ],		#time : DateAndTime [ '2018-01-14T19:02:36.487922-05:00' ],		#trigger : OmReference [ '1792' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTypeCheckTests,				#isMetaSide : false			},			#name : #testDynamicVariableRecursion,			#protocol : #tests-overall,			#sourceCode : 'testDynamicVariableRecursion\r\t"I want to stop a recursion in a limited way."\r\r\t| block |\r\tblock := [ :v | \r\tv > 1\r\t\tifTrue: [ AltTypeCheckVariable value\r\t\t\t\tifNil: [ AltTypeCheckVariable value: #active during: [ block value: v - 1 ] ]\r\t\t\t\tifNotNil: [ v ] ]\r\t\tifFalse: [ 0 ] ].\r\tself assert: (block value: 5) = 4',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-TypeCheck		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1847' ],		#self : OmReference [ '1848' ],		#time : DateAndTime [ '2018-01-14T19:02:36.489438-05:00' ],		#trigger : OmReference [ '1792' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTypeCheckTests,				#isMetaSide : false			},			#name : #testEmpty,			#protocol : #tests-scan,			#sourceCode : 'testEmpty\r\t| scanner |\r\tscanner := AltTypeCheckScanner on: (ReadStream on: \'\').\r\tself assert: scanner scan isNil',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-TypeCheck		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1848' ],		#self : OmReference [ '1849' ],		#time : DateAndTime [ '2018-01-14T19:02:36.491189-05:00' ],		#trigger : OmReference [ '1792' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTypeCheckTests,				#isMetaSide : false			},			#name : #testForbiddenMethod,			#protocol : #tests-overall,			#sourceCode : 'testForbiddenMethod\r\t"Test that this method cannot be checked."\r\r\t| method checker |\r\tmethod := AltArrayOfChecks >> #checkAll:.\r\tself deny: method ast hasMetalink.\r\tchecker := AltTypeCheck new.\r\t[ checker applyOnMethod: method.\r\tself deny: method ast hasMetalink ]\r\t\tensure: [ checker unapply ].\r\tself deny: method ast hasMetalink',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-TypeCheck		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1849' ],		#self : OmReference [ '1850' ],		#time : DateAndTime [ '2018-01-14T19:02:36.493064-05:00' ],		#trigger : OmReference [ '1792' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTypeCheckTests,				#isMetaSide : false			},			#name : #testGuardMultipleArguments,			#protocol : #tests-guards,			#sourceCode : 'testGuardMultipleArguments\r\t"Test if we can guard multiple arguments."\r\r\t| method check link |\r\tmethod := AltTypeCheckTests >> #compare:with:.\r\tself assert: method ast arguments size = 2.\r\tself assert: method ast arguments first name = \'anArrayOfChar\'.\r\tcheck := AltArrayOfChecks new\r\t\tchecks:\r\t\t\t(method ast arguments\r\t\t\t\tcollect: [ :each | AltTypeCheckScanner scan: each name ]).\r\tlink := MetaLink new\r\t\tmetaObject: check;\r\t\tselector: #checkAll:;\r\t\targuments: #(arguments);\r\t\tcontrol: #before.\r\tmethod ast link: link.\r\t[ self\r\t\tshouldnt: [ self compare: #($a $b) with: #(1 2) ]\r\t\traise: AssertionFailure.\r\tself\r\t\tshould: [ self compare: #(1 2) with: #(1 2) ]\r\t\traise: AssertionFailure ]\r\t\tensure: [ link uninstall ]',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-TypeCheck		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1850' ],		#self : OmReference [ '1851' ],		#time : DateAndTime [ '2018-01-14T19:02:36.495518-05:00' ],		#trigger : OmReference [ '1792' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTypeCheckTests,				#isMetaSide : false			},			#name : #testGuardPartialArguments,			#protocol : #tests-guards,			#sourceCode : 'testGuardPartialArguments\r\t"Test if we can scan a single argument."\r\r\t| method checks link |\r\tmethod := AltTypeCheckTests >> #compare2:with:.\r\tself assert: method ast arguments size = 2.\r\tself assert: method ast arguments first name = \'anArrayOfChar\'.\r\tchecks := AltArrayOfChecks new\r\t\tchecks:\r\t\t\t(method ast arguments\r\t\t\t\tcollect: [ :each | AltTypeCheckScanner scan: each name ]).\r\tself assert: checks checks second class == AltAnyType.\r\tlink := MetaLink new\r\t\tmetaObject: checks;\r\t\tselector: #checkAll:;\r\t\targuments: #(arguments);\r\t\tcontrol: #before.\r\tmethod ast link: link.\r\t[ self\r\t\tshouldnt: [ self compare2: #($a $b) with: 1 ]\r\t\traise: AssertionFailure.\r\tself\r\t\tshould: [ self compare2: #(1 2) with: #($a $b) ]\r\t\traise: AssertionFailure ]\r\t\tensure: [ link uninstall ]',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-TypeCheck		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1851' ],		#self : OmReference [ '1852' ],		#time : DateAndTime [ '2018-01-14T19:02:36.499947-05:00' ],		#trigger : OmReference [ '1792' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTypeCheckTests,				#isMetaSide : false			},			#name : #testGuardSingleArgument,			#protocol : #tests-guards,			#sourceCode : 'testGuardSingleArgument\r\t"Test if we can scan a single argument."\r\r\t| method check link |\r\tmethod := AltTypeCheckTests >> #count:.\r\tself assert: method ast arguments size = 1.\r\tself assert: method ast arguments first name = \'anArrayOfChar\'.\r\tcheck := AltTypeCheckScanner scan: method ast arguments first name.\r\tself assert: check class == AltCollectionType.\r\tlink := MetaLink new\r\t\tmetaObject: ((AltObjectType on: Array) of: check);\r\t\tselector: #check:;\r\t\targuments: #(arguments);\r\t\tcontrol: #before.\r\tmethod ast link: link.\r\t[ self count: #($1 $2) ]\r\t\tensure: [ link uninstall ]',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-TypeCheck		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1852' ],		#self : OmReference [ '1853' ],		#time : DateAndTime [ '2018-01-14T19:02:36.503015-05:00' ],		#trigger : OmReference [ '1792' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTypeCheckTests,				#isMetaSide : false			},			#name : #testGuardWithAnyArgument,			#protocol : #tests-guards,			#sourceCode : 'testGuardWithAnyArgument\r\t"Test if we can add the guard with an any argument."\r\r\t| method checks link |\r\tmethod := AltTypeCheckTests >> #compare3:with:.\r\tself assert: method ast arguments size = 2.\r\tself assert: method ast arguments first name = \'anArrayOfChar\'.\r\tchecks := AltArrayOfChecks new\r\t\tchecks:\r\t\t\t(method ast arguments\r\t\t\t\tcollect: [ :each | AltTypeCheckScanner scan: each name ]).\r\tlink := MetaLink new\r\t\tmetaObject: checks;\r\t\tselector: #checkAll:;\r\t\targuments: #(arguments);\r\t\tcontrol: #before.\r\tmethod ast link: link.\r\t[ self\r\t\tshouldnt: [ self compare3: #($a $b) with: 2 ]\r\t\traise: AssertionFailure.\r\tself\r\t\tshould: [ self compare3: #(1 2) with: #($a $b) ]\r\t\traise: AssertionFailure ]\r\t\tensure: [ link uninstall ]',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-TypeCheck		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1853' ],		#self : OmReference [ '1854' ],		#time : DateAndTime [ '2018-01-14T19:02:36.505683-05:00' ],		#trigger : OmReference [ '1792' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTypeCheckTests,				#isMetaSide : false			},			#name : #testOverallAClass,			#protocol : #tests-overall,			#sourceCode : 'testOverallAClass\r\t"Use the type check overall on a class"\r\r\t| method checker |\r\tmethod := AltTypeCheckTests >> #compare:with:.\r\tself deny: method ast hasMetalink.\r\t[ checker := AltTypeCheck on: self class.\r\tself\r\t\tshouldnt: [ self compare: #($a $b) with: #(1 2) ]\r\t\traise: AssertionFailure.\r\tself\r\t\tshould: [ self compare: #(1 2) with: #($a $b) ]\r\t\traise: AssertionFailure.\r\tself\r\t\tshouldnt: [ self compare3: #($a $b) with: 2 ]\r\t\traise: AssertionFailure.\r\tself\r\t\tshould: [ self compare3: #(1 2) with: #(1 2) ]\r\t\traise: AssertionFailure ]\r\t\tensure: [ checker unapply ].\r\tself deny: method ast hasMetalink.\r\tself assert: AltTypeCheck register isEmpty',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-TypeCheck		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1854' ],		#self : OmReference [ '1855' ],		#time : DateAndTime [ '2018-01-14T19:02:36.508122-05:00' ],		#trigger : OmReference [ '1792' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTypeCheckTests,				#isMetaSide : false			},			#name : #testOverallAClassClass,			#protocol : #tests-overall,			#sourceCode : 'testOverallAClassClass\r\t"Use the type check overall on the class class"\r\r\t| method checker |\r\tmethod := AltTypeCheckTests class >> #compare1:with:.\r\tself deny: method ast hasMetalink.\r\t[ checker := AltTypeCheck on: self class class.\r\tself\r\t\tshouldnt: [ self class compare1: #($a $b) with: #(1 2) ]\r\t\traise: AssertionFailure.\r\tself\r\t\tshould: [ self class compare1: #(1 2) with: #($a $b) ]\r\t\traise: AssertionFailure.\r\tself\r\t\tshouldnt: [ self class compare3: #($a $b) with: 2 ]\r\t\traise: AssertionFailure.\r\tself\r\t\tshould: [ self class compare3: #(1 2) with: #(1 2) ]\r\t\traise: AssertionFailure ]\r\t\tensure: [ checker unapply ].\r\tself deny: method ast hasMetalink.\r\tself assert: AltTypeCheck register isEmpty',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-TypeCheck		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1855' ],		#self : OmReference [ '1856' ],		#time : DateAndTime [ '2018-01-14T19:02:36.511071-05:00' ],		#trigger : OmReference [ '1792' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTypeCheckTests,				#isMetaSide : false			},			#name : #testOverallAPackage,			#protocol : #tests-overall,			#sourceCode : 'testOverallAPackage\r\t"Use the type check overall on the package"\r\r\t| method checker |\r\tmethod := AltTypeCheckTests >> #compare:with:.\r\tself deny: method ast hasMetalink.\r\t[ checker := AltTypeCheck on: self class package.\r\tself\r\t\tshouldnt: [ self compare: #($a $b) with: #(1 2) ]\r\t\traise: AssertionFailure.\r\tself\r\t\tshould: [ self compare: #(1 2) with: #($a $b) ]\r\t\traise: AssertionFailure.\r\tself\r\t\tshouldnt: [ self compare3: #($a $b) with: 2 ]\r\t\traise: AssertionFailure.\r\tself\r\t\tshould: [ self compare3: #(1 2) with: #(1 2) ]\r\t\traise: AssertionFailure ]\r\t\tensure: [ checker unapply ].\r\tself deny: method ast hasMetalink.\r\tself assert: AltTypeCheck register isEmpty',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-TypeCheck		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1856' ],		#self : OmReference [ '1857' ],		#time : DateAndTime [ '2018-01-14T19:02:36.514289-05:00' ],		#trigger : OmReference [ '1792' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTypeCheckTests,				#isMetaSide : false			},			#name : #testOverallOneMethod,			#protocol : #tests-guards,			#sourceCode : 'testOverallOneMethod\r\t"Use the type check overall on the method"\r\r\t| method checker |\r\tmethod := AltTypeCheckTests >> #compare:with:.\r\t[ checker := AltTypeCheck new.\r\tchecker applyOnMethod: method.\r\tself\r\t\tshouldnt: [ self compare: #($a $b) with: #(1 2) ]\r\t\traise: AssertionFailure.\r\tself\r\t\tshould: [ self compare: #(1 2) with: #($a $b) ]\r\t\traise: AssertionFailure ]\r\t\tensure: [ checker unapply ]',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-TypeCheck		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1857' ],		#self : OmReference [ '1858' ],		#time : DateAndTime [ '2018-01-14T19:02:36.520095-05:00' ],		#trigger : OmReference [ '1792' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTypeCheckTests,				#isMetaSide : false			},			#name : #testOverallSelfRecurse,			#protocol : #tests-overall,			#sourceCode : 'testOverallSelfRecurse\r\t"Use the type check overall on the method"\r\r\t| method checker checker2 |\r\tmethod := AltTypeCheckTests >> #compare:with:.\r\tself deny: method ast hasMetalink.\r\tchecker := AltTypeCheck new.\r\tchecker2 := AltTypeCheck new.\r\t[ checker applyOn: self class.\r\tchecker2 applyOn: AltObjectType.\r\tself\r\t\tshouldnt: [ self compare: #($a $b) with: #(1 2) ]\r\t\traise: AssertionFailure.\r\tself\r\t\tshould: [ self compare: #(1 2) with: #($a $b) ]\r\t\traise: AssertionFailure.\r\tself\r\t\tshouldnt: [ self compare3: #($a $b) with: 2 ]\r\t\traise: AssertionFailure.\r\tself\r\t\tshould: [ self compare3: #(1 2) with: #(1 2) ]\r\t\traise: AssertionFailure ]\r\t\tensure: [ checker unapply.\r\t\t\tchecker2 unapply ].\r\tself deny: method ast hasMetalink.\r\tself assert: AltTypeCheck register isEmpty',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-TypeCheck		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1858' ],		#self : OmReference [ '1859' ],		#time : DateAndTime [ '2018-01-14T19:02:36.522591-05:00' ],		#trigger : OmReference [ '1792' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTypeCheckTests,				#isMetaSide : false			},			#name : #testRecoverSingleArgument,			#protocol : #tests-guards,			#sourceCode : 'testRecoverSingleArgument\r\t"Test if we can recover a single argument."\r\r\t| method |\r\tmethod := AltTypeCheckTests >> #count:.\r\tself assert: method ast arguments size = 1.\r\tself assert: method ast arguments first name = \'anArrayOfChar\'',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-TypeCheck		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1859' ],		#self : OmReference [ '1860' ],		#time : DateAndTime [ '2018-01-14T19:02:36.524189-05:00' ],		#trigger : OmReference [ '1792' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTypeCheckTests,				#isMetaSide : false			},			#name : #testScanAChar,			#protocol : #tests-scan,			#sourceCode : 'testScanAChar\r\t| scanner |\r\tscanner := AltTypeCheckScanner on: (ReadStream on: \'aChar\').\r\tself assert: scanner scan notNil',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-TypeCheck		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1860' ],		#self : OmReference [ '1861' ],		#time : DateAndTime [ '2018-01-14T19:02:36.525751-05:00' ],		#trigger : OmReference [ '1792' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTypeCheckTests,				#isMetaSide : false			},			#name : #testScanAChar2,			#protocol : #tests-scan,			#sourceCode : 'testScanAChar2\r\t| scanner res |\r\tscanner := AltTypeCheckScanner on: (ReadStream on: \'aChar2\').\r\tself assert: (res := scanner scan) notNil',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-TypeCheck		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1861' ],		#self : OmReference [ '1862' ],		#time : DateAndTime [ '2018-01-14T19:02:36.527282-05:00' ],		#trigger : OmReference [ '1792' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTypeCheckTests,				#isMetaSide : false			},			#name : #testScanACharOfChar,			#protocol : #tests-scan,			#sourceCode : 'testScanACharOfChar\r\t"Example of a mismatch: considered as a collection."\r\t\r\t| scanner res |\r\tscanner := AltTypeCheckScanner on: (ReadStream on: \'aCharOfChar\').\r\tself assert: (res := scanner scan) notNil.\r\tself assert: res class == AltCollectionType',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-TypeCheck		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1862' ],		#self : OmReference [ '1863' ],		#time : DateAndTime [ '2018-01-14T19:02:36.528855-05:00' ],		#trigger : OmReference [ '1792' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTypeCheckTests,				#isMetaSide : false			},			#name : #testScanACharOrInt,			#protocol : #tests-scan,			#sourceCode : 'testScanACharOrInt\r\t| scanner res |\r\tscanner := AltTypeCheckScanner on: (ReadStream on: \'aCharOrInt\').\r\tself assert: (res := scanner scan) notNil.\r\tself assert: res class == AltOrType',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-TypeCheck		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1863' ],		#self : OmReference [ '1864' ],		#time : DateAndTime [ '2018-01-14T19:02:36.530376-05:00' ],		#trigger : OmReference [ '1792' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTypeCheckTests,				#isMetaSide : false			},			#name : #testScanACharWithAName,			#protocol : #tests-scan,			#sourceCode : 'testScanACharWithAName\r\t| scanner res |\r\tscanner := AltTypeCheckScanner on: (ReadStream on: \'aCharWithAName\').\r\tself assert: (res := scanner scan) notNil.\r\tself assert: res objectClass == Character',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-TypeCheck		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1864' ],		#self : OmReference [ '1865' ],		#time : DateAndTime [ '2018-01-14T19:02:36.533291-05:00' ],		#trigger : OmReference [ '1792' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTypeCheckTests,				#isMetaSide : false			},			#name : #testScanACharacter,			#protocol : #tests-scan,			#sourceCode : 'testScanACharacter\r\t| scanner res |\r\tscanner := AltTypeCheckScanner on: (ReadStream on: \'aCharacter\').\r\tself assert: (res := scanner scan) notNil.\r\tself assert: res objectClass == Character',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-TypeCheck		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1865' ],		#self : OmReference [ '1866' ],		#time : DateAndTime [ '2018-01-14T19:02:36.535189-05:00' ],		#trigger : OmReference [ '1792' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTypeCheckTests,				#isMetaSide : false			},			#name : #testScanAChariot,			#protocol : #tests-scan,			#sourceCode : 'testScanAChariot\r\t| scanner res |\r\tscanner := AltTypeCheckScanner on: (ReadStream on: \'aChariot\').\r\tself assert: (res := scanner scan) isNil',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-TypeCheck		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1866' ],		#self : OmReference [ '1867' ],		#time : DateAndTime [ '2018-01-14T19:02:36.536965-05:00' ],		#trigger : OmReference [ '1792' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTypeCheckTests,				#isMetaSide : false			},			#name : #testScanAnAltOfChar,			#protocol : #tests-scan,			#sourceCode : 'testScanAnAltOfChar\r\t"Example of a ambiguity well handled: considered as a class test."\r\r\t| scanner res |\r\tscanner := AltTypeCheckScanner on: (ReadStream on: \'anAltOfChar\').\r\tself assert: (res := scanner scan) notNil.\r\tself assert: res class == AltObjectType',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-TypeCheck		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1867' ],		#self : OmReference [ '1868' ],		#time : DateAndTime [ '2018-01-14T19:02:36.538603-05:00' ],		#trigger : OmReference [ '1792' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTypeCheckTests,				#isMetaSide : false			},			#name : #testScanAnAltSendersOfCommand,			#protocol : #tests-scan,			#sourceCode : 'testScanAnAltSendersOfCommand\r\t| scanner res |\r\tscanner := AltTypeCheckScanner\r\t\ton: (ReadStream on: \'anAltSendersOfCommand\').\r\tself assert: (res := scanner scan) notNil.\r\tself assert: res objectClass == AltSendersOfCommand',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-TypeCheck		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1868' ],		#self : OmReference [ '1869' ],		#time : DateAndTime [ '2018-01-14T19:02:36.540218-05:00' ],		#trigger : OmReference [ '1792' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTypeCheckTests,				#isMetaSide : false			},			#name : #testScanAnArray,			#protocol : #tests-scan,			#sourceCode : 'testScanAnArray\r\t| scanner res |\r\tscanner := AltTypeCheckScanner on: (ReadStream on: \'anArray\').\r\tself assert: (res := scanner scan) notNil.\r\tself assert: res objectClass == Array',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-TypeCheck		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1869' ],		#self : OmReference [ '1870' ],		#time : DateAndTime [ '2018-01-14T19:02:36.541822-05:00' ],		#trigger : OmReference [ '1792' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTypeCheckTests,				#isMetaSide : false			},			#name : #testScanAnArrayOfInt,			#protocol : #tests-scan,			#sourceCode : 'testScanAnArrayOfInt\r\t| scanner res |\r\tscanner := AltTypeCheckScanner on: (ReadStream on: \'anArrayOfInt\').\r\tself assert: (res := scanner scan) notNil.\r\tself assert: res collectionType objectClass == Array',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-TypeCheck		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1870' ],		#self : OmReference [ '1871' ],		#time : DateAndTime [ '2018-01-14T19:02:36.544542-05:00' ],		#trigger : OmReference [ '1792' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTypeCheckTests,				#isMetaSide : false			},			#name : #testScanAnInt,			#protocol : #tests-scan,			#sourceCode : 'testScanAnInt\r\t| scanner res |\r\tscanner := AltTypeCheckScanner on: (ReadStream on: \'anInt\').\r\tself assert: (res := scanner scan) notNil.\r\tself assert: res objectClass == Integer',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-TypeCheck		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1871' ],		#self : OmReference [ '1872' ],		#time : DateAndTime [ '2018-01-14T19:02:36.546236-05:00' ],		#trigger : OmReference [ '1792' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTypeCheckTests,				#isMetaSide : false			},			#name : #testScanAnotherChar,			#protocol : #tests-scan,			#sourceCode : 'testScanAnotherChar\r\t| scanner res |\r\tscanner := AltTypeCheckScanner on: (ReadStream on: \'anotherChar\').\r\tself assert: (res := scanner scan) notNil.\r\tself assert: res objectClass == Character',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-TypeCheck		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1872' ],		#self : OmReference [ '1873' ],		#time : DateAndTime [ '2018-01-14T19:02:36.547877-05:00' ],		#trigger : OmReference [ '1792' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTypeCheckTests,				#isMetaSide : false			},			#name : #testScanSingleArgument,			#protocol : #tests-guards,			#sourceCode : 'testScanSingleArgument\r\t"Test if we can scan a single argument."\r\r\t| method check |\r\tmethod := AltTypeCheckTests >> #count:.\r\tself assert: method ast arguments size = 1.\r\tself assert: method ast arguments first name = \'anArrayOfChar\'.\r\tcheck := AltTypeCheckScanner scan: method ast arguments first name.\r\tself assert: check class == AltCollectionType',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-TypeCheck		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1873' ],		#self : OmReference [ '1874' ],		#time : DateAndTime [ '2018-01-14T19:02:36.549951-05:00' ],		#trigger : OmReference [ '1792' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltClassNode,				#isMetaSide : false			},			#name : #typeCheckCommand,			#protocol : #'*alt-typecheck',			#sourceCode : 'typeCheckCommand\r\t<treeAreaCommand>\r\t^ #(#AltTypeCheckClassCommand)',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-TypeCheck		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1874' ],		#self : OmReference [ '1875' ],		#time : DateAndTime [ '2018-01-14T19:02:36.551284-05:00' ],		#trigger : OmReference [ '1792' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltAbstractType,				#isMetaSide : false			},			#name : #'check:',			#protocol : #accessing,			#sourceCode : 'check: anObject\r\t"Should return a boolean, true or false."\r\r\t^ self subclassResponsability',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-TypeCheck		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1875' ],		#self : OmReference [ '1876' ],		#time : DateAndTime [ '2018-01-14T19:02:36.552671-05:00' ],		#trigger : OmReference [ '1792' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltAbstractType,				#isMetaSide : false			},			#name : #isAnyType,			#protocol : #testing,			#sourceCode : 'isAnyType\r\t^ false',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-TypeCheck		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1876' ],		#self : OmReference [ '1877' ],		#time : DateAndTime [ '2018-01-14T19:02:36.554436-05:00' ],		#trigger : OmReference [ '1792' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltAbstractType,				#isMetaSide : false			},			#name : #'of:',			#protocol : #combining,			#sourceCode : 'of: anAltAbstractType\r\t^ AltCollectionType new\r\t\tcollectionType: self;\r\t\telementType: anAltAbstractType',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-TypeCheck		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1877' ],		#self : OmReference [ '1878' ],		#time : DateAndTime [ '2018-01-14T19:02:36.5573-05:00' ],		#trigger : OmReference [ '1792' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltAbstractType,				#isMetaSide : false			},			#name : #'or:',			#protocol : #combining,			#sourceCode : 'or: anAltAbstractType\r\t^ AltOrType new\r\t\tleft: self;\r\t\tright: anAltAbstractType',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-TypeCheck		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1878' ],		#self : OmReference [ '1879' ],		#time : DateAndTime [ '2018-01-14T19:02:36.559195-05:00' ],		#trigger : OmReference [ '1792' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltAndType,				#isMetaSide : false			},			#name : #'check:',			#protocol : #accessing,			#sourceCode : 'check: anObject\r\t^ (left check: anObject) and: [ right check: anObject ]',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-TypeCheck		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1879' ],		#self : OmReference [ '1880' ],		#time : DateAndTime [ '2018-01-14T19:02:36.560558-05:00' ],		#trigger : OmReference [ '1792' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltAndType,				#isMetaSide : false			},			#name : #left,			#protocol : #accessing,			#sourceCode : 'left\r\t^ left',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-TypeCheck		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1880' ],		#self : OmReference [ '1881' ],		#time : DateAndTime [ '2018-01-14T19:02:36.562034-05:00' ],		#trigger : OmReference [ '1792' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltAndType,				#isMetaSide : false			},			#name : #'left:',			#protocol : #accessing,			#sourceCode : 'left: anObject\r\tleft := anObject',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-TypeCheck		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1881' ],		#self : OmReference [ '1882' ],		#time : DateAndTime [ '2018-01-14T19:02:36.563519-05:00' ],		#trigger : OmReference [ '1792' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltAndType,				#isMetaSide : false			},			#name : #right,			#protocol : #accessing,			#sourceCode : 'right\r\t^ right',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-TypeCheck		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1882' ],		#self : OmReference [ '1883' ],		#time : DateAndTime [ '2018-01-14T19:02:36.565079-05:00' ],		#trigger : OmReference [ '1792' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltAndType,				#isMetaSide : false			},			#name : #'right:',			#protocol : #accessing,			#sourceCode : 'right: anObject\r\tright := anObject',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-TypeCheck		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1883' ],		#self : OmReference [ '1884' ],		#time : DateAndTime [ '2018-01-14T19:02:36.567912-05:00' ],		#trigger : OmReference [ '1792' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltAnyType,				#isMetaSide : false			},			#name : #'check:',			#protocol : #accessing,			#sourceCode : 'check: anObject\r\t^ true',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-TypeCheck		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1884' ],		#self : OmReference [ '1885' ],		#time : DateAndTime [ '2018-01-14T19:02:36.569691-05:00' ],		#trigger : OmReference [ '1792' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltAnyType,				#isMetaSide : false			},			#name : #isAnyType,			#protocol : #testing,			#sourceCode : 'isAnyType\r\t^ true',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-TypeCheck		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1885' ],		#self : OmReference [ '1886' ],		#time : DateAndTime [ '2018-01-14T19:02:36.571329-05:00' ],		#trigger : OmReference [ '1792' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltCollectionType,				#isMetaSide : false			},			#name : #'check:',			#protocol : #accessing,			#sourceCode : 'check: anObject\r\t^ (collectionType check: anObject)\r\t\tand: [ (anObject respondsTo: #allSatisfy:)\r\t\t\t\tand: [ anObject allSatisfy: [ :each | elementType check: each ] ] ]',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-TypeCheck		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1886' ],		#self : OmReference [ '1887' ],		#time : DateAndTime [ '2018-01-14T19:02:36.572662-05:00' ],		#trigger : OmReference [ '1792' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltCollectionType,				#isMetaSide : false			},			#name : #collectionType,			#protocol : #accessing,			#sourceCode : 'collectionType\r\t^ collectionType',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-TypeCheck		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1887' ],		#self : OmReference [ '1888' ],		#time : DateAndTime [ '2018-01-14T19:02:36.574333-05:00' ],		#trigger : OmReference [ '1792' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltCollectionType,				#isMetaSide : false			},			#name : #'collectionType:',			#protocol : #accessing,			#sourceCode : 'collectionType: anObject\r\tcollectionType := anObject',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-TypeCheck		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1888' ],		#self : OmReference [ '1889' ],		#time : DateAndTime [ '2018-01-14T19:02:36.575866-05:00' ],		#trigger : OmReference [ '1792' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltCollectionType,				#isMetaSide : false			},			#name : #elementType,			#protocol : #accessing,			#sourceCode : 'elementType\r\t^ elementType',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-TypeCheck		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1889' ],		#self : OmReference [ '1890' ],		#time : DateAndTime [ '2018-01-14T19:02:36.577396-05:00' ],		#trigger : OmReference [ '1792' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltCollectionType,				#isMetaSide : false			},			#name : #'elementType:',			#protocol : #accessing,			#sourceCode : 'elementType: anObject\r\telementType := anObject',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-TypeCheck		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1890' ],		#self : OmReference [ '1891' ],		#time : DateAndTime [ '2018-01-14T19:02:36.580242-05:00' ],		#trigger : OmReference [ '1792' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltObjectType class',				#isMetaSide : true			},			#name : #'on:',			#protocol : #'instance creation',			#sourceCode : 'on: aClass\r\t^ self new objectClass: aClass',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-TypeCheck		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1891' ],		#self : OmReference [ '1892' ],		#time : DateAndTime [ '2018-01-14T19:02:36.581804-05:00' ],		#trigger : OmReference [ '1792' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltObjectType,				#isMetaSide : false			},			#name : #'check:',			#protocol : #accessing,			#sourceCode : 'check: anObject\r\t^ anObject isKindOf: objectClass',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-TypeCheck		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1892' ],		#self : OmReference [ '1893' ],		#time : DateAndTime [ '2018-01-14T19:02:36.583167-05:00' ],		#trigger : OmReference [ '1792' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltObjectType,				#isMetaSide : false			},			#name : #objectClass,			#protocol : #accessing,			#sourceCode : 'objectClass\r\t^ objectClass',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-TypeCheck		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1893' ],		#self : OmReference [ '1894' ],		#time : DateAndTime [ '2018-01-14T19:02:36.58468-05:00' ],		#trigger : OmReference [ '1792' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltObjectType,				#isMetaSide : false			},			#name : #'objectClass:',			#protocol : #accessing,			#sourceCode : 'objectClass: anObject\r\tobjectClass := anObject',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-TypeCheck		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1894' ],		#self : OmReference [ '1895' ],		#time : DateAndTime [ '2018-01-14T19:02:36.586193-05:00' ],		#trigger : OmReference [ '1792' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltOrType,				#isMetaSide : false			},			#name : #'check:',			#protocol : #accessing,			#sourceCode : 'check: anObject\r\t^ (left check: anObject) and: [ right check: anObject ]',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-TypeCheck		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1895' ],		#self : OmReference [ '1896' ],		#time : DateAndTime [ '2018-01-14T19:02:36.587454-05:00' ],		#trigger : OmReference [ '1792' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltOrType,				#isMetaSide : false			},			#name : #left,			#protocol : #accessing,			#sourceCode : 'left\r\t^ left',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-TypeCheck		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1896' ],		#self : OmReference [ '1897' ],		#time : DateAndTime [ '2018-01-14T19:02:36.588838-05:00' ],		#trigger : OmReference [ '1792' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltOrType,				#isMetaSide : false			},			#name : #'left:',			#protocol : #accessing,			#sourceCode : 'left: anObject\r\tleft := anObject',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-TypeCheck		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1897' ],		#self : OmReference [ '1898' ],		#time : DateAndTime [ '2018-01-14T19:02:36.591384-05:00' ],		#trigger : OmReference [ '1792' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltOrType,				#isMetaSide : false			},			#name : #right,			#protocol : #accessing,			#sourceCode : 'right\r\t^ right',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-TypeCheck		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1898' ],		#self : OmReference [ '1899' ],		#time : DateAndTime [ '2018-01-14T19:02:36.593052-05:00' ],		#trigger : OmReference [ '1792' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltOrType,				#isMetaSide : false			},			#name : #'right:',			#protocol : #accessing,			#sourceCode : 'right: anObject\r\tright := anObject',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-TypeCheck		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1899' ],		#self : OmReference [ '1900' ],		#time : DateAndTime [ '2018-01-14T19:02:36.594675-05:00' ],		#trigger : OmReference [ '1792' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltArrayOfChecks,				#isMetaSide : false			},			#name : #'checkAll:',			#protocol : #accessing,			#sourceCode : 'checkAll: anArrayOfObject\r\tAltTypeCheckVariable value\r\t\tifNil: [ AltTypeCheckVariable\r\t\t\t\tvalue: #active\r\t\t\t\tduring: [ checks\r\t\t\t\t\t\twith: anArrayOfObject\r\t\t\t\t\t\tdo: [ :c :o | self assert: (c check: o) ] ] ]',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-TypeCheck		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1900' ],		#self : OmReference [ '1901' ],		#time : DateAndTime [ '2018-01-14T19:02:36.595978-05:00' ],		#trigger : OmReference [ '1792' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltArrayOfChecks,				#isMetaSide : false			},			#name : #checks,			#protocol : #accessing,			#sourceCode : 'checks\r\t^ checks',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-TypeCheck		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1901' ],		#self : OmReference [ '1902' ],		#time : DateAndTime [ '2018-01-14T19:02:36.597469-05:00' ],		#trigger : OmReference [ '1792' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltArrayOfChecks,				#isMetaSide : false			},			#name : #'checks:',			#protocol : #accessing,			#sourceCode : 'checks: anObject\r\tchecks := anObject',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-TypeCheck		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1902' ],		#self : OmReference [ '1903' ],		#time : DateAndTime [ '2018-01-14T19:02:36.59904-05:00' ],		#trigger : OmReference [ '1792' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltArrayOfChecks,				#isMetaSide : false			},			#name : #isAnyType,			#protocol : #testing,			#sourceCode : 'isAnyType\r\t^ checks isEmpty\r\t\tor: [ checks allSatisfy: [ :each | each isAnyType ] ]',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-TypeCheck		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1903' ],		#self : OmReference [ '1904' ],		#time : DateAndTime [ '2018-01-14T19:02:36.600648-05:00' ],		#trigger : OmReference [ '1792' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltEOFCharacter class',				#isMetaSide : true			},			#name : #new,			#protocol : #'instance creation',			#sourceCode : 'new\r\t^ instance ifNil: [ instance := self basicNew ]',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-TypeCheck		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1904' ],		#self : OmReference [ '1905' ],		#time : DateAndTime [ '2018-01-14T19:02:36.603296-05:00' ],		#trigger : OmReference [ '1792' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltEOFCharacter,				#isMetaSide : false			},			#name : #'=',			#protocol : #comparing,			#sourceCode : '= anObject\r\t^ self == anObject',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-TypeCheck		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1905' ],		#self : OmReference [ '1906' ],		#time : DateAndTime [ '2018-01-14T19:02:36.604691-05:00' ],		#trigger : OmReference [ '1792' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltEOFCharacter,				#isMetaSide : false			},			#name : #isAlphaNumeric,			#protocol : #comparing,			#sourceCode : 'isAlphaNumeric\r\t^ false',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-TypeCheck		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1906' ],		#self : OmReference [ '1907' ],		#time : DateAndTime [ '2018-01-14T19:02:36.606174-05:00' ],		#trigger : OmReference [ '1792' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltEOFCharacter,				#isMetaSide : false			},			#name : #isUppercase,			#protocol : #comparing,			#sourceCode : 'isUppercase\r\t^ false',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-TypeCheck		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1907' ],		#self : OmReference [ '1908' ],		#time : DateAndTime [ '2018-01-14T19:02:36.607671-05:00' ],		#trigger : OmReference [ '1792' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltTypeCheck class',				#isMetaSide : true			},			#name : #'on:',			#protocol : #'instance creation',			#sourceCode : 'on: aClassOrRPackage\r\t^ self new applyOn: aClassOrRPackage',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-TypeCheck		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1908' ],		#self : OmReference [ '1909' ],		#time : DateAndTime [ '2018-01-14T19:02:36.608996-05:00' ],		#trigger : OmReference [ '1792' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltTypeCheck class',				#isMetaSide : true			},			#name : #register,			#protocol : #accessing,			#sourceCode : 'register\r\t^ Register ifNil: [ Register := IdentityDictionary new ]',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-TypeCheck		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1909' ],		#self : OmReference [ '1910' ],		#time : DateAndTime [ '2018-01-14T19:02:36.610494-05:00' ],		#trigger : OmReference [ '1792' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltTypeCheck class',				#isMetaSide : true			},			#name : #'register:with:',			#protocol : #accessing,			#sourceCode : 'register: aClassOrPackage with: anAltTypeCheck\r\t"When registering, we should not have something already there."\r\r\tself assert: (self register includesKey: aClassOrPackage) not.\r\tself register at: aClassOrPackage put: anAltTypeCheck',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-TypeCheck		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1910' ],		#self : OmReference [ '1911' ],		#time : DateAndTime [ '2018-01-14T19:02:36.612073-05:00' ],		#trigger : OmReference [ '1792' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltTypeCheck class',				#isMetaSide : true			},			#name : #unregisterAll,			#protocol : #accessing,			#sourceCode : 'unregisterAll\r\t<script>\r\tself register values do: [ :e | e unapply ].\r\tRegister := nil',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-TypeCheck		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1911' ],		#self : OmReference [ '1912' ],		#time : DateAndTime [ '2018-01-14T19:02:36.6151-05:00' ],		#trigger : OmReference [ '1792' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTypeCheck,				#isMetaSide : false			},			#name : #'applyOn:',			#protocol : #accessing,			#sourceCode : 'applyOn: aClassOrPackage\r\t"Register first: if we have already registered that class, it will trigger an assert."\r\r\tentity := aClassOrPackage.\r\tself class register: aClassOrPackage with: self.\r\taClassOrPackage methods do: [ :each | self applyOnMethod: each ].\r\tvisited\r\t\tifNil: [ self inform: \'No method guarded\'.\r\t\t\tself unapply ]\r\t\tifNotNil: [ self\r\t\t\t\tinform:\r\t\t\t\t\t\'TypeCheck: methods visited: \' , visited printString , \', guarded: \'\r\t\t\t\t\t\t, self links size printString , \', coverage: \'\r\t\t\t\t\t\t, (links size / visited * 100) rounded printString , \'%\' ]',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-TypeCheck		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1912' ],		#self : OmReference [ '1913' ],		#time : DateAndTime [ '2018-01-14T19:02:36.616634-05:00' ],		#trigger : OmReference [ '1792' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTypeCheck,				#isMetaSide : false			},			#name : #'applyOnMethod:',			#protocol : #accessing,			#sourceCode : 'applyOnMethod: aMethod\r\t| checks link |\r\taMethod ast arguments isEmpty\r\t\tifTrue: [ ^ self ].\r\t(self forbiddenMethods includes: aMethod)\r\t\tifTrue: [ ^ self ].\r\tself incrementVisited.\r\tchecks := AltArrayOfChecks new\r\t\tchecks:\r\t\t\t(aMethod ast arguments\r\t\t\t\tcollect: [ :each | AltTypeCheckScanner scan: each name ]).\r\tchecks isAnyType\r\t\tifTrue: [ ^ self ].\r\tself assert: aMethod ast hasMetalink not.\r\tlink := MetaLink new\r\t\tmetaObject: checks;\r\t\tselector: #checkAll:;\r\t\targuments: #(arguments);\r\t\tcontrol: #before.\r\taMethod ast link: link.\r\tself links add: link',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-TypeCheck		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1913' ],		#self : OmReference [ '1914' ],		#time : DateAndTime [ '2018-01-14T19:02:36.618145-05:00' ],		#trigger : OmReference [ '1792' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTypeCheck,				#isMetaSide : false			},			#name : #forbiddenMethods,			#protocol : #resources,			#sourceCode : 'forbiddenMethods\r\t"Methods that should not have a guard, otherwise we end up with an endless loop when checking."\r\r\t^ {(AltArrayOfChecks >> #checkAll:)}',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-TypeCheck		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1914' ],		#self : OmReference [ '1915' ],		#time : DateAndTime [ '2018-01-14T19:02:36.619591-05:00' ],		#trigger : OmReference [ '1792' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTypeCheck,				#isMetaSide : false			},			#name : #incrementVisited,			#protocol : #private,			#sourceCode : 'incrementVisited\r\tvisited := visited ifNil: [ 1 ] ifNotNil: [ visited + 1 ]',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-TypeCheck		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1915' ],		#self : OmReference [ '1916' ],		#time : DateAndTime [ '2018-01-14T19:02:36.621041-05:00' ],		#trigger : OmReference [ '1792' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTypeCheck,				#isMetaSide : false			},			#name : #links,			#protocol : #accessing,			#sourceCode : 'links\r\t^ links ifNil: [ links := IdentitySet new ]',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-TypeCheck		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1916' ],		#self : OmReference [ '1917' ],		#time : DateAndTime [ '2018-01-14T19:02:36.622499-05:00' ],		#trigger : OmReference [ '1792' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTypeCheck,				#isMetaSide : false			},			#name : #'links:',			#protocol : #accessing,			#sourceCode : 'links: anObject\r\tlinks := anObject',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-TypeCheck		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1917' ],		#self : OmReference [ '1918' ],		#time : DateAndTime [ '2018-01-14T19:02:36.625262-05:00' ],		#trigger : OmReference [ '1792' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTypeCheck,				#isMetaSide : false			},			#name : #unapply,			#protocol : #accessing,			#sourceCode : 'unapply\r\tself links do: [ :each | each uninstall ].\r\tlinks := nil.\r\tentity ifNotNil: [ self class register removeKey: entity ]',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-TypeCheck		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1918' ],		#self : OmReference [ '1919' ],		#time : DateAndTime [ '2018-01-14T19:02:36.626975-05:00' ],		#trigger : OmReference [ '1792' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltTypeCheckScanner class',				#isMetaSide : true			},			#name : #'on:',			#protocol : #'instance creation',			#sourceCode : 'on: aStream\r\t^ self new stream: aStream',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-TypeCheck		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1919' ],		#self : OmReference [ '1920' ],		#time : DateAndTime [ '2018-01-14T19:02:36.628349-05:00' ],		#trigger : OmReference [ '1792' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltTypeCheckScanner class',				#isMetaSide : true			},			#name : #'scan:',			#protocol : #'instance creation',			#sourceCode : 'scan: aString\r\t^ (self on: (ReadStream on: aString)) scan ifNil: [ AltAnyType new ]',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-TypeCheck		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1920' ],		#self : OmReference [ '1921' ],		#time : DateAndTime [ '2018-01-14T19:02:36.630123-05:00' ],		#trigger : OmReference [ '1792' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTypeCheckScanner,				#isMetaSide : false			},			#name : #scan,			#protocol : #building,			#sourceCode : 'scan\r\tself step.\r\tcurrent = $a\r\t\tifTrue: [ self step.\r\t\t\tcurrent = $n\r\t\t\t\tifTrue: [ self step.\r\t\t\t\t\tcurrent = $o\r\t\t\t\t\t\tifTrue: [ self step.\r\t\t\t\t\t\t\tcurrent = $t\r\t\t\t\t\t\t\t\tifFalse: [ ^ nil ]\r\t\t\t\t\t\t\t\tifTrue: [ self step.\r\t\t\t\t\t\t\t\t\tcurrent = $h\r\t\t\t\t\t\t\t\t\t\tifFalse: [ ^ nil ]\r\t\t\t\t\t\t\t\t\t\tifTrue: [ self step.\r\t\t\t\t\t\t\t\t\t\t\tcurrent = $e\r\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ ^ nil ]\r\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self step.\r\t\t\t\t\t\t\t\t\t\t\t\t\tcurrent = $r\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifTrue: [ self step ]\r\t\t\t\t\t\t\t\t\t\t\t\t\t\tifFalse: [ ^ nil ] ] ] ] ] ] ].\r\tcurrent isUppercase\r\t\tifTrue: [ self token nextPut: current.\r\t\t\tself step.\r\t\t\t[ current isAlphaNumeric ]\r\t\t\t\twhileTrue: [ current = $O\r\t\t\t\t\t\tifTrue: [ self tokenType\r\t\t\t\t\t\t\t\tifNotNil: [ :aType | \r\t\t\t\t\t\t\t\t\tself token nextPut: current.\r\t\t\t\t\t\t\t\t\tself step.\r\t\t\t\t\t\t\t\t\tcurrent = $f\r\t\t\t\t\t\t\t\t\t\tifTrue: [ ^ (self class on: stream) scan ifNotNil: [ :n | type of: n ] ].\r\t\t\t\t\t\t\t\t\tcurrent = $r\r\t\t\t\t\t\t\t\t\t\tifTrue: [ ^ (self class on: stream) scan ifNotNil: [ :n | type or: n ] ].\r\t\t\t\t\t\t\t\t\tself token nextPut: current ]\r\t\t\t\t\t\t\t\tifNil: [ self token nextPut: current ] ]\r\t\t\t\t\t\tifFalse: [ current isUppercase\r\t\t\t\t\t\t\t\tifTrue: [ self tokenType ].\r\t\t\t\t\t\t\tself token nextPut: current ].\r\t\t\t\t\tself step ].\r\t\t\tself tokenType ].\r\t^ type',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-TypeCheck		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1921' ],		#self : OmReference [ '1922' ],		#time : DateAndTime [ '2018-01-14T19:02:36.631495-05:00' ],		#trigger : OmReference [ '1792' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTypeCheckScanner,				#isMetaSide : false			},			#name : #step,			#protocol : #building,			#sourceCode : 'step\r\tstream atEnd\r\t\tifTrue: [ ^ current := AltEOFCharacter new ].\r\t^ current := stream next',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-TypeCheck		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1922' ],		#self : OmReference [ '1923' ],		#time : DateAndTime [ '2018-01-14T19:02:36.632893-05:00' ],		#trigger : OmReference [ '1792' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTypeCheckScanner,				#isMetaSide : false			},			#name : #'stream:',			#protocol : #accessing,			#sourceCode : 'stream: aStream\r\tstream := aStream',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-TypeCheck		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1923' ],		#self : OmReference [ '1924' ],		#time : DateAndTime [ '2018-01-14T19:02:36.63445-05:00' ],		#trigger : OmReference [ '1792' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTypeCheckScanner,				#isMetaSide : false			},			#name : #token,			#protocol : #accessing,			#sourceCode : 'token\r\t^ token ifNil: [ token := WriteStream on: String new ]',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-TypeCheck		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1924' ],		#self : OmReference [ '1925' ],		#time : DateAndTime [ '2018-01-14T19:02:36.637384-05:00' ],		#trigger : OmReference [ '1792' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTypeCheckScanner,				#isMetaSide : false			},			#name : #tokenType,			#protocol : #accessing,			#sourceCode : 'tokenType\r\t| s result |\r\ts := self token contents.\r\tresult := true.\r\t[ result ]\r\t\twhileTrue: [ s = \'Char\'\r\t\t\t\tifTrue: [ ^ type := AltObjectType on: Character ].\r\t\t\ts = \'Int\'\r\t\t\t\tifTrue: [ ^ type := AltObjectType on: Integer ].\r\t\t\ts = \'Block\'\r\t\t\t\tifTrue: [ ^ type := AltObjectType on: BlockClosure ].\r\t\t\ts = \'Any\'\r\t\t\t\tifTrue: [ ^ type := AltAnyType new ].\r\t\t\t(Smalltalk at: s asSymbol ifAbsent: [  ])\r\t\t\t\tifNotNil: [ :aClass | ^ type := AltObjectType on: aClass ].\r\t\t\tresult := s last isDigit.\r\t\t\ts := s allButLast ].\r\t^ nil',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-TypeCheck		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#time : DateAndTime [ '2018-01-14T19:02:36.903563-05:00' ],		#prior : OmReference [ '1925' ],		#self : OmReference [ '1926' ]	},	#content : EpMonticelloVersionsLoad {		#versionNames : OrderedCollection [			'Alt-Inspector-cypress.1'		]	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1926' ],		#self : OmReference [ '1927' ],		#time : DateAndTime [ '2018-01-14T19:02:37.249861-05:00' ],		#trigger : @3	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltTreeItemModel',				#traitCompositionSource : '{}',				#definitionSource : 'AltTreeItemModel subclass: #AltEyeTreeItemModel\r\tinstanceVariableNames: \'model copy inspector\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltEyeTreeItemModel,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltEyeTreeItemModel,						#isMetaSide : false					},					#name : #model,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltEyeTreeItemModel,						#isMetaSide : false					},					#name : #copy,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltEyeTreeItemModel,						#isMetaSide : false					},					#name : #inspector,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltEyeTreeItemModel class\r\tinstanceVariableNames: \'\''				},				#name : #'AltEyeTreeItemModel class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltEyeTreeItemModel,					#isMetaSide : false				},				#parent : @7,				#content : 'Connect to the eye tree framework (could be another, but for now is good enough)',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Connect to the eye tree framework (could be another, but for now is good enough)',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1927' ],		#self : OmReference [ '1928' ],		#time : DateAndTime [ '2018-01-14T19:02:37.251439-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpCategoryAddition {		#classCategoryName : #Alt-Inspector,		#affectedPackageName : #Alt-Inspector	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1928' ],		#self : OmReference [ '1929' ],		#time : DateAndTime [ '2018-01-14T19:02:37.39196-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltTreeItemModel',				#traitCompositionSource : '{}',				#definitionSource : 'AltTreeItemModel subclass: #AltEyeTreeItemModel\r\tinstanceVariableNames: \'model copy inspector\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Inspector\''			},			#name : #AltEyeTreeItemModel,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltEyeTreeItemModel,						#isMetaSide : false					},					#name : #model,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltEyeTreeItemModel,						#isMetaSide : false					},					#name : #copy,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltEyeTreeItemModel,						#isMetaSide : false					},					#name : #inspector,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltEyeTreeItemModel class\r\tinstanceVariableNames: \'\''				},				#name : #'AltEyeTreeItemModel class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltEyeTreeItemModel,					#isMetaSide : false				},				#parent : @8,				#content : 'Connect to the eye tree framework (could be another, but for now is good enough)',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Inspector,			#package : #Alt-Inspector,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1929' ],		#self : OmReference [ '1930' ],		#time : DateAndTime [ '2018-01-14T19:02:37.458014-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltTreeItemModel',				#traitCompositionSource : '{}',				#definitionSource : 'AltTreeItemModel subclass: #AltTreeGTILabelModel\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltTreeGTILabelModel,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltTreeGTILabelModel class\r\tinstanceVariableNames: \'\''				},				#name : #'AltTreeGTILabelModel class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltTreeGTILabelModel,					#isMetaSide : false				},				#parent : @8,				#content : 'I represent a presentation from GTInspector with a label and I display that label.\r\rI have one child: the presentation itself',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I represent a presentation from GTInspector with a label and I display that label.\r\rI have one child: the presentation itself',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1930' ],		#self : OmReference [ '1931' ],		#time : DateAndTime [ '2018-01-14T19:02:37.462554-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltTreeItemModel',				#traitCompositionSource : '{}',				#definitionSource : 'AltTreeItemModel subclass: #AltTreeGTILabelModel\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Inspector\''			},			#name : #AltTreeGTILabelModel,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltTreeGTILabelModel class\r\tinstanceVariableNames: \'\''				},				#name : #'AltTreeGTILabelModel class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltTreeGTILabelModel,					#isMetaSide : false				},				#parent : @8,				#content : 'I represent a presentation from GTInspector with a label and I display that label.\r\rI have one child: the presentation itself',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Inspector,			#package : #Alt-Inspector,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1931' ],		#self : OmReference [ '1932' ],		#time : DateAndTime [ '2018-01-14T19:02:37.487638-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltTreeItemModel',				#traitCompositionSource : '{}',				#definitionSource : 'AltTreeItemModel subclass: #AltTreeGTIPresentationModel\r\tinstanceVariableNames: \'presentation\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltTreeGTIPresentationModel,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltTreeGTIPresentationModel,						#isMetaSide : false					},					#name : #presentation,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltTreeGTIPresentationModel class\r\tinstanceVariableNames: \'\''				},				#name : #'AltTreeGTIPresentationModel class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltTreeGTIPresentationModel,					#isMetaSide : false				},				#parent : @8,				#content : 'I link to a specific presentation of the GTInspector framework. My parent is the label. I have no contents.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I link to a specific presentation of the GTInspector framework. My parent is the label. I have no contents.',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1932' ],		#self : OmReference [ '1933' ],		#time : DateAndTime [ '2018-01-14T19:02:37.492465-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltTreeItemModel',				#traitCompositionSource : '{}',				#definitionSource : 'AltTreeItemModel subclass: #AltTreeGTIPresentationModel\r\tinstanceVariableNames: \'presentation\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Inspector\''			},			#name : #AltTreeGTIPresentationModel,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltTreeGTIPresentationModel,						#isMetaSide : false					},					#name : #presentation,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltTreeGTIPresentationModel class\r\tinstanceVariableNames: \'\''				},				#name : #'AltTreeGTIPresentationModel class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltTreeGTIPresentationModel,					#isMetaSide : false				},				#parent : @8,				#content : 'I link to a specific presentation of the GTInspector framework. My parent is the label. I have no contents.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Inspector,			#package : #Alt-Inspector,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1933' ],		#self : OmReference [ '1934' ],		#time : DateAndTime [ '2018-01-14T19:02:37.508194-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #AltInspectorTest\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltInspectorTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltInspectorTest class\r\tinstanceVariableNames: \'\''				},				#name : #'AltInspectorTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltInspectorTest,					#isMetaSide : false				},				#parent : @8,				#content : 'I test the framework just by opening inspectors and checking there are no errors doing so.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I test the framework just by opening inspectors and checking there are no errors doing so.',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1934' ],		#self : OmReference [ '1935' ],		#time : DateAndTime [ '2018-01-14T19:02:37.510203-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpCategoryAddition {		#classCategoryName : #Alt-Inspector-Test,		#affectedPackageName : #Alt-Inspector	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1935' ],		#self : OmReference [ '1936' ],		#time : DateAndTime [ '2018-01-14T19:02:37.513468-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #AltInspectorTest\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Inspector-Test\''			},			#name : #AltInspectorTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltInspectorTest class\r\tinstanceVariableNames: \'\''				},				#name : #'AltInspectorTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltInspectorTest,					#isMetaSide : false				},				#parent : @8,				#content : 'I test the framework just by opening inspectors and checking there are no errors doing so.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Inspector-Test,			#package : #Alt-Inspector,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1936' ],		#self : OmReference [ '1937' ],		#time : DateAndTime [ '2018-01-14T19:02:37.527114-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltTreeItemMorph',				#traitCompositionSource : '{}',				#definitionSource : 'AltTreeItemMorph subclass: #AltTreeGTIPresentationMorph\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltTreeGTIPresentationMorph,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltTreeGTIPresentationMorph class\r\tinstanceVariableNames: \'\''				},				#name : #'AltTreeGTIPresentationMorph class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltTreeGTIPresentationMorph,					#isMetaSide : false				},				#parent : @8,				#content : 'A different top-level item to ensure a correct creation of the GT presentations.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'A different top-level item to ensure a correct creation of the GT presentations.',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1937' ],		#self : OmReference [ '1938' ],		#time : DateAndTime [ '2018-01-14T19:02:37.530513-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltTreeItemMorph',				#traitCompositionSource : '{}',				#definitionSource : 'AltTreeItemMorph subclass: #AltTreeGTIPresentationMorph\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Inspector\''			},			#name : #AltTreeGTIPresentationMorph,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltTreeGTIPresentationMorph class\r\tinstanceVariableNames: \'\''				},				#name : #'AltTreeGTIPresentationMorph class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltTreeGTIPresentationMorph,					#isMetaSide : false				},				#parent : @8,				#content : 'A different top-level item to ensure a correct creation of the GT presentations.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Inspector,			#package : #Alt-Inspector,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1938' ],		#self : OmReference [ '1939' ],		#time : DateAndTime [ '2018-01-14T19:02:37.543707-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltInspectorBrowseFull\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltInspectorBrowseFull,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltInspectorBrowseFull class\r\tinstanceVariableNames: \'\''				},				#name : #'AltInspectorBrowseFull class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltInspectorBrowseFull,					#isMetaSide : false				},				#parent : @8,				#content : 'Browse full command. Also browse class :)',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Browse full command. Also browse class :)',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1939' ],		#self : OmReference [ '1940' ],		#time : DateAndTime [ '2018-01-14T19:02:37.545572-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpCategoryAddition {		#classCategoryName : #Alt-Inspector-Commands,		#affectedPackageName : #Alt-Inspector	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1940' ],		#self : OmReference [ '1941' ],		#time : DateAndTime [ '2018-01-14T19:02:37.550043-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltInspectorBrowseFull\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Inspector-Commands\''			},			#name : #AltInspectorBrowseFull,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltInspectorBrowseFull class\r\tinstanceVariableNames: \'\''				},				#name : #'AltInspectorBrowseFull class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltInspectorBrowseFull,					#isMetaSide : false				},				#parent : @8,				#content : 'Browse full command. Also browse class :)',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Inspector-Commands,			#package : #Alt-Inspector,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1941' ],		#self : OmReference [ '1942' ],		#time : DateAndTime [ '2018-01-14T19:02:37.574491-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltInspectorBrowseHierarchy\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltInspectorBrowseHierarchy,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltInspectorBrowseHierarchy class\r\tinstanceVariableNames: \'\''				},				#name : #'AltInspectorBrowseHierarchy class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltInspectorBrowseHierarchy,					#isMetaSide : false				},				#parent : @8,				#content : 'Hierarchical browse of the selected object.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Hierarchical browse of the selected object.',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1942' ],		#self : OmReference [ '1943' ],		#time : DateAndTime [ '2018-01-14T19:02:37.578293-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltInspectorBrowseHierarchy\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Inspector-Commands\''			},			#name : #AltInspectorBrowseHierarchy,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltInspectorBrowseHierarchy class\r\tinstanceVariableNames: \'\''				},				#name : #'AltInspectorBrowseHierarchy class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltInspectorBrowseHierarchy,					#isMetaSide : false				},				#parent : @8,				#content : 'Hierarchical browse of the selected object.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Inspector-Commands,			#package : #Alt-Inspector,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1943' ],		#self : OmReference [ '1944' ],		#time : DateAndTime [ '2018-01-14T19:02:37.59182-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltInspectorExplorePointers\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltInspectorExplorePointers,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltInspectorExplorePointers class\r\tinstanceVariableNames: \'\''				},				#name : #'AltInspectorExplorePointers class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltInspectorExplorePointers,					#isMetaSide : false				},				#parent : @8,				#content : 'Explore the pointers on the object',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Explore the pointers on the object',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1944' ],		#self : OmReference [ '1945' ],		#time : DateAndTime [ '2018-01-14T19:02:37.595667-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltInspectorExplorePointers\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Inspector-Commands\''			},			#name : #AltInspectorExplorePointers,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltInspectorExplorePointers class\r\tinstanceVariableNames: \'\''				},				#name : #'AltInspectorExplorePointers class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltInspectorExplorePointers,					#isMetaSide : false				},				#parent : @8,				#content : 'Explore the pointers on the object',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Inspector-Commands,			#package : #Alt-Inspector,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1945' ],		#self : OmReference [ '1946' ],		#time : DateAndTime [ '2018-01-14T19:02:37.60955-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltInspectorInspect\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltInspectorInspect,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltInspectorInspect class\r\tinstanceVariableNames: \'\''				},				#name : #'AltInspectorInspect class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltInspectorInspect,					#isMetaSide : false				},				#parent : @8,				#content : 'ctrl+i or inspect it command.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'ctrl+i or inspect it command.',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1946' ],		#self : OmReference [ '1947' ],		#time : DateAndTime [ '2018-01-14T19:02:37.614506-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltInspectorInspect\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Inspector-Commands\''			},			#name : #AltInspectorInspect,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltInspectorInspect class\r\tinstanceVariableNames: \'\''				},				#name : #'AltInspectorInspect class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltInspectorInspect,					#isMetaSide : false				},				#parent : @8,				#content : 'ctrl+i or inspect it command.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Inspector-Commands,			#package : #Alt-Inspector,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1947' ],		#self : OmReference [ '1948' ],		#time : DateAndTime [ '2018-01-14T19:02:37.641754-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltInspectorPrintIt\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltInspectorPrintIt,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltInspectorPrintIt class\r\tinstanceVariableNames: \'\''				},				#name : #'AltInspectorPrintIt class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltInspectorPrintIt,					#isMetaSide : false				},				#parent : @8,				#content : 'I do a print it in the inspector.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I do a print it in the inspector.',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1948' ],		#self : OmReference [ '1949' ],		#time : DateAndTime [ '2018-01-14T19:02:37.64565-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltInspectorPrintIt\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Inspector-Commands\''			},			#name : #AltInspectorPrintIt,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltInspectorPrintIt class\r\tinstanceVariableNames: \'\''				},				#name : #'AltInspectorPrintIt class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltInspectorPrintIt,					#isMetaSide : false				},				#parent : @8,				#content : 'I do a print it in the inspector.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Inspector-Commands,			#package : #Alt-Inspector,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1949' ],		#self : OmReference [ '1950' ],		#time : DateAndTime [ '2018-01-14T19:02:37.658997-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltInspectorRefToIVar\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltInspectorRefToIVar,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltInspectorRefToIVar class\r\tinstanceVariableNames: \'\''				},				#name : #'AltInspectorRefToIVar class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltInspectorRefToIVar,					#isMetaSide : false				},				#parent : @8,				#content : 'References to instance var command',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'References to instance var command',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1950' ],		#self : OmReference [ '1951' ],		#time : DateAndTime [ '2018-01-14T19:02:37.662723-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltInspectorRefToIVar\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Inspector-Commands\''			},			#name : #AltInspectorRefToIVar,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltInspectorRefToIVar class\r\tinstanceVariableNames: \'\''				},				#name : #'AltInspectorRefToIVar class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltInspectorRefToIVar,					#isMetaSide : false				},				#parent : @8,				#content : 'References to instance var command',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Inspector-Commands,			#package : #Alt-Inspector,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1951' ],		#self : OmReference [ '1952' ],		#time : DateAndTime [ '2018-01-14T19:02:37.676366-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltInspectorStoreToIVar\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltInspectorStoreToIVar,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltInspectorStoreToIVar class\r\tinstanceVariableNames: \'\''				},				#name : #'AltInspectorStoreToIVar class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltInspectorStoreToIVar,					#isMetaSide : false				},				#parent : @8,				#content : 'List all methods storing in this iVar',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'List all methods storing in this iVar',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1952' ],		#self : OmReference [ '1953' ],		#time : DateAndTime [ '2018-01-14T19:02:37.681123-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltInspectorStoreToIVar\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Inspector-Commands\''			},			#name : #AltInspectorStoreToIVar,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltInspectorStoreToIVar class\r\tinstanceVariableNames: \'\''				},				#name : #'AltInspectorStoreToIVar class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltInspectorStoreToIVar,					#isMetaSide : false				},				#parent : @8,				#content : 'List all methods storing in this iVar',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Inspector-Commands,			#package : #Alt-Inspector,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1953' ],		#self : OmReference [ '1954' ],		#time : DateAndTime [ '2018-01-14T19:02:37.703471-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #AltAbstractEyeElement\r\tinstanceVariableNames: \'host\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltAbstractEyeElement,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltAbstractEyeElement,						#isMetaSide : false					},					#name : #host,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltAbstractEyeElement class\r\tinstanceVariableNames: \'\''				},				#name : #'AltAbstractEyeElement class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltAbstractEyeElement,					#isMetaSide : false				},				#parent : @8,				#content : 'I represent an abstract inspection element. I model the relation between an instance variable and an object (host).',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I represent an abstract inspection element. I model the relation between an instance variable and an object (host).',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1954' ],		#self : OmReference [ '1955' ],		#time : DateAndTime [ '2018-01-14T19:02:37.706692-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpCategoryAddition {		#classCategoryName : #Alt-Inspector-Element,		#affectedPackageName : #Alt-Inspector	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1955' ],		#self : OmReference [ '1956' ],		#time : DateAndTime [ '2018-01-14T19:02:37.710702-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #AltAbstractEyeElement\r\tinstanceVariableNames: \'host\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Inspector-Element\''			},			#name : #AltAbstractEyeElement,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltAbstractEyeElement,						#isMetaSide : false					},					#name : #host,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltAbstractEyeElement class\r\tinstanceVariableNames: \'\''				},				#name : #'AltAbstractEyeElement class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltAbstractEyeElement,					#isMetaSide : false				},				#parent : @8,				#content : 'I represent an abstract inspection element. I model the relation between an instance variable and an object (host).',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Inspector-Element,			#package : #Alt-Inspector,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1956' ],		#self : OmReference [ '1957' ],		#time : DateAndTime [ '2018-01-14T19:02:37.727072-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltAbstractEyeElement',				#traitCompositionSource : '{}',				#definitionSource : 'AltAbstractEyeElement subclass: #AltAnnouncerEyeElement\r\tinstanceVariableNames: \'announcements\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltAnnouncerEyeElement,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltAnnouncerEyeElement,						#isMetaSide : false					},					#name : #announcements,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltAnnouncerEyeElement class\r\tinstanceVariableNames: \'\''				},				#name : #'AltAnnouncerEyeElement class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltAnnouncerEyeElement,					#isMetaSide : false				},				#parent : @8,				#content : 'I represent all announcements from a announcer during the period where I am inspected.\r\rUpon termination of the inspection, I should be released.\r\rBeware of the release and termination requirements: the announcer subscription must be released (in #release), and should not automatically create the subscription when the instance is created, but only when the list of announcers is needed.\r\rWhy? Because, under certain circumstances (AltTreeItemModel>>#hasContents), we create eye elements just to count the number of possible items, and we never link them to the display (and let them be garbage collected afterwards). If creating the element has side-effects such as subscribing to an announcer, this creates a memory leak.\r\rOur solution here:\r- Only create the subscription to the announcer when the announcements instance variable is requested, and this occurs only when the element is being linked to a display item.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I represent all announcements from a announcer during the period where I am inspected.\r\rUpon termination of the inspection, I should be released.\r\rBeware of the release and termination requirements: the announcer subscription must be released (in #release), and should not automatically create the subscription when the instance is created, but only when the list of announcers is needed.\r\rWhy? Because, under certain circumstances (AltTreeItemModel>>#hasContents), we create eye elements just to count the number of possible items, and we never link them to the display (and let them be garbage collected afterwards). If creating the element has side-effects such as subscribing to an announcer, this creates a memory leak.\r\rOur solution here:\r- Only create the subscription to the announcer when the announcements instance variable is requested, and this occurs only when the element is being linked to a display item.',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1957' ],		#self : OmReference [ '1958' ],		#time : DateAndTime [ '2018-01-14T19:02:37.731914-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltAbstractEyeElement',				#traitCompositionSource : '{}',				#definitionSource : 'AltAbstractEyeElement subclass: #AltAnnouncerEyeElement\r\tinstanceVariableNames: \'announcements\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Inspector-Element\''			},			#name : #AltAnnouncerEyeElement,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltAnnouncerEyeElement,						#isMetaSide : false					},					#name : #announcements,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltAnnouncerEyeElement class\r\tinstanceVariableNames: \'\''				},				#name : #'AltAnnouncerEyeElement class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltAnnouncerEyeElement,					#isMetaSide : false				},				#parent : @8,				#content : 'I represent all announcements from a announcer during the period where I am inspected.\r\rUpon termination of the inspection, I should be released.\r\rBeware of the release and termination requirements: the announcer subscription must be released (in #release), and should not automatically create the subscription when the instance is created, but only when the list of announcers is needed.\r\rWhy? Because, under certain circumstances (AltTreeItemModel>>#hasContents), we create eye elements just to count the number of possible items, and we never link them to the display (and let them be garbage collected afterwards). If creating the element has side-effects such as subscribing to an announcer, this creates a memory leak.\r\rOur solution here:\r- Only create the subscription to the announcer when the announcements instance variable is requested, and this occurs only when the element is being linked to a display item.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Inspector-Element,			#package : #Alt-Inspector,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1958' ],		#self : OmReference [ '1959' ],		#time : DateAndTime [ '2018-01-14T19:02:37.746714-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltAbstractEyeElement',				#traitCompositionSource : '{}',				#definitionSource : 'AltAbstractEyeElement subclass: #AltBasicIndexedEyeElement\r\tinstanceVariableNames: \'index\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltBasicIndexedEyeElement,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltBasicIndexedEyeElement,						#isMetaSide : false					},					#name : #index,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltBasicIndexedEyeElement class\r\tinstanceVariableNames: \'\''				},				#name : #'AltBasicIndexedEyeElement class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltBasicIndexedEyeElement,					#isMetaSide : false				},				#parent : @8,				#content : 'I access an host indexed element',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I access an host indexed element',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1959' ],		#self : OmReference [ '1960' ],		#time : DateAndTime [ '2018-01-14T19:02:37.752183-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltAbstractEyeElement',				#traitCompositionSource : '{}',				#definitionSource : 'AltAbstractEyeElement subclass: #AltBasicIndexedEyeElement\r\tinstanceVariableNames: \'index\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Inspector-Element\''			},			#name : #AltBasicIndexedEyeElement,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltBasicIndexedEyeElement,						#isMetaSide : false					},					#name : #index,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltBasicIndexedEyeElement class\r\tinstanceVariableNames: \'\''				},				#name : #'AltBasicIndexedEyeElement class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltBasicIndexedEyeElement,					#isMetaSide : false				},				#parent : @8,				#content : 'I access an host indexed element',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Inspector-Element,			#package : #Alt-Inspector,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1960' ],		#self : OmReference [ '1961' ],		#time : DateAndTime [ '2018-01-14T19:02:37.796556-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltBasicIndexedEyeElement',				#traitCompositionSource : '{}',				#definitionSource : 'AltBasicIndexedEyeElement subclass: #AltIndexedEyeElement\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltIndexedEyeElement,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltIndexedEyeElement class\r\tinstanceVariableNames: \'\''				},				#name : #'AltIndexedEyeElement class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltIndexedEyeElement,					#isMetaSide : false				},				#parent : @8,				#content : 'I represent an at: access to a host',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I represent an at: access to a host',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1961' ],		#self : OmReference [ '1962' ],		#time : DateAndTime [ '2018-01-14T19:02:37.804389-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltBasicIndexedEyeElement',				#traitCompositionSource : '{}',				#definitionSource : 'AltBasicIndexedEyeElement subclass: #AltIndexedEyeElement\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Inspector-Element\''			},			#name : #AltIndexedEyeElement,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltIndexedEyeElement class\r\tinstanceVariableNames: \'\''				},				#name : #'AltIndexedEyeElement class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltIndexedEyeElement,					#isMetaSide : false				},				#parent : @8,				#content : 'I represent an at: access to a host',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Inspector-Element,			#package : #Alt-Inspector,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1962' ],		#self : OmReference [ '1963' ],		#time : DateAndTime [ '2018-01-14T19:02:37.826331-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltIndexedEyeElement',				#traitCompositionSource : '{}',				#definitionSource : 'AltIndexedEyeElement subclass: #AltBagEyeElement\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltBagEyeElement,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltBagEyeElement class\r\tinstanceVariableNames: \'\''				},				#name : #'AltBagEyeElement class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltBagEyeElement,					#isMetaSide : false				},				#parent : @8,				#content : 'I represent an element of a bag (my host)',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I represent an element of a bag (my host)',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1963' ],		#self : OmReference [ '1964' ],		#time : DateAndTime [ '2018-01-14T19:02:37.832501-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltIndexedEyeElement',				#traitCompositionSource : '{}',				#definitionSource : 'AltIndexedEyeElement subclass: #AltBagEyeElement\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Inspector-Element\''			},			#name : #AltBagEyeElement,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltBagEyeElement class\r\tinstanceVariableNames: \'\''				},				#name : #'AltBagEyeElement class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltBagEyeElement,					#isMetaSide : false				},				#parent : @8,				#content : 'I represent an element of a bag (my host)',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Inspector-Element,			#package : #Alt-Inspector,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1964' ],		#self : OmReference [ '1965' ],		#time : DateAndTime [ '2018-01-14T19:02:37.877421-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltIndexedEyeElement',				#traitCompositionSource : '{}',				#definitionSource : 'AltIndexedEyeElement subclass: #AltSetEyeElement\r\tinstanceVariableNames: \'externalIndex\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltSetEyeElement,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltSetEyeElement,						#isMetaSide : false					},					#name : #externalIndex,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltSetEyeElement class\r\tinstanceVariableNames: \'\''				},				#name : #'AltSetEyeElement class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltSetEyeElement,					#isMetaSide : false				},				#parent : @8,				#content : 'I represent one element of a set (my host)',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I represent one element of a set (my host)',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1965' ],		#self : OmReference [ '1966' ],		#time : DateAndTime [ '2018-01-14T19:02:37.882404-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltIndexedEyeElement',				#traitCompositionSource : '{}',				#definitionSource : 'AltIndexedEyeElement subclass: #AltSetEyeElement\r\tinstanceVariableNames: \'externalIndex\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Inspector-Element\''			},			#name : #AltSetEyeElement,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltSetEyeElement,						#isMetaSide : false					},					#name : #externalIndex,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltSetEyeElement class\r\tinstanceVariableNames: \'\''				},				#name : #'AltSetEyeElement class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltSetEyeElement,					#isMetaSide : false				},				#parent : @8,				#content : 'I represent one element of a set (my host)',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Inspector-Element,			#package : #Alt-Inspector,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1966' ],		#self : OmReference [ '1967' ],		#time : DateAndTime [ '2018-01-14T19:02:37.899555-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltAbstractEyeElement',				#traitCompositionSource : '{}',				#definitionSource : 'AltAbstractEyeElement subclass: #AltClassEyeElement\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltClassEyeElement,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltClassEyeElement class\r\tinstanceVariableNames: \'\''				},				#name : #'AltClassEyeElement class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltClassEyeElement,					#isMetaSide : false				},				#parent : @8,				#content : 'I am an element for a class of an inspected element. I\'m not visible in a tree',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I am an element for a class of an inspected element. I\'m not visible in a tree',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1967' ],		#self : OmReference [ '1968' ],		#time : DateAndTime [ '2018-01-14T19:02:37.904313-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltAbstractEyeElement',				#traitCompositionSource : '{}',				#definitionSource : 'AltAbstractEyeElement subclass: #AltClassEyeElement\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Inspector-Element\''			},			#name : #AltClassEyeElement,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltClassEyeElement class\r\tinstanceVariableNames: \'\''				},				#name : #'AltClassEyeElement class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltClassEyeElement,					#isMetaSide : false				},				#parent : @8,				#content : 'I am an element for a class of an inspected element. I\'m not visible in a tree',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Inspector-Element,			#package : #Alt-Inspector,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1968' ],		#self : OmReference [ '1969' ],		#time : DateAndTime [ '2018-01-14T19:02:37.943107-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltAbstractEyeElement',				#traitCompositionSource : '{}',				#definitionSource : 'AltAbstractEyeElement subclass: #AltContextEyeElement\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltContextEyeElement,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltContextEyeElement class\r\tinstanceVariableNames: \'\''				},				#name : #'AltContextEyeElement class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltContextEyeElement,					#isMetaSide : false				},				#parent : @8,				#content : 'I represent thisContext',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I represent thisContext',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1969' ],		#self : OmReference [ '1970' ],		#time : DateAndTime [ '2018-01-14T19:02:37.947417-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltAbstractEyeElement',				#traitCompositionSource : '{}',				#definitionSource : 'AltAbstractEyeElement subclass: #AltContextEyeElement\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Inspector-Element\''			},			#name : #AltContextEyeElement,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltContextEyeElement class\r\tinstanceVariableNames: \'\''				},				#name : #'AltContextEyeElement class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltContextEyeElement,					#isMetaSide : false				},				#parent : @8,				#content : 'I represent thisContext',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Inspector-Element,			#package : #Alt-Inspector,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1970' ],		#self : OmReference [ '1971' ],		#time : DateAndTime [ '2018-01-14T19:02:37.962961-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltAbstractEyeElement',				#traitCompositionSource : '{}',				#definitionSource : 'AltAbstractEyeElement subclass: #AltContextTempEyeElement\r\tinstanceVariableNames: \'tempName tempIndex\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltContextTempEyeElement,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltContextTempEyeElement,						#isMetaSide : false					},					#name : #tempName,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltContextTempEyeElement,						#isMetaSide : false					},					#name : #tempIndex,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltContextTempEyeElement class\r\tinstanceVariableNames: \'\''				},				#name : #'AltContextTempEyeElement class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltContextTempEyeElement,					#isMetaSide : false				},				#parent : @8,				#content : 'I represent a temporary variable in a context',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I represent a temporary variable in a context',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1971' ],		#self : OmReference [ '1972' ],		#time : DateAndTime [ '2018-01-14T19:02:37.968549-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltAbstractEyeElement',				#traitCompositionSource : '{}',				#definitionSource : 'AltAbstractEyeElement subclass: #AltContextTempEyeElement\r\tinstanceVariableNames: \'tempName tempIndex\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Inspector-Element\''			},			#name : #AltContextTempEyeElement,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltContextTempEyeElement,						#isMetaSide : false					},					#name : #tempName,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltContextTempEyeElement,						#isMetaSide : false					},					#name : #tempIndex,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltContextTempEyeElement class\r\tinstanceVariableNames: \'\''				},				#name : #'AltContextTempEyeElement class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltContextTempEyeElement,					#isMetaSide : false				},				#parent : @8,				#content : 'I represent a temporary variable in a context',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Inspector-Element,			#package : #Alt-Inspector,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1972' ],		#self : OmReference [ '1973' ],		#time : DateAndTime [ '2018-01-14T19:02:38.009605-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltAbstractEyeElement',				#traitCompositionSource : '{}',				#definitionSource : 'AltAbstractEyeElement subclass: #AltDynamicEyeElement\r\tinstanceVariableNames: \'description value label save\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltDynamicEyeElement,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltDynamicEyeElement,						#isMetaSide : false					},					#name : #description,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltDynamicEyeElement,						#isMetaSide : false					},					#name : #value,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltDynamicEyeElement,						#isMetaSide : false					},					#name : #label,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltDynamicEyeElement,						#isMetaSide : false					},					#name : #save,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltDynamicEyeElement class\r\tinstanceVariableNames: \'\''				},				#name : #'AltDynamicEyeElement class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltDynamicEyeElement,					#isMetaSide : false				},				#parent : @8,				#content : 'I represent a very flexible element (with blocks)',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I represent a very flexible element (with blocks)',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1973' ],		#self : OmReference [ '1974' ],		#time : DateAndTime [ '2018-01-14T19:02:38.014497-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltAbstractEyeElement',				#traitCompositionSource : '{}',				#definitionSource : 'AltAbstractEyeElement subclass: #AltDynamicEyeElement\r\tinstanceVariableNames: \'description value label save\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Inspector-Element\''			},			#name : #AltDynamicEyeElement,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltDynamicEyeElement,						#isMetaSide : false					},					#name : #description,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltDynamicEyeElement,						#isMetaSide : false					},					#name : #value,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltDynamicEyeElement,						#isMetaSide : false					},					#name : #label,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltDynamicEyeElement,						#isMetaSide : false					},					#name : #save,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltDynamicEyeElement class\r\tinstanceVariableNames: \'\''				},				#name : #'AltDynamicEyeElement class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltDynamicEyeElement,					#isMetaSide : false				},				#parent : @8,				#content : 'I represent a very flexible element (with blocks)',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Inspector-Element,			#package : #Alt-Inspector,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1974' ],		#self : OmReference [ '1975' ],		#time : DateAndTime [ '2018-01-14T19:02:38.029638-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltDynamicEyeElement',				#traitCompositionSource : '{}',				#definitionSource : 'AltDynamicEyeElement subclass: #AltMemoizedEyeElement\r\tinstanceVariableNames: \'cache\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltMemoizedEyeElement,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltMemoizedEyeElement,						#isMetaSide : false					},					#name : #cache,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltMemoizedEyeElement class\r\tinstanceVariableNames: \'\''				},				#name : #'AltMemoizedEyeElement class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltMemoizedEyeElement,					#isMetaSide : false				},				#parent : @8,				#content : 'I am a dynamic eye element whose value is cached...',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I am a dynamic eye element whose value is cached...',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1975' ],		#self : OmReference [ '1976' ],		#time : DateAndTime [ '2018-01-14T19:02:38.034167-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltDynamicEyeElement',				#traitCompositionSource : '{}',				#definitionSource : 'AltDynamicEyeElement subclass: #AltMemoizedEyeElement\r\tinstanceVariableNames: \'cache\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Inspector-Element\''			},			#name : #AltMemoizedEyeElement,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltMemoizedEyeElement,						#isMetaSide : false					},					#name : #cache,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltMemoizedEyeElement class\r\tinstanceVariableNames: \'\''				},				#name : #'AltMemoizedEyeElement class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltMemoizedEyeElement,					#isMetaSide : false				},				#parent : @8,				#content : 'I am a dynamic eye element whose value is cached...',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Inspector-Element,			#package : #Alt-Inspector,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1976' ],		#self : OmReference [ '1977' ],		#time : DateAndTime [ '2018-01-14T19:02:38.05004-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltAbstractEyeElement',				#traitCompositionSource : '{}',				#definitionSource : 'AltAbstractEyeElement subclass: #AltInstanceVariableEyeElement\r\tinstanceVariableNames: \'instVarName\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltInstanceVariableEyeElement,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltInstanceVariableEyeElement,						#isMetaSide : false					},					#name : #instVarName,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltInstanceVariableEyeElement class\r\tinstanceVariableNames: \'\''				},				#name : #'AltInstanceVariableEyeElement class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltInstanceVariableEyeElement,					#isMetaSide : false				},				#parent : @8,				#content : 'I represent an instance variable of my host',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I represent an instance variable of my host',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1977' ],		#self : OmReference [ '1978' ],		#time : DateAndTime [ '2018-01-14T19:02:38.054873-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltAbstractEyeElement',				#traitCompositionSource : '{}',				#definitionSource : 'AltAbstractEyeElement subclass: #AltInstanceVariableEyeElement\r\tinstanceVariableNames: \'instVarName\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Inspector-Element\''			},			#name : #AltInstanceVariableEyeElement,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltInstanceVariableEyeElement,						#isMetaSide : false					},					#name : #instVarName,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltInstanceVariableEyeElement class\r\tinstanceVariableNames: \'\''				},				#name : #'AltInstanceVariableEyeElement class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltInstanceVariableEyeElement,					#isMetaSide : false				},				#parent : @8,				#content : 'I represent an instance variable of my host',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Inspector-Element,			#package : #Alt-Inspector,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1978' ],		#self : OmReference [ '1979' ],		#time : DateAndTime [ '2018-01-14T19:02:38.089404-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltAbstractEyeElement',				#traitCompositionSource : '{}',				#definitionSource : 'AltAbstractEyeElement subclass: #AltPointerEyeElement\r\tinstanceVariableNames: \'value\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltPointerEyeElement,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltPointerEyeElement,						#isMetaSide : false					},					#name : #value,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltPointerEyeElement class\r\tinstanceVariableNames: \'\''				},				#name : #'AltPointerEyeElement class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltPointerEyeElement,					#isMetaSide : false				},				#parent : @8,				#content : 'I hold a reference to a pointer, so that pointer referers stop at me',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I hold a reference to a pointer, so that pointer referers stop at me',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1979' ],		#self : OmReference [ '1980' ],		#time : DateAndTime [ '2018-01-14T19:02:38.095626-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltAbstractEyeElement',				#traitCompositionSource : '{}',				#definitionSource : 'AltAbstractEyeElement subclass: #AltPointerEyeElement\r\tinstanceVariableNames: \'value\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Inspector-Element\''			},			#name : #AltPointerEyeElement,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltPointerEyeElement,						#isMetaSide : false					},					#name : #value,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltPointerEyeElement class\r\tinstanceVariableNames: \'\''				},				#name : #'AltPointerEyeElement class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltPointerEyeElement,					#isMetaSide : false				},				#parent : @8,				#content : 'I hold a reference to a pointer, so that pointer referers stop at me',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Inspector-Element,			#package : #Alt-Inspector,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1980' ],		#self : OmReference [ '1981' ],		#time : DateAndTime [ '2018-01-14T19:02:38.110574-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltAbstractEyeElement',				#traitCompositionSource : '{}',				#definitionSource : 'AltAbstractEyeElement subclass: #AltRootEyeElement\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltRootEyeElement,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltRootEyeElement class\r\tinstanceVariableNames: \'\''				},				#name : #'AltRootEyeElement class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltRootEyeElement,					#isMetaSide : false				},				#parent : @8,				#content : 'I represent the root of the inspector',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I represent the root of the inspector',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1981' ],		#self : OmReference [ '1982' ],		#time : DateAndTime [ '2018-01-14T19:02:38.114946-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltAbstractEyeElement',				#traitCompositionSource : '{}',				#definitionSource : 'AltAbstractEyeElement subclass: #AltRootEyeElement\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Inspector-Element\''			},			#name : #AltRootEyeElement,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltRootEyeElement class\r\tinstanceVariableNames: \'\''				},				#name : #'AltRootEyeElement class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltRootEyeElement,					#isMetaSide : false				},				#parent : @8,				#content : 'I represent the root of the inspector',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Inspector-Element,			#package : #Alt-Inspector,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1982' ],		#self : OmReference [ '1983' ],		#time : DateAndTime [ '2018-01-14T19:02:38.130835-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltAbstractEyeElement',				#traitCompositionSource : '{}',				#definitionSource : 'AltAbstractEyeElement subclass: #AltSelfEyeElement\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltSelfEyeElement,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltSelfEyeElement class\r\tinstanceVariableNames: \'\''				},				#name : #'AltSelfEyeElement class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltSelfEyeElement,					#isMetaSide : false				},				#parent : @8,				#content : 'I represent self (not used in the inspector) and an abstract class...',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I represent self (not used in the inspector) and an abstract class...',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1983' ],		#self : OmReference [ '1984' ],		#time : DateAndTime [ '2018-01-14T19:02:38.136658-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltAbstractEyeElement',				#traitCompositionSource : '{}',				#definitionSource : 'AltAbstractEyeElement subclass: #AltSelfEyeElement\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Inspector-Element\''			},			#name : #AltSelfEyeElement,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltSelfEyeElement class\r\tinstanceVariableNames: \'\''				},				#name : #'AltSelfEyeElement class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltSelfEyeElement,					#isMetaSide : false				},				#parent : @8,				#content : 'I represent self (not used in the inspector) and an abstract class...',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Inspector-Element,			#package : #Alt-Inspector,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1984' ],		#self : OmReference [ '1985' ],		#time : DateAndTime [ '2018-01-14T19:02:38.194891-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #AltInspector\r\tinstanceVariableNames: \'object treeMorph textMorph window\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltInspector,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltInspector,						#isMetaSide : false					},					#name : #object,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltInspector,						#isMetaSide : false					},					#name : #treeMorph,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltInspector,						#isMetaSide : false					},					#name : #textMorph,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltInspector,						#isMetaSide : false					},					#name : #window,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltInspector class\r\tinstanceVariableNames: \'\''				},				#name : #'AltInspector class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltInspector,					#isMetaSide : false				},				#parent : @8,				#content : 'An alternative to the eye tree inspector. Try to make it fast!\r\rOk, to recover the GTInspector presentations:\r- run the <gtInspectorPresentationOrder: > pragmas methods over a\r       GLMCompositePresentation instance.\r       see ProtoObject>>#gtInspectorPresentationIn:inContext:\r       and ProtoObject>>#gtInspectorPresentationsFromPragmas:in:inContext:\r- recover the presentations of the GLMCompositePresentation instance\r- use matchingPresentations to restrict which ones to show.\r- get the entry from the title (get rid of the Raw and Meta presentations)\r- ask for the morph of each presentation\rDon\'t process the pragmas requiring a GTInspector instance as a context.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'An alternative to the eye tree inspector. Try to make it fast!\r\rOk, to recover the GTInspector presentations:\r- run the <gtInspectorPresentationOrder: > pragmas methods over a\r       GLMCompositePresentation instance.\r       see ProtoObject>>#gtInspectorPresentationIn:inContext:\r       and ProtoObject>>#gtInspectorPresentationsFromPragmas:in:inContext:\r- recover the presentations of the GLMCompositePresentation instance\r- use matchingPresentations to restrict which ones to show.\r- get the entry from the title (get rid of the Raw and Meta presentations)\r- ask for the morph of each presentation\rDon\'t process the pragmas requiring a GTInspector instance as a context.',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1985' ],		#self : OmReference [ '1986' ],		#time : DateAndTime [ '2018-01-14T19:02:38.199104-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #AltInspector\r\tinstanceVariableNames: \'object treeMorph textMorph window\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Inspector\''			},			#name : #AltInspector,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltInspector,						#isMetaSide : false					},					#name : #object,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltInspector,						#isMetaSide : false					},					#name : #treeMorph,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltInspector,						#isMetaSide : false					},					#name : #textMorph,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltInspector,						#isMetaSide : false					},					#name : #window,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltInspector class\r\tinstanceVariableNames: \'\''				},				#name : #'AltInspector class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltInspector,					#isMetaSide : false				},				#parent : @8,				#content : 'An alternative to the eye tree inspector. Try to make it fast!\r\rOk, to recover the GTInspector presentations:\r- run the <gtInspectorPresentationOrder: > pragmas methods over a\r       GLMCompositePresentation instance.\r       see ProtoObject>>#gtInspectorPresentationIn:inContext:\r       and ProtoObject>>#gtInspectorPresentationsFromPragmas:in:inContext:\r- recover the presentations of the GLMCompositePresentation instance\r- use matchingPresentations to restrict which ones to show.\r- get the entry from the title (get rid of the Raw and Meta presentations)\r- ask for the morph of each presentation\rDon\'t process the pragmas requiring a GTInspector instance as a context.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Inspector,			#package : #Alt-Inspector,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1986' ],		#self : OmReference [ '1987' ],		#time : DateAndTime [ '2018-01-14T19:02:38.229113-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #AltItemInspector\r\tinstanceVariableNames: \'object\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltItemInspector,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltItemInspector,						#isMetaSide : false					},					#name : #object,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltItemInspector class\r\tinstanceVariableNames: \'\''				},				#name : #'AltItemInspector class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltItemInspector,					#isMetaSide : false				},				#parent : @8,				#content : 'I represent the core eye inspector object, giving access to the object instance variables (building model objects over an object being inspected).\r\rI do not mix gui duties with model duties.\r\rThis framework is a bit complex, and has multiple entry points when you want to add a specific inspector extension to a class: the inspector level and the eye element level.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I represent the core eye inspector object, giving access to the object instance variables (building model objects over an object being inspected).\r\rI do not mix gui duties with model duties.\r\rThis framework is a bit complex, and has multiple entry points when you want to add a specific inspector extension to a class: the inspector level and the eye element level.',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1987' ],		#self : OmReference [ '1988' ],		#time : DateAndTime [ '2018-01-14T19:02:38.232629-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpCategoryAddition {		#classCategoryName : #Alt-Inspector-Inspectors,		#affectedPackageName : #Alt-Inspector	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1988' ],		#self : OmReference [ '1989' ],		#time : DateAndTime [ '2018-01-14T19:02:38.237696-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #AltItemInspector\r\tinstanceVariableNames: \'object\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Inspector-Inspectors\''			},			#name : #AltItemInspector,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltItemInspector,						#isMetaSide : false					},					#name : #object,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltItemInspector class\r\tinstanceVariableNames: \'\''				},				#name : #'AltItemInspector class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltItemInspector,					#isMetaSide : false				},				#parent : @8,				#content : 'I represent the core eye inspector object, giving access to the object instance variables (building model objects over an object being inspected).\r\rI do not mix gui duties with model duties.\r\rThis framework is a bit complex, and has multiple entry points when you want to add a specific inspector extension to a class: the inspector level and the eye element level.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Inspector-Inspectors,			#package : #Alt-Inspector,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1989' ],		#self : OmReference [ '1990' ],		#time : DateAndTime [ '2018-01-14T19:02:38.253009-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltItemInspector',				#traitCompositionSource : '{}',				#definitionSource : 'AltItemInspector subclass: #AltAnnouncerInspector\r\tinstanceVariableNames: \'announcements\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltAnnouncerInspector,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltAnnouncerInspector,						#isMetaSide : false					},					#name : #announcements,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltAnnouncerInspector class\r\tinstanceVariableNames: \'\''				},				#name : #'AltAnnouncerInspector class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltAnnouncerInspector,					#isMetaSide : false				},				#parent : @8,				#content : 'I represent an inspector on a announcer, I try, as soon as I am open, to track announcements sent by the observed target and display them. Once closed and released, then I release my observation of the announcer.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I represent an inspector on a announcer, I try, as soon as I am open, to track announcements sent by the observed target and display them. Once closed and released, then I release my observation of the announcer.',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1990' ],		#self : OmReference [ '1991' ],		#time : DateAndTime [ '2018-01-14T19:02:38.257126-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltItemInspector',				#traitCompositionSource : '{}',				#definitionSource : 'AltItemInspector subclass: #AltAnnouncerInspector\r\tinstanceVariableNames: \'announcements\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Inspector-Inspectors\''			},			#name : #AltAnnouncerInspector,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltAnnouncerInspector,						#isMetaSide : false					},					#name : #announcements,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltAnnouncerInspector class\r\tinstanceVariableNames: \'\''				},				#name : #'AltAnnouncerInspector class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltAnnouncerInspector,					#isMetaSide : false				},				#parent : @8,				#content : 'I represent an inspector on a announcer, I try, as soon as I am open, to track announcements sent by the observed target and display them. Once closed and released, then I release my observation of the announcer.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Inspector-Inspectors,			#package : #Alt-Inspector,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1991' ],		#self : OmReference [ '1992' ],		#time : DateAndTime [ '2018-01-14T19:02:38.272495-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltItemInspector',				#traitCompositionSource : '{}',				#definitionSource : 'AltItemInspector subclass: #AltCharacterInspector\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltCharacterInspector,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltCharacterInspector class\r\tinstanceVariableNames: \'\''				},				#name : #'AltCharacterInspector class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltCharacterInspector,					#isMetaSide : false				},				#parent : @8,				#content : 'I represent the adaptation to a character',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I represent the adaptation to a character',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1992' ],		#self : OmReference [ '1993' ],		#time : DateAndTime [ '2018-01-14T19:02:38.276602-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltItemInspector',				#traitCompositionSource : '{}',				#definitionSource : 'AltItemInspector subclass: #AltCharacterInspector\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Inspector-Inspectors\''			},			#name : #AltCharacterInspector,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltCharacterInspector class\r\tinstanceVariableNames: \'\''				},				#name : #'AltCharacterInspector class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltCharacterInspector,					#isMetaSide : false				},				#parent : @8,				#content : 'I represent the adaptation to a character',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Inspector-Inspectors,			#package : #Alt-Inspector,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1993' ],		#self : OmReference [ '1994' ],		#time : DateAndTime [ '2018-01-14T19:02:38.292164-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltItemInspector',				#traitCompositionSource : '{}',				#definitionSource : 'AltItemInspector subclass: #AltCollectionInspector\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltCollectionInspector,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltCollectionInspector class\r\tinstanceVariableNames: \'\''				},				#name : #'AltCollectionInspector class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltCollectionInspector,					#isMetaSide : false				},				#parent : @8,				#content : 'I am the inspector for a collection',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I am the inspector for a collection',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1994' ],		#self : OmReference [ '1995' ],		#time : DateAndTime [ '2018-01-14T19:02:38.297964-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltItemInspector',				#traitCompositionSource : '{}',				#definitionSource : 'AltItemInspector subclass: #AltCollectionInspector\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Inspector-Inspectors\''			},			#name : #AltCollectionInspector,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltCollectionInspector class\r\tinstanceVariableNames: \'\''				},				#name : #'AltCollectionInspector class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltCollectionInspector,					#isMetaSide : false				},				#parent : @8,				#content : 'I am the inspector for a collection',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Inspector-Inspectors,			#package : #Alt-Inspector,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1995' ],		#self : OmReference [ '1996' ],		#time : DateAndTime [ '2018-01-14T19:02:38.324356-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCollectionInspector',				#traitCompositionSource : '{}',				#definitionSource : 'AltCollectionInspector subclass: #AltBagInspector\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltBagInspector,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltBagInspector class\r\tinstanceVariableNames: \'\''				},				#name : #'AltBagInspector class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltBagInspector,					#isMetaSide : false				},				#parent : @8,				#content : 'I inspect a bag, a variant of collection',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I inspect a bag, a variant of collection',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1996' ],		#self : OmReference [ '1997' ],		#time : DateAndTime [ '2018-01-14T19:02:38.330483-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCollectionInspector',				#traitCompositionSource : '{}',				#definitionSource : 'AltCollectionInspector subclass: #AltBagInspector\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Inspector-Inspectors\''			},			#name : #AltBagInspector,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltBagInspector class\r\tinstanceVariableNames: \'\''				},				#name : #'AltBagInspector class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltBagInspector,					#isMetaSide : false				},				#parent : @8,				#content : 'I inspect a bag, a variant of collection',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Inspector-Inspectors,			#package : #Alt-Inspector,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1997' ],		#self : OmReference [ '1998' ],		#time : DateAndTime [ '2018-01-14T19:02:38.348471-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCollectionInspector',				#traitCompositionSource : '{}',				#definitionSource : 'AltCollectionInspector subclass: #AltByteArrayInspector\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltByteArrayInspector,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltByteArrayInspector class\r\tinstanceVariableNames: \'\''				},				#name : #'AltByteArrayInspector class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltByteArrayInspector,					#isMetaSide : false				},				#parent : @8,				#content : 'I inspect a ByteArray',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I inspect a ByteArray',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1998' ],		#self : OmReference [ '1999' ],		#time : DateAndTime [ '2018-01-14T19:02:38.353022-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCollectionInspector',				#traitCompositionSource : '{}',				#definitionSource : 'AltCollectionInspector subclass: #AltByteArrayInspector\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Inspector-Inspectors\''			},			#name : #AltByteArrayInspector,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltByteArrayInspector class\r\tinstanceVariableNames: \'\''				},				#name : #'AltByteArrayInspector class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltByteArrayInspector,					#isMetaSide : false				},				#parent : @8,				#content : 'I inspect a ByteArray',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Inspector-Inspectors,			#package : #Alt-Inspector,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '1999' ],		#self : OmReference [ '2000' ],		#time : DateAndTime [ '2018-01-14T19:02:38.368226-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCollectionInspector',				#traitCompositionSource : '{}',				#definitionSource : 'AltCollectionInspector subclass: #AltDictionaryInspector\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltDictionaryInspector,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltDictionaryInspector class\r\tinstanceVariableNames: \'\''				},				#name : #'AltDictionaryInspector class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltDictionaryInspector,					#isMetaSide : false				},				#parent : @8,				#content : 'I inspect a dictionary',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I inspect a dictionary',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2000' ],		#self : OmReference [ '2001' ],		#time : DateAndTime [ '2018-01-14T19:02:38.372432-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCollectionInspector',				#traitCompositionSource : '{}',				#definitionSource : 'AltCollectionInspector subclass: #AltDictionaryInspector\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Inspector-Inspectors\''			},			#name : #AltDictionaryInspector,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltDictionaryInspector class\r\tinstanceVariableNames: \'\''				},				#name : #'AltDictionaryInspector class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltDictionaryInspector,					#isMetaSide : false				},				#parent : @8,				#content : 'I inspect a dictionary',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Inspector-Inspectors,			#package : #Alt-Inspector,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2001' ],		#self : OmReference [ '2002' ],		#time : DateAndTime [ '2018-01-14T19:02:38.387351-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCollectionInspector',				#traitCompositionSource : '{}',				#definitionSource : 'AltCollectionInspector subclass: #AltSetInspector\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltSetInspector,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltSetInspector class\r\tinstanceVariableNames: \'\''				},				#name : #'AltSetInspector class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltSetInspector,					#isMetaSide : false				},				#parent : @8,				#content : 'I inspect a set, by building an external index to its elements',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I inspect a set, by building an external index to its elements',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2002' ],		#self : OmReference [ '2003' ],		#time : DateAndTime [ '2018-01-14T19:02:38.391627-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCollectionInspector',				#traitCompositionSource : '{}',				#definitionSource : 'AltCollectionInspector subclass: #AltSetInspector\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Inspector-Inspectors\''			},			#name : #AltSetInspector,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltSetInspector class\r\tinstanceVariableNames: \'\''				},				#name : #'AltSetInspector class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltSetInspector,					#isMetaSide : false				},				#parent : @8,				#content : 'I inspect a set, by building an external index to its elements',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Inspector-Inspectors,			#package : #Alt-Inspector,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2003' ],		#self : OmReference [ '2004' ],		#time : DateAndTime [ '2018-01-14T19:02:38.428145-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCollectionInspector',				#traitCompositionSource : '{}',				#definitionSource : 'AltCollectionInspector subclass: #AltStringInspector\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltStringInspector,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltStringInspector class\r\tinstanceVariableNames: \'\''				},				#name : #'AltStringInspector class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltStringInspector,					#isMetaSide : false				},				#parent : @8,				#content : 'I inspect a string',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I inspect a string',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2004' ],		#self : OmReference [ '2005' ],		#time : DateAndTime [ '2018-01-14T19:02:38.432361-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCollectionInspector',				#traitCompositionSource : '{}',				#definitionSource : 'AltCollectionInspector subclass: #AltStringInspector\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Inspector-Inspectors\''			},			#name : #AltStringInspector,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltStringInspector class\r\tinstanceVariableNames: \'\''				},				#name : #'AltStringInspector class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltStringInspector,					#isMetaSide : false				},				#parent : @8,				#content : 'I inspect a string',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Inspector-Inspectors,			#package : #Alt-Inspector,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2005' ],		#self : OmReference [ '2006' ],		#time : DateAndTime [ '2018-01-14T19:02:38.44665-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltItemInspector',				#traitCompositionSource : '{}',				#definitionSource : 'AltItemInspector subclass: #AltCompiledMethodInspector\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltCompiledMethodInspector,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltCompiledMethodInspector class\r\tinstanceVariableNames: \'\''				},				#name : #'AltCompiledMethodInspector class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltCompiledMethodInspector,					#isMetaSide : false				},				#parent : @8,				#content : 'I inspect a compiled method',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I inspect a compiled method',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2006' ],		#self : OmReference [ '2007' ],		#time : DateAndTime [ '2018-01-14T19:02:38.45207-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltItemInspector',				#traitCompositionSource : '{}',				#definitionSource : 'AltItemInspector subclass: #AltCompiledMethodInspector\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Inspector-Inspectors\''			},			#name : #AltCompiledMethodInspector,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltCompiledMethodInspector class\r\tinstanceVariableNames: \'\''				},				#name : #'AltCompiledMethodInspector class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltCompiledMethodInspector,					#isMetaSide : false				},				#parent : @8,				#content : 'I inspect a compiled method',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Inspector-Inspectors,			#package : #Alt-Inspector,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2007' ],		#self : OmReference [ '2008' ],		#time : DateAndTime [ '2018-01-14T19:02:38.466482-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltItemInspector',				#traitCompositionSource : '{}',				#definitionSource : 'AltItemInspector subclass: #AltDateAndTimeInspector\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltDateAndTimeInspector,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltDateAndTimeInspector class\r\tinstanceVariableNames: \'\''				},				#name : #'AltDateAndTimeInspector class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltDateAndTimeInspector,					#isMetaSide : false				},				#parent : @8,				#content : 'I inspect a date and time object, providing alternative representations',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I inspect a date and time object, providing alternative representations',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2008' ],		#self : OmReference [ '2009' ],		#time : DateAndTime [ '2018-01-14T19:02:38.470225-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltItemInspector',				#traitCompositionSource : '{}',				#definitionSource : 'AltItemInspector subclass: #AltDateAndTimeInspector\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Inspector-Inspectors\''			},			#name : #AltDateAndTimeInspector,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltDateAndTimeInspector class\r\tinstanceVariableNames: \'\''				},				#name : #'AltDateAndTimeInspector class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltDateAndTimeInspector,					#isMetaSide : false				},				#parent : @8,				#content : 'I inspect a date and time object, providing alternative representations',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Inspector-Inspectors,			#package : #Alt-Inspector,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2009' ],		#self : OmReference [ '2010' ],		#time : DateAndTime [ '2018-01-14T19:02:38.494259-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltItemInspector',				#traitCompositionSource : '{}',				#definitionSource : 'AltItemInspector subclass: #AltFileReferenceInspector\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltFileReferenceInspector,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltFileReferenceInspector class\r\tinstanceVariableNames: \'\''				},				#name : #'AltFileReferenceInspector class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltFileReferenceInspector,					#isMetaSide : false				},				#parent : @8,				#content : 'I inspect a file reference. I can add the children file entries if I point to a directory',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I inspect a file reference. I can add the children file entries if I point to a directory',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2010' ],		#self : OmReference [ '2011' ],		#time : DateAndTime [ '2018-01-14T19:02:38.498893-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltItemInspector',				#traitCompositionSource : '{}',				#definitionSource : 'AltItemInspector subclass: #AltFileReferenceInspector\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Inspector-Inspectors\''			},			#name : #AltFileReferenceInspector,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltFileReferenceInspector class\r\tinstanceVariableNames: \'\''				},				#name : #'AltFileReferenceInspector class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltFileReferenceInspector,					#isMetaSide : false				},				#parent : @8,				#content : 'I inspect a file reference. I can add the children file entries if I point to a directory',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Inspector-Inspectors,			#package : #Alt-Inspector,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2011' ],		#self : OmReference [ '2012' ],		#time : DateAndTime [ '2018-01-14T19:02:38.513619-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltItemInspector',				#traitCompositionSource : '{}',				#definitionSource : 'AltItemInspector subclass: #AltFloatInspector\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltFloatInspector,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltFloatInspector class\r\tinstanceVariableNames: \'\''				},				#name : #'AltFloatInspector class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltFloatInspector,					#isMetaSide : false				},				#parent : @8,				#content : 'I inspect a float instance, providing alternative implementations',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I inspect a float instance, providing alternative implementations',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2012' ],		#self : OmReference [ '2013' ],		#time : DateAndTime [ '2018-01-14T19:02:38.51746-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltItemInspector',				#traitCompositionSource : '{}',				#definitionSource : 'AltItemInspector subclass: #AltFloatInspector\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Inspector-Inspectors\''			},			#name : #AltFloatInspector,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltFloatInspector class\r\tinstanceVariableNames: \'\''				},				#name : #'AltFloatInspector class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltFloatInspector,					#isMetaSide : false				},				#parent : @8,				#content : 'I inspect a float instance, providing alternative implementations',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Inspector-Inspectors,			#package : #Alt-Inspector,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2013' ],		#self : OmReference [ '2014' ],		#time : DateAndTime [ '2018-01-14T19:02:38.531252-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltItemInspector',				#traitCompositionSource : '{}',				#definitionSource : 'AltItemInspector subclass: #AltIntegerInspector\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltIntegerInspector,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltIntegerInspector class\r\tinstanceVariableNames: \'\''				},				#name : #'AltIntegerInspector class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltIntegerInspector,					#isMetaSide : false				},				#parent : @8,				#content : 'I inspect an integer instance, providing alternative representations',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I inspect an integer instance, providing alternative representations',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2014' ],		#self : OmReference [ '2015' ],		#time : DateAndTime [ '2018-01-14T19:02:38.535347-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltItemInspector',				#traitCompositionSource : '{}',				#definitionSource : 'AltItemInspector subclass: #AltIntegerInspector\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Inspector-Inspectors\''			},			#name : #AltIntegerInspector,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltIntegerInspector class\r\tinstanceVariableNames: \'\''				},				#name : #'AltIntegerInspector class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltIntegerInspector,					#isMetaSide : false				},				#parent : @8,				#content : 'I inspect an integer instance, providing alternative representations',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Inspector-Inspectors,			#package : #Alt-Inspector,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2015' ],		#self : OmReference [ '2016' ],		#time : DateAndTime [ '2018-01-14T19:02:38.558788-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltItemInspector',				#traitCompositionSource : '{}',				#definitionSource : 'AltItemInspector subclass: #AltMethodContextInspector\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltMethodContextInspector,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltMethodContextInspector class\r\tinstanceVariableNames: \'\''				},				#name : #'AltMethodContextInspector class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltMethodContextInspector,					#isMetaSide : false				},				#parent : @8,				#content : 'I inspect a method context',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I inspect a method context',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2016' ],		#self : OmReference [ '2017' ],		#time : DateAndTime [ '2018-01-14T19:02:38.562668-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltItemInspector',				#traitCompositionSource : '{}',				#definitionSource : 'AltItemInspector subclass: #AltMethodContextInspector\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Inspector-Inspectors\''			},			#name : #AltMethodContextInspector,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltMethodContextInspector class\r\tinstanceVariableNames: \'\''				},				#name : #'AltMethodContextInspector class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltMethodContextInspector,					#isMetaSide : false				},				#parent : @8,				#content : 'I inspect a method context',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Inspector-Inspectors,			#package : #Alt-Inspector,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2017' ],		#self : OmReference [ '2018' ],		#time : DateAndTime [ '2018-01-14T19:02:38.57613-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltItemInspector',				#traitCompositionSource : '{}',				#definitionSource : 'AltItemInspector subclass: #AltMorphInspector\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltMorphInspector,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltMorphInspector class\r\tinstanceVariableNames: \'\''				},				#name : #'AltMorphInspector class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltMorphInspector,					#isMetaSide : false				},				#parent : @8,				#content : 'I inspect a morph instance. I should provide a view on the morph (I only do an icon for now...)',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I inspect a morph instance. I should provide a view on the morph (I only do an icon for now...)',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2018' ],		#self : OmReference [ '2019' ],		#time : DateAndTime [ '2018-01-14T19:02:38.581304-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltItemInspector',				#traitCompositionSource : '{}',				#definitionSource : 'AltItemInspector subclass: #AltMorphInspector\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Inspector-Inspectors\''			},			#name : #AltMorphInspector,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltMorphInspector class\r\tinstanceVariableNames: \'\''				},				#name : #'AltMorphInspector class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltMorphInspector,					#isMetaSide : false				},				#parent : @8,				#content : 'I inspect a morph instance. I should provide a view on the morph (I only do an icon for now...)',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Inspector-Inspectors,			#package : #Alt-Inspector,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2019' ],		#self : OmReference [ '2020' ],		#time : DateAndTime [ '2018-01-14T19:02:38.856617-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Set class',				#isMetaSide : true			},			#name : #altInspectorClass,			#protocol : #'*alt-inspector',			#sourceCode : 'altInspectorClass\r\t^ AltSetInspector',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2020' ],		#self : OmReference [ '2021' ],		#time : DateAndTime [ '2018-01-14T19:02:38.859403-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltEyeTreeItemModel,				#isMetaSide : false			},			#name : #asMorph,			#protocol : #'user interface',			#sourceCode : 'asMorph\r\t^ (self label truncateWithElipsisTo: 1000) asStringMorph',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2021' ],		#self : OmReference [ '2022' ],		#time : DateAndTime [ '2018-01-14T19:02:38.86158-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltEyeTreeItemModel,				#isMetaSide : false			},			#name : #'buildMenu:',			#protocol : #'user interface',			#sourceCode : 'buildMenu: aMenu\r\t^ self model buildTreeMenu: aMenu',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2022' ],		#self : OmReference [ '2023' ],		#time : DateAndTime [ '2018-01-14T19:02:38.863355-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltEyeTreeItemModel,				#isMetaSide : false			},			#name : #'buildTreeMenu:on:for:',			#protocol : #commands,			#sourceCode : 'buildTreeMenu: aMenu on: aTreeMorph for: aRequestor\r\t"The item-based tree menu."\r\r\t((self\r\t\tpragmas: #treeAreaCommand\r\t\tfrom: item class\r\t\tto: AltAbstractEyeElement)\r\t\tsorted: [ :a :b | a methodSelector < b methodSelector ])\r\t\tdo: [ :e | \r\t\t\t(item perform: e methodSelector)\r\t\t\t\tdo:\r\t\t\t\t\t[ :c | (c asClass on: aTreeMorph for: aRequestor) addItemToMenu: aMenu ] ]\r\t\tseparatedBy: [ aMenu addLine ].\r\t^ aMenu',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2023' ],		#self : OmReference [ '2024' ],		#time : DateAndTime [ '2018-01-14T19:02:38.864894-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltEyeTreeItemModel,				#isMetaSide : false			},			#name : #'buildTreeShortcutsOn:for:',			#protocol : #commands,			#sourceCode : 'buildTreeShortcutsOn: aKMDispatcher for: aRequestor\r\t"This is an attempt at handling shortcuts... Which works, with the help of a custom KMDispatcher."\r\r\t(self\r\t\tpragmas: #treeAreaCommand\r\t\tfrom: item class\r\t\tto: AltAbstractEyeElement)\r\t\tdo: [ :e | \r\t\t\t(item perform: e methodSelector)\r\t\t\t\tdo: [ :c | \r\t\t\t\t\t| command |\r\t\t\t\t\tcommand := c asClass on: aRequestor treeMorph for: aRequestor.\r\t\t\t\t\tcommand isEnabled\r\t\t\t\t\t\tifTrue: [ command buildShortcut: aKMDispatcher ] ] ]',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2024' ],		#self : OmReference [ '2025' ],		#time : DateAndTime [ '2018-01-14T19:02:38.86895-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltEyeTreeItemModel,				#isMetaSide : false			},			#name : #'childNodeFromItem:',			#protocol : #accessing,			#sourceCode : 'childNodeFromItem: anItem\r\tanItem class == GLMCompositePresentation\r\t\tifTrue: [ ^ AltTreeGTILabelModel on: anItem ].\r\t^ super childNodeFromItem: anItem',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2025' ],		#self : OmReference [ '2026' ],		#time : DateAndTime [ '2018-01-14T19:02:38.870525-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltEyeTreeItemModel,				#isMetaSide : false			},			#name : #childrenItems,			#protocol : #accessing,			#sourceCode : 'childrenItems\r\t^ self inspector elements',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2026' ],		#self : OmReference [ '2027' ],		#time : DateAndTime [ '2018-01-14T19:02:38.871902-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltEyeTreeItemModel,				#isMetaSide : false			},			#name : #contents,			#protocol : #accessing,			#sourceCode : 'contents\r\t^ self isExpanded\r\t\tifFalse: [ ^ #() ]\r\t\tifTrue: [ contents\r\t\t\t\tifNil: [ self\r\t\t\t\t\t\tcontents:\r\t\t\t\t\t\t\t(self gtChildrenItems collect: [ :gci | AltTreeGTILabelModel on: gci ])\r\t\t\t\t\t\t\t\t, (self childrenItems collect: [ :ci | self childNodeFromItem: ci ]) ] ]',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2027' ],		#self : OmReference [ '2028' ],		#time : DateAndTime [ '2018-01-14T19:02:38.873228-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltEyeTreeItemModel,				#isMetaSide : false			},			#name : #doItContext,			#protocol : #accessing,			#sourceCode : 'doItContext\r\t^ nil',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2028' ],		#self : OmReference [ '2029' ],		#time : DateAndTime [ '2018-01-14T19:02:38.874669-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltEyeTreeItemModel,				#isMetaSide : false			},			#name : #doItReceiver,			#protocol : #accessing,			#sourceCode : 'doItReceiver\r\t^ item value',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2029' ],		#self : OmReference [ '2030' ],		#time : DateAndTime [ '2018-01-14T19:02:38.876417-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltEyeTreeItemModel,				#isMetaSide : false			},			#name : #gtChildrenItems,			#protocol : #accessing,			#sourceCode : 'gtChildrenItems\r\t"Filtering require the entity to be set in the pane of each presentation. Have to find out how."\r\r\t| composite |\r\tcomposite := GLMCompositePresentation new.\r\tcomposite entity: item value.\r\t(((Pragma\r\t\tallNamed: GTInspector extensionsPragma\r\t\tfrom: item value class\r\t\tto: Object) reject: [ :e | e methodSelector numArgs ~= 1 ])\r\t\tsorted: [ :a :b | a arguments first < b arguments first ])\r\t\tdo: [ :e | \r\t\t\t[ thisContext\r\t\t\t\tobject: item value\r\t\t\t\tperform: e methodSelector\r\t\t\t\twithArguments: (Array with: composite)\r\t\t\t\tinClass: item value class ]\r\t\t\t\ton: Error\r\t\t\t\tdo: [  ] ].\r\t^ composite presentations\r\t\tselect: [ :p | p condition glamourValue: item value ]',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2030' ],		#self : OmReference [ '2031' ],		#time : DateAndTime [ '2018-01-14T19:02:38.877829-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltEyeTreeItemModel,				#isMetaSide : false			},			#name : #hasContents,			#protocol : #testing,			#sourceCode : 'hasContents\r\t"Am I leaking objects when I do that ?"\r\r\t^ (contents notNil and: [ contents notEmpty ])\r\t\tor: [ self inspector hasContents ]',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2031' ],		#self : OmReference [ '2032' ],		#time : DateAndTime [ '2018-01-14T19:02:38.880925-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltEyeTreeItemModel,				#isMetaSide : false			},			#name : #icon,			#protocol : #accessing,			#sourceCode : 'icon\r\titem withErrorsDo: [ :error | ^ Smalltalk ui icons smallWarningIcon ].\r\t^ [ item icon ]\r\t\ton: Error\r\t\tdo: [ :error | Smalltalk ui icons smallWarningIcon ]',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2032' ],		#self : OmReference [ '2033' ],		#time : DateAndTime [ '2018-01-14T19:02:38.882414-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltEyeTreeItemModel,				#isMetaSide : false			},			#name : #inspector,			#protocol : #accessing,			#sourceCode : 'inspector\r\t^ item inspector',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2033' ],		#self : OmReference [ '2034' ],		#time : DateAndTime [ '2018-01-14T19:02:38.883707-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltEyeTreeItemModel,				#isMetaSide : false			},			#name : #'item:',			#protocol : #accessing,			#sourceCode : 'item: anItem\r\titem := anItem.\r\tanItem ifNotNil: [ copy := self inspector recordedItem ]',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2034' ],		#self : OmReference [ '2035' ],		#time : DateAndTime [ '2018-01-14T19:02:38.885104-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltEyeTreeItemModel,				#isMetaSide : false			},			#name : #label,			#protocol : #'user interface',			#sourceCode : 'label\r\t"Take care of errors that might occur during label access"\r\r\t^ [ item longLabel ]\r\t\ton: Error\r\t\tdo: [ :error | \r\t\t\titem label , \': \' , \'Error while accessing label of \'\r\t\t\t\t, item accessorCode printString ]',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2035' ],		#self : OmReference [ '2036' ],		#time : DateAndTime [ '2018-01-14T19:02:38.886405-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltEyeTreeItemModel,				#isMetaSide : false			},			#name : #model,			#protocol : #accessing,			#sourceCode : 'model\r\t^ model ifNil: [ parent model ]',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2036' ],		#self : OmReference [ '2037' ],		#time : DateAndTime [ '2018-01-14T19:02:38.887641-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltEyeTreeItemModel,				#isMetaSide : false			},			#name : #'model:',			#protocol : #accessing,			#sourceCode : 'model: anObject\r\tmodel := anObject',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2037' ],		#self : OmReference [ '2038' ],		#time : DateAndTime [ '2018-01-14T19:02:38.890625-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltEyeTreeItemModel,				#isMetaSide : false			},			#name : #'pragmas:from:to:',			#protocol : #private,			#sourceCode : 'pragmas: aSymbol from: aClass to: aTarget\r\t"A safe way to find pragmas in a class hierarchy."\r\r\t| pragmas |\r\tpragmas := OrderedCollection new.\r\t(aClass allSelectorsBelow: aTarget superclass)\r\t\tdo: [ :selector | pragmas addAll: ((aClass lookupSelector: selector) pragmas select: [ :pragma | pragma key == aSymbol ]) ].\r\t^ pragmas',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2038' ],		#self : OmReference [ '2039' ],		#time : DateAndTime [ '2018-01-14T19:02:38.892658-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltEyeTreeItemModel,				#isMetaSide : false			},			#name : #rebuildContents,			#protocol : #updating,			#sourceCode : 'rebuildContents\r\t"Rebuild the contents, considering our item has changed, but try not to recreate everything."\r\r\t| oldContents |\r\tcontents ifNil: [ ^ self ].\r\toldContents := contents.\r\tself\r\t\tcontents:\r\t\t\t(self childrenItems\r\t\t\t\tcollect: [ :ci | \r\t\t\t\t\toldContents\r\t\t\t\t\t\tdetect: [ :oc | oc item = ci ]\r\t\t\t\t\t\tifNone: [ self childNodeFromItem: ci ] ]).\r\toldContents\r\t\tdo: [ :each | \r\t\t\t(contents includes: each)\r\t\t\t\tifFalse: [ each release ] ].\r\tself changed',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2039' ],		#self : OmReference [ '2040' ],		#time : DateAndTime [ '2018-01-14T19:02:38.89415-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltEyeTreeItemModel,				#isMetaSide : false			},			#name : #release,			#protocol : #initialize-release,			#sourceCode : 'release\r\tsuper release.\r\tcontents ifNotNil: [ :c | c do: [ :e | e release ] ].\r\titem release',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2040' ],		#self : OmReference [ '2041' ],		#time : DateAndTime [ '2018-01-14T19:02:38.895541-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltEyeTreeItemModel,				#isMetaSide : false			},			#name : #sourceClass,			#protocol : #accessing,			#sourceCode : 'sourceClass\r\t^ item value',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2041' ],		#self : OmReference [ '2042' ],		#time : DateAndTime [ '2018-01-14T19:02:38.89695-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltEyeTreeItemModel,				#isMetaSide : false			},			#name : #watch,			#protocol : #updating,			#sourceCode : 'watch\r\t"In practice: return false if myself or any of my contents signal a change."\r\r\tparent\r\t\tifNil: [ self contents\r\t\t\t\tdo: [ :e | \r\t\t\t\t\te watch\r\t\t\t\t\t\tifTrue: [ self changed.\r\t\t\t\t\t\t\tfalse ] ] ].\r\titem isNil\r\t\tifTrue: [ ^ copy notNil ].\r\t(self inspector itemIsSameAs: copy)\r\t\tifFalse: [ copy := self inspector recordedItem.\r\t\t\tself rebuildContents.\r\t\t\t^ true ].\r\tself contents\r\t\tdo: [ :e | \r\t\t\te watch\r\t\t\t\tifTrue: [ self changed ] ].\r\t^ false',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2042' ],		#self : OmReference [ '2043' ],		#time : DateAndTime [ '2018-01-14T19:02:38.8985-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltTreeGTILabelModel class',				#isMetaSide : true			},			#name : #'for:',			#protocol : #'instance creation',			#sourceCode : 'for: anObject\r\t"Return all the GTInspector pragmas from the object."\r\r\t| composite |\r\tcomposite := GLMCompositePresentation new.\r\t(((Pragma\r\t\tallNamed: GTInspector extensionsPragma\r\t\tfrom: anObject class\r\t\tto: Object) reject: [ :e | e selector numArgs ~= 1 ])\r\t\tsorted: [ :a :b | a arguments first < b arguments first ])\r\t\tdo: [ :e | \r\t\t\tthisContext\r\t\t\t\tobject: anObject\r\t\t\t\tperform: e selector\r\t\t\t\twithArguments: (Array with: composite)\r\t\t\t\tinClass: anObject class ].\r\tcomposite presentations logCr.\r\t^ composite presentations',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2043' ],		#self : OmReference [ '2044' ],		#time : DateAndTime [ '2018-01-14T19:02:38.899773-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTreeGTILabelModel,				#isMetaSide : false			},			#name : #asMorph,			#protocol : #'user interface',			#sourceCode : 'asMorph\r\t^ (\'GT:\' , item title) asStringMorph',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2044' ],		#self : OmReference [ '2045' ],		#time : DateAndTime [ '2018-01-14T19:02:38.903079-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTreeGTILabelModel,				#isMetaSide : false			},			#name : #'buildTreeMenu:on:for:',			#protocol : #commands,			#sourceCode : 'buildTreeMenu: aMenu on: aTreeMorph for: aRequestor\r\t"The item-based tree menu."\r\r\t((self\r\t\tpragmas: #treeAreaCommand\r\t\tfrom: item class\r\t\tto: AltAbstractEyeElement)\r\t\tsorted: [ :a :b | a methodSelector < b methodSelector ])\r\t\tdo: [ :e | \r\t\t\t(item perform: e methodSelector)\r\t\t\t\tdo:\r\t\t\t\t\t[ :c | (c asClass on: aTreeMorph for: aRequestor) addItemToMenu: aMenu ] ]\r\t\tseparatedBy: [ aMenu addLine ].\r\t^ aMenu',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2045' ],		#self : OmReference [ '2046' ],		#time : DateAndTime [ '2018-01-14T19:02:38.904507-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTreeGTILabelModel,				#isMetaSide : false			},			#name : #'buildTreeShortcutsOn:for:',			#protocol : #commands,			#sourceCode : 'buildTreeShortcutsOn: aKMDispatcher for: aRequestor\r\t"This is an attempt at handling shortcuts... Which works, with the help of a custom KMDispatcher."\r\r\t(self\r\t\tpragmas: #treeAreaCommand\r\t\tfrom: item class\r\t\tto: AltAbstractEyeElement)\r\t\tdo: [ :e | \r\t\t\t(item perform: e methodSelector)\r\t\t\t\tdo: [ :c | \r\t\t\t\t\t| command |\r\t\t\t\t\tcommand := c asClass on: aRequestor treeMorph for: aRequestor.\r\t\t\t\t\tcommand isEnabled\r\t\t\t\t\t\tifTrue: [ command buildShortcut: aKMDispatcher ] ] ]',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2046' ],		#self : OmReference [ '2047' ],		#time : DateAndTime [ '2018-01-14T19:02:38.905777-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTreeGTILabelModel,				#isMetaSide : false			},			#name : #'childNodeFromItem:',			#protocol : #updating,			#sourceCode : 'childNodeFromItem: anItem\r\t^ AltTreeGTIPresentationModel on: anItem',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2047' ],		#self : OmReference [ '2048' ],		#time : DateAndTime [ '2018-01-14T19:02:38.907068-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTreeGTILabelModel,				#isMetaSide : false			},			#name : #childrenItems,			#protocol : #updating,			#sourceCode : 'childrenItems\r\t^ Array with: item',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2048' ],		#self : OmReference [ '2049' ],		#time : DateAndTime [ '2018-01-14T19:02:38.908675-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTreeGTILabelModel,				#isMetaSide : false			},			#name : #'pragmas:from:to:',			#protocol : #private,			#sourceCode : 'pragmas: aSymbol from: aClass to: aTarget\r\t"A safe way to find pragmas in a class hierarchy."\r\r\t| pragmas |\r\tpragmas := OrderedCollection new.\r\t(aClass allSelectorsBelow: aTarget superclass)\r\t\tdo: [ :selector | pragmas addAll: ((aClass lookupSelector: selector) pragmas select: [ :pragma | pragma key == aSymbol ]) ].\r\t^ pragmas',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2049' ],		#self : OmReference [ '2050' ],		#time : DateAndTime [ '2018-01-14T19:02:38.910174-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTreeGTILabelModel,				#isMetaSide : false			},			#name : #watch,			#protocol : #updating,			#sourceCode : 'watch\r\t"do nothing."\r\t\r\t^ false',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2050' ],		#self : OmReference [ '2051' ],		#time : DateAndTime [ '2018-01-14T19:02:38.913242-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTreeGTIPresentationModel,				#isMetaSide : false			},			#name : #'asListItemMorphIn:',			#protocol : #'user interface',			#sourceCode : 'asListItemMorphIn: anAltListViewportMorph\r\t^ AltTreeGTIPresentationMorph new\r\t\titem: self in: anAltListViewportMorph;\r\t\tyourself',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2051' ],		#self : OmReference [ '2052' ],		#time : DateAndTime [ '2018-01-14T19:02:38.91459-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTreeGTIPresentationModel,				#isMetaSide : false			},			#name : #asMorph,			#protocol : #'user interface',			#sourceCode : 'asMorph\r\t^ (GLMMorphicRenderer new render: item)\r\t\textent: 300 @ 300;\r\t\tlayoutChanged;\r\t\tyourself',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2052' ],		#self : OmReference [ '2053' ],		#time : DateAndTime [ '2018-01-14T19:02:38.915898-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTreeGTIPresentationModel,				#isMetaSide : false			},			#name : #asTreeItemMorph,			#protocol : #'user interface',			#sourceCode : 'asTreeItemMorph\r\t^ AltTreeGTIPresentationMorph new\r\t\titem: self;\r\t\tyourself',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2053' ],		#self : OmReference [ '2054' ],		#time : DateAndTime [ '2018-01-14T19:02:38.917381-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTreeGTIPresentationModel,				#isMetaSide : false			},			#name : #watch,			#protocol : #updating,			#sourceCode : 'watch\r\t"Do nothing."\r\t\r\t^ false',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2054' ],		#self : OmReference [ '2055' ],		#time : DateAndTime [ '2018-01-14T19:02:38.919489-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Context class',				#isMetaSide : true			},			#name : #altInspectorClass,			#protocol : #'*alt-inspector',			#sourceCode : 'altInspectorClass\r\t^ AltMethodContextInspector',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2055' ],		#self : OmReference [ '2056' ],		#time : DateAndTime [ '2018-01-14T19:02:38.920726-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltInspectorTest,				#isMetaSide : false			},			#name : #instancesToTry,			#protocol : #accessing,			#sourceCode : 'instancesToTry\r\t^ { \r\tObject new . \r\tClass . \r\tMetaclass . \r\tArray new .\r\tDictionary new . \r\tWordArray new. \r\tByteArray new. \r\tColor red .\r\tthisContext . \r\t12 . \r\t#symbol . \r\t(12.32) . \r\tTBehavior . \r\t(SmallInteger>>#+) . \r\t#(1 2 3) . \r\t#[1 2 3] .\r\t[  1 + 2 ] .\r\tError new .\r\t(1 << 40)\r\t}',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2056' ],		#self : OmReference [ '2057' ],		#time : DateAndTime [ '2018-01-14T19:02:38.921945-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltInspectorTest,				#isMetaSide : false			},			#name : #testErrorRaised,			#protocol : #tests,			#sourceCode : 'testErrorRaised\r\t| inspector morphsBefore morphsAfter |\r\tmorphsBefore := World submorphs.\r\tself instancesToTry\r\t\tdo: [ :each | inspector := AltInspector inspect: each ].\r\tmorphsAfter := World submorphs.\r\t(morphsAfter copyWithoutAll: morphsBefore)\r\t\tdo: [ :morph | morph delete ]',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2057' ],		#self : OmReference [ '2058' ],		#time : DateAndTime [ '2018-01-14T19:02:38.92625-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ByteArray class',				#isMetaSide : true			},			#name : #altInspectorClass,			#protocol : #'*alt-inspector',			#sourceCode : 'altInspectorClass\r\t^ AltByteArrayInspector',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2058' ],		#self : OmReference [ '2059' ],		#time : DateAndTime [ '2018-01-14T19:02:38.927812-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'DateAndTime class',				#isMetaSide : true			},			#name : #altInspectorClass,			#protocol : #'*alt-inspector',			#sourceCode : 'altInspectorClass\r\t^ AltDateAndTimeInspector',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2059' ],		#self : OmReference [ '2060' ],		#time : DateAndTime [ '2018-01-14T19:02:38.929134-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTreeGTIPresentationMorph,				#isMetaSide : false			},			#name : #'item:',			#protocol : #'as yet unclassified',			#sourceCode : 'item: anObject\r\t"Create the morph representing the item"\r\r\titem := anObject.\r\tself extent: 300 @ 300.\r\tself addMorph: item asMorph.\r\titem icon ifNotNil: [ :icon | self addMorph: icon asMorph ].\r\titem hasContents\r\t\tifTrue: [ | toggle enclosing |\r\t\t\tenclosing := Morph new.\r\t\t\tenclosing color: Color transparent.\r\t\t\ttoggle := item isExpanded\r\t\t\t\tifTrue: [ self theme treeExpandedForm asMorph ]\r\t\t\t\tifFalse: [ self theme treeUnexpandedForm asMorph ].\r\t\t\tenclosing width: toggle width.\r\t\t\tenclosing height: self submorphs first height.\r\t\t\tenclosing addMorph: toggle.\r\t\t\ttoggle center: enclosing center.\r\t\t\tenclosing on: #mouseDown send: #toggleExpanded to: item.\r\t\t\tself addMorph: enclosing ]\r\t\tifFalse: [ self addMorph: (Form extent: 10 @ 9 depth: Display depth) asMorph ].\r\tself computeBounds.\r\tself bottom: self bottom + 2.\r\tself submorphs do: [ :e | e top: 1 ].\r\tself left: self indentStep * item depth',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2060' ],		#self : OmReference [ '2061' ],		#time : DateAndTime [ '2018-01-14T19:02:38.930574-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltTreeGTIPresentationMorph,				#isMetaSide : false			},			#name : #'item:in:',			#protocol : #'as yet unclassified',			#sourceCode : 'item: anObject in: anAltListViewportMorph\r\t"Create the morph representing the item. Use information from the surrounding morph."\r\r\titem := anObject.\r\tself extent: anAltListViewportMorph extent.\r\tself addMorph: item asMorph.\r\titem icon ifNotNil: [ :icon | self addMorph: icon asMorph ].\r\titem hasContents\r\t\tifTrue: [ | toggle enclosing |\r\t\t\tenclosing := Morph new.\r\t\t\tenclosing color: Color transparent.\r\t\t\ttoggle := item isExpanded\r\t\t\t\tifTrue: [ self theme treeExpandedForm asMorph ]\r\t\t\t\tifFalse: [ self theme treeUnexpandedForm asMorph ].\r\t\t\tenclosing width: toggle width.\r\t\t\tenclosing height: self submorphs first height.\r\t\t\tenclosing addMorph: toggle.\r\t\t\ttoggle center: enclosing center.\r\t\t\tenclosing on: #mouseDown send: #toggleExpanded to: item.\r\t\t\tself addMorph: enclosing ]\r\t\tifFalse: [ self addMorph: (Form extent: 10 @ 9 depth: Display depth) asMorph ].\r\tself computeBounds.\r\tself bottom: self bottom + 2.\r\tself submorphs do: [ :e | e top: 1 ].\r\tself left: self indentStep * item depth',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2061' ],		#self : OmReference [ '2062' ],		#time : DateAndTime [ '2018-01-14T19:02:38.932038-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'SmallDictionary class',				#isMetaSide : true			},			#name : #altInspectorClass,			#protocol : #'*alt-inspector',			#sourceCode : 'altInspectorClass\r\t^ AltDictionaryInspector',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2062' ],		#self : OmReference [ '2063' ],		#time : DateAndTime [ '2018-01-14T19:02:38.933466-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Dictionary class',				#isMetaSide : true			},			#name : #altInspectorClass,			#protocol : #'*alt-inspector',			#sourceCode : 'altInspectorClass\r\t^ AltDictionaryInspector',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2063' ],		#self : OmReference [ '2064' ],		#time : DateAndTime [ '2018-01-14T19:02:38.937828-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'SequenceableCollection class',				#isMetaSide : true			},			#name : #altInspectorClass,			#protocol : #'*alt-inspector',			#sourceCode : 'altInspectorClass\r\t^ AltCollectionInspector',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2064' ],		#self : OmReference [ '2065' ],		#time : DateAndTime [ '2018-01-14T19:02:38.939513-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'FileReference class',				#isMetaSide : true			},			#name : #altInspectorClass,			#protocol : #'*alt-inspector',			#sourceCode : 'altInspectorClass\r\t^ AltFileReferenceInspector',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2065' ],		#self : OmReference [ '2066' ],		#time : DateAndTime [ '2018-01-14T19:02:38.940753-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltInspectorBrowseFull,				#isMetaSide : false			},			#name : #execute,			#protocol : #execution,			#sourceCode : 'execute\r\trequestor selectedItem item value browse',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2066' ],		#self : OmReference [ '2067' ],		#time : DateAndTime [ '2018-01-14T19:02:38.942221-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltInspectorBrowseFull,				#isMetaSide : false			},			#name : #isActive,			#protocol : #testing,			#sourceCode : 'isActive\r\t^ true',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2067' ],		#self : OmReference [ '2068' ],		#time : DateAndTime [ '2018-01-14T19:02:38.943879-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltInspectorBrowseFull,				#isMetaSide : false			},			#name : #isEnabled,			#protocol : #testing,			#sourceCode : 'isEnabled\r\t^ requestor selectedNode notNil',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2068' ],		#self : OmReference [ '2069' ],		#time : DateAndTime [ '2018-01-14T19:02:38.94516-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltInspectorBrowseFull,				#isMetaSide : false			},			#name : #label,			#protocol : #accessing,			#sourceCode : 'label\r\t^ \'Browse full\'',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2069' ],		#self : OmReference [ '2070' ],		#time : DateAndTime [ '2018-01-14T19:02:38.946479-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltInspectorBrowseHierarchy,				#isMetaSide : false			},			#name : #execute,			#protocol : #execution,			#sourceCode : 'execute\r\trequestor selectedObject class browseHierarchy',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2070' ],		#self : OmReference [ '2071' ],		#time : DateAndTime [ '2018-01-14T19:02:38.947907-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltInspectorBrowseHierarchy,				#isMetaSide : false			},			#name : #isActive,			#protocol : #testing,			#sourceCode : 'isActive\r\t^ true',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2071' ],		#self : OmReference [ '2072' ],		#time : DateAndTime [ '2018-01-14T19:02:38.949327-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltInspectorBrowseHierarchy,				#isMetaSide : false			},			#name : #isEnabled,			#protocol : #testing,			#sourceCode : 'isEnabled\r\t^ requestor selectedItem notNil',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2072' ],		#self : OmReference [ '2073' ],		#time : DateAndTime [ '2018-01-14T19:02:38.950749-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltInspectorBrowseHierarchy,				#isMetaSide : false			},			#name : #label,			#protocol : #accessing,			#sourceCode : 'label\r\t^ \'Browse Hierarchy\'',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2073' ],		#self : OmReference [ '2074' ],		#time : DateAndTime [ '2018-01-14T19:02:38.952186-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltInspectorExplorePointers,				#isMetaSide : false			},			#name : #execute,			#protocol : #execution,			#sourceCode : 'execute\r\t""\r\tSmalltalk tools pointerExplorer openStrongOn: requestor selectedObject',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2074' ],		#self : OmReference [ '2075' ],		#time : DateAndTime [ '2018-01-14T19:02:38.954102-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltInspectorExplorePointers,				#isMetaSide : false			},			#name : #isActive,			#protocol : #testing,			#sourceCode : 'isActive\r\t^ true',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2075' ],		#self : OmReference [ '2076' ],		#time : DateAndTime [ '2018-01-14T19:02:38.955782-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltInspectorExplorePointers,				#isMetaSide : false			},			#name : #isEnabled,			#protocol : #testing,			#sourceCode : 'isEnabled\r\t^ requestor selectedNode notNil',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2076' ],		#self : OmReference [ '2077' ],		#time : DateAndTime [ '2018-01-14T19:02:38.957369-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltInspectorExplorePointers,				#isMetaSide : false			},			#name : #label,			#protocol : #accessing,			#sourceCode : 'label\r\t^ \'Explore pointers\'',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2077' ],		#self : OmReference [ '2078' ],		#time : DateAndTime [ '2018-01-14T19:02:38.959447-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltInspectorInspect,				#isMetaSide : false			},			#name : #execute,			#protocol : #execution,			#sourceCode : 'execute\r\trequestor selectedItem item value inspect',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2078' ],		#self : OmReference [ '2079' ],		#time : DateAndTime [ '2018-01-14T19:02:38.960932-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltInspectorInspect,				#isMetaSide : false			},			#name : #isActive,			#protocol : #testing,			#sourceCode : 'isActive\r\t^ true',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2079' ],		#self : OmReference [ '2080' ],		#time : DateAndTime [ '2018-01-14T19:02:38.962615-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltInspectorInspect,				#isMetaSide : false			},			#name : #isEnabled,			#protocol : #testing,			#sourceCode : 'isEnabled\r\t^ requestor selectedNode notNil',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2080' ],		#self : OmReference [ '2081' ],		#time : DateAndTime [ '2018-01-14T19:02:38.964347-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltInspectorInspect,				#isMetaSide : false			},			#name : #keystroke,			#protocol : #accessing,			#sourceCode : 'keystroke\r\t^ $i ctrl',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2081' ],		#self : OmReference [ '2082' ],		#time : DateAndTime [ '2018-01-14T19:02:38.966152-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltInspectorInspect,				#isMetaSide : false			},			#name : #label,			#protocol : #accessing,			#sourceCode : 'label\r\t^ \'Print it\'',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2082' ],		#self : OmReference [ '2083' ],		#time : DateAndTime [ '2018-01-14T19:02:38.967837-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltInspectorPrintIt,				#isMetaSide : false			},			#name : #execute,			#protocol : #execution,			#sourceCode : 'execute\r\trequestor selectedItem item value print',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2083' ],		#self : OmReference [ '2084' ],		#time : DateAndTime [ '2018-01-14T19:02:38.969434-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltInspectorPrintIt,				#isMetaSide : false			},			#name : #isActive,			#protocol : #testing,			#sourceCode : 'isActive\r\t^ true',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2084' ],		#self : OmReference [ '2085' ],		#time : DateAndTime [ '2018-01-14T19:02:38.971638-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltInspectorPrintIt,				#isMetaSide : false			},			#name : #isEnabled,			#protocol : #testing,			#sourceCode : 'isEnabled\r\t^ requestor selectedNode notNil',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2085' ],		#self : OmReference [ '2086' ],		#time : DateAndTime [ '2018-01-14T19:02:38.973396-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltInspectorPrintIt,				#isMetaSide : false			},			#name : #keystroke,			#protocol : #accessing,			#sourceCode : 'keystroke\r\t^ $p ctrl',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2086' ],		#self : OmReference [ '2087' ],		#time : DateAndTime [ '2018-01-14T19:02:38.975209-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltInspectorPrintIt,				#isMetaSide : false			},			#name : #label,			#protocol : #accessing,			#sourceCode : 'label\r\t^ \'Inspect\'',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2087' ],		#self : OmReference [ '2088' ],		#time : DateAndTime [ '2018-01-14T19:02:38.977226-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltInspectorRefToIVar,				#isMetaSide : false			},			#name : #execute,			#protocol : #execution,			#sourceCode : 'execute\r\tself systemNavigation\r\t\tbrowseAllAccessesTo: requestor selectedItem item instVarName\r\t\tfrom: requestor selectedItem item hostClass',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2088' ],		#self : OmReference [ '2089' ],		#time : DateAndTime [ '2018-01-14T19:02:38.978809-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltInspectorRefToIVar,				#isMetaSide : false			},			#name : #isActive,			#protocol : #testing,			#sourceCode : 'isActive\r\t^ true',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2089' ],		#self : OmReference [ '2090' ],		#time : DateAndTime [ '2018-01-14T19:02:38.980278-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltInspectorRefToIVar,				#isMetaSide : false			},			#name : #isEnabled,			#protocol : #testing,			#sourceCode : 'isEnabled\r\t^ requestor selectedItem notNil',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2090' ],		#self : OmReference [ '2091' ],		#time : DateAndTime [ '2018-01-14T19:02:38.982071-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltInspectorRefToIVar,				#isMetaSide : false			},			#name : #label,			#protocol : #accessing,			#sourceCode : 'label\r\t^ \'Accesses to \' , requestor selectedItem item instVarName',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2091' ],		#self : OmReference [ '2092' ],		#time : DateAndTime [ '2018-01-14T19:02:38.983764-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltInspectorStoreToIVar,				#isMetaSide : false			},			#name : #execute,			#protocol : #execution,			#sourceCode : 'execute\r\tself systemNavigation\r\t\tbrowseAllStoresInto: requestor selectedItem item instVarName\r\t\tfrom: requestor selectedItem item hostClass',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2092' ],		#self : OmReference [ '2093' ],		#time : DateAndTime [ '2018-01-14T19:02:38.985192-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltInspectorStoreToIVar,				#isMetaSide : false			},			#name : #isActive,			#protocol : #testing,			#sourceCode : 'isActive\r\t^ true',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2093' ],		#self : OmReference [ '2094' ],		#time : DateAndTime [ '2018-01-14T19:02:38.987117-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltInspectorStoreToIVar,				#isMetaSide : false			},			#name : #isEnabled,			#protocol : #testing,			#sourceCode : 'isEnabled\r\t^ requestor selectedItem notNil',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2094' ],		#self : OmReference [ '2095' ],		#time : DateAndTime [ '2018-01-14T19:02:38.988708-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltInspectorStoreToIVar,				#isMetaSide : false			},			#name : #label,			#protocol : #accessing,			#sourceCode : 'label\r\t^ \'Stores into \' , requestor selectedItem item instVarName',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2095' ],		#self : OmReference [ '2096' ],		#time : DateAndTime [ '2018-01-14T19:02:38.990652-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Integer class',				#isMetaSide : true			},			#name : #altInspectorClass,			#protocol : #'*alt-inspector',			#sourceCode : 'altInspectorClass\r\t^ AltIntegerInspector',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2096' ],		#self : OmReference [ '2097' ],		#time : DateAndTime [ '2018-01-14T19:02:38.99235-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'CompiledMethod class',				#isMetaSide : true			},			#name : #altInspectorClass,			#protocol : #'*alt-inspector',			#sourceCode : 'altInspectorClass\r\t^ AltCompiledMethodInspector',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2097' ],		#self : OmReference [ '2098' ],		#time : DateAndTime [ '2018-01-14T19:02:38.994612-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Float class',				#isMetaSide : true			},			#name : #altInspectorClass,			#protocol : #'*alt-inspector',			#sourceCode : 'altInspectorClass\r\t^ AltFloatInspector',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2098' ],		#self : OmReference [ '2099' ],		#time : DateAndTime [ '2018-01-14T19:02:38.996949-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Character class',				#isMetaSide : true			},			#name : #altInspectorClass,			#protocol : #'*alt-inspector',			#sourceCode : 'altInspectorClass\r\t^ AltCharacterInspector',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2099' ],		#self : OmReference [ '2100' ],		#time : DateAndTime [ '2018-01-14T19:02:38.998166-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltAbstractEyeElement class',				#isMetaSide : true			},			#name : #'host:',			#protocol : #'instance creation',			#sourceCode : 'host: anObject \r\t^ self new\r\t\thost: anObject;\r\t\tyourself',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2100' ],		#self : OmReference [ '2101' ],		#time : DateAndTime [ '2018-01-14T19:02:38.999574-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltAbstractEyeElement,				#isMetaSide : false			},			#name : #'=',			#protocol : #comparing,			#sourceCode : '= anObject\r\tself == anObject ifTrue: [ ^ true ].\r\tself class = anObject class ifFalse: [ ^ false ].\r\t^ host == anObject host',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2101' ],		#self : OmReference [ '2102' ],		#time : DateAndTime [ '2018-01-14T19:02:39.000911-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltAbstractEyeElement,				#isMetaSide : false			},			#name : #accessorCode,			#protocol : #accessing,			#sourceCode : 'accessorCode\r\t"Answers a code string to access the value from the inspector"\r\tself subclassResponsibility',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2102' ],		#self : OmReference [ '2103' ],		#time : DateAndTime [ '2018-01-14T19:02:39.002371-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltAbstractEyeElement,				#isMetaSide : false			},			#name : #basicTreeCommands,			#protocol : #commands,			#sourceCode : 'basicTreeCommands\r\t<treeAreaCommand>\r\t^ #(#AltSelectNextItem #AltSelectPreviousItem #AltSelectMoveDown #AltSelectMoveUp #AltInspectorInspect #AltInspectorBrowseFull #AltInspectorExplorePointers #AltInspectorBrowseHierarchy)',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2103' ],		#self : OmReference [ '2104' ],		#time : DateAndTime [ '2018-01-14T19:02:39.00378-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltAbstractEyeElement,				#isMetaSide : false			},			#name : #description,			#protocol : #accessing,			#sourceCode : 'description\r\t^ self value printStringLimitedTo: 2000',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2104' ],		#self : OmReference [ '2105' ],		#time : DateAndTime [ '2018-01-14T19:02:39.005755-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltAbstractEyeElement,				#isMetaSide : false			},			#name : #errorPropertySelectors,			#protocol : #accessing,			#sourceCode : 'errorPropertySelectors\r\t"Return a collection of selectors on this eye-element that are checked against errors. See #withErrorsDo: and #errorSubMenu:"\r\r\t^ #(icon label longLabel description)',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2105' ],		#self : OmReference [ '2106' ],		#time : DateAndTime [ '2018-01-14T19:02:39.007399-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltAbstractEyeElement,				#isMetaSide : false			},			#name : #'errorWhileAccessing:do:',			#protocol : #accessing,			#sourceCode : 'errorWhileAccessing: selector do: aBlock\r\t[ self perform: selector ]\r\t\ton: Error\r\t\tdo: [ :error | aBlock cull: error cull: selector ]',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2106' ],		#self : OmReference [ '2107' ],		#time : DateAndTime [ '2018-01-14T19:02:39.008836-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltAbstractEyeElement,				#isMetaSide : false			},			#name : #hasSelectedObject,			#protocol : #testing,			#sourceCode : 'hasSelectedObject\r\t^ true',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2107' ],		#self : OmReference [ '2108' ],		#time : DateAndTime [ '2018-01-14T19:02:39.010364-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltAbstractEyeElement,				#isMetaSide : false			},			#name : #hash,			#protocol : #comparing,			#sourceCode : 'hash\r\t^ host hash',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2108' ],		#self : OmReference [ '2109' ],		#time : DateAndTime [ '2018-01-14T19:02:39.011796-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltAbstractEyeElement,				#isMetaSide : false			},			#name : #host,			#protocol : #accessing,			#sourceCode : 'host\r\t^ host',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2109' ],		#self : OmReference [ '2110' ],		#time : DateAndTime [ '2018-01-14T19:02:39.013617-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltAbstractEyeElement,				#isMetaSide : false			},			#name : #'host:',			#protocol : #accessing,			#sourceCode : 'host: anObject\r\thost := anObject',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2110' ],		#self : OmReference [ '2111' ],		#time : DateAndTime [ '2018-01-14T19:02:39.016131-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltAbstractEyeElement,				#isMetaSide : false			},			#name : #hostClass,			#protocol : #accessing,			#sourceCode : 'hostClass\r\t^ host class',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2111' ],		#self : OmReference [ '2112' ],		#time : DateAndTime [ '2018-01-14T19:02:39.017827-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltAbstractEyeElement,				#isMetaSide : false			},			#name : #icon,			#protocol : #accessing,			#sourceCode : 'icon\r\t^ (self value iconOrThumbnailOfSize: 16)\r\t\tifNil: [ self value class systemIcon ]',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2112' ],		#self : OmReference [ '2113' ],		#time : DateAndTime [ '2018-01-14T19:02:39.019245-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltAbstractEyeElement,				#isMetaSide : false			},			#name : #inspector,			#protocol : #accessing,			#sourceCode : 'inspector\r\t"Can be customized by an element to directly access the right inspector.\r\tAllow for a context dependent inspector association (i.e. the inspector\r\tfor a collection used as a translation of an object content can be\r\tsomething else than the standard collection inspector)."\r\r\t^ AltItemInspector inspector: self value',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2113' ],		#self : OmReference [ '2114' ],		#time : DateAndTime [ '2018-01-14T19:02:39.020675-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltAbstractEyeElement,				#isMetaSide : false			},			#name : #label,			#protocol : #accessing,			#sourceCode : 'label\r\t"Answers the label associated with this EyeElement"\r\tself subclassResponsibility',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2114' ],		#self : OmReference [ '2115' ],		#time : DateAndTime [ '2018-01-14T19:02:39.022362-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltAbstractEyeElement,				#isMetaSide : false			},			#name : #longLabel,			#protocol : #accessing,			#sourceCode : 'longLabel\r\t"This is used by EyeTreeInspector"\r\t\r\t| description |\r\tdescription := self description.\r\tdescription size > 150\r\t\tifTrue: [ description := description first: 150 ].\r\t^ self label \r\t\tifNotNil: [ :label | label , \': \' , description ] \r\t\tifNil: [ description ]',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2115' ],		#self : OmReference [ '2116' ],		#time : DateAndTime [ '2018-01-14T19:02:39.023886-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltAbstractEyeElement,				#isMetaSide : false			},			#name : #'printOn:',			#protocol : #printing,			#sourceCode : 'printOn: aStream\r\taStream\r\t\tprint: self label;\r\t\t<< \'->\';\r\t\t<< (self value printStringLimitedTo: 50)',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2116' ],		#self : OmReference [ '2117' ],		#time : DateAndTime [ '2018-01-14T19:02:39.025343-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltAbstractEyeElement,				#isMetaSide : false			},			#name : #selectedObject,			#protocol : #accessing,			#sourceCode : 'selectedObject\r\t^ self value',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2117' ],		#self : OmReference [ '2118' ],		#time : DateAndTime [ '2018-01-14T19:02:39.02741-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltAbstractEyeElement,				#isMetaSide : false			},			#name : #value,			#protocol : #accessing,			#sourceCode : 'value\r\t"Answers the object associated with this EyeElement."\r\tself subclassResponsibility',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2118' ],		#self : OmReference [ '2119' ],		#time : DateAndTime [ '2018-01-14T19:02:39.029171-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltAbstractEyeElement,				#isMetaSide : false			},			#name : #'withErrorsDo:',			#protocol : #accessing,			#sourceCode : 'withErrorsDo: aBlock\r\tself errorPropertySelectors\r\t\tdo: [ :selector | \r\t\t\tself errorWhileAccessing: selector do: aBlock ].',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2119' ],		#self : OmReference [ '2120' ],		#time : DateAndTime [ '2018-01-14T19:02:39.03069-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltAnnouncerEyeElement,				#isMetaSide : false			},			#name : #accessorCode,			#protocol : #accessing,			#sourceCode : 'accessorCode\r\t^ self label',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2120' ],		#self : OmReference [ '2121' ],		#time : DateAndTime [ '2018-01-14T19:02:39.031958-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltAnnouncerEyeElement,				#isMetaSide : false			},			#name : #announcements,			#protocol : #accessing,			#sourceCode : 'announcements\r\t^ announcements\r\t\tifNil: [ announcements := OrderedCollection new.\r\t\t\thost ifNotNil: [ self subscribe ].\r\t\t\tannouncements ]',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2121' ],		#self : OmReference [ '2122' ],		#time : DateAndTime [ '2018-01-14T19:02:39.033543-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltAnnouncerEyeElement,				#isMetaSide : false			},			#name : #'host:',			#protocol : #accessing,			#sourceCode : 'host: anAnnouncer\r\tsuper host: anAnnouncer',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2122' ],		#self : OmReference [ '2123' ],		#time : DateAndTime [ '2018-01-14T19:02:39.034951-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltAnnouncerEyeElement,				#isMetaSide : false			},			#name : #label,			#protocol : #accessing,			#sourceCode : 'label\r\t^ \'annnouncements\'',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2123' ],		#self : OmReference [ '2124' ],		#time : DateAndTime [ '2018-01-14T19:02:39.036774-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltAnnouncerEyeElement,				#isMetaSide : false			},			#name : #release,			#protocol : #initialize-release,			#sourceCode : 'release\r\tannouncements ifNotNil: [ host unsubscribe: announcements ].\r\tsuper release',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2124' ],		#self : OmReference [ '2125' ],		#time : DateAndTime [ '2018-01-14T19:02:39.038457-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltAnnouncerEyeElement,				#isMetaSide : false			},			#name : #subscribe,			#protocol : #initialize-release,			#sourceCode : 'subscribe\r\thost when: Announcement send: #add: to: announcements',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2125' ],		#self : OmReference [ '2126' ],		#time : DateAndTime [ '2018-01-14T19:02:39.039971-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltAnnouncerEyeElement,				#isMetaSide : false			},			#name : #value,			#protocol : #accessing,			#sourceCode : 'value\r\t^ self announcements',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2126' ],		#self : OmReference [ '2127' ],		#time : DateAndTime [ '2018-01-14T19:02:39.041453-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltBasicIndexedEyeElement class',				#isMetaSide : true			},			#name : #'host:index:',			#protocol : #'instance creation',			#sourceCode : 'host: anObject index: index\r\t^ (self host: anObject) index: index',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2127' ],		#self : OmReference [ '2128' ],		#time : DateAndTime [ '2018-01-14T19:02:39.042743-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltBasicIndexedEyeElement,				#isMetaSide : false			},			#name : #'=',			#protocol : #comparing,			#sourceCode : '= anObject\r\t^ super = anObject and: [ index = anObject index ]',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2128' ],		#self : OmReference [ '2129' ],		#time : DateAndTime [ '2018-01-14T19:02:39.044091-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltBasicIndexedEyeElement,				#isMetaSide : false			},			#name : #accessorCode,			#protocol : #accessing,			#sourceCode : 'accessorCode\r\t^ \'(self basicAt: \', self index asString, \')\'',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2129' ],		#self : OmReference [ '2130' ],		#time : DateAndTime [ '2018-01-14T19:02:39.045691-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltBasicIndexedEyeElement,				#isMetaSide : false			},			#name : #hash,			#protocol : #comparing,			#sourceCode : 'hash\r\t^ index hash',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2130' ],		#self : OmReference [ '2131' ],		#time : DateAndTime [ '2018-01-14T19:02:39.048265-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltBasicIndexedEyeElement,				#isMetaSide : false			},			#name : #index,			#protocol : #accessing,			#sourceCode : 'index\r\t^ index',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2131' ],		#self : OmReference [ '2132' ],		#time : DateAndTime [ '2018-01-14T19:02:39.049884-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltBasicIndexedEyeElement,				#isMetaSide : false			},			#name : #'index:',			#protocol : #accessing,			#sourceCode : 'index: anObject\r\tindex := anObject',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2132' ],		#self : OmReference [ '2133' ],		#time : DateAndTime [ '2018-01-14T19:02:39.051624-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltBasicIndexedEyeElement,				#isMetaSide : false			},			#name : #label,			#protocol : #accessing,			#sourceCode : 'label\r\t^ self index printString',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2133' ],		#self : OmReference [ '2134' ],		#time : DateAndTime [ '2018-01-14T19:02:39.053287-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltBasicIndexedEyeElement,				#isMetaSide : false			},			#name : #'save:',			#protocol : #action,			#sourceCode : 'save: aValue\r\tself host basicAt: self index put: aValue',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2134' ],		#self : OmReference [ '2135' ],		#time : DateAndTime [ '2018-01-14T19:02:39.055052-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltBasicIndexedEyeElement,				#isMetaSide : false			},			#name : #value,			#protocol : #accessing,			#sourceCode : 'value\r\t^ self host basicAt: self index',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2135' ],		#self : OmReference [ '2136' ],		#time : DateAndTime [ '2018-01-14T19:02:39.056606-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltBagEyeElement,				#isMetaSide : false			},			#name : #accessorCode,			#protocol : #accessing,			#sourceCode : 'accessorCode\r\t^ \'(self occurrencesOf: \', self label, \')\'',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2136' ],		#self : OmReference [ '2137' ],		#time : DateAndTime [ '2018-01-14T19:02:39.057961-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltBagEyeElement,				#isMetaSide : false			},			#name : #'save:',			#protocol : #action,			#sourceCode : 'save: aValue\r\tself host valuesAndCounts at: self index put: aValue',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2137' ],		#self : OmReference [ '2138' ],		#time : DateAndTime [ '2018-01-14T19:02:39.059937-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltBagEyeElement,				#isMetaSide : false			},			#name : #value,			#protocol : #accessing,			#sourceCode : 'value\r\t^ self host valuesAndCounts at: self index',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2138' ],		#self : OmReference [ '2139' ],		#time : DateAndTime [ '2018-01-14T19:02:39.061763-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltIndexedEyeElement,				#isMetaSide : false			},			#name : #accessorCode,			#protocol : #accessing,			#sourceCode : 'accessorCode\r\t^ \'(self at: \', self index asString, \')\'',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2139' ],		#self : OmReference [ '2140' ],		#time : DateAndTime [ '2018-01-14T19:02:39.063196-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltIndexedEyeElement,				#isMetaSide : false			},			#name : #'save:',			#protocol : #action,			#sourceCode : 'save: aValue\r\tself host at: self index put: aValue',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2140' ],		#self : OmReference [ '2141' ],		#time : DateAndTime [ '2018-01-14T19:02:39.064589-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltIndexedEyeElement,				#isMetaSide : false			},			#name : #value,			#protocol : #accessing,			#sourceCode : 'value\r\t^ self host at: self index',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2141' ],		#self : OmReference [ '2142' ],		#time : DateAndTime [ '2018-01-14T19:02:39.065941-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltSetEyeElement class',				#isMetaSide : true			},			#name : #'host:index:externalIndex:',			#protocol : #'instance creation',			#sourceCode : 'host: anObject index: index externalIndex: externalIndex\r\t^ (self host: anObject)\r\t\tindex: index;\r\t\texternalIndex: externalIndex;\r\t\tyourself',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2142' ],		#self : OmReference [ '2143' ],		#time : DateAndTime [ '2018-01-14T19:02:39.067137-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltSetEyeElement,				#isMetaSide : false			},			#name : #'=',			#protocol : #comparing,			#sourceCode : '= anObject\r\tself == anObject\r\t\tifTrue: [ ^ true ].\r\tself class = anObject class\r\t\tifFalse: [ ^ false ].\r\t^ host == anObject host\r\t\tand: [ externalIndex = anObject externalIndex ]',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2143' ],		#self : OmReference [ '2144' ],		#time : DateAndTime [ '2018-01-14T19:02:39.068254-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltSetEyeElement,				#isMetaSide : false			},			#name : #accessorCode,			#protocol : #accessing,			#sourceCode : 'accessorCode\r\t^ \'(self array at: \', self index asString, \')\'',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2144' ],		#self : OmReference [ '2145' ],		#time : DateAndTime [ '2018-01-14T19:02:39.070493-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltSetEyeElement,				#isMetaSide : false			},			#name : #externalIndex,			#protocol : #accessing,			#sourceCode : 'externalIndex\r\t^ externalIndex',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2145' ],		#self : OmReference [ '2146' ],		#time : DateAndTime [ '2018-01-14T19:02:39.072042-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltSetEyeElement,				#isMetaSide : false			},			#name : #'externalIndex:',			#protocol : #accessing,			#sourceCode : 'externalIndex: anObject\r\texternalIndex := anObject',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2146' ],		#self : OmReference [ '2147' ],		#time : DateAndTime [ '2018-01-14T19:02:39.073422-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltSetEyeElement,				#isMetaSide : false			},			#name : #hash,			#protocol : #comparing,			#sourceCode : 'hash\r\t^ externalIndex hash',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2147' ],		#self : OmReference [ '2148' ],		#time : DateAndTime [ '2018-01-14T19:02:39.07475-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltSetEyeElement,				#isMetaSide : false			},			#name : #label,			#protocol : #accessing,			#sourceCode : 'label\r\t^ self externalIndex printString',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2148' ],		#self : OmReference [ '2149' ],		#time : DateAndTime [ '2018-01-14T19:02:39.076079-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltSetEyeElement,				#isMetaSide : false			},			#name : #'save:',			#protocol : #action,			#sourceCode : 'save: aValue\r\t| oldElement |\r\toldElement := self host array at: self index.\r\tself host \r\t\tremove: oldElement;\r\t\tadd: aValue.',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2149' ],		#self : OmReference [ '2150' ],		#time : DateAndTime [ '2018-01-14T19:02:39.077547-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltSetEyeElement,				#isMetaSide : false			},			#name : #value,			#protocol : #accessing,			#sourceCode : 'value\r\t^ self host array at: self index',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2150' ],		#self : OmReference [ '2151' ],		#time : DateAndTime [ '2018-01-14T19:02:39.079328-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltClassEyeElement,				#isMetaSide : false			},			#name : #accessorCode,			#protocol : #accessing,			#sourceCode : 'accessorCode\r\t^ \'self class\'',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2151' ],		#self : OmReference [ '2152' ],		#time : DateAndTime [ '2018-01-14T19:02:39.080573-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltClassEyeElement,				#isMetaSide : false			},			#name : #label,			#protocol : #accessing,			#sourceCode : 'label\r\t^ \'class\'',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2152' ],		#self : OmReference [ '2153' ],		#time : DateAndTime [ '2018-01-14T19:02:39.08189-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltClassEyeElement,				#isMetaSide : false			},			#name : #value,			#protocol : #accessing,			#sourceCode : 'value\r\t^ self host class',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2153' ],		#self : OmReference [ '2154' ],		#time : DateAndTime [ '2018-01-14T19:02:39.083225-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltContextEyeElement,				#isMetaSide : false			},			#name : #accessorCode,			#protocol : #accessing,			#sourceCode : 'accessorCode\r\t^ \'self\'',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2154' ],		#self : OmReference [ '2155' ],		#time : DateAndTime [ '2018-01-14T19:02:39.084323-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltContextEyeElement,				#isMetaSide : false			},			#name : #label,			#protocol : #accessing,			#sourceCode : 'label\r\t^ \'thisContext\'',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2155' ],		#self : OmReference [ '2156' ],		#time : DateAndTime [ '2018-01-14T19:02:39.085732-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltContextEyeElement,				#isMetaSide : false			},			#name : #value,			#protocol : #accessing,			#sourceCode : 'value\r\t^ host',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2156' ],		#self : OmReference [ '2157' ],		#time : DateAndTime [ '2018-01-14T19:02:39.087349-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltContextTempEyeElement class',				#isMetaSide : true			},			#name : #'host:tempName:tempIndex:',			#protocol : #'instance creation',			#sourceCode : 'host: anObject tempName: aString tempIndex: int\r\t^ (self host: anObject)\r\t\ttempName: aString;\r\t\ttempIndex: int;\r\t\tyourself',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2157' ],		#self : OmReference [ '2158' ],		#time : DateAndTime [ '2018-01-14T19:02:39.089078-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltContextTempEyeElement,				#isMetaSide : false			},			#name : #'=',			#protocol : #comparing,			#sourceCode : '= anObject\r\tself == anObject\r\t\tifTrue: [ ^ true ].\r\tself class = anObject class\r\t\tifFalse: [ ^ false ].\r\t^ host == anObject host and: [ tempName = anObject tempName ]',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2158' ],		#self : OmReference [ '2159' ],		#time : DateAndTime [ '2018-01-14T19:02:39.090424-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltContextTempEyeElement,				#isMetaSide : false			},			#name : #accessorCode,			#protocol : #accessing,			#sourceCode : 'accessorCode\r\t^ \'(self namedTempAt: \', self tempIndex printString, \')\'',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2159' ],		#self : OmReference [ '2160' ],		#time : DateAndTime [ '2018-01-14T19:02:39.091721-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltContextTempEyeElement,				#isMetaSide : false			},			#name : #hash,			#protocol : #comparing,			#sourceCode : 'hash\r\t^ (host hash + tempName hash) hashMultiply',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2160' ],		#self : OmReference [ '2161' ],		#time : DateAndTime [ '2018-01-14T19:02:39.093243-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltContextTempEyeElement,				#isMetaSide : false			},			#name : #label,			#protocol : #accessing,			#sourceCode : 'label\r\t^ self tempName',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2161' ],		#self : OmReference [ '2162' ],		#time : DateAndTime [ '2018-01-14T19:02:39.094672-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltContextTempEyeElement,				#isMetaSide : false			},			#name : #'save:',			#protocol : #action,			#sourceCode : 'save: aValue\r\tself host namedTempAt: self tempIndex put: aValue',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2162' ],		#self : OmReference [ '2163' ],		#time : DateAndTime [ '2018-01-14T19:02:39.095982-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltContextTempEyeElement,				#isMetaSide : false			},			#name : #tempIndex,			#protocol : #accessing,			#sourceCode : 'tempIndex\r\t^ tempIndex',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2163' ],		#self : OmReference [ '2164' ],		#time : DateAndTime [ '2018-01-14T19:02:39.097257-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltContextTempEyeElement,				#isMetaSide : false			},			#name : #'tempIndex:',			#protocol : #accessing,			#sourceCode : 'tempIndex: anObject\r\ttempIndex := anObject',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2164' ],		#self : OmReference [ '2165' ],		#time : DateAndTime [ '2018-01-14T19:02:39.098973-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltContextTempEyeElement,				#isMetaSide : false			},			#name : #tempName,			#protocol : #accessing,			#sourceCode : 'tempName\r\t^ tempName',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2165' ],		#self : OmReference [ '2166' ],		#time : DateAndTime [ '2018-01-14T19:02:39.100237-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltContextTempEyeElement,				#isMetaSide : false			},			#name : #'tempName:',			#protocol : #accessing,			#sourceCode : 'tempName: anObject\r\ttempName := anObject',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2166' ],		#self : OmReference [ '2167' ],		#time : DateAndTime [ '2018-01-14T19:02:39.10157-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltContextTempEyeElement,				#isMetaSide : false			},			#name : #value,			#protocol : #accessing,			#sourceCode : 'value\r\t^ [ self host tempNamed: self tempName ]\r\t\ton: Error\r\t\tdo: [  ]',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2167' ],		#self : OmReference [ '2168' ],		#time : DateAndTime [ '2018-01-14T19:02:39.102896-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltDynamicEyeElement class',				#isMetaSide : true			},			#name : #'host:label:description:value:',			#protocol : #'instance creation',			#sourceCode : 'host: anObject label: aLabel description: aBlock value: aValue \r\t^ (self host: anObject label: aLabel value: aValue)\r\t\tdescription: aBlock;\r\t\tyourself',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2168' ],		#self : OmReference [ '2169' ],		#time : DateAndTime [ '2018-01-14T19:02:39.104329-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltDynamicEyeElement class',				#isMetaSide : true			},			#name : #'host:label:value:',			#protocol : #'instance creation',			#sourceCode : 'host: anObject label: aLabel value: aValue\r\t^ (self host: anObject)\r\t\tlabel: aLabel;\r\t\tvalue: aValue;\r\t\tyourself',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2169' ],		#self : OmReference [ '2170' ],		#time : DateAndTime [ '2018-01-14T19:02:39.10577-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltDynamicEyeElement class',				#isMetaSide : true			},			#name : #'host:value:',			#protocol : #'instance creation',			#sourceCode : 'host: anObject value: aValue\r\t^ (self host: anObject)\r\t\tvalue: aValue;\r\t\tyourself',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2170' ],		#self : OmReference [ '2171' ],		#time : DateAndTime [ '2018-01-14T19:02:39.107461-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltDynamicEyeElement,				#isMetaSide : false			},			#name : #'=',			#protocol : #comparing,			#sourceCode : '= anObject\r\t^ super = anObject and: [ self label = anObject label ]',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2171' ],		#self : OmReference [ '2172' ],		#time : DateAndTime [ '2018-01-14T19:02:39.108746-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltDynamicEyeElement,				#isMetaSide : false			},			#name : #accessorCode,			#protocol : #accessing,			#sourceCode : 'accessorCode\r\t^ self description',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2172' ],		#self : OmReference [ '2173' ],		#time : DateAndTime [ '2018-01-14T19:02:39.11022-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltDynamicEyeElement,				#isMetaSide : false			},			#name : #description,			#protocol : #accessing,			#sourceCode : 'description\r\t"For big value to print, overwrite description block"\r\r\tdescription ifNil: [ ^ self value asString ].\r\t^ description cull: self value',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2173' ],		#self : OmReference [ '2174' ],		#time : DateAndTime [ '2018-01-14T19:02:39.111479-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltDynamicEyeElement,				#isMetaSide : false			},			#name : #'description:',			#protocol : #accessing,			#sourceCode : 'description: aBlock\r\tdescription := aBlock',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2174' ],		#self : OmReference [ '2175' ],		#time : DateAndTime [ '2018-01-14T19:02:39.112731-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltDynamicEyeElement,				#isMetaSide : false			},			#name : #hash,			#protocol : #comparing,			#sourceCode : 'hash\r\t^ (super hash + value hash) hashMultiply',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2175' ],		#self : OmReference [ '2176' ],		#time : DateAndTime [ '2018-01-14T19:02:39.113994-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltDynamicEyeElement,				#isMetaSide : false			},			#name : #label,			#protocol : #accessing,			#sourceCode : 'label\r\t^ label value',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2176' ],		#self : OmReference [ '2177' ],		#time : DateAndTime [ '2018-01-14T19:02:39.115251-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltDynamicEyeElement,				#isMetaSide : false			},			#name : #'label:',			#protocol : #accessing,			#sourceCode : 'label: anObject\r\tlabel := anObject',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2177' ],		#self : OmReference [ '2178' ],		#time : DateAndTime [ '2018-01-14T19:02:39.117215-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltDynamicEyeElement,				#isMetaSide : false			},			#name : #'save:',			#protocol : #action,			#sourceCode : 'save: aValue\r\tsave value: aValue',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2178' ],		#self : OmReference [ '2179' ],		#time : DateAndTime [ '2018-01-14T19:02:39.118683-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltDynamicEyeElement,				#isMetaSide : false			},			#name : #'saveBlock:',			#protocol : #accessing,			#sourceCode : 'saveBlock: anObject\r\tsave := anObject',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2179' ],		#self : OmReference [ '2180' ],		#time : DateAndTime [ '2018-01-14T19:02:39.12002-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltDynamicEyeElement,				#isMetaSide : false			},			#name : #value,			#protocol : #accessing,			#sourceCode : 'value\r\t^ value value',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2180' ],		#self : OmReference [ '2181' ],		#time : DateAndTime [ '2018-01-14T19:02:39.121676-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltDynamicEyeElement,				#isMetaSide : false			},			#name : #'value:',			#protocol : #accessing,			#sourceCode : 'value: anObject\r\tvalue := anObject',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2181' ],		#self : OmReference [ '2182' ],		#time : DateAndTime [ '2018-01-14T19:02:39.12307-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMemoizedEyeElement,				#isMetaSide : false			},			#name : #value,			#protocol : #accessing,			#sourceCode : 'value\r\t^ cache ifNil: [ cache := value value ]',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2182' ],		#self : OmReference [ '2183' ],		#time : DateAndTime [ '2018-01-14T19:02:39.124281-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltInstanceVariableEyeElement class',				#isMetaSide : true			},			#name : #'host:instVarName:',			#protocol : #'instance creation',			#sourceCode : 'host: anObject instVarName: aString\r\t^ (self host: anObject) instVarName: aString',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2183' ],		#self : OmReference [ '2184' ],		#time : DateAndTime [ '2018-01-14T19:02:39.125637-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltInstanceVariableEyeElement,				#isMetaSide : false			},			#name : #'=',			#protocol : #comparing,			#sourceCode : '= anObject\r\t^ super = anObject and: [ instVarName = anObject instVarName ]',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2184' ],		#self : OmReference [ '2185' ],		#time : DateAndTime [ '2018-01-14T19:02:39.127212-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltInstanceVariableEyeElement,				#isMetaSide : false			},			#name : #accessorCode,			#protocol : #accessing,			#sourceCode : 'accessorCode\r\t^ self instVarName',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2185' ],		#self : OmReference [ '2186' ],		#time : DateAndTime [ '2018-01-14T19:02:39.128513-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltInstanceVariableEyeElement,				#isMetaSide : false			},			#name : #hash,			#protocol : #comparing,			#sourceCode : 'hash\r\t^ super hash bitXor: instVarName hash',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2186' ],		#self : OmReference [ '2187' ],		#time : DateAndTime [ '2018-01-14T19:02:39.129883-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltInstanceVariableEyeElement,				#isMetaSide : false			},			#name : #instVarName,			#protocol : #accessing,			#sourceCode : 'instVarName\r\t^ instVarName',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2187' ],		#self : OmReference [ '2188' ],		#time : DateAndTime [ '2018-01-14T19:02:39.131128-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltInstanceVariableEyeElement,				#isMetaSide : false			},			#name : #'instVarName:',			#protocol : #accessing,			#sourceCode : 'instVarName: aString\r\tinstVarName := aString',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2188' ],		#self : OmReference [ '2189' ],		#time : DateAndTime [ '2018-01-14T19:02:39.132458-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltInstanceVariableEyeElement,				#isMetaSide : false			},			#name : #instanceCommands,			#protocol : #commands,			#sourceCode : 'instanceCommands\r\t<treeAreaCommand>\r\t^ #(#AltInspectorRefToIVar #AltInspectorStoreToIVar)',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2189' ],		#self : OmReference [ '2190' ],		#time : DateAndTime [ '2018-01-14T19:02:39.133899-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltInstanceVariableEyeElement,				#isMetaSide : false			},			#name : #label,			#protocol : #accessing,			#sourceCode : 'label\r\t^ self instVarName',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2190' ],		#self : OmReference [ '2191' ],		#time : DateAndTime [ '2018-01-14T19:02:39.135579-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltInstanceVariableEyeElement,				#isMetaSide : false			},			#name : #'save:',			#protocol : #action,			#sourceCode : 'save: aValue\r\tself host instVarNamed: self instVarName put: aValue',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2191' ],		#self : OmReference [ '2192' ],		#time : DateAndTime [ '2018-01-14T19:02:39.136934-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltInstanceVariableEyeElement,				#isMetaSide : false			},			#name : #value,			#protocol : #accessing,			#sourceCode : 'value\r\t^ self host readSlotNamed: self instVarName',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2192' ],		#self : OmReference [ '2193' ],		#time : DateAndTime [ '2018-01-14T19:02:39.138625-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltPointerEyeElement class',				#isMetaSide : true			},			#name : #'host:value:',			#protocol : #'instance creation',			#sourceCode : 'host: anObject value: aValue\r\t^(self host: anObject) value: aValue',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2193' ],		#self : OmReference [ '2194' ],		#time : DateAndTime [ '2018-01-14T19:02:39.140039-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPointerEyeElement,				#isMetaSide : false			},			#name : #accessorCode,			#protocol : #accessing,			#sourceCode : 'accessorCode\r\t^ self label ',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2194' ],		#self : OmReference [ '2195' ],		#time : DateAndTime [ '2018-01-14T19:02:39.14132-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPointerEyeElement,				#isMetaSide : false			},			#name : #'host:',			#protocol : #accessing,			#sourceCode : 'host: anObject\r \thost := (EyePointerWrapper wrap: anObject)\r\t',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2195' ],		#self : OmReference [ '2196' ],		#time : DateAndTime [ '2018-01-14T19:02:39.142603-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPointerEyeElement,				#isMetaSide : false			},			#name : #label,			#protocol : #accessing,			#sourceCode : 'label\r \t^ value printString\r',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2196' ],		#self : OmReference [ '2197' ],		#time : DateAndTime [ '2018-01-14T19:02:39.143898-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPointerEyeElement,				#isMetaSide : false			},			#name : #longLabel,			#protocol : #accessing,			#sourceCode : 'longLabel\r \t^ value identityHash asString, \': \', value printString\r',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2197' ],		#self : OmReference [ '2198' ],		#time : DateAndTime [ '2018-01-14T19:02:39.145628-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPointerEyeElement,				#isMetaSide : false			},			#name : #value,			#protocol : #accessing,			#sourceCode : 'value\r\t^value',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2198' ],		#self : OmReference [ '2199' ],		#time : DateAndTime [ '2018-01-14T19:02:39.146965-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltPointerEyeElement,				#isMetaSide : false			},			#name : #'value:',			#protocol : #accessing,			#sourceCode : 'value: anObject\r \tvalue := (EyePointerWrapper wrap: anObject)',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2199' ],		#self : OmReference [ '2200' ],		#time : DateAndTime [ '2018-01-14T19:02:39.148292-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltRootEyeElement,				#isMetaSide : false			},			#name : #accessorCode,			#protocol : #accessing,			#sourceCode : 'accessorCode\r\t^ self label',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2200' ],		#self : OmReference [ '2201' ],		#time : DateAndTime [ '2018-01-14T19:02:39.149503-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltRootEyeElement,				#isMetaSide : false			},			#name : #label,			#protocol : #accessing,			#sourceCode : 'label\r\t^ \'root\'',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2201' ],		#self : OmReference [ '2202' ],		#time : DateAndTime [ '2018-01-14T19:02:39.150903-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltRootEyeElement,				#isMetaSide : false			},			#name : #value,			#protocol : #accessing,			#sourceCode : 'value\r\t^ host',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2202' ],		#self : OmReference [ '2203' ],		#time : DateAndTime [ '2018-01-14T19:02:39.152182-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltSelfEyeElement,				#isMetaSide : false			},			#name : #accessorCode,			#protocol : #accessing,			#sourceCode : 'accessorCode\r\t^ self label',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2203' ],		#self : OmReference [ '2204' ],		#time : DateAndTime [ '2018-01-14T19:02:39.153354-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltSelfEyeElement,				#isMetaSide : false			},			#name : #label,			#protocol : #accessing,			#sourceCode : 'label\r\t^ \'self\'',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2204' ],		#self : OmReference [ '2205' ],		#time : DateAndTime [ '2018-01-14T19:02:39.155628-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltSelfEyeElement,				#isMetaSide : false			},			#name : #value,			#protocol : #accessing,			#sourceCode : 'value\r\t^ host',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2205' ],		#self : OmReference [ '2206' ],		#time : DateAndTime [ '2018-01-14T19:02:39.15734-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltInspector class',				#isMetaSide : true			},			#name : #'altInspectorSettingsOn:',			#protocol : #settings,			#sourceCode : 'altInspectorSettingsOn: aBuilder\r\t<systemsettings>\r\t(aBuilder nodeClass: AltSettingDeclaration name: #defaultInspector)\r\t\tlabel: \'Set as default inspector\' translated;\r\t\tparent: #AltBrowser;\r\t\ttarget: self;\r\t\tdescription: \'Set AltInspector as the default inspector\' translated',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2206' ],		#self : OmReference [ '2207' ],		#time : DateAndTime [ '2018-01-14T19:02:39.158571-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltInspector class',				#isMetaSide : true			},			#name : #defaultInspector,			#protocol : #settings,			#sourceCode : 'defaultInspector\r\t^ Smalltalk tools inspector == self',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2207' ],		#self : OmReference [ '2208' ],		#time : DateAndTime [ '2018-01-14T19:02:39.159923-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltInspector class',				#isMetaSide : true			},			#name : #'defaultInspector:',			#protocol : #settings,			#sourceCode : 'defaultInspector: aBoolean\r\taBoolean\r\t\tifTrue: [ Smalltalk tools register: self as: #inspector ]\r\t\tifFalse: [ EyeInspector registerToolsOn: Smalltalk tools ]',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2208' ],		#self : OmReference [ '2209' ],		#time : DateAndTime [ '2018-01-14T19:02:39.161256-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltInspector class',				#isMetaSide : true			},			#name : #'directOn:',			#protocol : #'instance creation',			#sourceCode : 'directOn: anObject\r\t"Note how we create the different nodes before expanding and selecting; this is important."\r\r\t| target inspector |\r\ttarget := AltEyeTreeItemModel on: (AltRootEyeElement host: anObject).\r\tinspector := self new object: target.\r\ttarget expand.\r\ttarget contents first select.\r\t^ inspector',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2209' ],		#self : OmReference [ '2210' ],		#time : DateAndTime [ '2018-01-14T19:02:39.162601-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltInspector class',				#isMetaSide : true			},			#name : #'explore:',			#protocol : #'instance creation',			#sourceCode : 'explore: anObject\r\t"Create and open."\r\r\t^ (self on: anObject) open',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2210' ],		#self : OmReference [ '2211' ],		#time : DateAndTime [ '2018-01-14T19:02:39.163886-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltInspector class',				#isMetaSide : true			},			#name : #initialize,			#protocol : #initialize-release,			#sourceCode : 'initialize\r\t"Add ourselves to registry. See [Smalltalk tools]"\r\r\tSmalltalk tools register: self as: #inspector',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2211' ],		#self : OmReference [ '2212' ],		#time : DateAndTime [ '2018-01-14T19:02:39.165809-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltInspector class',				#isMetaSide : true			},			#name : #'inspect:',			#protocol : #'instance creation',			#sourceCode : 'inspect: anObject\r\t"Create and open."\r\r\t^ (self on: anObject) open',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2212' ],		#self : OmReference [ '2213' ],		#time : DateAndTime [ '2018-01-14T19:02:39.167166-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltInspector class',				#isMetaSide : true			},			#name : #'on:',			#protocol : #'instance creation',			#sourceCode : 'on: anObject\r\t"Note how we create the different nodes before expanding and selecting; this is important."\r\r\t| target inspector |\r\ttarget := AltEyeTreeItemModel on: (AltRootEyeElement host: anObject).\r\tinspector := self new\r\t\tobject:\r\t\t\t(AltEyeTreeItemModel new\r\t\t\t\tcontents: (Array with: target);\r\t\t\t\tyourself).\r\ttarget expand.\r\ttarget select.\r\t^ inspector',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2213' ],		#self : OmReference [ '2214' ],		#time : DateAndTime [ '2018-01-14T19:02:39.168447-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltInspector class',				#isMetaSide : true			},			#name : #'onElement:',			#protocol : #'instance creation',			#sourceCode : 'onElement: anAltEyeElement\r\t"In this method, we already know which element we will use."\r\r\t| target inspector |\r\ttarget := AltEyeTreeItemModel on: anAltEyeElement.\r\tinspector := self new object: target.\r\ttarget expand.\r\ttarget contents first select.\r\t^ inspector',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2214' ],		#self : OmReference [ '2215' ],		#time : DateAndTime [ '2018-01-14T19:02:39.169683-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltInspector class',				#isMetaSide : true			},			#name : #taskbarIcon,			#protocol : #accessing,			#sourceCode : 'taskbarIcon\r\t^ Smalltalk ui icons smallInspectItIcon',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2215' ],		#self : OmReference [ '2216' ],		#time : DateAndTime [ '2018-01-14T19:02:39.171111-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltInspector,				#isMetaSide : false			},			#name : #aboutToStyle,			#protocol : #accessing,			#sourceCode : 'aboutToStyle\r\t^ true',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2216' ],		#self : OmReference [ '2217' ],		#time : DateAndTime [ '2018-01-14T19:02:39.17262-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltInspector,				#isMetaSide : false			},			#name : #'aboutToStyle:',			#protocol : #accessing,			#sourceCode : 'aboutToStyle: aBoolean\r\t^ true',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2217' ],		#self : OmReference [ '2218' ],		#time : DateAndTime [ '2018-01-14T19:02:39.174539-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltInspector,				#isMetaSide : false			},			#name : #'buildTextMenu:',			#protocol : #shortcuts,			#sourceCode : 'buildTextMenu: aMenu\r\t| t |\r\tt := false.\r\t(Pragma allNamed: #textAreaCommand from: self class to: self class)\r\t\tdo: [ :e | \r\t\t\tt\r\t\t\t\tifTrue: [ aMenu addLine ]\r\t\t\t\tifFalse: [ t := true ].\r\t\t\t(self perform: e methodSelector)\r\t\t\t\tdo: [ :c | (c asClass on: self textMorph for: self) addItemToMenu: aMenu ] ].\r\t^ aMenu',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2218' ],		#self : OmReference [ '2219' ],		#time : DateAndTime [ '2018-01-14T19:02:39.175987-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltInspector,				#isMetaSide : false			},			#name : #'buildTextShortcutsOn:with:',			#protocol : #shortcuts,			#sourceCode : 'buildTextShortcutsOn: aKMDispatcher with: aRequestor\r\t"This is an attempt at handling shortcuts... Which works, with the help of a custom KMDispatcher."\r\r\t(Pragma allNamed: #textAreaCommand from: self class to: self class)\r\t\tdo: [ :e | \r\t\t\t(self perform: e methodSelector)\r\t\t\t\tdo: [ :c | \r\t\t\t\t\t| command |\r\t\t\t\t\tcommand := c asClass on: aRequestor textMorph for: aRequestor.\r\t\t\t\t\tcommand buildShortcut: aKMDispatcher ] ]',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2219' ],		#self : OmReference [ '2220' ],		#time : DateAndTime [ '2018-01-14T19:02:39.177282-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltInspector,				#isMetaSide : false			},			#name : #'buildTreeMenu:',			#protocol : #shortcuts,			#sourceCode : 'buildTreeMenu: aMenu\r\t"The default tree menu."\r\r\tself selectedItem buildTreeMenu: aMenu on: treeMorph for: self.\r\t^ aMenu',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2220' ],		#self : OmReference [ '2221' ],		#time : DateAndTime [ '2018-01-14T19:02:39.178544-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltInspector,				#isMetaSide : false			},			#name : #'buildTreeShortcutsOn:with:',			#protocol : #shortcuts,			#sourceCode : 'buildTreeShortcutsOn: aKMDispatcher with: aRequestor\r\t"This is an attempt at handling shortcuts... Which works, with the help of a custom KMDispatcher."\r\r\tself selectedItem\r\t\tifNotNil: [ :s | s buildTreeShortcutsOn: aKMDispatcher for: aRequestor ]',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2221' ],		#self : OmReference [ '2222' ],		#time : DateAndTime [ '2018-01-14T19:02:39.179858-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltInspector,				#isMetaSide : false			},			#name : #clipboardCommands,			#protocol : #commands,			#sourceCode : 'clipboardCommands\r\t<textAreaCommand>\r\t^ #(#AltCutTextCommand #AltCopyTextCommand #AltPasteTextCommand #AltSelectAllTextCommand)',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2222' ],		#self : OmReference [ '2223' ],		#time : DateAndTime [ '2018-01-14T19:02:39.181217-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltInspector,				#isMetaSide : false			},			#name : #delete,			#protocol : #initialization,			#sourceCode : 'delete\r\tself release',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2223' ],		#self : OmReference [ '2224' ],		#time : DateAndTime [ '2018-01-14T19:02:39.182615-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltInspector,				#isMetaSide : false			},			#name : #executeCommands,			#protocol : #commands,			#sourceCode : 'executeCommands\r\t<textAreaCommand>\r\t^ #(#AltDoItTextCommand #AltPrintItTextCommand #AltInspectItTextCommand #AltDebugItTextCommand #AltParenthesisTextCommand #AltSquareBracketsTextCommand #AltDoubleQuotesTextCommand #AltCurlyBracketsTextCommand)',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2224' ],		#self : OmReference [ '2225' ],		#time : DateAndTime [ '2018-01-14T19:02:39.184769-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltInspector,				#isMetaSide : false			},			#name : #groupMorph,			#protocol : #'user interface',			#sourceCode : 'groupMorph\r\t"Build the group morph containing the two sub-windows."\r\r\t| group |\r\tgroup := Morph new\r\t\thResizing: #spaceFill;\r\t\tvResizing: #spaceFill;\r\t\tfillStyle: Color transparent;\r\t\tchangeProportionalLayout;\r\t\tyourself.\t"non pane color tracking"\r\tself textMorph styler workspace: self.\r\tself treeMorph\r\t\ton: #keyStroke\r\t\tsend: #startSearch:for:\r\t\tto: AltKeyboardSearchInTree.\r\tgroup\r\t\taddMorph: self treeMorph\r\t\tfullFrame:\r\t\t\t(AltLayoutFrame\r\t\t\t\tfractions: (0.0 @ 0.0 corner: 1.0 @ 0.8)\r\t\t\t\ttopLeftOffsets: 1 @ 0\r\t\t\t\tbottomRightOffsets: -1 @ -1).\r\tgroup\r\t\taddMorph: self textMorph\r\t\tfullFrame:\r\t\t\t(AltLayoutFrame\r\t\t\t\tfractions: (0.0 @ 0.8 corner: 1.0 @ 1.0)\r\t\t\t\ttopLeftOffsets: 1 @ 1\r\t\t\t\tbottomRightOffsets: -1 @ 0).\r\tgroup\r\t\taddMorph:\r\t\t\t(ProportionalSplitterMorph new\r\t\t\t\tbeSplitsTopAndBottom;\r\t\t\t\tlayoutFrame:\r\t\t\t\t\t(AltLayoutFrame\r\t\t\t\t\t\tfractions: (0.0 @ 0.8 corner: 1.0 @ 0.8)\r\t\t\t\t\t\ttopLeftOffsets: -1 @ -1\r\t\t\t\t\t\tbottomRightOffsets: 1 @ 1);\r\t\t\t\taddLeftOrTop: self treeMorph;\r\t\t\t\taddRightOrBottom: self textMorph).\r\tgroup minimumExtent: 200 @ 200.\r\tself\r\t\tupdateTreeKeymap;\r\t\tupdateTextKeymap;\r\t\tupdateSelection.\r\t^ group',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2225' ],		#self : OmReference [ '2226' ],		#time : DateAndTime [ '2018-01-14T19:02:39.186195-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltInspector,				#isMetaSide : false			},			#name : #'hasBindingOf:',			#protocol : #bindings,			#sourceCode : 'hasBindingOf: aString\r\t"Answer true if the current selected object has that as slot."\r\r\t^ self selectedObject class allSlots\r\t\tanySatisfy: [ :e | e name == aString ]',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2226' ],		#self : OmReference [ '2227' ],		#time : DateAndTime [ '2018-01-14T19:02:39.187438-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltInspector,				#isMetaSide : false			},			#name : #initialExtent,			#protocol : #accessing,			#sourceCode : 'initialExtent\r\t^ 400 @ 300',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2227' ],		#self : OmReference [ '2228' ],		#time : DateAndTime [ '2018-01-14T19:02:39.189001-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltInspector,				#isMetaSide : false			},			#name : #object,			#protocol : #accessing,			#sourceCode : 'object\r\t^ object',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2228' ],		#self : OmReference [ '2229' ],		#time : DateAndTime [ '2018-01-14T19:02:39.19059-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltInspector,				#isMetaSide : false			},			#name : #'object:',			#protocol : #accessing,			#sourceCode : 'object: anObject\r\tobject := anObject.\r\tobject model: self.\r\tobject announcer\r\t\twhen: AltSelectionChanged send: #updateSelection to: self;\r\t\twhen: AltListChanged send: #updateSelection to: self',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2229' ],		#self : OmReference [ '2230' ],		#time : DateAndTime [ '2018-01-14T19:02:39.192223-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltInspector,				#isMetaSide : false			},			#name : #open,			#protocol : #'user interface',			#sourceCode : 'open\r\t"Open the window, as simple as that."\r\r\t| pane group |\r\tpane := PanelMorph new\r\t\thResizing: #spaceFill;\r\t\tvResizing: #spaceFill;\r\t\tfillStyle: Color transparent;\r\t\tchangeTableLayout;\r\t\tcellInset: 3 @ 3;\r\t\tcellPositioning: #leftCenter;\r\t\tyourself.\t"non pane color tracking"\r\tgroup := Morph new\r\t\thResizing: #spaceFill;\r\t\tvResizing: #spaceFill;\r\t\tfillStyle: Color transparent;\r\t\tchangeProportionalLayout;\r\t\tyourself.\t"non pane color tracking"\r\twindow := Smalltalk ui theme\r\t\tnewWindowIn: World\r\t\tfor: self\r\t\ttitle: self title.\r\twindow addMorph: pane frame: (0 @ 0 corner: 1 @ 1).\r\tself textMorph styler workspace: self.\r\tself treeMorph\r\t\ton: #keyStroke\r\t\tsend: #startSearch:for:\r\t\tto: AltKeyboardSearchInTree.\r\tpane addMorph: group.\r\tgroup\r\t\taddMorph: self treeMorph\r\t\tfullFrame:\r\t\t\t(AltLayoutFrame\r\t\t\t\tfractions: (0.0 @ 0.0 corner: 1.0 @ 0.8)\r\t\t\t\ttopLeftOffsets: 1 @ 0\r\t\t\t\tbottomRightOffsets: -1 @ -1).\r\tgroup\r\t\taddMorph: self textMorph\r\t\tfullFrame:\r\t\t\t(AltLayoutFrame\r\t\t\t\tfractions: (0.0 @ 0.8 corner: 1.0 @ 1.0)\r\t\t\t\ttopLeftOffsets: 1 @ 1\r\t\t\t\tbottomRightOffsets: -1 @ 0).\r\tgroup\r\t\taddMorph:\r\t\t\t(ProportionalSplitterMorph new\r\t\t\t\tbeSplitsTopAndBottom;\r\t\t\t\tlayoutFrame:\r\t\t\t\t\t(AltLayoutFrame\r\t\t\t\t\t\tfractions: (0.0 @ 0.8 corner: 1.0 @ 0.8)\r\t\t\t\t\t\ttopLeftOffsets: -1 @ -1\r\t\t\t\t\t\tbottomRightOffsets: 1 @ 1);\r\t\t\t\taddLeftOrTop: self treeMorph;\r\t\t\t\taddRightOrBottom: self textMorph).\r\twindow minimumExtent: 200 @ 300.\r\twindow announcer when: WindowClosed send: #release to: self.\r\twindow open.\r\tself\r\t\tupdateTreeKeymap;\r\t\tupdateTextKeymap;\r\t\tupdateSelection.\r\tself treeMorph takeKeyboardFocus',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2230' ],		#self : OmReference [ '2231' ],		#time : DateAndTime [ '2018-01-14T19:02:39.194161-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltInspector,				#isMetaSide : false			},			#name : #release,			#protocol : #initialization,			#sourceCode : 'release\r\tobject\r\t\tifNotNil: [ object announcer unsubscribe: self.\r\t\t\tobject release ].\r\twindow ifNotNil: [ window announcer unsubscribe: self ].\r\ttreeMorph ifNotNil: [ treeMorph release ].\r\tEditorFindReplaceDialogWindow initialize.\r\tsuper release',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2231' ],		#self : OmReference [ '2232' ],		#time : DateAndTime [ '2018-01-14T19:02:39.195495-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltInspector,				#isMetaSide : false			},			#name : #selectedItem,			#protocol : #selection,			#sourceCode : 'selectedItem\r\t^ object selectedItem',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2232' ],		#self : OmReference [ '2233' ],		#time : DateAndTime [ '2018-01-14T19:02:39.196782-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltInspector,				#isMetaSide : false			},			#name : #selectedNode,			#protocol : #selection,			#sourceCode : 'selectedNode\r\t^ object selectedItem',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2233' ],		#self : OmReference [ '2234' ],		#time : DateAndTime [ '2018-01-14T19:02:39.198255-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltInspector,				#isMetaSide : false			},			#name : #selectedObject,			#protocol : #selection,			#sourceCode : 'selectedObject\r\t^ object selectedItem\r\t\tifNotNil: [ :anItemModel | anItemModel item value ]',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2234' ],		#self : OmReference [ '2235' ],		#time : DateAndTime [ '2018-01-14T19:02:39.199621-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltInspector,				#isMetaSide : false			},			#name : #'shoutAboutToStyle:',			#protocol : #accessing,			#sourceCode : 'shoutAboutToStyle: aMorph\r\t^ true',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2235' ],		#self : OmReference [ '2236' ],		#time : DateAndTime [ '2018-01-14T19:02:39.200845-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltInspector,				#isMetaSide : false			},			#name : #source,			#protocol : #accessing,			#sourceCode : 'source\r\t^ \'\'',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2236' ],		#self : OmReference [ '2237' ],		#time : DateAndTime [ '2018-01-14T19:02:39.202658-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltInspector,				#isMetaSide : false			},			#name : #'stepAt:in:',			#protocol : #stepping,			#sourceCode : 'stepAt: aTime in: aSystemWindow\r\t| lastTimeStep |\r\tlastTimeStep := DateAndTime now.\r\tobject ifNotNil: [ object watch ].\r\t(DateAndTime now - lastTimeStep) asMilliSeconds > 1000\r\t\tifTrue: [ window stopStepping ]',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2237' ],		#self : OmReference [ '2238' ],		#time : DateAndTime [ '2018-01-14T19:02:39.204063-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltInspector,				#isMetaSide : false			},			#name : #'stepTimeIn:',			#protocol : #stepping,			#sourceCode : 'stepTimeIn: aSystemWindow\r\t^ 1000',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2238' ],		#self : OmReference [ '2239' ],		#time : DateAndTime [ '2018-01-14T19:02:39.205791-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltInspector,				#isMetaSide : false			},			#name : #textMorph,			#protocol : #'user interface',			#sourceCode : 'textMorph\r\t^ textMorph\r\t\tifNil: [ textMorph := (AltPluggableTextMorph\r\t\t\t\ton: self\r\t\t\t\ttext: #source\r\t\t\t\taccept: nil\r\t\t\t\treadSelection: nil\r\t\t\t\tmenu: #buildTextMenu:)\r\t\t\t\tfont: StandardFonts codeFont;\r\t\t\t\thResizing: #spaceFill;\r\t\t\t\tvResizing: #spaceFill;\r\t\t\t\tyourself ]',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2239' ],		#self : OmReference [ '2240' ],		#time : DateAndTime [ '2018-01-14T19:02:39.207403-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltInspector,				#isMetaSide : false			},			#name : #title,			#protocol : #accessing,			#sourceCode : 'title\r\t^ \'AltInspector\'',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2240' ],		#self : OmReference [ '2241' ],		#time : DateAndTime [ '2018-01-14T19:02:39.208682-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltInspector,				#isMetaSide : false			},			#name : #treeAreaCommands,			#protocol : #commands,			#sourceCode : 'treeAreaCommands\r\t<treeAreaCommands>\r\t^ #(#AltSelectNextItem #AltSelectPreviousItem #AltSelectMoveDown #AltSelectMoveUp #AltInspectorInspect #AltInspectorBrowseFull #AltInspectorExplorePointers #AltInspectorBrowseHierarchy)',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2241' ],		#self : OmReference [ '2242' ],		#time : DateAndTime [ '2018-01-14T19:02:39.209974-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltInspector,				#isMetaSide : false			},			#name : #treeMorph,			#protocol : #'user interface',			#sourceCode : 'treeMorph\r\t^ treeMorph\r\t\tifNil: [ treeMorph := AltListMorph new\r\t\t\t\tmodel: self object;\r\t\t\t\tyourself ]',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2242' ],		#self : OmReference [ '2243' ],		#time : DateAndTime [ '2018-01-14T19:02:39.211354-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltInspector,				#isMetaSide : false			},			#name : #undoCommands,			#protocol : #commands,			#sourceCode : 'undoCommands\r\t<textAreaCommand>\r\t^ #(#AltUndoTextCommand #AltRedoTextCommand)',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2243' ],		#self : OmReference [ '2244' ],		#time : DateAndTime [ '2018-01-14T19:02:39.213379-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltInspector,				#isMetaSide : false			},			#name : #updateSelection,			#protocol : #selection,			#sourceCode : 'updateSelection\r\t"Update from the model."\r\r\t| modelSelection |\r\tmodelSelection := self selectedItem.\r\tmodelSelection isNil\r\t\tifTrue: [ textMorph ifNotNil: [ :t | t classOrMetaClass: nil ] ]\r\t\tifFalse: [ textMorph\r\t\t\t\tifNotNil: [ :t | \r\t\t\t\t\t| flag |\r\t\t\t\t\tflag := t hasUnacceptedEdits.\r\t\t\t\t\tt classOrMetaClass: self selectedObject class.\r\t\t\t\t\tt setText: t text.\r\t\t\t\t\tt hasUnacceptedEdits: flag ] ]',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2244' ],		#self : OmReference [ '2245' ],		#time : DateAndTime [ '2018-01-14T19:02:39.215052-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltInspector,				#isMetaSide : false			},			#name : #updateTextKeymap,			#protocol : #shortcuts,			#sourceCode : 'updateTextKeymap\r\t"Update the text keymap. Reset the dispatcher and make it an AltKMDispatcher if needed."\r\r\ttextMorph ifNil: [ ^ self ].\r\t(textMorph kmDispatcher isKindOf: AltKMDispatcher)\r\t\tifFalse: [ textMorph\r\t\t\t\tsetProperty: #kmDispatcher\r\t\t\t\ttoValue: (AltKMDispatcher target: textMorph) ].\r\t(textMorph textMorph kmDispatcher isKindOf: AltKMDispatcher)\r\t\tifFalse: [ textMorph textMorph\r\t\t\t\tsetProperty: #kmDispatcher\r\t\t\t\ttoValue: (AltKMDispatcher target: textMorph textMorph) ].\r\t{textMorph kmDispatcher.\r\ttextMorph textMorph kmDispatcher}\r\t\tdo: [ :aKMDispatcher | \r\t\t\taKMDispatcher reset.\r\t\t\taKMDispatcher attachCategory: #MorphFocusCtrlNavigation.\r\t\t\tself buildTextShortcutsOn: aKMDispatcher with: self ]',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2245' ],		#self : OmReference [ '2246' ],		#time : DateAndTime [ '2018-01-14T19:02:39.216515-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltInspector,				#isMetaSide : false			},			#name : #updateTreeKeymap,			#protocol : #shortcuts,			#sourceCode : 'updateTreeKeymap\r\t"Update the tree keymap."\r\r\t"Don\'t forget to update the tree."\r\r\ttreeMorph ifNil: [ ^ self ].\r\t(self treeMorph kmDispatcher isKindOf: AltKMDispatcher)\r\t\tifFalse:\r\t\t\t[ textMorph setProperty: #kmdispatcher toValue: AltKMDispatcher new ].\r\tself treeMorph kmDispatcher\r\t\treset;\r\t\tattachCategory: #MorphFocusNavigation;\r\t\tattachCategory: #MorphFocusCtrlNavigation.\r\tself buildTreeShortcutsOn: self treeMorph kmDispatcher with: self',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2246' ],		#self : OmReference [ '2247' ],		#time : DateAndTime [ '2018-01-14T19:02:39.217761-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltInspector,				#isMetaSide : false			},			#name : #'wantsStepsIn:',			#protocol : #stepping,			#sourceCode : 'wantsStepsIn: aSystemWindow\r\t^ true',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2247' ],		#self : OmReference [ '2248' ],		#time : DateAndTime [ '2018-01-14T19:02:39.219157-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltAnnouncerInspector,				#isMetaSide : false			},			#name : #'addSpecialFields:',			#protocol : #private,			#sourceCode : 'addSpecialFields: elements\r\telements add: (AltAnnouncerEyeElement host: self object).\r\telements\r\t\tadd:\r\t\t\t(AltMemoizedEyeElement\r\t\t\t\thost: self object\r\t\t\t\tlabel: \'subscribers\'\r\t\t\t\tvalue: [ (self object subscriptions subscriptions\r\t\t\t\t\t\tcollect: [ :e | e subscriber ]) asIdentitySet ])',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2248' ],		#self : OmReference [ '2249' ],		#time : DateAndTime [ '2018-01-14T19:02:39.220373-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltCharacterInspector,				#isMetaSide : false			},			#name : #'addSpecialFields:',			#protocol : #private,			#sourceCode : 'addSpecialFields: elements\r\telements\r\t\tadd:\r\t\t\t(AltDynamicEyeElement\r\t\t\t\thost: self object\r\t\t\t\tlabel: \'unicode\'\r\t\t\t\tdescription: [ self objectAsUnicodeCodePoint ]\r\t\t\t\tvalue: [ self object codePoint ])',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2249' ],		#self : OmReference [ '2250' ],		#time : DateAndTime [ '2018-01-14T19:02:39.22215-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltCharacterInspector,				#isMetaSide : false			},			#name : #hasContents,			#protocol : #testing,			#sourceCode : 'hasContents\r\t"Answer if this item has some contents."\r\r\t^ true',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2250' ],		#self : OmReference [ '2251' ],		#time : DateAndTime [ '2018-01-14T19:02:39.223941-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltCharacterInspector,				#isMetaSide : false			},			#name : #objectAsUnicodeCodePoint,			#protocol : #converting,			#sourceCode : 'objectAsUnicodeCodePoint\r\t^ String streamContents: [ :stream | \r\t\t\tstream << \'U+\'.\r\t\t\tself object codePoint \r\t\t\t\tprintOn: stream base: 16 nDigits: 4 ]',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2251' ],		#self : OmReference [ '2252' ],		#time : DateAndTime [ '2018-01-14T19:02:39.225355-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltBagInspector,				#isMetaSide : false			},			#name : #'addVariableFields:',			#protocol : #private,			#sourceCode : 'addVariableFields: elements\r\t([ [ self object valuesAndCounts keys sorted ]\r\t\ton: Error\r\t\tdo: [ "case of non sortable keys" self object valuesAndCounts keys ] ]\r\t\ton: Error\r\t\tdo: [ #() ])\r\t\tdo: [ :key | elements add: (AltBagEyeElement host: self object index: key) ]',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2252' ],		#self : OmReference [ '2253' ],		#time : DateAndTime [ '2018-01-14T19:02:39.226666-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltByteArrayInspector,				#isMetaSide : false			},			#name : #'addSpecialFields:',			#protocol : #private,			#sourceCode : 'addSpecialFields: elements\r\telements\r\t\tadd:\r\t\t\t(AltDynamicEyeElement\r\t\t\t\thost: self object\r\t\t\t\tlabel: \'hex bytes\'\r\t\t\t\tdescription: [ self objectAsHexBytes ]\r\t\t\t\tvalue: [ self object ]).\r\telements\r\t\tadd:\r\t\t\t(AltDynamicEyeElement\r\t\t\t\thost: self object\r\t\t\t\tlabel: \'hex string\'\r\t\t\t\tvalue: [ self objectAsHexString ]).\r\telements\r\t\tadd:\r\t\t\t(AltDynamicEyeElement\r\t\t\t\thost: self object\r\t\t\t\tlabel: \'latin-1 string\'\r\t\t\t\tvalue: [ self objectAsLatin1String ]).\r\telements\r\t\tadd:\r\t\t\t(AltDynamicEyeElement\r\t\t\t\thost: self object\r\t\t\t\tlabel: \'utf-8 string\'\r\t\t\t\tvalue: [ [ self objectAsUTF8String ]\r\t\t\t\t\t\ton: ZnInvalidUTF8\r\t\t\t\t\t\tdo: [ :exception | exception asString ] ])',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2253' ],		#self : OmReference [ '2254' ],		#time : DateAndTime [ '2018-01-14T19:02:39.228727-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltByteArrayInspector,				#isMetaSide : false			},			#name : #objectAsHexBytes,			#protocol : #converting,			#sourceCode : 'objectAsHexBytes\r\t^ String\r\t\tstreamContents: [ :s | \r\t\t\ts nextPutAll: \'[\'.\r\t\t\tself object \r\t\t\t\tdo: [ :each | s << (each printPaddedWith: $0 to: 2 base: 16) ] \r\t\t\t\tseparatedBy: [ s nextPut: $  ].\r\t\t\ts nextPut: $] ]\r\t\tlimitedTo: 5000',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2254' ],		#self : OmReference [ '2255' ],		#time : DateAndTime [ '2018-01-14T19:02:39.230696-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltByteArrayInspector,				#isMetaSide : false			},			#name : #objectAsHexString,			#protocol : #converting,			#sourceCode : 'objectAsHexString\r\t^ String\r\t\tstreamContents: [ :s | \r\t\t\tself object do: [ :each | s << (each printPaddedWith: $0 to: 2 base: 16) ] ]\r\t\tlimitedTo: 5000',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2255' ],		#self : OmReference [ '2256' ],		#time : DateAndTime [ '2018-01-14T19:02:39.232482-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltByteArrayInspector,				#isMetaSide : false			},			#name : #objectAsLatin1String,			#protocol : #converting,			#sourceCode : 'objectAsLatin1String\r\t| width str |\r\tstr := String new:\r\t\t(width := self object size min: 5000).\r\tstr\r\t\treplaceFrom: 1\r\t\tto: str size\r\t\twith: (self object copyFrom: 1 to: width).\r\t^ str',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2256' ],		#self : OmReference [ '2257' ],		#time : DateAndTime [ '2018-01-14T19:02:39.234964-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltByteArrayInspector,				#isMetaSide : false			},			#name : #objectAsUTF8String,			#protocol : #converting,			#sourceCode : 'objectAsUTF8String\r\t^ String\r\t\tstreamContents: [ :out | \r\t\t\t| in encoder |\r\t\t\tencoder := ZnUTF8Encoder new.\r\t\t\tin := self object readStream.\r\t\t\t[ in atEnd ] whileFalse: [ \r\t\t\t\tout nextPut: (encoder nextFromStream: in) ] ]\r\t\tlimitedTo: 5000',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2257' ],		#self : OmReference [ '2258' ],		#time : DateAndTime [ '2018-01-14T19:02:39.236776-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltCollectionInspector,				#isMetaSide : false			},			#name : #'addInstanceVariables:',			#protocol : #private,			#sourceCode : 'addInstanceVariables: elements\r\t"Do nothing"',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2258' ],		#self : OmReference [ '2259' ],		#time : DateAndTime [ '2018-01-14T19:02:39.238017-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltCollectionInspector,				#isMetaSide : false			},			#name : #'addVariableFields:',			#protocol : #private,			#sourceCode : 'addVariableFields: elements\r\t"add the variable fields to the inspector."\r\r\tself variableFieldsToShow\r\t\tdo:\r\t\t\t[ :index | elements add: (AltIndexedEyeElement host: self object index: index) ]',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2259' ],		#self : OmReference [ '2260' ],		#time : DateAndTime [ '2018-01-14T19:02:39.2394-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltCollectionInspector,				#isMetaSide : false			},			#name : #'itemIsSameAs:',			#protocol : #comparing,			#sourceCode : 'itemIsSameAs: aValue\r\t| eval o s s1 s2 |\r\teval := aValue.\r\t^ aValue isArray\r\t\tand: [ (o := object == aValue first)\r\t\t\t\tand: [ s := (s1 := object size) = (s2 := aValue second) ] ]',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2260' ],		#self : OmReference [ '2261' ],		#time : DateAndTime [ '2018-01-14T19:02:39.241224-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltCollectionInspector,				#isMetaSide : false			},			#name : #objectVariableSize,			#protocol : #accessing,			#sourceCode : 'objectVariableSize\r\t^ [ self object size ] on: Error do: [ self object basicSize ]',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2261' ],		#self : OmReference [ '2262' ],		#time : DateAndTime [ '2018-01-14T19:02:39.242686-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltCollectionInspector,				#isMetaSide : false			},			#name : #recordedItem,			#protocol : #comparing,			#sourceCode : 'recordedItem\r\t^ Array with: object with: object size',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2262' ],		#self : OmReference [ '2263' ],		#time : DateAndTime [ '2018-01-14T19:02:39.244018-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltCollectionInspector,				#isMetaSide : false			},			#name : #title,			#protocol : #accessing,			#sourceCode : 'title\r\t^ super title, \' [\', self objectVariableSize asString, \']\' ',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2263' ],		#self : OmReference [ '2264' ],		#time : DateAndTime [ '2018-01-14T19:02:39.246299-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltDictionaryInspector,				#isMetaSide : false			},			#name : #'addVariableFields:',			#protocol : #private,			#sourceCode : 'addVariableFields: elements\r\t([ [ self object keys sort ]\r\t\ton: Error\r\t\tdo: [ "case of non sortable keys" self object keys ] ]\r\t\ton: Error\r\t\tdo: [ #() ])\r\t\tdo:\r\t\t\t[ :key | elements add: (AltIndexedEyeElement host: self object index: key) ]',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2264' ],		#self : OmReference [ '2265' ],		#time : DateAndTime [ '2018-01-14T19:02:39.247532-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltSetInspector,				#isMetaSide : false			},			#name : #'addVariableFields:',			#protocol : #private,			#sourceCode : 'addVariableFields: elements\r\t"Create an external index on the set contents when iterating over it; create one eye element per item in the set."\r\r\t| externalIndex |\r\texternalIndex := 1.\r\tself object array\r\t\twithIndexDo: [ :value :index | \r\t\t\tvalue\r\t\t\t\tifNotNil: [ elements\r\t\t\t\t\t\tadd:\r\t\t\t\t\t\t\t(AltSetEyeElement\r\t\t\t\t\t\t\t\thost: self object\r\t\t\t\t\t\t\t\tindex: index\r\t\t\t\t\t\t\t\texternalIndex: externalIndex).\r\t\t\t\t\texternalIndex := externalIndex + 1 ] ]',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2265' ],		#self : OmReference [ '2266' ],		#time : DateAndTime [ '2018-01-14T19:02:39.248902-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltCompiledMethodInspector,				#isMetaSide : false			},			#name : #'addSpecialFields:',			#protocol : #private,			#sourceCode : 'addSpecialFields: elements\r\telements\r\t\tadd:\r\t\t\t(AltDynamicEyeElement\r\t\t\t\thost: self object\r\t\t\t\tlabel: \'ast\'\r\t\t\t\tvalue: [ self object ast ]).\r\telements\r\t\tadd:\r\t\t\t(AltDynamicEyeElement\r\t\t\t\thost: self object\r\t\t\t\tlabel: \'ir\'\r\t\t\t\tdescription: [ :value | \r\t\t\t\t\t| string |\r\t\t\t\t\tstring := value longPrintString.\r\t\t\t\t\tstring copyFrom: 2 to: string size ]\r\t\t\t\tvalue: [ self object ir ]).\r\telements\r\t\tadd:\r\t\t\t(AltDynamicEyeElement\r\t\t\t\thost: self object\r\t\t\t\tlabel: \'all bytecodes\'\r\t\t\t\tvalue: [ self object symbolic ]).\r\telements\r\t\tadd:\r\t\t\t(AltDynamicEyeElement\r\t\t\t\thost: self object\r\t\t\t\tlabel: \'header\'\r\t\t\t\tvalue: [ self object headerDescription ]).\r\tself object literals\r\t\twithIndexDo: [ :literal :index | \r\t\t\telements\r\t\t\t\tadd:\r\t\t\t\t\t(AltDynamicEyeElement\r\t\t\t\t\t\thost: self object\r\t\t\t\t\t\tlabel: \'literal \' , index asString\r\t\t\t\t\t\tvalue: literal) ]',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2266' ],		#self : OmReference [ '2267' ],		#time : DateAndTime [ '2018-01-14T19:02:39.250124-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltCompiledMethodInspector,				#isMetaSide : false			},			#name : #'addVariableFields:',			#protocol : #private,			#sourceCode : 'addVariableFields: elements\r\tself object initialPC to: self object size do: [ :index | \r\t\telements\r\t\t\tadd:\r\t\t\t\t(AltDynamicEyeElement\r\t\t\t\t\thost: self object\r\t\t\t\t\tlabel: \'bc \' , index asString\r\t\t\t\t\tvalue: (self object at: index) asString) ]',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2267' ],		#self : OmReference [ '2268' ],		#time : DateAndTime [ '2018-01-14T19:02:39.251793-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltDateAndTimeInspector,				#isMetaSide : false			},			#name : #'addSpecialFields:',			#protocol : #private,			#sourceCode : 'addSpecialFields: elements\r\telements\r\t\tadd:\r\t\t\t(AltDynamicEyeElement\r\t\t\t\thost: self object\r\t\t\t\tlabel: \'year\'\r\t\t\t\tvalue: [ self object year ]).\r\telements\r\t\tadd:\r\t\t\t(AltDynamicEyeElement\r\t\t\t\thost: self object\r\t\t\t\tlabel: \'month of year\'\r\t\t\t\tvalue: [ self object monthIndex ]).\r\telements\r\t\tadd:\r\t\t\t(AltDynamicEyeElement\r\t\t\t\thost: self object\r\t\t\t\tlabel: \'day of month\'\r\t\t\t\tvalue: [ self object dayOfMonth ]).\r\telements\r\t\tadd:\r\t\t\t(AltDynamicEyeElement\r\t\t\t\thost: self object\r\t\t\t\tlabel: \'full hours\'\r\t\t\t\tvalue: [ self object hours ]).\r\telements\r\t\tadd:\r\t\t\t(AltDynamicEyeElement\r\t\t\t\thost: self object\r\t\t\t\tlabel: \'full minutes\'\r\t\t\t\tvalue: [ self object minutes ]).\r\telements\r\t\tadd:\r\t\t\t(AltDynamicEyeElement\r\t\t\t\thost: self object\r\t\t\t\tlabel: \'full seconds\'\r\t\t\t\tvalue: [ self object seconds ]).\r\telements\r\t\tadd:\r\t\t\t(AltDynamicEyeElement\r\t\t\t\thost: self object\r\t\t\t\tlabel: \'utc\'\r\t\t\t\tvalue: [ self object asUTC ])',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2268' ],		#self : OmReference [ '2269' ],		#time : DateAndTime [ '2018-01-14T19:02:39.253159-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltFileReferenceInspector,				#isMetaSide : false			},			#name : #'addSpecialFields:',			#protocol : #private,			#sourceCode : 'addSpecialFields: elements\r\tself object isDirectory\r\t\tifTrue: [ [ self object children\r\t\t\t\tdo:\r\t\t\t\t\t[ :each | elements add: (AltDynamicEyeElement host: self object value: each) ] ]\r\t\t\t\ton: DirectoryDoesNotExist\r\t\t\t\tdo: [  ] ]',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2269' ],		#self : OmReference [ '2270' ],		#time : DateAndTime [ '2018-01-14T19:02:39.254461-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltFloatInspector,				#isMetaSide : false			},			#name : #'addSpecialFields:',			#protocol : #private,			#sourceCode : 'addSpecialFields: elements\r\telements\r\t\tadd:\r\t\t\t(AltDynamicEyeElement\r\t\t\t\thost: self object\r\t\t\t\tlabel: \'sign\'\r\t\t\t\tvalue: [ self object sign ]).\r\telements\r\t\tadd:\r\t\t\t(AltDynamicEyeElement\r\t\t\t\thost: self object\r\t\t\t\tlabel: \'significand\'\r\t\t\t\tvalue: [ self object significand ]).\r\telements\r\t\tadd:\r\t\t\t(AltDynamicEyeElement\r\t\t\t\thost: self object\r\t\t\t\tlabel: \'exponent\'\r\t\t\t\tvalue: [ self object exponent ]).\r\telements\r\t\tadd:\r\t\t\t(AltDynamicEyeElement\r\t\t\t\thost: self object\r\t\t\t\tlabel: \'binary\'\r\t\t\t\tvalue: [ self object binaryLiteralString ])',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2270' ],		#self : OmReference [ '2271' ],		#time : DateAndTime [ '2018-01-14T19:02:39.256324-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltFloatInspector,				#isMetaSide : false			},			#name : #hasContents,			#protocol : #testing,			#sourceCode : 'hasContents\r\t"Answer if this item has some contents."\r\r\t^ true',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2271' ],		#self : OmReference [ '2272' ],		#time : DateAndTime [ '2018-01-14T19:02:39.258093-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltIntegerInspector,				#isMetaSide : false			},			#name : #'addSpecialFields:',			#protocol : #private,			#sourceCode : 'addSpecialFields: elements\r\telements\r\t\tadd:\r\t\t\t(AltDynamicEyeElement\r\t\t\t\thost: self object\r\t\t\t\tlabel: \'hex\'\r\t\t\t\tdescription: [ self object printStringRadix: 16 ]\r\t\t\t\tvalue: [ self object ]).\r\telements\r\t\tadd:\r\t\t\t(AltDynamicEyeElement\r\t\t\t\thost: self object\r\t\t\t\tlabel: \'octal\'\r\t\t\t\tdescription: [ self object printStringRadix: 8 ]\r\t\t\t\tvalue: [ self object ]).\r\telements\r\t\tadd:\r\t\t\t(AltDynamicEyeElement\r\t\t\t\thost: self object\r\t\t\t\tlabel: \'binary\'\r\t\t\t\tdescription: [ self object printStringRadix: 2 ]\r\t\t\t\tvalue: [ self object ]).\r\t(self object between: 0 and: 16r10FFFF)\r\t\tifTrue: [ elements\r\t\t\t\tadd:\r\t\t\t\t\t(AltDynamicEyeElement\r\t\t\t\t\t\thost: self object\r\t\t\t\t\t\tlabel: \'character\'\r\t\t\t\t\t\tdescription: [ :value | value printString ]\r\t\t\t\t\t\tvalue: [ self object asCharacter ]) ]',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2272' ],		#self : OmReference [ '2273' ],		#time : DateAndTime [ '2018-01-14T19:02:39.259308-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltIntegerInspector,				#isMetaSide : false			},			#name : #hasContents,			#protocol : #testing,			#sourceCode : 'hasContents\r\t"Answer if this item has some contents."\r\r\t^ true',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2273' ],		#self : OmReference [ '2274' ],		#time : DateAndTime [ '2018-01-14T19:02:39.260891-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltItemInspector class',				#isMetaSide : true			},			#name : #'inspector:',			#protocol : #inspecting,			#sourceCode : 'inspector: anObject\r\t^ anObject class altInspectorClass new\r\t\tobject: anObject;\r\t\tyourself',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2274' ],		#self : OmReference [ '2275' ],		#time : DateAndTime [ '2018-01-14T19:02:39.262286-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltItemInspector,				#isMetaSide : false			},			#name : #'addInstanceVariables:',			#protocol : #private,			#sourceCode : 'addInstanceVariables: elements\r\t"Add all the instance variables to the list of elements you can access in the inspector, set them so that you can modify and save them"\r\r\tself object class allInstVarNames\r\t\tdo: [ :name | \r\t\t\telements\r\t\t\t\tadd: (AltInstanceVariableEyeElement host: self object instVarName: name) ]',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2275' ],		#self : OmReference [ '2276' ],		#time : DateAndTime [ '2018-01-14T19:02:39.263442-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltItemInspector,				#isMetaSide : false			},			#name : #'addSpecialFields:',			#protocol : #private,			#sourceCode : 'addSpecialFields: elements\r\t"Override in subclass to add fields to the inspector. You need to choose the appropriate sublcass of AltAbstractEyeElement"\r\t\r\t"ex :\r\telements add: (AltDynamicEyeElement host: self object)"',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2276' ],		#self : OmReference [ '2277' ],		#time : DateAndTime [ '2018-01-14T19:02:39.265341-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltItemInspector,				#isMetaSide : false			},			#name : #'addVariableFields:',			#protocol : #private,			#sourceCode : 'addVariableFields: elements\r\t"add the variable fields to the inspector. Limit to about 20k elements."\r\r\tself variableFieldsToShow\r\t\tdo: [ :index | \r\t\t\telements\r\t\t\t\tadd: (AltBasicIndexedEyeElement host: self object index: index) ]',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2277' ],		#self : OmReference [ '2278' ],		#time : DateAndTime [ '2018-01-14T19:02:39.266808-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltItemInspector,				#isMetaSide : false			},			#name : #elements,			#protocol : #accessing,			#sourceCode : 'elements\r\t| elements |\r\telements := OrderedCollection new.\r\tself addSpecialFields: elements.\r\tself addInstanceVariables: elements.\r\tself addVariableFields: elements.\r\t^ elements',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2278' ],		#self : OmReference [ '2279' ],		#time : DateAndTime [ '2018-01-14T19:02:39.268152-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltItemInspector,				#isMetaSide : false			},			#name : #hasContents,			#protocol : #testing,			#sourceCode : 'hasContents\r\t"Answer if this item has some contents."\r\r\t^ object class instSize + self objectVariableSize > 0',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2279' ],		#self : OmReference [ '2280' ],		#time : DateAndTime [ '2018-01-14T19:02:39.269582-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltItemInspector,				#isMetaSide : false			},			#name : #'itemIsSameAs:',			#protocol : #comparing,			#sourceCode : 'itemIsSameAs: aValue\r\t^ object = aValue',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2280' ],		#self : OmReference [ '2281' ],		#time : DateAndTime [ '2018-01-14T19:02:39.271022-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltItemInspector,				#isMetaSide : false			},			#name : #object,			#protocol : #accessing,			#sourceCode : 'object\r\t^ object',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2281' ],		#self : OmReference [ '2282' ],		#time : DateAndTime [ '2018-01-14T19:02:39.272328-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltItemInspector,				#isMetaSide : false			},			#name : #'object:',			#protocol : #accessing,			#sourceCode : 'object: anObject\r\tobject := anObject',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2282' ],		#self : OmReference [ '2283' ],		#time : DateAndTime [ '2018-01-14T19:02:39.273746-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltItemInspector,				#isMetaSide : false			},			#name : #objectVariableSize,			#protocol : #accessing,			#sourceCode : 'objectVariableSize\r\t^ self object basicSize',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2283' ],		#self : OmReference [ '2284' ],		#time : DateAndTime [ '2018-01-14T19:02:39.276111-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltItemInspector,				#isMetaSide : false			},			#name : #recordedItem,			#protocol : #comparing,			#sourceCode : 'recordedItem\r\t^ object',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2284' ],		#self : OmReference [ '2285' ],		#time : DateAndTime [ '2018-01-14T19:02:39.277678-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltItemInspector,				#isMetaSide : false			},			#name : #variableFieldsToShow,			#protocol : #private,			#sourceCode : 'variableFieldsToShow\r\t"Limit the number of fields to show to about 20k elements."\r\r\t| bSize |\r\tbSize := self objectVariableSize.\r\t^ bSize <= 20000\r\t\tifTrue: [ 1 to: bSize ]\r\t\tifFalse: [ (1 to: 10000) , (bSize - 10000 to: bSize) ]',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2285' ],		#self : OmReference [ '2286' ],		#time : DateAndTime [ '2018-01-14T19:02:39.279089-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMethodContextInspector,				#isMetaSide : false			},			#name : #'addVariableFields:',			#protocol : #private,			#sourceCode : 'addVariableFields: elements\r\tself tempNames\r\t\twithIndexDo: [ :name :index | \r\t\t\telements\r\t\t\t\tadd:\r\t\t\t\t\t(AltContextTempEyeElement\r\t\t\t\t\t\thost: self object\r\t\t\t\t\t\ttempName: name\r\t\t\t\t\t\ttempIndex: index) ]',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2286' ],		#self : OmReference [ '2287' ],		#time : DateAndTime [ '2018-01-14T19:02:39.280262-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMethodContextInspector,				#isMetaSide : false			},			#name : #doItContext,			#protocol : #accessing,			#sourceCode : 'doItContext\r\t^ self object',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2287' ],		#self : OmReference [ '2288' ],		#time : DateAndTime [ '2018-01-14T19:02:39.281559-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMethodContextInspector,				#isMetaSide : false			},			#name : #tempNames,			#protocol : #private,			#sourceCode : 'tempNames\r\r\t^ [ self object tempNames ]\r\t\ton: Error\r\t\tdo: [ #() ]',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2288' ],		#self : OmReference [ '2289' ],		#time : DateAndTime [ '2018-01-14T19:02:39.28378-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Object class',				#isMetaSide : true			},			#name : #altInspectorClass,			#protocol : #'*alt-inspector',			#sourceCode : 'altInspectorClass\r\t^ AltItemInspector',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2289' ],		#self : OmReference [ '2290' ],		#time : DateAndTime [ '2018-01-14T19:02:39.286829-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Object,				#isMetaSide : false			},			#name : #altInspectorClass,			#protocol : #'*alt-inspector',			#sourceCode : 'altInspectorClass\r\t^ AltItemInspector',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2290' ],		#self : OmReference [ '2291' ],		#time : DateAndTime [ '2018-01-14T19:02:39.2884-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Announcer class',				#isMetaSide : true			},			#name : #altInspectorClass,			#protocol : #'*alt-inspector',			#sourceCode : 'altInspectorClass\r\t^ AltAnnouncerInspector',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2291' ],		#self : OmReference [ '2292' ],		#time : DateAndTime [ '2018-01-14T19:02:39.289844-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Bag class',				#isMetaSide : true			},			#name : #altInspectorClass,			#protocol : #'*alt-inspector',			#sourceCode : 'altInspectorClass\r\t^ AltBagInspector',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2292' ],		#self : OmReference [ '2293' ],		#time : DateAndTime [ '2018-01-14T19:02:39.29187-05:00' ],		#trigger : OmReference [ '1926' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'String class',				#isMetaSide : true			},			#name : #altInspectorClass,			#protocol : #'*alt-inspector',			#sourceCode : 'altInspectorClass\r\t^ AltStringInspector',			#stamp : ' 1/14/2018 19:02:23',			#package : #Alt-Inspector		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#time : DateAndTime [ '2018-01-14T19:02:39.553164-05:00' ],		#prior : OmReference [ '2293' ],		#self : OmReference [ '2294' ]	},	#content : EpMonticelloVersionsLoad {		#versionNames : OrderedCollection [			'Jejak-cypress.1'		]	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2294' ],		#self : OmReference [ '2295' ],		#time : DateAndTime [ '2018-01-14T19:02:39.904041-05:00' ],		#trigger : @3	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #JAbstractRecord\r\tinstanceVariableNames: \'children nodeId\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #JAbstractRecord,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #JAbstractRecord,						#isMetaSide : false					},					#name : #children,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #JAbstractRecord,						#isMetaSide : false					},					#name : #nodeId,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'JAbstractRecord class\r\tinstanceVariableNames: \'\''				},				#name : #'JAbstractRecord class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #JAbstractRecord,					#isMetaSide : false				},				#parent : @7,				#content : 'AbstractRecord is the abstract class definign records for trace tree building. It represent a node of the tree\r\rInstance Variables:\r\tchildren\t<OrderedCollection>\tchildrens of the node (if any) otherwise empty\r\tnodeId\t<SmallInteger>\tThe node number in the trace tree\r\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'AbstractRecord is the abstract class definign records for trace tree building. It represent a node of the tree\r\rInstance Variables:\r\tchildren\t<OrderedCollection>\tchildrens of the node (if any) otherwise empty\r\tnodeId\t<SmallInteger>\tThe node number in the trace tree\r\r',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2295' ],		#self : OmReference [ '2296' ],		#time : DateAndTime [ '2018-01-14T19:02:39.905699-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpCategoryAddition {		#classCategoryName : #Jejak,		#affectedPackageName : #Jejak	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2296' ],		#self : OmReference [ '2297' ],		#time : DateAndTime [ '2018-01-14T19:02:40.198524-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #JAbstractRecord\r\tinstanceVariableNames: \'children nodeId\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Jejak\''			},			#name : #JAbstractRecord,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #JAbstractRecord,						#isMetaSide : false					},					#name : #children,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #JAbstractRecord,						#isMetaSide : false					},					#name : #nodeId,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'JAbstractRecord class\r\tinstanceVariableNames: \'\''				},				#name : #'JAbstractRecord class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #JAbstractRecord,					#isMetaSide : false				},				#parent : @8,				#content : 'AbstractRecord is the abstract class definign records for trace tree building. It represent a node of the tree\r\rInstance Variables:\r\tchildren\t<OrderedCollection>\tchildrens of the node (if any) otherwise empty\r\tnodeId\t<SmallInteger>\tThe node number in the trace tree\r\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Jejak,			#package : #Jejak,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2297' ],		#self : OmReference [ '2298' ],		#time : DateAndTime [ '2018-01-14T19:02:40.327381-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'JAbstractRecord',				#traitCompositionSource : '{}',				#definitionSource : 'JAbstractRecord subclass: #JRecordBlock\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #JRecordBlock,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'JRecordBlock class\r\tinstanceVariableNames: \'\''				},				#name : #'JRecordBlock class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #JRecordBlock,					#isMetaSide : false				},				#parent : @8,				#content : 'RecordBlock record a probe on a block (entry in a block)\r\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'RecordBlock record a probe on a block (entry in a block)\r\r',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2298' ],		#self : OmReference [ '2299' ],		#time : DateAndTime [ '2018-01-14T19:02:40.332627-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'JAbstractRecord',				#traitCompositionSource : '{}',				#definitionSource : 'JAbstractRecord subclass: #JRecordBlock\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Jejak\''			},			#name : #JRecordBlock,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'JRecordBlock class\r\tinstanceVariableNames: \'\''				},				#name : #'JRecordBlock class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #JRecordBlock,					#isMetaSide : false				},				#parent : @8,				#content : 'RecordBlock record a probe on a block (entry in a block)\r\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Jejak,			#package : #Jejak,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2299' ],		#self : OmReference [ '2300' ],		#time : DateAndTime [ '2018-01-14T19:02:40.350926-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'JAbstractRecord',				#traitCompositionSource : '{}',				#definitionSource : 'JAbstractRecord subclass: #JRecordItem\r\tinstanceVariableNames: \'selector\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #JRecordItem,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #JRecordItem,						#isMetaSide : false					},					#name : #selector,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'JRecordItem class\r\tinstanceVariableNames: \'\''				},				#name : #'JRecordItem class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #JRecordItem,					#isMetaSide : false				},				#parent : @8,				#content : 'RecordItem records a message send (or operator)\r\rInstance Variables:\r\tselector\t<a Symbol>\tthe selector of the message\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'RecordItem records a message send (or operator)\r\rInstance Variables:\r\tselector\t<a Symbol>\tthe selector of the message\r',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2300' ],		#self : OmReference [ '2301' ],		#time : DateAndTime [ '2018-01-14T19:02:40.355495-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'JAbstractRecord',				#traitCompositionSource : '{}',				#definitionSource : 'JAbstractRecord subclass: #JRecordItem\r\tinstanceVariableNames: \'selector\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Jejak\''			},			#name : #JRecordItem,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #JRecordItem,						#isMetaSide : false					},					#name : #selector,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'JRecordItem class\r\tinstanceVariableNames: \'\''				},				#name : #'JRecordItem class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #JRecordItem,					#isMetaSide : false				},				#parent : @8,				#content : 'RecordItem records a message send (or operator)\r\rInstance Variables:\r\tselector\t<a Symbol>\tthe selector of the message\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Jejak,			#package : #Jejak,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2301' ],		#self : OmReference [ '2302' ],		#time : DateAndTime [ '2018-01-14T19:02:40.38316-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'JRecordItem',				#traitCompositionSource : '{}',				#definitionSource : 'JRecordItem subclass: #JRecordMethod\r\tinstanceVariableNames: \'object args methodSourceCode methodClassName\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #JRecordMethod,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #JRecordMethod,						#isMetaSide : false					},					#name : #object,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #JRecordMethod,						#isMetaSide : false					},					#name : #args,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #JRecordMethod,						#isMetaSide : false					},					#name : #methodSourceCode,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #JRecordMethod,						#isMetaSide : false					},					#name : #methodClassName,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'JRecordMethod class\r\tinstanceVariableNames: \'\''				},				#name : #'JRecordMethod class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #JRecordMethod,					#isMetaSide : false				},				#parent : @8,				#content : 'RecordMethod records the entry in a method\r\rInstance Variables:\r\tobject\t<Object>\tcontains a copy of self when entering the method. It also gives access to the class.\r\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'RecordMethod records the entry in a method\r\rInstance Variables:\r\tobject\t<Object>\tcontains a copy of self when entering the method. It also gives access to the class.\r\r',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2302' ],		#self : OmReference [ '2303' ],		#time : DateAndTime [ '2018-01-14T19:02:40.387261-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'JRecordItem',				#traitCompositionSource : '{}',				#definitionSource : 'JRecordItem subclass: #JRecordMethod\r\tinstanceVariableNames: \'object args methodSourceCode methodClassName\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Jejak\''			},			#name : #JRecordMethod,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #JRecordMethod,						#isMetaSide : false					},					#name : #object,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #JRecordMethod,						#isMetaSide : false					},					#name : #args,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #JRecordMethod,						#isMetaSide : false					},					#name : #methodSourceCode,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #JRecordMethod,						#isMetaSide : false					},					#name : #methodClassName,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'JRecordMethod class\r\tinstanceVariableNames: \'\''				},				#name : #'JRecordMethod class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #JRecordMethod,					#isMetaSide : false				},				#parent : @8,				#content : 'RecordMethod records the entry in a method\r\rInstance Variables:\r\tobject\t<Object>\tcontains a copy of self when entering the method. It also gives access to the class.\r\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Jejak,			#package : #Jejak,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2303' ],		#self : OmReference [ '2304' ],		#time : DateAndTime [ '2018-01-14T19:02:40.406797-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'JAbstractRecord',				#traitCompositionSource : '{}',				#definitionSource : 'JAbstractRecord subclass: #JRecordVariable\r\tinstanceVariableNames: \'var\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #JRecordVariable,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #JRecordVariable,						#isMetaSide : false					},					#name : #var,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'JRecordVariable class\r\tinstanceVariableNames: \'\''				},				#name : #'JRecordVariable class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #JRecordVariable,					#isMetaSide : false				},				#parent : @8,				#content : 'RecordVariable contains the definition of one or more variables. Var contains the name of the variable(s)\r\rInstance Variables:\r\tvar\t<String>\tThe name of the variable(s)\r\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'RecordVariable contains the definition of one or more variables. Var contains the name of the variable(s)\r\rInstance Variables:\r\tvar\t<String>\tThe name of the variable(s)\r\r',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2304' ],		#self : OmReference [ '2305' ],		#time : DateAndTime [ '2018-01-14T19:02:40.410912-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'JAbstractRecord',				#traitCompositionSource : '{}',				#definitionSource : 'JAbstractRecord subclass: #JRecordVariable\r\tinstanceVariableNames: \'var\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Jejak\''			},			#name : #JRecordVariable,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #JRecordVariable,						#isMetaSide : false					},					#name : #var,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'JRecordVariable class\r\tinstanceVariableNames: \'\''				},				#name : #'JRecordVariable class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #JRecordVariable,					#isMetaSide : false				},				#parent : @8,				#content : 'RecordVariable contains the definition of one or more variables. Var contains the name of the variable(s)\r\rInstance Variables:\r\tvar\t<String>\tThe name of the variable(s)\r\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Jejak,			#package : #Jejak,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2305' ],		#self : OmReference [ '2306' ],		#time : DateAndTime [ '2018-01-14T19:02:40.426572-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'JRecordVariable',				#traitCompositionSource : '{}',				#definitionSource : 'JRecordVariable subclass: #JRecordAssignment\r\tinstanceVariableNames: \'value\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #JRecordAssignment,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #JRecordAssignment,						#isMetaSide : false					},					#name : #value,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'JRecordAssignment class\r\tinstanceVariableNames: \'\''				},				#name : #'JRecordAssignment class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #JRecordAssignment,					#isMetaSide : false				},				#parent : @8,				#content : 'RecordAssignment record an assignment to a variable.\r\rInstance Variables:\r\tvalue\t<Object>\tthe value assigned to a variable\r\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'RecordAssignment record an assignment to a variable.\r\rInstance Variables:\r\tvalue\t<Object>\tthe value assigned to a variable\r\r',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2306' ],		#self : OmReference [ '2307' ],		#time : DateAndTime [ '2018-01-14T19:02:40.432797-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'JRecordVariable',				#traitCompositionSource : '{}',				#definitionSource : 'JRecordVariable subclass: #JRecordAssignment\r\tinstanceVariableNames: \'value\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Jejak\''			},			#name : #JRecordAssignment,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #JRecordAssignment,						#isMetaSide : false					},					#name : #value,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'JRecordAssignment class\r\tinstanceVariableNames: \'\''				},				#name : #'JRecordAssignment class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #JRecordAssignment,					#isMetaSide : false				},				#parent : @8,				#content : 'RecordAssignment record an assignment to a variable.\r\rInstance Variables:\r\tvalue\t<Object>\tthe value assigned to a variable\r\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Jejak,			#package : #Jejak,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2307' ],		#self : OmReference [ '2308' ],		#time : DateAndTime [ '2018-01-14T19:02:40.472636-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #JCollecteur\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #JCollecteur,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'JCollecteur class\r\tinstanceVariableNames: \'recorder\''				},				#name : #'JCollecteur class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'JCollecteur class',							#isMetaSide : true						},						#name : #recorder,						#parent : @13					}				],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #JCollecteur,					#isMetaSide : false				},				#parent : @8,				#content : 'Collecteur is the class doing the interface to an instance of TraceRecorder (or ThreadedTraceRecorder, EmptyRecorder). This instance is contained in a class variable named "recorder"\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Collecteur is the class doing the interface to an instance of TraceRecorder (or ThreadedTraceRecorder, EmptyRecorder). This instance is contained in a class variable named "recorder"\r',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2308' ],		#self : OmReference [ '2309' ],		#time : DateAndTime [ '2018-01-14T19:02:40.481329-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #JCollecteur\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Jejak\''			},			#name : #JCollecteur,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'JCollecteur class\r\tinstanceVariableNames: \'recorder\''				},				#name : #'JCollecteur class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #'JCollecteur class',							#isMetaSide : true						},						#name : #recorder,						#parent : @13					}				],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #JCollecteur,					#isMetaSide : false				},				#parent : @8,				#content : 'Collecteur is the class doing the interface to an instance of TraceRecorder (or ThreadedTraceRecorder, EmptyRecorder). This instance is contained in a class variable named "recorder"\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Jejak,			#package : #Jejak,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2309' ],		#self : OmReference [ '2310' ],		#time : DateAndTime [ '2018-01-14T19:02:40.504068-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #JEmptyRecorder\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #JEmptyRecorder,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'JEmptyRecorder class\r\tinstanceVariableNames: \'\''				},				#name : #'JEmptyRecorder class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #JEmptyRecorder,					#isMetaSide : false				},				#parent : @8,				#content : 'EmptyRecorder is an empty recorder: it receives events and discard them. Used to measure the overhead of the trace.\r\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'EmptyRecorder is an empty recorder: it receives events and discard them. Used to measure the overhead of the trace.\r\r',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2310' ],		#self : OmReference [ '2311' ],		#time : DateAndTime [ '2018-01-14T19:02:40.509825-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #JEmptyRecorder\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Jejak\''			},			#name : #JEmptyRecorder,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'JEmptyRecorder class\r\tinstanceVariableNames: \'\''				},				#name : #'JEmptyRecorder class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #JEmptyRecorder,					#isMetaSide : false				},				#parent : @8,				#content : 'EmptyRecorder is an empty recorder: it receives events and discard them. Used to measure the overhead of the trace.\r\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Jejak,			#package : #Jejak,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2311' ],		#self : OmReference [ '2312' ],		#time : DateAndTime [ '2018-01-14T19:02:40.543542-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #JInstrumentedMethods\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'announcer array\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #JInstrumentedMethods,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'JInstrumentedMethods class\r\tinstanceVariableNames: \'\''				},				#name : #'JInstrumentedMethods class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #JInstrumentedMethods,					#isMetaSide : false				},				#parent : @8,				#content : 'JInstrumentedMethods is the list of instrumented methods (methods with probes inside).',				#stamp : 'ThierryGoubier 7/18/2012 11:26'			},			#classVariables : OrderedCollection [				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #JInstrumentedMethods,						#isMetaSide : false					},					#name : #announcer,					#parent : @8				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #JInstrumentedMethods,						#isMetaSide : false					},					#name : #array,					#parent : @8				}			],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'JInstrumentedMethods is the list of instrumented methods (methods with probes inside).',		#newStamp : 'ThierryGoubier 7/18/2012 11:26'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2312' ],		#self : OmReference [ '2313' ],		#time : DateAndTime [ '2018-01-14T19:02:40.546691-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpCategoryAddition {		#classCategoryName : #Jejak-Store,		#affectedPackageName : #Jejak	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2313' ],		#self : OmReference [ '2314' ],		#time : DateAndTime [ '2018-01-14T19:02:40.550952-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #JInstrumentedMethods\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'announcer array\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Jejak-Store\''			},			#name : #JInstrumentedMethods,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'JInstrumentedMethods class\r\tinstanceVariableNames: \'\''				},				#name : #'JInstrumentedMethods class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #JInstrumentedMethods,					#isMetaSide : false				},				#parent : @8,				#content : 'JInstrumentedMethods is the list of instrumented methods (methods with probes inside).',				#stamp : 'ThierryGoubier 7/18/2012 11:26'			},			#classVariables : OrderedCollection [				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #JInstrumentedMethods,						#isMetaSide : false					},					#name : #announcer,					#parent : @8				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #JInstrumentedMethods,						#isMetaSide : false					},					#name : #array,					#parent : @8				}			],			#category : #Jejak-Store,			#package : #Jejak,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2314' ],		#self : OmReference [ '2315' ],		#time : DateAndTime [ '2018-01-14T19:02:40.566906-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #JInstrumentedMethods2\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'array\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #JInstrumentedMethods2,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'JInstrumentedMethods2 class\r\tinstanceVariableNames: \'\''				},				#name : #'JInstrumentedMethods2 class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #JInstrumentedMethods2,					#isMetaSide : false				},				#parent : @8,				#content : 'I store methods being instrumented. Each of my entries is a compiled method and the value is the list of metalinks added to that method.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #JInstrumentedMethods2,						#isMetaSide : false					},					#name : #array,					#parent : @8				}			],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I store methods being instrumented. Each of my entries is a compiled method and the value is the list of metalinks added to that method.',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2315' ],		#self : OmReference [ '2316' ],		#time : DateAndTime [ '2018-01-14T19:02:40.569174-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpCategoryAddition {		#classCategoryName : #Jejak-MetaLinks,		#affectedPackageName : #Jejak	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2316' ],		#self : OmReference [ '2317' ],		#time : DateAndTime [ '2018-01-14T19:02:40.573009-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #JInstrumentedMethods2\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'array\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Jejak-MetaLinks\''			},			#name : #JInstrumentedMethods2,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'JInstrumentedMethods2 class\r\tinstanceVariableNames: \'\''				},				#name : #'JInstrumentedMethods2 class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #JInstrumentedMethods2,					#isMetaSide : false				},				#parent : @8,				#content : 'I store methods being instrumented. Each of my entries is a compiled method and the value is the list of metalinks added to that method.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #JInstrumentedMethods2,						#isMetaSide : false					},					#name : #array,					#parent : @8				}			],			#category : #Jejak-MetaLinks,			#package : #Jejak,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2317' ],		#self : OmReference [ '2318' ],		#time : DateAndTime [ '2018-01-14T19:02:40.618423-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #JRecordVisiteur\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #JRecordVisiteur,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'JRecordVisiteur class\r\tinstanceVariableNames: \'\''				},				#name : #'JRecordVisiteur class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #JRecordVisiteur,					#isMetaSide : false				},				#parent : @8,				#content : 'RVRecordVisiteur is targeted to visiting a tree of records from a TraceRecorder instance. It is an abstract class implementing the visitor protocol as needed.\r\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'RVRecordVisiteur is targeted to visiting a tree of records from a TraceRecorder instance. It is an abstract class implementing the visitor protocol as needed.\r\r',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2318' ],		#self : OmReference [ '2319' ],		#time : DateAndTime [ '2018-01-14T19:02:40.624693-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #JRecordVisiteur\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Jejak\''			},			#name : #JRecordVisiteur,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'JRecordVisiteur class\r\tinstanceVariableNames: \'\''				},				#name : #'JRecordVisiteur class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #JRecordVisiteur,					#isMetaSide : false				},				#parent : @8,				#content : 'RVRecordVisiteur is targeted to visiting a tree of records from a TraceRecorder instance. It is an abstract class implementing the visitor protocol as needed.\r\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Jejak,			#package : #Jejak,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2319' ],		#self : OmReference [ '2320' ],		#time : DateAndTime [ '2018-01-14T19:02:40.645375-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'JRecordVisiteur',				#traitCompositionSource : '{}',				#definitionSource : 'JRecordVisiteur subclass: #JCountOperator\r\tinstanceVariableNames: \'operators\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #JCountOperator,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #JCountOperator,						#isMetaSide : false					},					#name : #operators,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'JCountOperator class\r\tinstanceVariableNames: \'\''				},				#name : #'JCountOperator class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #JCountOperator,					#isMetaSide : false				},				#parent : @8,				#content : 'RVCountOperator count operators in a trace tree\r\rInstance Variables:\r\toperators\t<Set>\tThe set of operators as counted\r\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'RVCountOperator count operators in a trace tree\r\rInstance Variables:\r\toperators\t<Set>\tThe set of operators as counted\r\r',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2320' ],		#self : OmReference [ '2321' ],		#time : DateAndTime [ '2018-01-14T19:02:40.652977-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'JRecordVisiteur',				#traitCompositionSource : '{}',				#definitionSource : 'JRecordVisiteur subclass: #JCountOperator\r\tinstanceVariableNames: \'operators\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Jejak\''			},			#name : #JCountOperator,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #JCountOperator,						#isMetaSide : false					},					#name : #operators,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'JCountOperator class\r\tinstanceVariableNames: \'\''				},				#name : #'JCountOperator class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #JCountOperator,					#isMetaSide : false				},				#parent : @8,				#content : 'RVCountOperator count operators in a trace tree\r\rInstance Variables:\r\toperators\t<Set>\tThe set of operators as counted\r\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Jejak,			#package : #Jejak,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2321' ],		#self : OmReference [ '2322' ],		#time : DateAndTime [ '2018-01-14T19:02:40.683606-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'JRecordVisiteur',				#traitCompositionSource : '{}',				#definitionSource : 'JRecordVisiteur subclass: #JLoopArrange\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #JLoopArrange,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'JLoopArrange class\r\tinstanceVariableNames: \'\''				},				#name : #'JLoopArrange class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #JLoopArrange,					#isMetaSide : false				},				#parent : @8,				#content : 'RecordLoopExtractor recognize and extract loops from a trace, making them appear as new nodes and levels.\r\rApproach:\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'RecordLoopExtractor recognize and extract loops from a trace, making them appear as new nodes and levels.\r\rApproach:\r',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2322' ],		#self : OmReference [ '2323' ],		#time : DateAndTime [ '2018-01-14T19:02:40.689361-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'JRecordVisiteur',				#traitCompositionSource : '{}',				#definitionSource : 'JRecordVisiteur subclass: #JLoopArrange\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Jejak\''			},			#name : #JLoopArrange,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'JLoopArrange class\r\tinstanceVariableNames: \'\''				},				#name : #'JLoopArrange class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #JLoopArrange,					#isMetaSide : false				},				#parent : @8,				#content : 'RecordLoopExtractor recognize and extract loops from a trace, making them appear as new nodes and levels.\r\rApproach:\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Jejak,			#package : #Jejak,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2323' ],		#self : OmReference [ '2324' ],		#time : DateAndTime [ '2018-01-14T19:02:40.707158-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'JRecordVisiteur',				#traitCompositionSource : '{}',				#definitionSource : 'JRecordVisiteur subclass: #JMethodArrange\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #JMethodArrange,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'JMethodArrange class\r\tinstanceVariableNames: \'\''				},				#name : #'JMethodArrange class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #JMethodArrange,					#isMetaSide : false				},				#parent : @8,				#content : 'RVMethodArrange reorganizes a trace tree around method items\r\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'RVMethodArrange reorganizes a trace tree around method items\r\r',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2324' ],		#self : OmReference [ '2325' ],		#time : DateAndTime [ '2018-01-14T19:02:40.71212-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'JRecordVisiteur',				#traitCompositionSource : '{}',				#definitionSource : 'JRecordVisiteur subclass: #JMethodArrange\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Jejak\''			},			#name : #JMethodArrange,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'JMethodArrange class\r\tinstanceVariableNames: \'\''				},				#name : #'JMethodArrange class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #JMethodArrange,					#isMetaSide : false				},				#parent : @8,				#content : 'RVMethodArrange reorganizes a trace tree around method items\r\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Jejak,			#package : #Jejak,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2325' ],		#self : OmReference [ '2326' ],		#time : DateAndTime [ '2018-01-14T19:02:40.748605-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'JRecordVisiteur',				#traitCompositionSource : '{}',				#definitionSource : 'JRecordVisiteur subclass: #JTypeFilter\r\tinstanceVariableNames: \'type\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #JTypeFilter,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #JTypeFilter,						#isMetaSide : false					},					#name : #type,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'JTypeFilter class\r\tinstanceVariableNames: \'\''				},				#name : #'JTypeFilter class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #JTypeFilter,					#isMetaSide : false				},				#parent : @8,				#content : 'RVTypeFilter filters variables and values based on their type; it contains a target type and remove all the items which do not belong to it.\r\rInstance Variables:\r\ttype\t<Object>\tThe type to filter the trace tree against\r\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'RVTypeFilter filters variables and values based on their type; it contains a target type and remove all the items which do not belong to it.\r\rInstance Variables:\r\ttype\t<Object>\tThe type to filter the trace tree against\r\r',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2326' ],		#self : OmReference [ '2327' ],		#time : DateAndTime [ '2018-01-14T19:02:40.752669-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'JRecordVisiteur',				#traitCompositionSource : '{}',				#definitionSource : 'JRecordVisiteur subclass: #JTypeFilter\r\tinstanceVariableNames: \'type\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Jejak\''			},			#name : #JTypeFilter,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #JTypeFilter,						#isMetaSide : false					},					#name : #type,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'JTypeFilter class\r\tinstanceVariableNames: \'\''				},				#name : #'JTypeFilter class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #JTypeFilter,					#isMetaSide : false				},				#parent : @8,				#content : 'RVTypeFilter filters variables and values based on their type; it contains a target type and remove all the items which do not belong to it.\r\rInstance Variables:\r\ttype\t<Object>\tThe type to filter the trace tree against\r\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Jejak,			#package : #Jejak,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2327' ],		#self : OmReference [ '2328' ],		#time : DateAndTime [ '2018-01-14T19:02:40.768952-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #JRecorder\r\tinstanceVariableNames: \'stack\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #JRecorder,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #JRecorder,						#isMetaSide : false					},					#name : #stack,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'JRecorder class\r\tinstanceVariableNames: \'\''				},				#name : #'JRecorder class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #JRecorder,					#isMetaSide : false				},				#parent : @8,				#content : 'TraceRecorder is an object building a trace tree based on events sent to it. The events are expected to be generated by probes, and the trace tree is built out of AbstractRecord instances.\r\rInstance Variables:\r\tstack\t<(OrderedCollection of: AbstractRecord)>\tIt contains the current path in the trace tree. The current item events are added to is the last item of the stack. The first item of the stack is a special node: root, or the root of the tree\r\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'TraceRecorder is an object building a trace tree based on events sent to it. The events are expected to be generated by probes, and the trace tree is built out of AbstractRecord instances.\r\rInstance Variables:\r\tstack\t<(OrderedCollection of: AbstractRecord)>\tIt contains the current path in the trace tree. The current item events are added to is the last item of the stack. The first item of the stack is a special node: root, or the root of the tree\r\r',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2328' ],		#self : OmReference [ '2329' ],		#time : DateAndTime [ '2018-01-14T19:02:40.7766-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #JRecorder\r\tinstanceVariableNames: \'stack\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Jejak\''			},			#name : #JRecorder,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #JRecorder,						#isMetaSide : false					},					#name : #stack,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'JRecorder class\r\tinstanceVariableNames: \'\''				},				#name : #'JRecorder class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #JRecorder,					#isMetaSide : false				},				#parent : @8,				#content : 'TraceRecorder is an object building a trace tree based on events sent to it. The events are expected to be generated by probes, and the trace tree is built out of AbstractRecord instances.\r\rInstance Variables:\r\tstack\t<(OrderedCollection of: AbstractRecord)>\tIt contains the current path in the trace tree. The current item events are added to is the last item of the stack. The first item of the stack is a special node: root, or the root of the tree\r\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Jejak,			#package : #Jejak,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2329' ],		#self : OmReference [ '2330' ],		#time : DateAndTime [ '2018-01-14T19:02:40.809189-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'JRecorder',				#traitCompositionSource : '{}',				#definitionSource : 'JRecorder subclass: #JThreadedRecorder\r\tinstanceVariableNames: \'process\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #JThreadedRecorder,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #JThreadedRecorder,						#isMetaSide : false					},					#name : #process,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'JThreadedRecorder class\r\tinstanceVariableNames: \'\''				},				#name : #'JThreadedRecorder class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #JThreadedRecorder,					#isMetaSide : false				},				#parent : @8,				#content : 'ThreadedRecorder record trace events and notices changes in context when recording an event, allowing trace of multi-process algorithms.\r\rInstance Variables:\r\tprocess\t<a Process>\tthe current context\'s process, to be checked against when recording an event, to be able to notice a context switch.\r\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'ThreadedRecorder record trace events and notices changes in context when recording an event, allowing trace of multi-process algorithms.\r\rInstance Variables:\r\tprocess\t<a Process>\tthe current context\'s process, to be checked against when recording an event, to be able to notice a context switch.\r\r',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2330' ],		#self : OmReference [ '2331' ],		#time : DateAndTime [ '2018-01-14T19:02:40.816068-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'JRecorder',				#traitCompositionSource : '{}',				#definitionSource : 'JRecorder subclass: #JThreadedRecorder\r\tinstanceVariableNames: \'process\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Jejak\''			},			#name : #JThreadedRecorder,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #JThreadedRecorder,						#isMetaSide : false					},					#name : #process,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'JThreadedRecorder class\r\tinstanceVariableNames: \'\''				},				#name : #'JThreadedRecorder class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #JThreadedRecorder,					#isMetaSide : false				},				#parent : @8,				#content : 'ThreadedRecorder record trace events and notices changes in context when recording an event, allowing trace of multi-process algorithms.\r\rInstance Variables:\r\tprocess\t<a Process>\tthe current context\'s process, to be checked against when recording an event, to be able to notice a context switch.\r\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Jejak,			#package : #Jejak,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2331' ],		#self : OmReference [ '2332' ],		#time : DateAndTime [ '2018-01-14T19:02:40.831096-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #JTraceViewer\r\tinstanceVariableNames: \'treeMorph records window source tree textMorph removeProbesButton\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #JTraceViewer,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #JTraceViewer,						#isMetaSide : false					},					#name : #treeMorph,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #JTraceViewer,						#isMetaSide : false					},					#name : #records,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #JTraceViewer,						#isMetaSide : false					},					#name : #window,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #JTraceViewer,						#isMetaSide : false					},					#name : #source,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #JTraceViewer,						#isMetaSide : false					},					#name : #tree,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #JTraceViewer,						#isMetaSide : false					},					#name : #textMorph,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #JTraceViewer,						#isMetaSide : false					},					#name : #removeProbesButton,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'JTraceViewer class\r\tinstanceVariableNames: \'\''				},				#name : #'JTraceViewer class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #JTraceViewer,					#isMetaSide : false				},				#parent : @8,				#content : 'I am the GUI on the trace events.\r\rAt one point, I will be more interactive, so as to:\r- live tracking of new events when I\'m open\r- update my remove probes to indicate that there are probes around\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I am the GUI on the trace events.\r\rAt one point, I will be more interactive, so as to:\r- live tracking of new events when I\'m open\r- update my remove probes to indicate that there are probes around\r',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2332' ],		#self : OmReference [ '2333' ],		#time : DateAndTime [ '2018-01-14T19:02:40.833107-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpCategoryAddition {		#classCategoryName : #Jejak-GUI,		#affectedPackageName : #Jejak	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2333' ],		#self : OmReference [ '2334' ],		#time : DateAndTime [ '2018-01-14T19:02:40.836721-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #JTraceViewer\r\tinstanceVariableNames: \'treeMorph records window source tree textMorph removeProbesButton\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Jejak-GUI\''			},			#name : #JTraceViewer,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #JTraceViewer,						#isMetaSide : false					},					#name : #treeMorph,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #JTraceViewer,						#isMetaSide : false					},					#name : #records,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #JTraceViewer,						#isMetaSide : false					},					#name : #window,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #JTraceViewer,						#isMetaSide : false					},					#name : #source,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #JTraceViewer,						#isMetaSide : false					},					#name : #tree,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #JTraceViewer,						#isMetaSide : false					},					#name : #textMorph,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #JTraceViewer,						#isMetaSide : false					},					#name : #removeProbesButton,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'JTraceViewer class\r\tinstanceVariableNames: \'\''				},				#name : #'JTraceViewer class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #JTraceViewer,					#isMetaSide : false				},				#parent : @8,				#content : 'I am the GUI on the trace events.\r\rAt one point, I will be more interactive, so as to:\r- live tracking of new events when I\'m open\r- update my remove probes to indicate that there are probes around\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Jejak-GUI,			#package : #Jejak,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2334' ],		#self : OmReference [ '2335' ],		#time : DateAndTime [ '2018-01-14T19:02:40.861251-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'RBProgramNodeVisitor',				#traitCompositionSource : '{}',				#definitionSource : 'RBProgramNodeVisitor subclass: #JMLAbstractProbesWriter\r\tinstanceVariableNames: \'links\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #JMLAbstractProbesWriter,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #JMLAbstractProbesWriter,						#isMetaSide : false					},					#name : #links,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'JMLAbstractProbesWriter class\r\tinstanceVariableNames: \'\''				},				#name : #'JMLAbstractProbesWriter class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #JMLAbstractProbesWriter,					#isMetaSide : false				},				#parent : @8,				#content : 'I write probes into the code via metalinks, instead of code.\r\rMetalinks are not capable at the time to handle inserting that many probes into the code, so this doesn\'t work.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I write probes into the code via metalinks, instead of code.\r\rMetalinks are not capable at the time to handle inserting that many probes into the code, so this doesn\'t work.',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2335' ],		#self : OmReference [ '2336' ],		#time : DateAndTime [ '2018-01-14T19:02:40.866647-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'RBProgramNodeVisitor',				#traitCompositionSource : '{}',				#definitionSource : 'RBProgramNodeVisitor subclass: #JMLAbstractProbesWriter\r\tinstanceVariableNames: \'links\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Jejak-MetaLinks\''			},			#name : #JMLAbstractProbesWriter,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #JMLAbstractProbesWriter,						#isMetaSide : false					},					#name : #links,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'JMLAbstractProbesWriter class\r\tinstanceVariableNames: \'\''				},				#name : #'JMLAbstractProbesWriter class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #JMLAbstractProbesWriter,					#isMetaSide : false				},				#parent : @8,				#content : 'I write probes into the code via metalinks, instead of code.\r\rMetalinks are not capable at the time to handle inserting that many probes into the code, so this doesn\'t work.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Jejak-MetaLinks,			#package : #Jejak,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2336' ],		#self : OmReference [ '2337' ],		#time : DateAndTime [ '2018-01-14T19:02:40.881649-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'JMLAbstractProbesWriter',				#traitCompositionSource : '{}',				#definitionSource : 'JMLAbstractProbesWriter subclass: #JMLVariablesProbesWriter\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #JMLVariablesProbesWriter,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'JMLVariablesProbesWriter class\r\tinstanceVariableNames: \'\''				},				#name : #'JMLVariablesProbesWriter class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #JMLVariablesProbesWriter,					#isMetaSide : false				},				#parent : @8,				#content : 'I trace assignments and arguments declarations',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I trace assignments and arguments declarations',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2337' ],		#self : OmReference [ '2338' ],		#time : DateAndTime [ '2018-01-14T19:02:40.885789-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'JMLAbstractProbesWriter',				#traitCompositionSource : '{}',				#definitionSource : 'JMLAbstractProbesWriter subclass: #JMLVariablesProbesWriter\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Jejak-MetaLinks\''			},			#name : #JMLVariablesProbesWriter,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'JMLVariablesProbesWriter class\r\tinstanceVariableNames: \'\''				},				#name : #'JMLVariablesProbesWriter class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #JMLVariablesProbesWriter,					#isMetaSide : false				},				#parent : @8,				#content : 'I trace assignments and arguments declarations',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Jejak-MetaLinks,			#package : #Jejak,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2338' ],		#self : OmReference [ '2339' ],		#time : DateAndTime [ '2018-01-14T19:02:40.899709-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'RBProgramNodeVisitor',				#traitCompositionSource : '{}',				#definitionSource : 'RBProgramNodeVisitor subclass: #JProbesWriter\r\tinstanceVariableNames: \'mclass no\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #JProbesWriter,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #JProbesWriter,						#isMetaSide : false					},					#name : #mclass,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #JProbesWriter,						#isMetaSide : false					},					#name : #no,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'JProbesWriter class\r\tinstanceVariableNames: \'\''				},				#name : #'JProbesWriter class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #JProbesWriter,					#isMetaSide : false				},				#parent : @8,				#content : 'This class is a root for subclasses that will modify a method by writing tracing code and probes. Basically, it takes a method parse tree (MethodNode) and return a new parse tree.\r\rmclass: contains the class of the method we are processing.\rno: the current node counter.\r\rHow to use no? Record in a temporary the no at the beginning of the processing of the node; this will uniquely identify the node.\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'This class is a root for subclasses that will modify a method by writing tracing code and probes. Basically, it takes a method parse tree (MethodNode) and return a new parse tree.\r\rmclass: contains the class of the method we are processing.\rno: the current node counter.\r\rHow to use no? Record in a temporary the no at the beginning of the processing of the node; this will uniquely identify the node.\r',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2339' ],		#self : OmReference [ '2340' ],		#time : DateAndTime [ '2018-01-14T19:02:40.9043-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'RBProgramNodeVisitor',				#traitCompositionSource : '{}',				#definitionSource : 'RBProgramNodeVisitor subclass: #JProbesWriter\r\tinstanceVariableNames: \'mclass no\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Jejak\''			},			#name : #JProbesWriter,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #JProbesWriter,						#isMetaSide : false					},					#name : #mclass,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #JProbesWriter,						#isMetaSide : false					},					#name : #no,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'JProbesWriter class\r\tinstanceVariableNames: \'\''				},				#name : #'JProbesWriter class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #JProbesWriter,					#isMetaSide : false				},				#parent : @8,				#content : 'This class is a root for subclasses that will modify a method by writing tracing code and probes. Basically, it takes a method parse tree (MethodNode) and return a new parse tree.\r\rmclass: contains the class of the method we are processing.\rno: the current node counter.\r\rHow to use no? Record in a temporary the no at the beginning of the processing of the node; this will uniquely identify the node.\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Jejak,			#package : #Jejak,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2340' ],		#self : OmReference [ '2341' ],		#time : DateAndTime [ '2018-01-14T19:02:40.947376-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'JProbesWriter',				#traitCompositionSource : '{}',				#definitionSource : 'JProbesWriter subclass: #JCFGProbesWriter\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #JCFGProbesWriter,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'JCFGProbesWriter class\r\tinstanceVariableNames: \'\''				},				#name : #'JCFGProbesWriter class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #JCFGProbesWriter,					#isMetaSide : false				},				#parent : @8,				#content : 'CodeVariableTracerWriter write probes to track all message sends and code structure (block evaluations in loops)\r\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'CodeVariableTracerWriter write probes to track all message sends and code structure (block evaluations in loops)\r\r',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2341' ],		#self : OmReference [ '2342' ],		#time : DateAndTime [ '2018-01-14T19:02:40.952804-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'JProbesWriter',				#traitCompositionSource : '{}',				#definitionSource : 'JProbesWriter subclass: #JCFGProbesWriter\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Jejak\''			},			#name : #JCFGProbesWriter,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'JCFGProbesWriter class\r\tinstanceVariableNames: \'\''				},				#name : #'JCFGProbesWriter class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #JCFGProbesWriter,					#isMetaSide : false				},				#parent : @8,				#content : 'CodeVariableTracerWriter write probes to track all message sends and code structure (block evaluations in loops)\r\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Jejak,			#package : #Jejak,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2342' ],		#self : OmReference [ '2343' ],		#time : DateAndTime [ '2018-01-14T19:02:40.967079-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'JCFGProbesWriter',				#traitCompositionSource : '{}',				#definitionSource : 'JCFGProbesWriter subclass: #JCFGProbesWriterToVar\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #JCFGProbesWriterToVar,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'JCFGProbesWriterToVar class\r\tinstanceVariableNames: \'\''				},				#name : #'JCFGProbesWriterToVar class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #JCFGProbesWriterToVar,					#isMetaSide : false				},				#parent : @8,				#content : 'CodeTracerWriterVar is a variant of CodeTracerWriter which uses a variable instead of a literal to target the collecteur, to see if we can reduce the tracking overhead. It\'s apparently not the case, so it will probably go unused.',				#stamp : 'ThierryGoubier 6/26/2012 10:31'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'CodeTracerWriterVar is a variant of CodeTracerWriter which uses a variable instead of a literal to target the collecteur, to see if we can reduce the tracking overhead. It\'s apparently not the case, so it will probably go unused.',		#newStamp : 'ThierryGoubier 6/26/2012 10:31'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2343' ],		#self : OmReference [ '2344' ],		#time : DateAndTime [ '2018-01-14T19:02:40.971562-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'JCFGProbesWriter',				#traitCompositionSource : '{}',				#definitionSource : 'JCFGProbesWriter subclass: #JCFGProbesWriterToVar\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Jejak\''			},			#name : #JCFGProbesWriterToVar,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'JCFGProbesWriterToVar class\r\tinstanceVariableNames: \'\''				},				#name : #'JCFGProbesWriterToVar class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #JCFGProbesWriterToVar,					#isMetaSide : false				},				#parent : @8,				#content : 'CodeTracerWriterVar is a variant of CodeTracerWriter which uses a variable instead of a literal to target the collecteur, to see if we can reduce the tracking overhead. It\'s apparently not the case, so it will probably go unused.',				#stamp : 'ThierryGoubier 6/26/2012 10:31'			},			#classVariables : OrderedCollection [ ],			#category : #Jejak,			#package : #Jejak,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2344' ],		#self : OmReference [ '2345' ],		#time : DateAndTime [ '2018-01-14T19:02:40.998284-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'JProbesWriter',				#traitCompositionSource : '{}',				#definitionSource : 'JProbesWriter subclass: #JCodeNodeFinder\r\tinstanceVariableNames: \'target\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #JCodeNodeFinder,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #JCodeNodeFinder,						#isMetaSide : false					},					#name : #target,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'JCodeNodeFinder class\r\tinstanceVariableNames: \'\''				},				#name : #'JCodeNodeFinder class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #JCodeNodeFinder,					#isMetaSide : false				},				#parent : @8,				#content : 'CodeNodeFinder search through a parse tree to find a given node with a target number (numbering scheme based on a depth-first traversal of the parse tree). Follows the numbering scheme implemented in CodeAnalyserWriter. Returns the node found and the path to it.\r\rInstance Variables:\r\tno\t<SmallInteger>\tthe current node number\r\tstack\t<OrderedCollection of ProgramNode>\tThe path in the trace tree: last element is the current node\r\ttarget\t<SmallInteger>\tthe target node number\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'CodeNodeFinder search through a parse tree to find a given node with a target number (numbering scheme based on a depth-first traversal of the parse tree). Follows the numbering scheme implemented in CodeAnalyserWriter. Returns the node found and the path to it.\r\rInstance Variables:\r\tno\t<SmallInteger>\tthe current node number\r\tstack\t<OrderedCollection of ProgramNode>\tThe path in the trace tree: last element is the current node\r\ttarget\t<SmallInteger>\tthe target node number\r',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2345' ],		#self : OmReference [ '2346' ],		#time : DateAndTime [ '2018-01-14T19:02:41.002507-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'JProbesWriter',				#traitCompositionSource : '{}',				#definitionSource : 'JProbesWriter subclass: #JCodeNodeFinder\r\tinstanceVariableNames: \'target\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Jejak\''			},			#name : #JCodeNodeFinder,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #JCodeNodeFinder,						#isMetaSide : false					},					#name : #target,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'JCodeNodeFinder class\r\tinstanceVariableNames: \'\''				},				#name : #'JCodeNodeFinder class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #JCodeNodeFinder,					#isMetaSide : false				},				#parent : @8,				#content : 'CodeNodeFinder search through a parse tree to find a given node with a target number (numbering scheme based on a depth-first traversal of the parse tree). Follows the numbering scheme implemented in CodeAnalyserWriter. Returns the node found and the path to it.\r\rInstance Variables:\r\tno\t<SmallInteger>\tthe current node number\r\tstack\t<OrderedCollection of ProgramNode>\tThe path in the trace tree: last element is the current node\r\ttarget\t<SmallInteger>\tthe target node number\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Jejak,			#package : #Jejak,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2346' ],		#self : OmReference [ '2347' ],		#time : DateAndTime [ '2018-01-14T19:02:41.017305-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'JProbesWriter',				#traitCompositionSource : '{}',				#definitionSource : 'JProbesWriter subclass: #JThreadedProbesWriter\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #JThreadedProbesWriter,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'JThreadedProbesWriter class\r\tinstanceVariableNames: \'\''				},				#name : #'JThreadedProbesWriter class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #JThreadedProbesWriter,					#isMetaSide : false				},				#parent : @8,				#content : 'ThreadedCodeTracerWriter is tracing code with processes. It\'s a work in progress, not yet completely ported.',				#stamp : 'ThierryGoubier 7/18/2012 11:26'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'ThreadedCodeTracerWriter is tracing code with processes. It\'s a work in progress, not yet completely ported.',		#newStamp : 'ThierryGoubier 7/18/2012 11:26'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2347' ],		#self : OmReference [ '2348' ],		#time : DateAndTime [ '2018-01-14T19:02:41.021344-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'JProbesWriter',				#traitCompositionSource : '{}',				#definitionSource : 'JProbesWriter subclass: #JThreadedProbesWriter\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Jejak\''			},			#name : #JThreadedProbesWriter,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'JThreadedProbesWriter class\r\tinstanceVariableNames: \'\''				},				#name : #'JThreadedProbesWriter class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #JThreadedProbesWriter,					#isMetaSide : false				},				#parent : @8,				#content : 'ThreadedCodeTracerWriter is tracing code with processes. It\'s a work in progress, not yet completely ported.',				#stamp : 'ThierryGoubier 7/18/2012 11:26'			},			#classVariables : OrderedCollection [ ],			#category : #Jejak,			#package : #Jejak,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2348' ],		#self : OmReference [ '2349' ],		#time : DateAndTime [ '2018-01-14T19:02:41.037479-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'JProbesWriter',				#traitCompositionSource : '{}',				#definitionSource : 'JProbesWriter subclass: #JVariableProbesWriter\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #JVariableProbesWriter,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'JVariableProbesWriter class\r\tinstanceVariableNames: \'\''				},				#name : #'JVariableProbesWriter class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #JVariableProbesWriter,					#isMetaSide : false				},				#parent : @8,				#content : 'CodeVariableTracerWriter write probes to track variable definition, assignments (and values), parameters and arguments, as well as all message sends and code structure (block evaluations in loops)\r\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'CodeVariableTracerWriter write probes to track variable definition, assignments (and values), parameters and arguments, as well as all message sends and code structure (block evaluations in loops)\r\r',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2349' ],		#self : OmReference [ '2350' ],		#time : DateAndTime [ '2018-01-14T19:02:41.041771-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'JProbesWriter',				#traitCompositionSource : '{}',				#definitionSource : 'JProbesWriter subclass: #JVariableProbesWriter\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Jejak\''			},			#name : #JVariableProbesWriter,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'JVariableProbesWriter class\r\tinstanceVariableNames: \'\''				},				#name : #'JVariableProbesWriter class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #JVariableProbesWriter,					#isMetaSide : false				},				#parent : @8,				#content : 'CodeVariableTracerWriter write probes to track variable definition, assignments (and values), parameters and arguments, as well as all message sends and code structure (block evaluations in loops)\r\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Jejak,			#package : #Jejak,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2350' ],		#self : OmReference [ '2351' ],		#time : DateAndTime [ '2018-01-14T19:02:41.087219-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Announcement',				#traitCompositionSource : '{}',				#definitionSource : 'Announcement subclass: #JAbstractMethodAnnouncement\r\tinstanceVariableNames: \'methodClass methodSelector\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #JAbstractMethodAnnouncement,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #JAbstractMethodAnnouncement,						#isMetaSide : false					},					#name : #methodClass,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #JAbstractMethodAnnouncement,						#isMetaSide : false					},					#name : #methodSelector,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'JAbstractMethodAnnouncement class\r\tinstanceVariableNames: \'\''				},				#name : #'JAbstractMethodAnnouncement class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #JAbstractMethodAnnouncement,					#isMetaSide : false				},				#parent : @8,				#content : 'I represent the fact a method is instrumented',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I represent the fact a method is instrumented',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2351' ],		#self : OmReference [ '2352' ],		#time : DateAndTime [ '2018-01-14T19:02:41.092706-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Announcement',				#traitCompositionSource : '{}',				#definitionSource : 'Announcement subclass: #JAbstractMethodAnnouncement\r\tinstanceVariableNames: \'methodClass methodSelector\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Jejak-Store\''			},			#name : #JAbstractMethodAnnouncement,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #JAbstractMethodAnnouncement,						#isMetaSide : false					},					#name : #methodClass,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #JAbstractMethodAnnouncement,						#isMetaSide : false					},					#name : #methodSelector,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'JAbstractMethodAnnouncement class\r\tinstanceVariableNames: \'\''				},				#name : #'JAbstractMethodAnnouncement class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #JAbstractMethodAnnouncement,					#isMetaSide : false				},				#parent : @8,				#content : 'I represent the fact a method is instrumented',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Jejak-Store,			#package : #Jejak,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2352' ],		#self : OmReference [ '2353' ],		#time : DateAndTime [ '2018-01-14T19:02:41.115964-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'JAbstractMethodAnnouncement',				#traitCompositionSource : '{}',				#definitionSource : 'JAbstractMethodAnnouncement subclass: #JMethodAdded\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #JMethodAdded,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'JMethodAdded class\r\tinstanceVariableNames: \'\''				},				#name : #'JMethodAdded class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #JMethodAdded,					#isMetaSide : false				},				#parent : @8,				#content : 'I am sent when a method is instrumented.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I am sent when a method is instrumented.',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2353' ],		#self : OmReference [ '2354' ],		#time : DateAndTime [ '2018-01-14T19:02:41.122157-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'JAbstractMethodAnnouncement',				#traitCompositionSource : '{}',				#definitionSource : 'JAbstractMethodAnnouncement subclass: #JMethodAdded\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Jejak-Store\''			},			#name : #JMethodAdded,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'JMethodAdded class\r\tinstanceVariableNames: \'\''				},				#name : #'JMethodAdded class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #JMethodAdded,					#isMetaSide : false				},				#parent : @8,				#content : 'I am sent when a method is instrumented.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Jejak-Store,			#package : #Jejak,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2354' ],		#self : OmReference [ '2355' ],		#time : DateAndTime [ '2018-01-14T19:02:41.157097-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'JAbstractMethodAnnouncement',				#traitCompositionSource : '{}',				#definitionSource : 'JAbstractMethodAnnouncement subclass: #JMethodRemoved\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #JMethodRemoved,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'JMethodRemoved class\r\tinstanceVariableNames: \'\''				},				#name : #'JMethodRemoved class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #JMethodRemoved,					#isMetaSide : false				},				#parent : @8,				#content : 'I represent the fact a method has been un-instrumented.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I represent the fact a method has been un-instrumented.',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2355' ],		#self : OmReference [ '2356' ],		#time : DateAndTime [ '2018-01-14T19:02:41.162673-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'JAbstractMethodAnnouncement',				#traitCompositionSource : '{}',				#definitionSource : 'JAbstractMethodAnnouncement subclass: #JMethodRemoved\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Jejak-Store\''			},			#name : #JMethodRemoved,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'JMethodRemoved class\r\tinstanceVariableNames: \'\''				},				#name : #'JMethodRemoved class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #JMethodRemoved,					#isMetaSide : false				},				#parent : @8,				#content : 'I represent the fact a method has been un-instrumented.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Jejak-Store,			#package : #Jejak,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2356' ],		#self : OmReference [ '2357' ],		#time : DateAndTime [ '2018-01-14T19:02:41.178142-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Announcement',				#traitCompositionSource : '{}',				#definitionSource : 'Announcement subclass: #JAllMethodsRemoved\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #JAllMethodsRemoved,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'JAllMethodsRemoved class\r\tinstanceVariableNames: \'\''				},				#name : #'JAllMethodsRemoved class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #JAllMethodsRemoved,					#isMetaSide : false				},				#parent : @8,				#content : 'Now I represent when all methods have been un-instrumented',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Now I represent when all methods have been un-instrumented',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2357' ],		#self : OmReference [ '2358' ],		#time : DateAndTime [ '2018-01-14T19:02:41.182944-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Announcement',				#traitCompositionSource : '{}',				#definitionSource : 'Announcement subclass: #JAllMethodsRemoved\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Jejak-Store\''			},			#name : #JAllMethodsRemoved,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'JAllMethodsRemoved class\r\tinstanceVariableNames: \'\''				},				#name : #'JAllMethodsRemoved class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #JAllMethodsRemoved,					#isMetaSide : false				},				#parent : @8,				#content : 'Now I represent when all methods have been un-instrumented',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Jejak-Store,			#package : #Jejak,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2358' ],		#self : OmReference [ '2359' ],		#time : DateAndTime [ '2018-01-14T19:02:41.214681-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #JTraceCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #JTraceCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'JTraceCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'JTraceCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #JTraceCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'A JTraceCommand turns on or off the trace of a method.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'A JTraceCommand turns on or off the trace of a method.',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2359' ],		#self : OmReference [ '2360' ],		#time : DateAndTime [ '2018-01-14T19:02:41.219421-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #JTraceCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Jejak-GUI\''			},			#name : #JTraceCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'JTraceCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'JTraceCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #JTraceCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'A JTraceCommand turns on or off the trace of a method.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Jejak-GUI,			#package : #Jejak,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2360' ],		#self : OmReference [ '2361' ],		#time : DateAndTime [ '2018-01-14T19:02:41.23391-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltTreeItemModel',				#traitCompositionSource : '{}',				#definitionSource : 'AltTreeItemModel subclass: #JTraceViewerItemNode\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #JTraceViewerItemNode,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'JTraceViewerItemNode class\r\tinstanceVariableNames: \'\''				},				#name : #'JTraceViewerItemNode class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #JTraceViewerItemNode,					#isMetaSide : false				},				#parent : @8,				#content : 'I represent a record into the collecteur',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I represent a record into the collecteur',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2361' ],		#self : OmReference [ '2362' ],		#time : DateAndTime [ '2018-01-14T19:02:41.238596-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltTreeItemModel',				#traitCompositionSource : '{}',				#definitionSource : 'AltTreeItemModel subclass: #JTraceViewerItemNode\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Jejak-GUI\''			},			#name : #JTraceViewerItemNode,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'JTraceViewerItemNode class\r\tinstanceVariableNames: \'\''				},				#name : #'JTraceViewerItemNode class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #JTraceViewerItemNode,					#isMetaSide : false				},				#parent : @8,				#content : 'I represent a record into the collecteur',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Jejak-GUI,			#package : #Jejak,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2362' ],		#self : OmReference [ '2363' ],		#time : DateAndTime [ '2018-01-14T19:02:41.251619-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Exception',				#traitCompositionSource : '{}',				#definitionSource : 'Exception subclass: #JCodeNodeFound\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #JCodeNodeFound,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'JCodeNodeFound class\r\tinstanceVariableNames: \'\''				},				#name : #'JCodeNodeFound class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #JCodeNodeFound,					#isMetaSide : false				},				#parent : @8,				#content : 'CodeFoundException is used to signal, when looking for a node, that we have found it.',				#stamp : 'ThierryGoubier 6/22/2012 15:06'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'CodeFoundException is used to signal, when looking for a node, that we have found it.',		#newStamp : 'ThierryGoubier 6/22/2012 15:06'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2363' ],		#self : OmReference [ '2364' ],		#time : DateAndTime [ '2018-01-14T19:02:41.255279-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Exception',				#traitCompositionSource : '{}',				#definitionSource : 'Exception subclass: #JCodeNodeFound\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Jejak\''			},			#name : #JCodeNodeFound,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'JCodeNodeFound class\r\tinstanceVariableNames: \'\''				},				#name : #'JCodeNodeFound class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #JCodeNodeFound,					#isMetaSide : false				},				#parent : @8,				#content : 'CodeFoundException is used to signal, when looking for a node, that we have found it.',				#stamp : 'ThierryGoubier 6/22/2012 15:06'			},			#classVariables : OrderedCollection [ ],			#category : #Jejak,			#package : #Jejak,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2364' ],		#self : OmReference [ '2365' ],		#time : DateAndTime [ '2018-01-14T19:02:41.279696-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #JTests\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #JTests,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'JTests class\r\tinstanceVariableNames: \'\''				},				#name : #'JTests class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #JTests,					#isMetaSide : false				},				#parent : @8,				#content : 'This class contains code for testing the code analysis framework, a few interface examples and a method for overhead estimations (profiling)\r\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'This class contains code for testing the code analysis framework, a few interface examples and a method for overhead estimations (profiling)\r\r',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2365' ],		#self : OmReference [ '2366' ],		#time : DateAndTime [ '2018-01-14T19:02:41.282735-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpCategoryAddition {		#classCategoryName : #Jejak-Tests,		#affectedPackageName : #Jejak	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2366' ],		#self : OmReference [ '2367' ],		#time : DateAndTime [ '2018-01-14T19:02:41.286204-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #JTests\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Jejak-Tests\''			},			#name : #JTests,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'JTests class\r\tinstanceVariableNames: \'\''				},				#name : #'JTests class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #JTests,					#isMetaSide : false				},				#parent : @8,				#content : 'This class contains code for testing the code analysis framework, a few interface examples and a method for overhead estimations (profiling)\r\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Jejak-Tests,			#package : #Jejak,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2367' ],		#self : OmReference [ '2368' ],		#time : DateAndTime [ '2018-01-14T19:02:41.299668-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Array',				#traitCompositionSource : '{}',				#definitionSource : 'Array variableSubclass: #JExampleArray\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #JExampleArray,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'JExampleArray class\r\tinstanceVariableNames: \'\''				},				#name : #'JExampleArray class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #JExampleArray,					#isMetaSide : false				},				#parent : @8,				#content : 'CAExampleArray contains two methods for the search of the k smallest elements in the array and return their values and their positions. It is an example for testing of the code analysis tools.\r\rThe origin is in the search for the least reliable symbols in a SISO decoder for block turbo decoding [1].\r\r[1] R. Pyndiah, A.Glavieux, A. Picart, and S.Jacq. "Near optimum decoding of product codes", In IEEE GLOBECOM\'1994 Conference, December 1994\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'CAExampleArray contains two methods for the search of the k smallest elements in the array and return their values and their positions. It is an example for testing of the code analysis tools.\r\rThe origin is in the search for the least reliable symbols in a SISO decoder for block turbo decoding [1].\r\r[1] R. Pyndiah, A.Glavieux, A. Picart, and S.Jacq. "Near optimum decoding of product codes", In IEEE GLOBECOM\'1994 Conference, December 1994\r',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2368' ],		#self : OmReference [ '2369' ],		#time : DateAndTime [ '2018-01-14T19:02:41.303407-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Array',				#traitCompositionSource : '{}',				#definitionSource : 'Array variableSubclass: #JExampleArray\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Jejak-Tests\''			},			#name : #JExampleArray,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'JExampleArray class\r\tinstanceVariableNames: \'\''				},				#name : #'JExampleArray class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #JExampleArray,					#isMetaSide : false				},				#parent : @8,				#content : 'CAExampleArray contains two methods for the search of the k smallest elements in the array and return their values and their positions. It is an example for testing of the code analysis tools.\r\rThe origin is in the search for the least reliable symbols in a SISO decoder for block turbo decoding [1].\r\r[1] R. Pyndiah, A.Glavieux, A. Picart, and S.Jacq. "Near optimum decoding of product codes", In IEEE GLOBECOM\'1994 Conference, December 1994\r',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Jejak-Tests,			#package : #Jejak,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2369' ],		#self : OmReference [ '2370' ],		#time : DateAndTime [ '2018-01-14T19:02:41.316781-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'CustomHelp',				#traitCompositionSource : '{}',				#definitionSource : 'CustomHelp subclass: #JHelp\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #JHelp,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'JHelp class\r\tinstanceVariableNames: \'\''				},				#name : #'JHelp class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #JHelp,					#isMetaSide : false				},				#parent : @8,				#content : 'I hold the documentation for Jejak',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I hold the documentation for Jejak',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2370' ],		#self : OmReference [ '2371' ],		#time : DateAndTime [ '2018-01-14T19:02:41.318816-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpCategoryAddition {		#classCategoryName : #Jejak-Help,		#affectedPackageName : #Jejak	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2371' ],		#self : OmReference [ '2372' ],		#time : DateAndTime [ '2018-01-14T19:02:41.322767-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'CustomHelp',				#traitCompositionSource : '{}',				#definitionSource : 'CustomHelp subclass: #JHelp\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Jejak-Help\''			},			#name : #JHelp,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'JHelp class\r\tinstanceVariableNames: \'\''				},				#name : #'JHelp class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #JHelp,					#isMetaSide : false				},				#parent : @8,				#content : 'I hold the documentation for Jejak',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Jejak-Help,			#package : #Jejak,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2372' ],		#self : OmReference [ '2373' ],		#time : DateAndTime [ '2018-01-14T19:02:41.642899-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JAbstractRecord,				#isMetaSide : false			},			#name : #'addChild:',			#protocol : #accessing,			#sourceCode : 'addChild: aNode\r\tchildren isNil ifTrue: [children := LinkedList new].\r\tchildren addLast: aNode',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2373' ],		#self : OmReference [ '2374' ],		#time : DateAndTime [ '2018-01-14T19:02:41.649454-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JAbstractRecord,				#isMetaSide : false			},			#name : #children,			#protocol : #private,			#sourceCode : 'children\r\tchildren isNil ifTrue: [children := LinkedList new].\r\t^children',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2374' ],		#self : OmReference [ '2375' ],		#time : DateAndTime [ '2018-01-14T19:02:41.652113-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JAbstractRecord,				#isMetaSide : false			},			#name : #childrenNodes,			#protocol : #accessing,			#sourceCode : 'childrenNodes\r\t^self children asArray collect: [:lv | lv value]',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2375' ],		#self : OmReference [ '2376' ],		#time : DateAndTime [ '2018-01-14T19:02:41.654083-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JAbstractRecord,				#isMetaSide : false			},			#name : #hasChildren,			#protocol : #testing,			#sourceCode : 'hasChildren\r\t^children notNil and: [children notEmpty]',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2376' ],		#self : OmReference [ '2377' ],		#time : DateAndTime [ '2018-01-14T19:02:41.655632-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JAbstractRecord,				#isMetaSide : false			},			#name : #isMethod,			#protocol : #testing,			#sourceCode : 'isMethod\r\t^false',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2377' ],		#self : OmReference [ '2378' ],		#time : DateAndTime [ '2018-01-14T19:02:41.657059-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JAbstractRecord,				#isMetaSide : false			},			#name : #isRoot,			#protocol : #testing,			#sourceCode : 'isRoot\r\tself subclassResponsibility',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2378' ],		#self : OmReference [ '2379' ],		#time : DateAndTime [ '2018-01-14T19:02:41.658529-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JAbstractRecord,				#isMetaSide : false			},			#name : #'node:',			#protocol : #private,			#sourceCode : 'node: n\r\tnodeId := n',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2379' ],		#self : OmReference [ '2380' ],		#time : DateAndTime [ '2018-01-14T19:02:41.661218-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JAbstractRecord,				#isMetaSide : false			},			#name : #nodeId,			#protocol : #accessing,			#sourceCode : 'nodeId\r\t^nodeId',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2380' ],		#self : OmReference [ '2381' ],		#time : DateAndTime [ '2018-01-14T19:02:41.662858-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JAbstractRecord,				#isMetaSide : false			},			#name : #'setChildren:',			#protocol : #private,			#sourceCode : 'setChildren: aCollection\r\tchildren := aCollection',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2381' ],		#self : OmReference [ '2382' ],		#time : DateAndTime [ '2018-01-14T19:02:41.664343-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JRecordBlock,				#isMetaSide : false			},			#name : #'printOn:',			#protocol : #printing,			#sourceCode : 'printOn: aStream\r\taStream nextPutAll: \'[]\'',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2382' ],		#self : OmReference [ '2383' ],		#time : DateAndTime [ '2018-01-14T19:02:41.665594-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JRecordBlock,				#isMetaSide : false			},			#name : #'recordDo:',			#protocol : #visitor,			#sourceCode : 'recordDo: aRecordVisiteur\r\taRecordVisiteur doBlock: self',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2383' ],		#self : OmReference [ '2384' ],		#time : DateAndTime [ '2018-01-14T19:02:41.666969-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JRecordItem,				#isMetaSide : false			},			#name : #isMethod,			#protocol : #testing,			#sourceCode : 'isMethod\r\t^false',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2384' ],		#self : OmReference [ '2385' ],		#time : DateAndTime [ '2018-01-14T19:02:41.668124-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JRecordItem,				#isMetaSide : false			},			#name : #isRoot,			#protocol : #testing,			#sourceCode : 'isRoot\r\t^selector = #root',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2385' ],		#self : OmReference [ '2386' ],		#time : DateAndTime [ '2018-01-14T19:02:41.669589-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JRecordItem,				#isMetaSide : false			},			#name : #'printOn:',			#protocol : #printing,			#sourceCode : 'printOn: aStream\r\t(selector isKindOf: Symbol)\r\t\tifTrue: [selector printOn: aStream]\r\t\tifFalse: [aStream nextPutAll: nodeId selector]',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2386' ],		#self : OmReference [ '2387' ],		#time : DateAndTime [ '2018-01-14T19:02:41.672156-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JRecordItem,				#isMetaSide : false			},			#name : #'recordDo:',			#protocol : #visitor,			#sourceCode : 'recordDo: aRecordVisiteur\r\t^aRecordVisiteur doItem: self',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2387' ],		#self : OmReference [ '2388' ],		#time : DateAndTime [ '2018-01-14T19:02:41.673583-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JRecordItem,				#isMetaSide : false			},			#name : #selector,			#protocol : #accessing,			#sourceCode : 'selector\r\t^selector',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2388' ],		#self : OmReference [ '2389' ],		#time : DateAndTime [ '2018-01-14T19:02:41.674947-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JRecordItem,				#isMetaSide : false			},			#name : #'selector:node:',			#protocol : #private,			#sourceCode : 'selector: sel node: n\r\tselector := sel.\r\tnodeId := n',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2389' ],		#self : OmReference [ '2390' ],		#time : DateAndTime [ '2018-01-14T19:02:41.676342-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JRecordMethod,				#isMetaSide : false			},			#name : #isMethod,			#protocol : #testing,			#sourceCode : 'isMethod\r\t^true',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2390' ],		#self : OmReference [ '2391' ],		#time : DateAndTime [ '2018-01-14T19:02:41.677627-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JRecordMethod,				#isMetaSide : false			},			#name : #mclass,			#protocol : #accessing,			#sourceCode : 'mclass\r\t^object class',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2391' ],		#self : OmReference [ '2392' ],		#time : DateAndTime [ '2018-01-14T19:02:41.6794-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JRecordMethod,				#isMetaSide : false			},			#name : #methodClassName,			#protocol : #accessing,			#sourceCode : 'methodClassName\r\t^ methodClassName',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2392' ],		#self : OmReference [ '2393' ],		#time : DateAndTime [ '2018-01-14T19:02:41.680875-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JRecordMethod,				#isMetaSide : false			},			#name : #methodSourceCode,			#protocol : #accessing,			#sourceCode : 'methodSourceCode\r\t^ methodSourceCode',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2393' ],		#self : OmReference [ '2394' ],		#time : DateAndTime [ '2018-01-14T19:02:41.683392-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JRecordMethod,				#isMetaSide : false			},			#name : #'object:',			#protocol : #accessing,			#sourceCode : 'object: anObject\r\tobject := anObject',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2394' ],		#self : OmReference [ '2395' ],		#time : DateAndTime [ '2018-01-14T19:02:41.684916-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JRecordMethod,				#isMetaSide : false			},			#name : #'object:selector:node:',			#protocol : #private,			#sourceCode : 'object: anObject selector: sel node: n\r\t| m |\r\tsuper selector: sel node: n.\r\tobject := anObject.\r\tm := anObject class lookupSelector: sel.\r\tmethodSourceCode := AltMethodNode protectedMethods\r\t\tat: (Array with: m methodClass name with: m selector)\r\t\tifAbsent: [ m sourceCode ]',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2395' ],		#self : OmReference [ '2396' ],		#time : DateAndTime [ '2018-01-14T19:02:41.686337-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JRecordMethod,				#isMetaSide : false			},			#name : #'recordDo:',			#protocol : #visitor,			#sourceCode : 'recordDo: aRecordVisiteur\r\t^aRecordVisiteur doMethod: self',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2396' ],		#self : OmReference [ '2397' ],		#time : DateAndTime [ '2018-01-14T19:02:41.687702-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JRecordAssignment,				#isMetaSide : false			},			#name : #'printOn:',			#protocol : #printing,			#sourceCode : 'printOn: aStream\r\tsuper printOn: aStream.\r\taStream nextPutAll: \' <- \'.\r\tvalue printOn: aStream',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2397' ],		#self : OmReference [ '2398' ],		#time : DateAndTime [ '2018-01-14T19:02:41.68896-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JRecordAssignment,				#isMetaSide : false			},			#name : #'recordDo:',			#protocol : #visitor,			#sourceCode : 'recordDo: aRecordVisitor\r\t^aRecordVisitor doAssignment: self',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2398' ],		#self : OmReference [ '2399' ],		#time : DateAndTime [ '2018-01-14T19:02:41.690383-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JRecordAssignment,				#isMetaSide : false			},			#name : #value,			#protocol : #accessing,			#sourceCode : 'value\r\t^value',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2399' ],		#self : OmReference [ '2400' ],		#time : DateAndTime [ '2018-01-14T19:02:41.693164-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JRecordAssignment,				#isMetaSide : false			},			#name : #'var:node:value:',			#protocol : #private,			#sourceCode : 'var: aVarName node: n value: val \r\tsuper var: aVarName node: n.\r\tvalue := val',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2400' ],		#self : OmReference [ '2401' ],		#time : DateAndTime [ '2018-01-14T19:02:41.694917-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JRecordVariable,				#isMetaSide : false			},			#name : #'printOn:',			#protocol : #printing,			#sourceCode : 'printOn: aStream \r\t(var isKindOf: Array) \r\t\tifTrue: \r\t\t\t[aStream nextPutAll: \'| \'.\r\t\t\tvar do: \r\t\t\t\t\t[:e | \r\t\t\t\t\taStream\r\t\t\t\t\t\tnextPutAll: e;\r\t\t\t\t\t\tspace].\r\t\t\taStream nextPut: $|]\r\t\tifFalse: [aStream nextPutAll: var]',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2401' ],		#self : OmReference [ '2402' ],		#time : DateAndTime [ '2018-01-14T19:02:41.696641-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JRecordVariable,				#isMetaSide : false			},			#name : #'recordDo:',			#protocol : #visitor,			#sourceCode : 'recordDo: aRecordVisiteur\r\t^aRecordVisiteur doVariable: self',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2402' ],		#self : OmReference [ '2403' ],		#time : DateAndTime [ '2018-01-14T19:02:41.698661-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JRecordVariable,				#isMetaSide : false			},			#name : #'var:node:',			#protocol : #private,			#sourceCode : 'var: aVarName node: n\r\tvar := aVarName.\r\tnodeId := n',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2403' ],		#self : OmReference [ '2404' ],		#time : DateAndTime [ '2018-01-14T19:02:41.70059-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'JCollecteur class',				#isMetaSide : true			},			#name : #'enter:',			#protocol : #'events recording',			#sourceCode : 'enter: aNid\r\t^ recorder enter: aNid',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2404' ],		#self : OmReference [ '2405' ],		#time : DateAndTime [ '2018-01-14T19:02:41.701826-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'JCollecteur class',				#isMetaSide : true			},			#name : #'enter:selector:node:',			#protocol : #'events recording',			#sourceCode : 'enter: rcv selector: sel node: nid\r\t^ recorder enter: rcv selector: sel node: nid',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2405' ],		#self : OmReference [ '2406' ],		#time : DateAndTime [ '2018-01-14T19:02:41.703185-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'JCollecteur class',				#isMetaSide : true			},			#name : #'exit:',			#protocol : #'events recording',			#sourceCode : 'exit: aNid\r\t^ recorder exit: aNid',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2406' ],		#self : OmReference [ '2407' ],		#time : DateAndTime [ '2018-01-14T19:02:41.70575-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'JCollecteur class',				#isMetaSide : true			},			#name : #'exit:node:',			#protocol : #'events recording',			#sourceCode : 'exit: aValue node: aNodeId\r\t"Exit a block, returning a value. aNodeId is the id of the block node."\r\t\r\t^ recorder exit: aValue node: aNodeId',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2407' ],		#self : OmReference [ '2408' ],		#time : DateAndTime [ '2018-01-14T19:02:41.707255-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'JCollecteur class',				#isMetaSide : true			},			#name : #initialize,			#protocol : #initialize-release,			#sourceCode : 'initialize\r\t"Collecteur initialize"\r\r\trecorder := JRecorder new',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2408' ],		#self : OmReference [ '2409' ],		#time : DateAndTime [ '2018-01-14T19:02:41.70868-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'JCollecteur class',				#isMetaSide : true			},			#name : #'record:node:value:',			#protocol : #'events recording',			#sourceCode : 'record: sel node: nid value: aValue\r\t^ recorder record: sel node: nid value: aValue',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2409' ],		#self : OmReference [ '2410' ],		#time : DateAndTime [ '2018-01-14T19:02:41.710088-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'JCollecteur class',				#isMetaSide : true			},			#name : #recorder,			#protocol : #'recorder accessing',			#sourceCode : 'recorder\r\t^recorder',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2410' ],		#self : OmReference [ '2411' ],		#time : DateAndTime [ '2018-01-14T19:02:41.711405-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'JCollecteur class',				#isMetaSide : true			},			#name : #'recorder:',			#protocol : #'recorder accessing',			#sourceCode : 'recorder: anObject\r\trecorder := anObject',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2411' ],		#self : OmReference [ '2412' ],		#time : DateAndTime [ '2018-01-14T19:02:41.712919-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'JCollecteur class',				#isMetaSide : true			},			#name : #reset,			#protocol : #initialize-release,			#sourceCode : 'reset\r\t"JCollecteur reset"\r\r\trecorder reset',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2412' ],		#self : OmReference [ '2413' ],		#time : DateAndTime [ '2018-01-14T19:02:41.715705-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'JCollecteur class',				#isMetaSide : true			},			#name : #'return:',			#protocol : #'events recording',			#sourceCode : 'return: aValue\r\t^ recorder return: aValue',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2413' ],		#self : OmReference [ '2414' ],		#time : DateAndTime [ '2018-01-14T19:02:41.717443-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'JCollecteur class',				#isMetaSide : true			},			#name : #'return:node:',			#protocol : #'events recording',			#sourceCode : 'return: aValue node: aNodeId\r\t^ recorder return: aValue node: aNodeId',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2414' ],		#self : OmReference [ '2415' ],		#time : DateAndTime [ '2018-01-14T19:02:41.719245-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JEmptyRecorder,				#isMetaSide : false			},			#name : #'assign:to:named:at:node:',			#protocol : #'execution graph',			#sourceCode : 'assign: aValue to: aVar named: aName at: anIndex node: n\r\t^aVar at: anIndex put: aValue',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2415' ],		#self : OmReference [ '2416' ],		#time : DateAndTime [ '2018-01-14T19:02:41.720484-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JEmptyRecorder,				#isMetaSide : false			},			#name : #'assign:to:node:',			#protocol : #'execution graph',			#sourceCode : 'assign: aValue to: aVar node: n \r\t^aValue',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2416' ],		#self : OmReference [ '2417' ],		#time : DateAndTime [ '2018-01-14T19:02:41.721759-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JEmptyRecorder,				#isMetaSide : false			},			#name : #'define:node:',			#protocol : #'execution graph',			#sourceCode : 'define: vars node: n',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2417' ],		#self : OmReference [ '2418' ],		#time : DateAndTime [ '2018-01-14T19:02:41.723007-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JEmptyRecorder,				#isMetaSide : false			},			#name : #'enter:',			#protocol : #'execution graph',			#sourceCode : 'enter: nid',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2418' ],		#self : OmReference [ '2419' ],		#time : DateAndTime [ '2018-01-14T19:02:41.724286-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JEmptyRecorder,				#isMetaSide : false			},			#name : #'enter:selector:node:',			#protocol : #'execution graph',			#sourceCode : 'enter: mclass selector: sel node: nid',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2419' ],		#self : OmReference [ '2420' ],		#time : DateAndTime [ '2018-01-14T19:02:41.726804-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JEmptyRecorder,				#isMetaSide : false			},			#name : #'exit:',			#protocol : #'execution graph',			#sourceCode : 'exit: v\r\t^v',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2420' ],		#self : OmReference [ '2421' ],		#time : DateAndTime [ '2018-01-14T19:02:41.728329-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JEmptyRecorder,				#isMetaSide : false			},			#name : #exitLevel,			#protocol : #'execution graph',			#sourceCode : 'exitLevel',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2421' ],		#self : OmReference [ '2422' ],		#time : DateAndTime [ '2018-01-14T19:02:41.7296-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JEmptyRecorder,				#isMetaSide : false			},			#name : #'record:node:',			#protocol : #'execution graph',			#sourceCode : 'record: aSelector node: n\r\t^aSelector',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2422' ],		#self : OmReference [ '2423' ],		#time : DateAndTime [ '2018-01-14T19:02:41.731328-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JEmptyRecorder,				#isMetaSide : false			},			#name : #'record:node:value:',			#protocol : #'execution graph',			#sourceCode : 'record: aSelector node: n value: v\r\t^v',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2423' ],		#self : OmReference [ '2424' ],		#time : DateAndTime [ '2018-01-14T19:02:41.733099-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JEmptyRecorder,				#isMetaSide : false			},			#name : #reset,			#protocol : #'execution graph',			#sourceCode : 'reset\r\t"Do nothing"',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2424' ],		#self : OmReference [ '2425' ],		#time : DateAndTime [ '2018-01-14T19:02:41.734867-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JEmptyRecorder,				#isMetaSide : false			},			#name : #'return:',			#protocol : #'execution graph',			#sourceCode : 'return: aValue\r\t^aValue',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2425' ],		#self : OmReference [ '2426' ],		#time : DateAndTime [ '2018-01-14T19:02:41.736392-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JEmptyRecorder,				#isMetaSide : false			},			#name : #'return:node:',			#protocol : #'execution graph',			#sourceCode : 'return: aValue node: n \r\t^aValue',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2426' ],		#self : OmReference [ '2427' ],		#time : DateAndTime [ '2018-01-14T19:02:41.740021-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'JInstrumentedMethods class',				#isMetaSide : true			},			#name : #'announce:',			#protocol : #announcements,			#sourceCode : 'announce: anEvent\r\t"If the announcer is nil, then nobody is listening to it and there is no need to send the event."\r\r\tannouncer ifNotNil: [ announcer announce: anEvent ]',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2427' ],		#self : OmReference [ '2428' ],		#time : DateAndTime [ '2018-01-14T19:02:41.741395-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'JInstrumentedMethods class',				#isMetaSide : true			},			#name : #announcer,			#protocol : #announcements,			#sourceCode : 'announcer\r\t^ announcer ifNil: [ announcer := Announcer new ]',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2428' ],		#self : OmReference [ '2429' ],		#time : DateAndTime [ '2018-01-14T19:02:41.742738-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'JInstrumentedMethods class',				#isMetaSide : true			},			#name : #array,			#protocol : #private,			#sourceCode : 'array\r\t^ array ifNil: [ array := Dictionary new ]',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2429' ],		#self : OmReference [ '2430' ],		#time : DateAndTime [ '2018-01-14T19:02:41.744111-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'JInstrumentedMethods class',				#isMetaSide : true			},			#name : #'atClass:andSelector:',			#protocol : #'class variables',			#sourceCode : 'atClass: aClassName andSelector: aSelectorSymbol\r\t^ self array at: (Array with: aClassName with: aSelectorSymbol)',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2430' ],		#self : OmReference [ '2431' ],		#time : DateAndTime [ '2018-01-14T19:02:41.74543-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'JInstrumentedMethods class',				#isMetaSide : true			},			#name : #'atClass:andSelector:ifAbsent:',			#protocol : #'class variables',			#sourceCode : 'atClass: aClassName andSelector: aSelectorSymbol ifAbsent: aBlock\r\t^ self array\r\t\tat: (Array with: aClassName with: aSelectorSymbol)\r\t\tifAbsent: aBlock',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2431' ],		#self : OmReference [ '2432' ],		#time : DateAndTime [ '2018-01-14T19:02:41.746828-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'JInstrumentedMethods class',				#isMetaSide : true			},			#name : #'atClass:andSelector:put:',			#protocol : #'class variables',			#sourceCode : 'atClass: aClassName andSelector: aSelectorSymbol put: aMCMethodDefinition\r\tself array\r\t\tat: (Array with: aClassName with: aSelectorSymbol)\r\t\tput: aMCMethodDefinition.\r\tAltMethodNode\r\t\tat: aClassName\r\t\tand: aSelectorSymbol\r\t\tputMethod: aMCMethodDefinition source.\r\tself\r\t\tannounce: (JMethodAdded onClass: aClassName andSelector: aSelectorSymbol)',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2432' ],		#self : OmReference [ '2433' ],		#time : DateAndTime [ '2018-01-14T19:02:41.749652-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'JInstrumentedMethods class',				#isMetaSide : true			},			#name : #'includesClass:andSelector:',			#protocol : #'class variables',			#sourceCode : 'includesClass: aClassName andSelector: aSelectorSymbol\r\t^ self array\r\t\tincludesKey: (Array with: aClassName with: aSelectorSymbol)',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2433' ],		#self : OmReference [ '2434' ],		#time : DateAndTime [ '2018-01-14T19:02:41.751195-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'JInstrumentedMethods class',				#isMetaSide : true			},			#name : #isEmpty,			#protocol : #'class variables',			#sourceCode : 'isEmpty\r\t^ self array isEmpty',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2434' ],		#self : OmReference [ '2435' ],		#time : DateAndTime [ '2018-01-14T19:02:41.752519-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'JInstrumentedMethods class',				#isMetaSide : true			},			#name : #release,			#protocol : #initialize-release,			#sourceCode : 'release\r\tannouncer := nil',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2435' ],		#self : OmReference [ '2436' ],		#time : DateAndTime [ '2018-01-14T19:02:41.753874-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'JInstrumentedMethods class',				#isMetaSide : true			},			#name : #'removeClass:andSelector:',			#protocol : #'class variables',			#sourceCode : 'removeClass: aClassName andSelector: aSelectorSymbol\r\tself array removeKey: (Array with: aClassName with: aSelectorSymbol).\r\tself\r\t\tannounce: (JMethodRemoved onClass: aClassName andSelector: aSelectorSymbol)',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2436' ],		#self : OmReference [ '2437' ],		#time : DateAndTime [ '2018-01-14T19:02:41.755299-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'JInstrumentedMethods class',				#isMetaSide : true			},			#name : #reset,			#protocol : #'class variables',			#sourceCode : 'reset\r\t| additions |\r\tadditions := OrderedCollection new.\r\tself array\r\t\tkeysAndValuesDo: [ :key :value | value addMethodAdditionTo: additions ].\r\tadditions do: [ :each | each installMethod ].\r\tadditions do: [ :each | each notifyObservers ].\r\tself array\r\t\tkeysAndValuesDo:\r\t\t\t[ :key :value | AltMethodNode removeMethodAt: key first and: key second ].\r\tarray := nil.\r\tself announce: JAllMethodsRemoved new',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2437' ],		#self : OmReference [ '2438' ],		#time : DateAndTime [ '2018-01-14T19:02:41.7567-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'JInstrumentedMethods2 class',				#isMetaSide : true			},			#name : #array,			#protocol : #accessing,			#sourceCode : 'array\r\tarray isNil\r\t\tifTrue: [ array := IdentityDictionary new ].\r\t^ array',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2438' ],		#self : OmReference [ '2439' ],		#time : DateAndTime [ '2018-01-14T19:02:41.757914-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'JInstrumentedMethods2 class',				#isMetaSide : true			},			#name : #'at:',			#protocol : #accessing,			#sourceCode : 'at: aKey\r\t^ self array at: aKey',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2439' ],		#self : OmReference [ '2440' ],		#time : DateAndTime [ '2018-01-14T19:02:41.76067-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'JInstrumentedMethods2 class',				#isMetaSide : true			},			#name : #'at:ifAbsent:',			#protocol : #accessing,			#sourceCode : 'at: aKey ifAbsent: aBlock\r\t^ self array at: aKey ifAbsent: aBlock',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2440' ],		#self : OmReference [ '2441' ],		#time : DateAndTime [ '2018-01-14T19:02:41.762091-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'JInstrumentedMethods2 class',				#isMetaSide : true			},			#name : #'at:put:',			#protocol : #accessing,			#sourceCode : 'at: aKey put: aValue\r\tself array at: aKey put: aValue',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2441' ],		#self : OmReference [ '2442' ],		#time : DateAndTime [ '2018-01-14T19:02:41.763349-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'JInstrumentedMethods2 class',				#isMetaSide : true			},			#name : #'includesKey:',			#protocol : #accessing,			#sourceCode : 'includesKey: aKey\r\t^ self array includesKey: aKey',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2442' ],		#self : OmReference [ '2443' ],		#time : DateAndTime [ '2018-01-14T19:02:41.764906-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'JInstrumentedMethods2 class',				#isMetaSide : true			},			#name : #'keysAndValuesDo:',			#protocol : #accessing,			#sourceCode : 'keysAndValuesDo: aBlock\r\t^ self array keysAndValuesDo: aBlock',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2443' ],		#self : OmReference [ '2444' ],		#time : DateAndTime [ '2018-01-14T19:02:41.766517-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'JInstrumentedMethods2 class',				#isMetaSide : true			},			#name : #reset,			#protocol : #accessing,			#sourceCode : 'reset\r\tarray := nil',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2444' ],		#self : OmReference [ '2445' ],		#time : DateAndTime [ '2018-01-14T19:02:41.767794-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'JCountOperator class',				#isMetaSide : true			},			#name : #menuLabel,			#protocol : #resources,			#sourceCode : 'menuLabel\r\t^\'count operators\'',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2445' ],		#self : OmReference [ '2446' ],		#time : DateAndTime [ '2018-01-14T19:02:41.768951-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'JCountOperator class',				#isMetaSide : true			},			#name : #new,			#protocol : #'instance creation',			#sourceCode : 'new\r\t^super new initialize',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2446' ],		#self : OmReference [ '2447' ],		#time : DateAndTime [ '2018-01-14T19:02:41.771586-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JCountOperator,				#isMetaSide : false			},			#name : #'do:',			#protocol : #accessing,			#sourceCode : 'do: anAbstractRecord\r\t"start the visit on the first record item. Returns true or false to indicate\r\tchanges to the subtree."\r\r\tself doRecord: anAbstractRecord.\r\toperators inspect.\r\t^false',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2447' ],		#self : OmReference [ '2448' ],		#time : DateAndTime [ '2018-01-14T19:02:41.772808-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JCountOperator,				#isMetaSide : false			},			#name : #'doItem:',			#protocol : #enumerating,			#sourceCode : 'doItem: aRecord\r\t"Do an item node."\r\r\toperators add: aRecord selector.\r\t^super doItem: aRecord',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2448' ],		#self : OmReference [ '2449' ],		#time : DateAndTime [ '2018-01-14T19:02:41.774714-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JCountOperator,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialize-release,			#sourceCode : 'initialize\r\toperators := Bag new',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2449' ],		#self : OmReference [ '2450' ],		#time : DateAndTime [ '2018-01-14T19:02:41.776526-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'JLoopArrange class',				#isMetaSide : true			},			#name : #menuLabel,			#protocol : #resources,			#sourceCode : 'menuLabel\r\t^\'arrange loops\'',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2450' ],		#self : OmReference [ '2451' ],		#time : DateAndTime [ '2018-01-14T19:02:41.77777-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JLoopArrange,				#isMetaSide : false			},			#name : #'do:',			#protocol : #accessing,			#sourceCode : 'do: anAbstractRecord\r\tsuper do: anAbstractRecord.\r\t^true',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2451' ],		#self : OmReference [ '2452' ],		#time : DateAndTime [ '2018-01-14T19:02:41.779064-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JLoopArrange,				#isMetaSide : false			},			#name : #'doRecords:',			#protocol : #enumerating-private,			#sourceCode : 'doRecords: records \r\t"Fuse blocks indications into the loop structure. Should probably be able to track even blocks defined as variables."\r\r\t"Algorithme:\r\t\tfirst iterate through the records.\r\t\tif the child is a message send (a RecordItem), then\r\t\t\tif the previous record is a block, then it was an iteration of a loop message. So move it as a child of the message (removing it from the records).\r\t\t\tContinue backwards and repeat until we find something else than a block.\r\tScope:\r\t\tseems to work on any message send which has a block as parameter, so including ifTrue:ifFalse: and whileTrue:\r\r\tExample:\r\t\tif the record structure is\r\t\t+-- []\r\t\t+-- []\r\t\t+-- #to:do:\r\t\tThen the two blocks are iterations of the #to:do: and the result will be rewritten as:\r\t\t+-- #to:do:\r\t\t     +-- []\r\t\t     +-- []."\r\r\t| r rc tps |\r\trc := super doRecords: records.\r\ttps := OrderedCollection new.\r\trc do: \r\t\t\t[:lv | \r\t\t\t"This loop searches for message sends; such a message may be a loop construct."\r\r\t\t\tr := lv value.\r\t\t\t(r isKindOf: JRecordItem) \r\t\t\t\tifTrue: \r\t\t\t\t\t[tps reverseDo: \r\t\t\t\t\t\t\t[:i | \r\t\t\t\t\t\t\trc remove: i.\r\t\t\t\t\t\t\tr children addFirst: i]].\r\t\t\t(r isKindOf: JRecordBlock) \r\t\t\t\tifTrue: [tps add: lv]\r\t\t\t\tifFalse: [tps isEmpty ifFalse: [tps := OrderedCollection new]]].\r\t^rc',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2452' ],		#self : OmReference [ '2453' ],		#time : DateAndTime [ '2018-01-14T19:02:41.782057-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'JMethodArrange class',				#isMetaSide : true			},			#name : #menuLabel,			#protocol : #resources,			#sourceCode : 'menuLabel\r\t^\'arrange method\'',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2453' ],		#self : OmReference [ '2454' ],		#time : DateAndTime [ '2018-01-14T19:02:41.783567-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JMethodArrange,				#isMetaSide : false			},			#name : #'do:',			#protocol : #accessing,			#sourceCode : 'do: aRecordItem\r\tsuper do: aRecordItem.\r\t^true',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2454' ],		#self : OmReference [ '2455' ],		#time : DateAndTime [ '2018-01-14T19:02:41.784778-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JMethodArrange,				#isMetaSide : false			},			#name : #'doRecords:',			#protocol : #enumerating-private,			#sourceCode : 'doRecords: records \r\t"Fuse message send events and method entry, if appropriate."\r\r\t| rcs plv |\r\trcs := super doRecords: records.\r\tplv := nil.\r\trcs\r\t\tlinksDo: \r\t\t\t[:lv | | r |\r\t\t\tr := lv value.\r\t\t\t(plv notNil and: [plv value isMethod and: [plv value selector == r selector]])\r\t\t\t\tifTrue: \r\t\t\t\t\t[rcs remove: plv value.\r\t\t\t\t\tr children addFirst: plv].\r\t\t\tplv := lv].\r\t^rcs',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2455' ],		#self : OmReference [ '2456' ],		#time : DateAndTime [ '2018-01-14T19:02:41.786179-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'JRecordVisiteur class',				#isMetaSide : true			},			#name : #'do:',			#protocol : #'instance creation',			#sourceCode : 'do: anAbstractItem\r\t^self new do: anAbstractItem',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2456' ],		#self : OmReference [ '2457' ],		#time : DateAndTime [ '2018-01-14T19:02:41.787262-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'JRecordVisiteur class',				#isMetaSide : true			},			#name : #menuLabel,			#protocol : #resources,			#sourceCode : 'menuLabel\r\t^\'visit...\'',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2457' ],		#self : OmReference [ '2458' ],		#time : DateAndTime [ '2018-01-14T19:02:41.788621-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JRecordVisiteur,				#isMetaSide : false			},			#name : #'do:',			#protocol : #accessing,			#sourceCode : 'do: anAbstractRecord\r\t"start the visit on the first record item. Returns true or false to indicate\r\tchanges to the subtree."\r\r\tself doRecord: anAbstractRecord.\r\t^false',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2458' ],		#self : OmReference [ '2459' ],		#time : DateAndTime [ '2018-01-14T19:02:41.789791-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JRecordVisiteur,				#isMetaSide : false			},			#name : #'doAssignment:',			#protocol : #enumerating,			#sourceCode : 'doAssignment: aRecord\r\t"Do an assignment node."\r\r\t^aRecord',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2459' ],		#self : OmReference [ '2460' ],		#time : DateAndTime [ '2018-01-14T19:02:41.792273-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JRecordVisiteur,				#isMetaSide : false			},			#name : #'doBlock:',			#protocol : #enumerating,			#sourceCode : 'doBlock: aRecord\r\t"Do an block node."\r\r\t^aRecord setChildren: (self doRecords: aRecord children)',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2460' ],		#self : OmReference [ '2461' ],		#time : DateAndTime [ '2018-01-14T19:02:41.793843-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JRecordVisiteur,				#isMetaSide : false			},			#name : #'doItem:',			#protocol : #enumerating,			#sourceCode : 'doItem: aRecord\r\t"Do an item node."\r\r\t^aRecord setChildren: (self doRecords: aRecord children)',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2461' ],		#self : OmReference [ '2462' ],		#time : DateAndTime [ '2018-01-14T19:02:41.795123-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JRecordVisiteur,				#isMetaSide : false			},			#name : #'doMethod:',			#protocol : #enumerating,			#sourceCode : 'doMethod: aRecord\r\t^aRecord setChildren: (self doRecords: aRecord children)',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2462' ],		#self : OmReference [ '2463' ],		#time : DateAndTime [ '2018-01-14T19:02:41.796522-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JRecordVisiteur,				#isMetaSide : false			},			#name : #'doRecord:',			#protocol : #enumerating-private,			#sourceCode : 'doRecord: aRecord\r\t^aRecord recordDo: self',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2463' ],		#self : OmReference [ '2464' ],		#time : DateAndTime [ '2018-01-14T19:02:41.797899-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JRecordVisiteur,				#isMetaSide : false			},			#name : #'doRecords:',			#protocol : #enumerating-private,			#sourceCode : 'doRecords: records\r\t^records collect: [:n | self doRecord: n]',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2464' ],		#self : OmReference [ '2465' ],		#time : DateAndTime [ '2018-01-14T19:02:41.799692-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JRecordVisiteur,				#isMetaSide : false			},			#name : #'doVariable:',			#protocol : #enumerating,			#sourceCode : 'doVariable: aRecord\r\t"Do an assignment node."\r\r\t^aRecord',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2465' ],		#self : OmReference [ '2466' ],		#time : DateAndTime [ '2018-01-14T19:02:41.80116-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'JTypeFilter class',				#isMetaSide : true			},			#name : #menuLabel,			#protocol : #resources,			#sourceCode : 'menuLabel\r\t^\'filter on type...\'',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2466' ],		#self : OmReference [ '2467' ],		#time : DateAndTime [ '2018-01-14T19:02:41.803756-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JTypeFilter,				#isMetaSide : false			},			#name : #'do:',			#protocol : #accessing,			#sourceCode : 'do: aRV\r\t"Iterate starting at a RV."\r\r\t| aClass |\r\taClass := SearchFacade classSearch chooseFromOwner: World.\r\taClass notNil ifFalse: [^self].\r\tself setType: aClass.\r\tsuper do: aRV.\r\t^true',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2467' ],		#self : OmReference [ '2468' ],		#time : DateAndTime [ '2018-01-14T19:02:41.805087-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JTypeFilter,				#isMetaSide : false			},			#name : #'doAssignment:',			#protocol : #enumerating,			#sourceCode : 'doAssignment: aRecord\r\t"An assignment has a value, hence a type."\r\r\t^(aRecord value isKindOf: type)\r\t\tifTrue: [aRecord]\r\t\tifFalse: [nil]',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2468' ],		#self : OmReference [ '2469' ],		#time : DateAndTime [ '2018-01-14T19:02:41.806503-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JTypeFilter,				#isMetaSide : false			},			#name : #'doBlock:',			#protocol : #enumerating,			#sourceCode : 'doBlock: aRecord\r\t| ns |\r\tns := (super doBlock: aRecord) reject: [:n | n isNil].\r\t^ns isEmpty\r\t\tifFalse: [aRecord copy setChildren: ns]\r\t\tifTrue: [nil]',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2469' ],		#self : OmReference [ '2470' ],		#time : DateAndTime [ '2018-01-14T19:02:41.807789-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JTypeFilter,				#isMetaSide : false			},			#name : #'doItem:',			#protocol : #enumerating,			#sourceCode : 'doItem: aRecord\r\t| ns |\r\tns := (super doItem: aRecord) reject: [:n | n isNil].\r\t^ns isEmpty\r\t\tifFalse: [aRecord copy setChildren: ns]\r\t\tifTrue: [nil]',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2470' ],		#self : OmReference [ '2471' ],		#time : DateAndTime [ '2018-01-14T19:02:41.809128-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JTypeFilter,				#isMetaSide : false			},			#name : #'doMethod:',			#protocol : #enumerating,			#sourceCode : 'doMethod: aRecord\r\t| ns |\r\tns := (super doItem: aRecord) reject: [:n | n isNil].\r\t^ns isEmpty\r\t\tifFalse: [aRecord copy setChildren: ns]\r\t\tifTrue: [nil]',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2471' ],		#self : OmReference [ '2472' ],		#time : DateAndTime [ '2018-01-14T19:02:41.810381-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JTypeFilter,				#isMetaSide : false			},			#name : #'doVariable:',			#protocol : #enumerating,			#sourceCode : 'doVariable: aRecord\r\t"Not interested in tracking variable declaration."\r\r\t^nil',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2472' ],		#self : OmReference [ '2473' ],		#time : DateAndTime [ '2018-01-14T19:02:41.811633-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JTypeFilter,				#isMetaSide : false			},			#name : #'setGF:',			#protocol : #private,			#sourceCode : 'setGF: aGF\r\ttype := aGF',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2473' ],		#self : OmReference [ '2474' ],		#time : DateAndTime [ '2018-01-14T19:02:41.814382-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JTypeFilter,				#isMetaSide : false			},			#name : #'setType:',			#protocol : #private,			#sourceCode : 'setType: aClass\r\ttype := aClass',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2474' ],		#self : OmReference [ '2475' ],		#time : DateAndTime [ '2018-01-14T19:02:41.816117-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'JRecorder class',				#isMetaSide : true			},			#name : #new,			#protocol : #'instance creation',			#sourceCode : 'new\r\t^super new initialize',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2475' ],		#self : OmReference [ '2476' ],		#time : DateAndTime [ '2018-01-14T19:02:41.817396-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JRecorder,				#isMetaSide : false			},			#name : #'addChild:',			#protocol : #private,			#sourceCode : 'addChild: aRecord\r\tself current addChild: aRecord',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2476' ],		#self : OmReference [ '2477' ],		#time : DateAndTime [ '2018-01-14T19:02:41.818547-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JRecorder,				#isMetaSide : false			},			#name : #'assign:to:named:at:node:',			#protocol : #'execution graph',			#sourceCode : 'assign: aValue to: aVar named: aName at: anIndex node: n\r\tself addChild: (JRecordAssignment new \r\t\t\t\tvar: aName , \'[\' , anIndex printString , \']\'\r\t\t\t\tnode: n\r\t\t\t\tvalue: aValue shallowCopy).\r\t^aVar at: anIndex put: aValue',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2477' ],		#self : OmReference [ '2478' ],		#time : DateAndTime [ '2018-01-14T19:02:41.820011-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JRecorder,				#isMetaSide : false			},			#name : #'assign:to:node:',			#protocol : #'execution graph',			#sourceCode : 'assign: aValue to: aVar node: n\r\tself\r\t\taddChild:\r\t\t\t(JRecordAssignment new var: aVar node: n value: aValue shallowCopy).\r\t^ aValue',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2478' ],		#self : OmReference [ '2479' ],		#time : DateAndTime [ '2018-01-14T19:02:41.822148-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JRecorder,				#isMetaSide : false			},			#name : #'atPut:args:node:',			#protocol : #'execution graph',			#sourceCode : 'atPut: anObject args: anArrayOfObjects node: n\r\t| anIndex aValue aName |\r\tanIndex := anArrayOfObjects first.\r\taValue := anArrayOfObjects last.\r\taName := n receiver name.\r\tself\r\t\taddChild:\r\t\t\t(JRecordAssignment new\r\t\t\t\tvar: aName , \'[\' , anIndex printString , \']\'\r\t\t\t\tnode: n\r\t\t\t\tvalue: aValue shallowCopy).\r\t^ anObject at: anIndex put: aValue',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2479' ],		#self : OmReference [ '2480' ],		#time : DateAndTime [ '2018-01-14T19:02:41.824739-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JRecorder,				#isMetaSide : false			},			#name : #current,			#protocol : #accessing,			#sourceCode : 'current\r\t^stack last',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2480' ],		#self : OmReference [ '2481' ],		#time : DateAndTime [ '2018-01-14T19:02:41.826214-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JRecorder,				#isMetaSide : false			},			#name : #'define:node:',			#protocol : #'execution graph',			#sourceCode : 'define: vars node: n\r\tself addChild: (JRecordVariable new \r\t\t\t\tvar: vars\r\t\t\t\tnode: n)',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2481' ],		#self : OmReference [ '2482' ],		#time : DateAndTime [ '2018-01-14T19:02:41.827528-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JRecorder,				#isMetaSide : false			},			#name : #elements,			#protocol : #accessing,			#sourceCode : 'elements\r\t^stack first children',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2482' ],		#self : OmReference [ '2483' ],		#time : DateAndTime [ '2018-01-14T19:02:41.829129-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JRecorder,				#isMetaSide : false			},			#name : #'enter:',			#protocol : #'execution graph',			#sourceCode : 'enter: nid\r\t"we are going into a loop or into an ifTrue: or ifFalse:"\r\r\t| n |\r\tn := JRecordBlock new \r\t\t\t\tnode: nid.\r\tself addChild: n.\r\tstack addLast: n',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2483' ],		#self : OmReference [ '2484' ],		#time : DateAndTime [ '2018-01-14T19:02:41.830526-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JRecorder,				#isMetaSide : false			},			#name : #'enter:selector:arguments:node:',			#protocol : #'execution graph',			#sourceCode : 'enter: object selector: sel arguments: anArrayOfObject node: nid\r\t"we are going into a method. Add a level."\r\r\t| n |\r\tn := JRecordMethod new\r\t\tobject: object shallowCopy\r\t\tselector: sel\r\t\tnode: nid.\r\tself addChild: n.\r\tstack addLast: n.\r\tnid arguments\r\t\twith: anArrayOfObject\r\t\tdo: [ :aNode :aValue | self assign: aValue to: aNode name node: aNode ]',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2484' ],		#self : OmReference [ '2485' ],		#time : DateAndTime [ '2018-01-14T19:02:41.831872-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JRecorder,				#isMetaSide : false			},			#name : #'enter:selector:node:',			#protocol : #'execution graph',			#sourceCode : 'enter: object selector: sel node: nid\r\t"we are going into a method. Add a level."\r\r\t| n |\r\tn := JRecordMethod new object: object shallowCopy selector: sel node: nid.\r\tself addChild: n.\r\tstack addLast: n',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2485' ],		#self : OmReference [ '2486' ],		#time : DateAndTime [ '2018-01-14T19:02:41.833565-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JRecorder,				#isMetaSide : false			},			#name : #'enterBlock:',			#protocol : #'execution graph',			#sourceCode : 'enterBlock: nid\r\t"we are going into a loop or into an ifTrue: or ifFalse:"\r\r\t| n |\r\tn := JRecordBlock new \r\t\t\t\tnode: nid.\r\tself addChild: n.\r\tstack addLast: n',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2486' ],		#self : OmReference [ '2487' ],		#time : DateAndTime [ '2018-01-14T19:02:41.836369-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JRecorder,				#isMetaSide : false			},			#name : #'exit:',			#protocol : #'execution graph',			#sourceCode : 'exit: aValue\r\t"going out of a level, with a returned value."\r\r\tstack removeLast.\r\t^aValue',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2487' ],		#self : OmReference [ '2488' ],		#time : DateAndTime [ '2018-01-14T19:02:41.837859-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JRecorder,				#isMetaSide : false			},			#name : #'exit:node:',			#protocol : #'execution graph',			#sourceCode : 'exit: aValue node: aNodeId\r\t"going out of a level, with a returned value. If we have a node id, then we know if  we need to pop more."\r\r\t[ stack removeLast node == aNodeId ] whileFalse: [  ].\r\t^ aValue',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2488' ],		#self : OmReference [ '2489' ],		#time : DateAndTime [ '2018-01-14T19:02:41.839206-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JRecorder,				#isMetaSide : false			},			#name : #'exitBlock:',			#protocol : #'execution graph',			#sourceCode : 'exitBlock: aNode\r\t"I\'m going out of a block. Check that our last item is the one we\'re expecting."\r\r\tself assert: stack last isMethod not.\r\tstack removeLast.\r\t^ aNode',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2489' ],		#self : OmReference [ '2490' ],		#time : DateAndTime [ '2018-01-14T19:02:41.840683-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JRecorder,				#isMetaSide : false			},			#name : #exitLevel,			#protocol : #'execution graph',			#sourceCode : 'exitLevel\r\t"going out of a level."\r\r\tstack size > 1 ifTrue: [stack removeLast]',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2490' ],		#self : OmReference [ '2491' ],		#time : DateAndTime [ '2018-01-14T19:02:41.842032-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JRecorder,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialize-release,			#sourceCode : 'initialize\r\tstack := OrderedCollection new.\r\tstack add: (JRecordItem new selector: #root node: 0)',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2491' ],		#self : OmReference [ '2492' ],		#time : DateAndTime [ '2018-01-14T19:02:41.843553-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JRecorder,				#isMetaSide : false			},			#name : #'oldPrintOn:',			#protocol : #printing,			#sourceCode : 'oldPrintOn: aStream \r\t| indent b |\r\tindent := \'\'.\r\tb := \r\t\t\t[:a | \r\t\t\ta hasChildren \r\t\t\t\tifTrue: \r\t\t\t\t\t[aStream\r\t\t\t\t\t\tnextPutAll: indent , a printString;\r\t\t\t\t\t\tcr.\r\t\t\t\t\tindent := indent , \'    \'.\r\t\t\t\t\ta children do: [:el | b value: el value].\r\t\t\t\t\tindent := indent copyFrom: 1 to: indent size - 4]\r\t\t\t\tifFalse: \r\t\t\t\t\t[aStream\r\t\t\t\t\t\tnextPutAll: indent , a printString;\r\t\t\t\t\t\tcr]].\r\tb value: stack first',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2492' ],		#self : OmReference [ '2493' ],		#time : DateAndTime [ '2018-01-14T19:02:41.84623-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JRecorder,				#isMetaSide : false			},			#name : #'record:node:',			#protocol : #'execution graph',			#sourceCode : 'record: aSelector node: n \r\t"Record a selector with it\'s source position, to relate to the original source in a browser."\r\r\t| r |\r\tr := JRecordItem new selector: aSelector node: n.\r\tself addChild: r.\r\t^aSelector',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2493' ],		#self : OmReference [ '2494' ],		#time : DateAndTime [ '2018-01-14T19:02:41.84779-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JRecorder,				#isMetaSide : false			},			#name : #'record:node:value:',			#protocol : #'execution graph',			#sourceCode : 'record: aSelector node: n value: v\r\t"Record a selector with it\'s source position, to relate to the original source in a browser."\r\r\t| r |\r\tr := JRecordItem new selector: aSelector node: n.\r\tself addChild: r.\r\t^v',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2494' ],		#self : OmReference [ '2495' ],		#time : DateAndTime [ '2018-01-14T19:02:41.849104-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JRecorder,				#isMetaSide : false			},			#name : #'recordNode:',			#protocol : #'execution graph',			#sourceCode : 'recordNode: n\r\t"Record that we have gone through a node."\r\r\t| r |\r\tr := JRecordItem new selector: nil node: n.\r\tself addChild: r',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2495' ],		#self : OmReference [ '2496' ],		#time : DateAndTime [ '2018-01-14T19:02:41.850832-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JRecorder,				#isMetaSide : false			},			#name : #reset,			#protocol : #initialize-release,			#sourceCode : 'reset\r\tstack first setChildren: nil.\r\t[stack size > 1] whileTrue: [stack removeLast]',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2496' ],		#self : OmReference [ '2497' ],		#time : DateAndTime [ '2018-01-14T19:02:41.852426-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JRecorder,				#isMetaSide : false			},			#name : #'return:',			#protocol : #'execution graph',			#sourceCode : 'return: aValue \r\t[stack removeLast isMethod] whileFalse: [].\r\t^aValue',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2497' ],		#self : OmReference [ '2498' ],		#time : DateAndTime [ '2018-01-14T19:02:41.853846-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JRecorder,				#isMetaSide : false			},			#name : #'return:node:',			#protocol : #'execution graph',			#sourceCode : 'return: aValue node: n\r\tself\r\t\taddChild:\r\t\t\t(JRecordAssignment new var: \'return\' node: n value: aValue shallowCopy).\r\t[ stack removeLast isMethod ] whileFalse: [  ].\r\t^ aValue',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2498' ],		#self : OmReference [ '2499' ],		#time : DateAndTime [ '2018-01-14T19:02:41.855363-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JRecorder,				#isMetaSide : false			},			#name : #stack,			#protocol : #accessing,			#sourceCode : 'stack\r\t^stack',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2499' ],		#self : OmReference [ '2500' ],		#time : DateAndTime [ '2018-01-14T19:02:41.85813-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JRecorder,				#isMetaSide : false			},			#name : #'storeOn:',			#protocol : #printing,			#sourceCode : 'storeOn: aStream\r\t#JCollecteur storeOn: aStream',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2500' ],		#self : OmReference [ '2501' ],		#time : DateAndTime [ '2018-01-14T19:02:41.859587-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JThreadedRecorder,				#isMetaSide : false			},			#name : #'context:',			#protocol : #'execution graph',			#sourceCode : 'context: nid\r\t"Do add a level if we enter a process; exit a level too."\r\r\tprocess == Processor activeProcess \r\t\tifFalse: \r\t\t\t[| n |\r\t\t\tself exitLevel.\r\t\t\tprocess := Processor activeProcess.\r\t\t\tn := JRecordItem new selector: \'Context Switch\' node: nid.\r\t\t\tself current addChild: n.\r\t\t\tstack addLast: n]',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2501' ],		#self : OmReference [ '2502' ],		#time : DateAndTime [ '2018-01-14T19:02:41.860933-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JThreadedRecorder,				#isMetaSide : false			},			#name : #'enter:selector:node:',			#protocol : #'execution graph',			#sourceCode : 'enter: object selector: sel node: nid\r\t"we are going into a method. Add a level."\r\r\t| n |\r\tn := JRecordMethod new \r\t\t\t\tobject: object copy\r\t\t\t\tselector: sel\r\t\t\t\tnode: nid.\r\tself current addChild: n.\r\tstack addLast: n.\r\tself context: nid.',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2502' ],		#self : OmReference [ '2503' ],		#time : DateAndTime [ '2018-01-14T19:02:41.862466-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JThreadedRecorder,				#isMetaSide : false			},			#name : #'record:node:',			#protocol : #'execution graph',			#sourceCode : 'record: aSelector node: n\r\t"Record a selector with it\'s source position, to relate to the original source in a browser."\r\r\t| r |\r\tself context: n.\r\tr := JRecordItem new \r\t\t\t\tselector: aSelector\r\t\t\t\tnode: n.\r\tself current children isEmpty \r\t\tifFalse: \r\t\t\t[(self current children last isMethod \r\t\t\t\tand: [self current children last selector == r selector]) \r\t\t\t\t\tifTrue: \r\t\t\t\t\t\t[| t |\r\t\t\t\t\t\tt := self current children removeLast.\r\t\t\t\t\t\tr children add: t]].\r\tself current children add: r',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2503' ],		#self : OmReference [ '2504' ],		#time : DateAndTime [ '2018-01-14T19:02:41.864238-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JThreadedRecorder,				#isMetaSide : false			},			#name : #reset,			#protocol : #initialize-release,			#sourceCode : 'reset\r\tstack first setChildren: nil.\r\t[stack size > 1] whileTrue: [stack removeLast].\r\tprocess := nil',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2504' ],		#self : OmReference [ '2505' ],		#time : DateAndTime [ '2018-01-14T19:02:41.865798-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'JTraceViewer class',				#isMetaSide : true			},			#name : #'menuCommandOn:',			#protocol : #'class initialization',			#sourceCode : 'menuCommandOn: aBuilder \r\t<worldMenu> \r\t(aBuilder item: #\'Jejak Trace Viewer\')\r\t\t\tparent: #Tools;\r\t\t\taction: [ self open ]; \r\t\t\thelp: \'View / Explore / Reset traces\'.',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2505' ],		#self : OmReference [ '2506' ],		#time : DateAndTime [ '2018-01-14T19:02:41.868255-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'JTraceViewer class',				#isMetaSide : true			},			#name : #open,			#protocol : #'instance creation',			#sourceCode : 'open\r\t^ self new open',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2506' ],		#self : OmReference [ '2507' ],		#time : DateAndTime [ '2018-01-14T19:02:41.870079-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'JTraceViewer class',				#isMetaSide : true			},			#name : #'openOnEnvironment:',			#protocol : #'instance creation',			#sourceCode : 'openOnEnvironment: aRBEnvironment\r\t^ AltBrowser openOnEnvironment: aRBEnvironment',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2507' ],		#self : OmReference [ '2508' ],		#time : DateAndTime [ '2018-01-14T19:02:41.871681-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JTraceViewer,				#isMetaSide : false			},			#name : #'buildTextMenu:',			#protocol : #shortcuts,			#sourceCode : 'buildTextMenu: aMenu\r\tself selectedItem notNil\r\t\tifTrue: [ self selectedItem buildTextMenu: aMenu on: textMorph with: self ].\r\t^ aMenu',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2508' ],		#self : OmReference [ '2509' ],		#time : DateAndTime [ '2018-01-14T19:02:41.872857-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JTraceViewer,				#isMetaSide : false			},			#name : #'buildTextShortcutsOn:with:',			#protocol : #shortcuts,			#sourceCode : 'buildTextShortcutsOn: aKMDispatcher with: aRequestor\r\t"This is an attempt at handling shortcuts... Which works, with the help of a custom KMDispatcher."\r\r\tself selectedItem notNil\r\t\tifTrue: [ self selectedItem\r\t\t\t\tbuildTextShortcutsOn: aKMDispatcher\r\t\t\t\tfor: aRequestor ]',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2509' ],		#self : OmReference [ '2510' ],		#time : DateAndTime [ '2018-01-14T19:02:41.874223-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JTraceViewer,				#isMetaSide : false			},			#name : #'buildTreeMenu:',			#protocol : #shortcuts,			#sourceCode : 'buildTreeMenu: aMenu\r\t"The tree menu."\r\r\tself selectedItem\r\t\tifNotNil: [ :s | s buildStackMenu: aMenu on: treeMorph for: self ].\r\t^ aMenu',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2510' ],		#self : OmReference [ '2511' ],		#time : DateAndTime [ '2018-01-14T19:02:41.87557-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JTraceViewer,				#isMetaSide : false			},			#name : #'buildTreeShortcutsOn:with:',			#protocol : #shortcuts,			#sourceCode : 'buildTreeShortcutsOn: aKMDispatcher with: aRequestor\r\t"This is an attempt at handling shortcuts..."\r\r\tself selectedItem\r\t\tifNotNil: [ :s | s buildTreeShortcutsOn: aKMDispatcher for: aRequestor ]',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2511' ],		#self : OmReference [ '2512' ],		#time : DateAndTime [ '2018-01-14T19:02:41.877137-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JTraceViewer,				#isMetaSide : false			},			#name : #buttons,			#protocol : #'user interface',			#sourceCode : 'buttons\r\t"Create the command buttons as required. Maybe plug it into the command framework later."\r\r\t| anEraseEventsButton anUpdateButton |\r\tanEraseEventsButton := self\r\t\tpluggableButtonDo: #eraseEvents\r\t\tnamed: \'Erase events\'.\r\tremoveProbesButton := self\r\t\tpluggableButtonDo: #removeProbes\r\t\tnamed: \'Remove Probes\'.\r\tJInstrumentedMethods announcer\r\t\twhen: JMethodAdded , JMethodRemoved , JAllMethodsRemoved\r\t\tsend: #updateProbes\r\t\tto: self.\r\tself updateProbes.\r\tanUpdateButton := self pluggableButtonDo: #update named: \'Update\'.\r\t^ AlignmentMorph newRow\r\t\tvResizing: #shrinkWrap;\r\t\thResizing: #spaceFill;\r\t\tlayoutInset: 0;\r\t\taddMorph: anUpdateButton;\r\t\taddMorph: removeProbesButton;\r\t\taddMorph: anEraseEventsButton;\r\t\tyourself',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2512' ],		#self : OmReference [ '2513' ],		#time : DateAndTime [ '2018-01-14T19:02:41.879905-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JTraceViewer,				#isMetaSide : false			},			#name : #delete,			#protocol : #initialization,			#sourceCode : 'delete\r\t^ self release',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2513' ],		#self : OmReference [ '2514' ],		#time : DateAndTime [ '2018-01-14T19:02:41.881481-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JTraceViewer,				#isMetaSide : false			},			#name : #eraseEvents,			#protocol : #actions,			#sourceCode : 'eraseEvents\r\t"Erase all recorded events."\r\r\tJCollecteur recorder reset.\r\tself records rebuildContents.\r\tsource contents: \'\'',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2514' ],		#self : OmReference [ '2515' ],		#time : DateAndTime [ '2018-01-14T19:02:41.883208-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JTraceViewer,				#isMetaSide : false			},			#name : #open,			#protocol : #'user interface',			#sourceCode : 'open\r\t"Open the window."\r\r\t| pane subPane right |\r\tpane := AlignmentMorph newColumn\r\t\thResizing: #spaceFill;\r\t\tvResizing: #spaceFill;\r\t\tcellPositioning: #leftCenter;\r\t\tcolor: Color transparent;\r\t\tlayoutInset: 0;\r\t\tyourself.\r\tsubPane := Morph new\r\t\thResizing: #spaceFill;\r\t\tvResizing: #spaceFill;\r\t\tfillStyle: Color transparent;\r\t\tchangeProportionalLayout;\r\t\tyourself.\t"non pane color tracking"\r\tpane addMorph: subPane.\r\tpane addMorph: self buttons.\r\twindow := Smalltalk ui theme\r\t\tnewWindowIn: World\r\t\tfor: self\r\t\ttitle: self title.\r\twindow\r\t\taddMorph: pane\r\t\tfullFrame:\r\t\t\t(AltLayoutFrame\r\t\t\t\tfractions: (0 @ 0 corner: 1 @ 1)\r\t\t\t\ttopLeftOffsets: 0 @ 0\r\t\t\t\tbottomRightOffsets: 0 @ 0).\r\tself treeMorph\r\t\ton: #keyStroke\r\t\tsend: #startSearch:for:\r\t\tto: AltKeyboardSearchInTree.\r\tsubPane\r\t\taddMorph: self treeMorph\r\t\tfullFrame:\r\t\t\t(AltLayoutFrame\r\t\t\t\tfractions: (0.0 @ 0.0 corner: 0.3 @ 1.0)\r\t\t\t\ttopLeftOffsets: 1 @ 0\r\t\t\t\tbottomRightOffsets: -1 @ 0).\r\tsubPane\r\t\taddMorph: self textMorph\r\t\tfullFrame:\r\t\t\t(AltLayoutFrame\r\t\t\t\tfractions: (0.3 @ 0.0 corner: 1.0 @ 1.0)\r\t\t\t\ttopLeftOffsets: 1 @ 1\r\t\t\t\tbottomRightOffsets: -1 @ 0).\r\tsubPane\r\t\taddMorph:\r\t\t\t(ProportionalSplitterMorph new\r\t\t\t\tlayoutFrame:\r\t\t\t\t\t(AltLayoutFrame\r\t\t\t\t\t\tfractions: (0.3 @ 0.0 corner: 0.3 @ 1.0)\r\t\t\t\t\t\ttopLeftOffsets: -1 @ 0\r\t\t\t\t\t\tbottomRightOffsets: 1 @ 0);\r\t\t\t\taddLeftOrTop: self treeMorph;\r\t\t\t\taddRightOrBottom: self textMorph).\r\twindow minimumExtent: 200 @ 300.\r\twindow announcer when: WindowClosed send: #release to: self.\r\twindow open.\r\tself\r\t\tupdateTreeKeymap;\r\t\tupdateTextKeymap;\r\t\tupdateSelection.\r\tself treeMorph takeKeyboardFocus',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2515' ],		#self : OmReference [ '2516' ],		#time : DateAndTime [ '2018-01-14T19:02:41.884636-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JTraceViewer,				#isMetaSide : false			},			#name : #'pluggableButtonDo:named:',			#protocol : #private,			#sourceCode : 'pluggableButtonDo: aSymbol named: aString\r\t| aButton |\r\taButton := PluggableButtonMorph\r\t\ton: self\r\t\tgetState: nil\r\t\taction: aSymbol.\r\taButton\r\t\thResizing: #spaceFill;\r\t\tvResizing: #shrinkWrap;\r\t\tlabel: aString.\r\t^ aButton',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2516' ],		#self : OmReference [ '2517' ],		#time : DateAndTime [ '2018-01-14T19:02:41.885979-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JTraceViewer,				#isMetaSide : false			},			#name : #rbEnvironment,			#protocol : #accessing,			#sourceCode : 'rbEnvironment\r\t"Return a default rbEnvironment."\r\r\t^ RBBrowserEnvironment new',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2517' ],		#self : OmReference [ '2518' ],		#time : DateAndTime [ '2018-01-14T19:02:41.887379-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JTraceViewer,				#isMetaSide : false			},			#name : #records,			#protocol : #accessing,			#sourceCode : 'records\r\t^ records\r\t\tifNil:\r\t\t\t[ records := JTraceViewerItemNode on: JCollecteur recorder stack first.\r\t\t\trecords announcer\r\t\t\t\twhen: AltSelectionChanged send: #updateSelection to: self;\r\t\t\t\twhen: AltListChanged send: #updateSelection to: self.\r\t\t\trecords ]',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2518' ],		#self : OmReference [ '2519' ],		#time : DateAndTime [ '2018-01-14T19:02:41.890104-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JTraceViewer,				#isMetaSide : false			},			#name : #release,			#protocol : #initialization,			#sourceCode : 'release\r\trecords ifNotNil: [ records announcer unsubscribe: self ].\r\twindow ifNotNil: [ window announcer unsubscribe: self ].\r\ttreeMorph ifNotNil: [ treeMorph release ].\r\tJInstrumentedMethods announcer unsubscribe: self.\r\tEditorFindReplaceDialogWindow initialize.\r\tsuper release',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2519' ],		#self : OmReference [ '2520' ],		#time : DateAndTime [ '2018-01-14T19:02:41.891591-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JTraceViewer,				#isMetaSide : false			},			#name : #removeProbes,			#protocol : #actions,			#sourceCode : 'removeProbes\r\t"Remove all probes."\r\r\tJProbesWriter uninstall',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2520' ],		#self : OmReference [ '2521' ],		#time : DateAndTime [ '2018-01-14T19:02:41.892973-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JTraceViewer,				#isMetaSide : false			},			#name : #selectedItem,			#protocol : #selection,			#sourceCode : 'selectedItem\r\t^ self records selectedItem',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2521' ],		#self : OmReference [ '2522' ],		#time : DateAndTime [ '2018-01-14T19:02:41.894402-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JTraceViewer,				#isMetaSide : false			},			#name : #selectedNode,			#protocol : #selection,			#sourceCode : 'selectedNode\r\t^ self records selectedItem',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2522' ],		#self : OmReference [ '2523' ],		#time : DateAndTime [ '2018-01-14T19:02:41.895776-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JTraceViewer,				#isMetaSide : false			},			#name : #source,			#protocol : #accessing,			#sourceCode : 'source\r\t^ source isNil\r\t\tifTrue: [ \r\t\t\tsource := AltBrowserCodeModel new.\r\t\t\tsource browser: self ]\r\t\tifFalse: [ source ]',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2523' ],		#self : OmReference [ '2524' ],		#time : DateAndTime [ '2018-01-14T19:02:41.897322-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JTraceViewer,				#isMetaSide : false			},			#name : #textMorph,			#protocol : #'user interface',			#sourceCode : 'textMorph\r\t^ textMorph\r\t\tifNil: [ textMorph := (AltPluggableTextMorph\r\t\t\t\ton: self source\r\t\t\t\ttext: #contents\r\t\t\t\taccept: nil\r\t\t\t\treadSelection: nil\r\t\t\t\tmenu: #buildTextMenu:)\r\t\t\t\tfont: StandardFonts codeFont;\r\t\t\t\thResizing: #spaceFill;\r\t\t\t\tvResizing: #spaceFill;\r\t\t\t\tyourself ]',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2524' ],		#self : OmReference [ '2525' ],		#time : DateAndTime [ '2018-01-14T19:02:41.898664-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JTraceViewer,				#isMetaSide : false			},			#name : #title,			#protocol : #accessing,			#sourceCode : 'title\r\t^ \'Trace Viewer\'',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2525' ],		#self : OmReference [ '2526' ],		#time : DateAndTime [ '2018-01-14T19:02:41.901497-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JTraceViewer,				#isMetaSide : false			},			#name : #treeMorph,			#protocol : #'user interface',			#sourceCode : 'treeMorph\r\t^ treeMorph\r\t\tifNil: [ treeMorph := AltListMorph new\r\t\t\t\tmodel: self records;\r\t\t\t\tyourself ]',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2526' ],		#self : OmReference [ '2527' ],		#time : DateAndTime [ '2018-01-14T19:02:41.903025-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JTraceViewer,				#isMetaSide : false			},			#name : #update,			#protocol : #actions,			#sourceCode : 'update\r\t"Refresh the display."\r\r\tself records rebuildContents',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2527' ],		#self : OmReference [ '2528' ],		#time : DateAndTime [ '2018-01-14T19:02:41.904358-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JTraceViewer,				#isMetaSide : false			},			#name : #updateProbes,			#protocol : #actions,			#sourceCode : 'updateProbes\r\t"Update the Remove Probes Button."\r\r\tremoveProbesButton enabled: JInstrumentedMethods isEmpty not',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2528' ],		#self : OmReference [ '2529' ],		#time : DateAndTime [ '2018-01-14T19:02:41.905854-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JTraceViewer,				#isMetaSide : false			},			#name : #updateSelection,			#protocol : #selection,			#sourceCode : 'updateSelection\r\t"Update from the model."\r\r\t| modelSelection |\r\tmodelSelection := self selectedNode.\r\tself updateTreeKeymap.\r\tself updateTextKeymap.\r\tmodelSelection isNil\r\t\tifTrue: [ self source contents: \'\'.\r\t\t\ttextMorph ifNotNil: [ :t | t classOrMetaClass: nil ] ]\r\t\tifFalse: [ textMorph\r\t\t\t\tifNotNil: [ :t | t classOrMetaClass: modelSelection styleClass ].\r\t\t\tself source aboutToStyle: true.\r\t\t\tself source contents: modelSelection sourceCode.\r\t\t\tmodelSelection astNode\r\t\t\t\tifNotNil: [ :n | \r\t\t\t\t\ttextMorph\r\t\t\t\t\t\tifNotNil: [ :t | \r\t\t\t\t\t\t\tt selectFrom: n sourceInterval first to: n sourceInterval last.\r\t\t\t\t\t\t\tt scrollSelectionIntoView ] ] ]',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2529' ],		#self : OmReference [ '2530' ],		#time : DateAndTime [ '2018-01-14T19:02:41.907285-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JTraceViewer,				#isMetaSide : false			},			#name : #updateTextKeymap,			#protocol : #shortcuts,			#sourceCode : 'updateTextKeymap\r\t"Update the text keymap. Reset the dispatcher and make it an AltKMDispatcher if needed."\r\r\ttextMorph ifNil: [ ^ self ].\r\t(textMorph kmDispatcher isKindOf: AltKMDispatcher)\r\t\tifFalse: [ textMorph\r\t\t\t\tsetProperty: #kmDispatcher\r\t\t\t\ttoValue: (AltKMDispatcher target: textMorph) ].\r\t(textMorph textMorph kmDispatcher isKindOf: AltKMDispatcher)\r\t\tifFalse: [ textMorph textMorph\r\t\t\t\tsetProperty: #kmDispatcher\r\t\t\t\ttoValue: (AltKMDispatcher target: textMorph textMorph) ].\r\t{textMorph kmDispatcher.\r\ttextMorph textMorph kmDispatcher}\r\t\tdo: [ :aKMDispatcher | \r\t\t\taKMDispatcher reset.\r\t\t\taKMDispatcher attachCategory: #MorphFocusCtrlNavigation.\r\t\t\tself buildTextShortcutsOn: aKMDispatcher with: self ]',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2530' ],		#self : OmReference [ '2531' ],		#time : DateAndTime [ '2018-01-14T19:02:41.908721-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JTraceViewer,				#isMetaSide : false			},			#name : #updateTreeKeymap,			#protocol : #shortcuts,			#sourceCode : 'updateTreeKeymap\r\t"Update the tree keymap."\r\r\t"Don\'t forget to update the tree."\r\r\ttreeMorph ifNil: [ ^ self ].\r\ttreeMorph kmDispatcher\r\t\treset;\r\t\tattachCategory: #MorphFocusNavigation;\r\t\tattachCategory: #MorphFocusCtrlNavigation.\r\tself buildTreeShortcutsOn: self treeMorph kmDispatcher with: self',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2531' ],		#self : OmReference [ '2532' ],		#time : DateAndTime [ '2018-01-14T19:02:41.911517-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'JMLAbstractProbesWriter class',				#isMetaSide : true			},			#name : #'analyse:',			#protocol : #'code manipulation',			#sourceCode : 'analyse: aCompiledMethod\r\t^ self new analyse: aCompiledMethod',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2532' ],		#self : OmReference [ '2533' ],		#time : DateAndTime [ '2018-01-14T19:02:41.912766-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'JMLAbstractProbesWriter class',				#isMetaSide : true			},			#name : #uninstall,			#protocol : #'code manipulation',			#sourceCode : 'uninstall\r\t"Go through the originals and reinstate them."\r\r\tJInstrumentedMethods2\r\t\tkeysAndValuesDo: [ :key :value | value do: [ :e | e uninstall ] ].\r\tJInstrumentedMethods2 reset',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2533' ],		#self : OmReference [ '2534' ],		#time : DateAndTime [ '2018-01-14T19:02:41.914132-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JMLAbstractProbesWriter,				#isMetaSide : false			},			#name : #'after:send:arguments:',			#protocol : #private,			#sourceCode : 'after: aRBProgramNode send: aSymbol arguments: anArrayOfSymbols\r\tself\r\t\ttrace: aRBProgramNode\r\t\tsend: aSymbol\r\t\twith: anArrayOfSymbols\r\t\tcontrol: #after\r\t\toption: #(+ optionWeakAfter)',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2534' ],		#self : OmReference [ '2535' ],		#time : DateAndTime [ '2018-01-14T19:02:41.915405-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JMLAbstractProbesWriter,				#isMetaSide : false			},			#name : #'analyse:',			#protocol : #'code manipulation',			#sourceCode : 'analyse: aCompiledMethod\r\t"Instrument a method, store the original. Has provisions for looking in the\r\tclass hierarchy, but, for now, the uninstall will copy the method in the subclass."\r\r\t"Currently, this does not keep the original source. I\'d like to keep it, how should this be done? I\'ll ask."\r\r\t| n cm class s |\r\tclass := aCompiledMethod methodClass.\r\tclass isNil\r\t\tifTrue: [ ^ self ].\r\t(JInstrumentedMethods\r\t\tincludesClass: class\r\t\tandSelector: aCompiledMethod selector)\r\t\tifTrue: [ ExampleBuilderMorph new alert: \'Method already instrumented.\'.\r\t\t\t^ self ].\r\tn := self visitNode: aCompiledMethod ast.\r\tJInstrumentedMethods2 at: aCompiledMethod put: self links',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2535' ],		#self : OmReference [ '2536' ],		#time : DateAndTime [ '2018-01-14T19:02:41.916773-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JMLAbstractProbesWriter,				#isMetaSide : false			},			#name : #'before:send:arguments:',			#protocol : #private,			#sourceCode : 'before: aRBProgramNode send: aSymbol arguments: anArrayOfSymbols\r\tself\r\t\ttrace: aRBProgramNode\r\t\tsend: aSymbol\r\t\twith: anArrayOfSymbols\r\t\tcontrol: #before\r\t\toption: nil',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2536' ],		#self : OmReference [ '2537' ],		#time : DateAndTime [ '2018-01-14T19:02:41.91813-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JMLAbstractProbesWriter,				#isMetaSide : false			},			#name : #'instead:send:arguments:',			#protocol : #private,			#sourceCode : 'instead: aRBProgramNode send: aSymbol arguments: anArrayOfSymbols\r\tself\r\t\ttrace: aRBProgramNode\r\t\tsend: aSymbol\r\t\twith: anArrayOfSymbols\r\t\tcontrol: #before\r\t\toption: nil',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2537' ],		#self : OmReference [ '2538' ],		#time : DateAndTime [ '2018-01-14T19:02:41.919455-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JMLAbstractProbesWriter,				#isMetaSide : false			},			#name : #links,			#protocol : #accessing,			#sourceCode : 'links\r\t^ links ifNil: [ links := OrderedCollection new ]',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2538' ],		#self : OmReference [ '2539' ],		#time : DateAndTime [ '2018-01-14T19:02:41.922526-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JMLAbstractProbesWriter,				#isMetaSide : false			},			#name : #'trace:send:with:control:option:',			#protocol : #private,			#sourceCode : 'trace: aRBProgramNode send: aSymbol with: anArrayOfSymbols control: anotherSymbol option: anArrayOfSymbolOptions\r\t"Create a Metalink on the node, with the right action and control argument."\r\r\t| link |\r\tlink := MetaLink new\r\t\tmetaObject: JCollecteur recorder;\r\t\tselector: aSymbol;\r\t\targuments: anArrayOfSymbols;\r\t\tcontrol: anotherSymbol.\r\tanArrayOfSymbolOptions notNil\r\t\tifTrue: [ link option: anArrayOfSymbolOptions ].\r\taRBProgramNode link: link.\r\tself links add: link',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2539' ],		#self : OmReference [ '2540' ],		#time : DateAndTime [ '2018-01-14T19:02:41.924-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JMLVariablesProbesWriter,				#isMetaSide : false			},			#name : #'visitAssignmentNode:',			#protocol : #visiting,			#sourceCode : 'visitAssignmentNode: aRBAssignmentNode\r\t"Replace the assignment by a message node holding the assignment as one of the arguments."\r\r\t| link |\r\tsuper visitAssignmentNode: aRBAssignmentNode.\r\tself\r\t\tafter: aRBAssignmentNode\r\t\tsend: #assign:to:node:\r\t\targuments: #(newValue name node)',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2540' ],		#self : OmReference [ '2541' ],		#time : DateAndTime [ '2018-01-14T19:02:41.925208-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JMLVariablesProbesWriter,				#isMetaSide : false			},			#name : #'visitBlockNode:',			#protocol : #visiting,			#sourceCode : 'visitBlockNode: aRBBlockNode\r\tsuper visitBlockNode: aRBBlockNode.\r\tself\r\t\tbefore: aRBBlockNode statements first\r\t\tsend: #enterBlock:\r\t\targuments: #(node).\r\t(aRBBlockNode statements last isKindOf: RBReturnNode)\r\t\tifFalse: [ self\r\t\t\t\tafter: aRBBlockNode statements last\r\t\t\t\tsend: #exitBlock:\r\t\t\t\targuments: #(node) ]',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2541' ],		#self : OmReference [ '2542' ],		#time : DateAndTime [ '2018-01-14T19:02:41.926615-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JMLVariablesProbesWriter,				#isMetaSide : false			},			#name : #'visitMessageNode:',			#protocol : #visiting,			#sourceCode : 'visitMessageNode: aRBMessageNode\r\t"Detect at: put: and record it via a new, specific collector message. Note that, to simplify the code, the effective at:put: is sent in the Collecteur instance and not in the original code."\r\r\t| receiver arguments nodeId |\r\tsuper visitMessageNode: aRBMessageNode.\r\t(aRBMessageNode selector == #at:put:\r\t\tand: [ aRBMessageNode receiver isKindOf: RBVariableNode ])\r\t\tifTrue:\r\t\t\t[ self after: aRBMessageNode send: #recordNode: arguments: #(node) ]',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2542' ],		#self : OmReference [ '2543' ],		#time : DateAndTime [ '2018-01-14T19:02:41.92803-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JMLVariablesProbesWriter,				#isMetaSide : false			},			#name : #'visitMethodNode:',			#protocol : #visiting,			#sourceCode : 'visitMethodNode: aRBMethodNode\r\t"I record the entry into a method. Necessary: events are hierarchically scoped. I need also to find a place where to add a return node."\r\r\t| stats |\r\tsuper visitMethodNode: aRBMethodNode.\r\tself\r\t\tbefore: aRBMethodNode\r\t\tsend: #enter:selector:arguments:node:\r\t\targuments: #(receiver selector arguments node).\r\tstats := aRBMethodNode body statements.\r\t(stats last isKindOf: RBReturnNode)\r\t\tifFalse: [ self after: stats last send: #return: arguments: #(object) ]',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2543' ],		#self : OmReference [ '2544' ],		#time : DateAndTime [ '2018-01-14T19:02:41.92937-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JMLVariablesProbesWriter,				#isMetaSide : false			},			#name : #'visitReturnNode:',			#protocol : #visiting,			#sourceCode : 'visitReturnNode: aRBReturnNode\r\t"I record the exit of a method."\r\r\t| link |\r\tsuper visitReturnNode: aRBReturnNode.\r\tself\r\t\tbefore: aRBReturnNode\r\t\tsend: #return:node:\r\t\targuments: #(value node)',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2544' ],		#self : OmReference [ '2545' ],		#time : DateAndTime [ '2018-01-14T19:02:41.932401-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JCFGProbesWriter,				#isMetaSide : false			},			#name : #'visitBlockNode:',			#protocol : #'visitor-double dispatching',			#sourceCode : 'visitBlockNode: aNode\r\t"Arguments are the block arguments, instances of RBVariableNode."\r\r\t| body args stats last nodeId |\r\tnodeId := no.\r\targs := self visitArgumentNodes: aNode arguments.\r\tbody := self visitNode: aNode body.\r\tstats := body statements asOrderedCollection.\r\tstats\r\t\taddFirst:\r\t\t\t(RBMessageNode\r\t\t\t\treceiver: (RBLiteralValueNode value: #JCollecteur)\r\t\t\t\tselector: #enter:\r\t\t\t\targuments: (Array with: (RBLiteralValueNode value: nodeId))).\r\t(stats last isKindOf: RBReturnNode)\r\t\tifFalse: [ \r\t\t\tlast := stats removeLast.\r\t\t\tstats\r\t\t\t\tadd:\r\t\t\t\t\t(RBMessageNode receiver: (RBLiteralValueNode value: #JCollecteur) selector: #exit: arguments: (Array with: last)) ].\r\tbody statements: stats.\r\taNode\r\t\targuments: args;\r\t\tbody: body.\r\t^ aNode',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2545' ],		#self : OmReference [ '2546' ],		#time : DateAndTime [ '2018-01-14T19:02:41.933851-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JCFGProbesWriter,				#isMetaSide : false			},			#name : #'visitMessageNode:',			#protocol : #'visitor-double dispatching',			#sourceCode : 'visitMessageNode: aNode\r\t"trace message sends to the collecteur."\r\r\t| rcvr2 args2 nodeId |\r\tnodeId := no.\r\t(aNode isCascaded not or: [ aNode isFirstCascaded ])\r\t\tifTrue: [ rcvr2 := self visitNode: aNode receiver ].\r\targs2 := self visitArgumentNodes: aNode arguments.\r\taNode receiver: rcvr2.\r\taNode arguments: args2.\r\t^ RBMessageNode\r\t\treceiver: (RBLiteralValueNode value: #JCollecteur)\r\t\tselector: #record:node:value:\r\t\targuments:\r\t\t\t(Array with: (RBLiteralValueNode value: aNode selector) with: (RBLiteralValueNode value: nodeId) with: aNode)',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2546' ],		#self : OmReference [ '2547' ],		#time : DateAndTime [ '2018-01-14T19:02:41.935494-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JCFGProbesWriter,				#isMetaSide : false			},			#name : #'visitMethodNode:',			#protocol : #'visitor-double dispatching',			#sourceCode : 'visitMethodNode: aNode\r\t"Add a probe to trace the entry into the method and the included block. Add a ^self at the end of the code and a probe in it if there isn\'t any yet (disregard cases of code returning allways before that point; we expect smalltalk to optimise that away)."\r\r\t| body stats nodeID args2 |\r\tnodeID := no.\r\targs2 := self visitArgumentNodes: aNode arguments.\r\taNode pragmas: (aNode pragmas collect: [ :each | self visitNode: each ]).\r\tbody := self visitNode: aNode body.\r\tstats := body statements.\r\tstats\r\t\taddFirst:\r\t\t\t(RBMessageNode\r\t\t\t\treceiver: (RBLiteralValueNode value: #JCollecteur)\r\t\t\t\tselector: #enter:selector:node:\r\t\t\t\targuments:\r\t\t\t\t\t(Array\r\t\t\t\t\t\twith: (RBVariableNode named: \'self\')\r\t\t\t\t\t\twith: (RBLiteralValueNode value: aNode selector)\r\t\t\t\t\t\twith: (RBLiteralValueNode value: nodeID))).\r\t(stats last isKindOf: RBReturnNode)\r\t\tifFalse: [ \r\t\t\tstats\r\t\t\t\tadd:\r\t\t\t\t\t(RBReturnNode\r\t\t\t\t\t\tvalue:\r\t\t\t\t\t\t\t(RBMessageNode\r\t\t\t\t\t\t\t\treceiver: (RBLiteralValueNode value: #JCollecteur)\r\t\t\t\t\t\t\t\tselector: #return:\r\t\t\t\t\t\t\t\targuments: (Array with: (VariableNode new name: \'self\')))) ].\r\taNode arguments: args2.\r\tbody statements: stats.\r\taNode body: body.\r\t^ aNode',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2547' ],		#self : OmReference [ '2548' ],		#time : DateAndTime [ '2018-01-14T19:02:41.936961-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JCFGProbesWriter,				#isMetaSide : false			},			#name : #'visitReturnNode:',			#protocol : #'visitor-double dispatching',			#sourceCode : 'visitReturnNode: aNode\r\t^ aNode\r\t\tvalue:\r\t\t\t(RBMessageNode\r\t\t\t\treceiver: (RBLiteralValueNode value: #JCollecteur)\r\t\t\t\tselector: #return:\r\t\t\t\targuments: (Array with: (self visitNode: aNode value)))',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2548' ],		#self : OmReference [ '2549' ],		#time : DateAndTime [ '2018-01-14T19:02:41.938441-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JCFGProbesWriterToVar,				#isMetaSide : false			},			#name : #'changeLiteralRecorder:to:in:',			#protocol : #'visitor-double dispatching',			#sourceCode : 'changeLiteralRecorder: aSymbolOrObject to: anObject in: aCompiledMethod\r\t^ self "Just do nothing"',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2549' ],		#self : OmReference [ '2550' ],		#time : DateAndTime [ '2018-01-14T19:02:41.939786-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JCFGProbesWriterToVar,				#isMetaSide : false			},			#name : #'visitBlockNode:',			#protocol : #'visitor-double dispatching',			#sourceCode : 'visitBlockNode: aNode\r\t"Arguments are the block arguments, instances of RBVariableNode."\r\r\t| body args stats last nodeId |\r\tnodeId := no.\r\targs := self visitArgumentNodes: aNode arguments.\r\tbody := self visitNode: aNode body.\r\tstats := body statements asOrderedCollection.\r\tstats\r\t\taddFirst:\r\t\t\t(RBMessageNode\r\t\t\t\treceiver: self collecteurVariable\r\t\t\t\tselector: #enter:\r\t\t\t\targuments: (Array with: (RBLiteralValueNode value: nodeId))).\r\t(stats last isKindOf: RBReturnNode)\r\t\tifFalse: [ \r\t\t\tlast := stats removeLast.\r\t\t\tstats add: (RBMessageNode receiver: self collecteurVariable selector: #exit: arguments: (Array with: last)) ].\r\tbody statements: stats.\r\taNode\r\t\targuments: args;\r\t\tbody: body.\r\t^ aNode',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2550' ],		#self : OmReference [ '2551' ],		#time : DateAndTime [ '2018-01-14T19:02:41.942663-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JCFGProbesWriterToVar,				#isMetaSide : false			},			#name : #'visitMessageNode:',			#protocol : #'visitor-double dispatching',			#sourceCode : 'visitMessageNode: aNode\r\t"trace message sends to the collecteur."\r\r\t| rcvr2 args2 nodeId |\r\tnodeId := no.\r\trcvr2 := self visitNode: aNode receiver.\r\targs2 := self visitArgumentNodes: aNode arguments.\r\taNode receiver: rcvr2.\r\taNode arguments: args2.\r\t^ RBMessageNode\r\t\treceiver: self collecteurVariable\r\t\tselector: #record:node:value:\r\t\targuments:\r\t\t\t(Array with: (RBLiteralValueNode value: aNode selector) with: (RBLiteralValueNode value: nodeId) with: aNode)',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2551' ],		#self : OmReference [ '2552' ],		#time : DateAndTime [ '2018-01-14T19:02:41.944624-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JCFGProbesWriterToVar,				#isMetaSide : false			},			#name : #'visitMethodNode:',			#protocol : #'visitor-double dispatching',			#sourceCode : 'visitMethodNode: aNode\r\t"Add a probe to trace the entry into the method and the included block. Add a ^self at the end of the code and a probe in it if there isn\'t any yet (disregard cases of code returning allways before that point; we expect smalltalk to optimise that away)."\r\r\t| body stats nodeID args2 |\r\tnodeID := no.\r\targs2 := self visitArgumentNodes: aNode arguments.\r\tbody := self visitNode: aNode body.\r\tstats := body statements.\r\tstats\r\t\taddFirst:\r\t\t\t(RBMessageNode\r\t\t\t\treceiver: self collecteurVariable\r\t\t\t\tselector: #enter:selector:node:\r\t\t\t\targuments:\r\t\t\t\t\t(Array\r\t\t\t\t\t\twith: (RBVariableNode named: \'self\')\r\t\t\t\t\t\twith: (RBLiteralValueNode value: aNode selector)\r\t\t\t\t\t\twith: (RBLiteralValueNode value: nodeID))).\r\t(stats last isKindOf: RBReturnNode)\r\t\tifFalse: [ \r\t\t\tstats\r\t\t\t\tadd:\r\t\t\t\t\t(RBReturnNode\r\t\t\t\t\t\tvalue:\r\t\t\t\t\t\t\t(RBMessageNode\r\t\t\t\t\t\t\t\treceiver: self collecteurVariable\r\t\t\t\t\t\t\t\tselector: #return:\r\t\t\t\t\t\t\t\targuments: (Array with: (VariableNode new name: \'self\')))) ].\r\taNode arguments: args2.\r\tbody statements: stats.\r\taNode body: body.\r\t^ aNode',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2552' ],		#self : OmReference [ '2553' ],		#time : DateAndTime [ '2018-01-14T19:02:41.946191-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'JCodeNodeFinder class',				#isMetaSide : true			},			#name : #'find:in:',			#protocol : #accessing,			#sourceCode : 'find: aNodeId in: aCompiledMethod\r\t"Find a node in an ast in parameter."\r\r\t| c ast |\r\taCompiledMethod ifNil: [ ^ nil ].\r\tc := self new.\r\tc target: aNodeId.\r\tast := RBParser parseMethod: aCompiledMethod sourceCode.\r\tast doSemanticAnalysisIn: aCompiledMethod methodClass.\r\t[ c visitNode: ast ]\r\t\ton: JCodeNodeFound\r\t\tdo: [ :ex | ^ ex tag ].\r\t^ SubscriptOutOfBounds signal',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2553' ],		#self : OmReference [ '2554' ],		#time : DateAndTime [ '2018-01-14T19:02:41.947486-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'JCodeNodeFinder class',				#isMetaSide : true			},			#name : #'find:inSource:andClass:',			#protocol : #accessing,			#sourceCode : 'find: aNodeId inSource: aString andClass: aClass\r\t"Find a node in an ast in parameter."\r\r\t| c ast |\r\tc := self new.\r\tc target: aNodeId.\r\tast := RBParser parseMethod: aString.\r\tast doSemanticAnalysisIn: aClass.\r\t[ c visitNode: ast ]\r\t\ton: JCodeNodeFound\r\t\tdo: [ :ex | ^ ex tag ].\r\t^ SubscriptOutOfBounds signal',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2554' ],		#self : OmReference [ '2555' ],		#time : DateAndTime [ '2018-01-14T19:02:41.948999-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JCodeNodeFinder,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialize-release,			#sourceCode : 'initialize\r\tno := 1',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2555' ],		#self : OmReference [ '2556' ],		#time : DateAndTime [ '2018-01-14T19:02:41.950253-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JCodeNodeFinder,				#isMetaSide : false			},			#name : #'target:',			#protocol : #accessing,			#sourceCode : 'target: aNodeId\r\t"Initialize the target and the no."\r\r\ttarget := aNodeId.\r\tno := 1',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2556' ],		#self : OmReference [ '2557' ],		#time : DateAndTime [ '2018-01-14T19:02:41.951671-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JCodeNodeFinder,				#isMetaSide : false			},			#name : #'visitArgumentNode:',			#protocol : #visiting,			#sourceCode : 'visitArgumentNode: aNode\r\t"Check if we have the right node. If yes, return it. If not, continue the search."\r\r\t^ target == no\r\t\tifTrue: [ JCodeNodeFound new\r\t\t\t\ttag: aNode;\r\t\t\t\tsignal ]\r\t\tifFalse: [ no := no + 1.\r\t\t\tself visitVariableNode: aNode ]',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2557' ],		#self : OmReference [ '2558' ],		#time : DateAndTime [ '2018-01-14T19:02:41.954564-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JCodeNodeFinder,				#isMetaSide : false			},			#name : #'visitNode:',			#protocol : #visiting,			#sourceCode : 'visitNode: aNode\r\t"Check if we have the right node. If yes, return it. If not, continue the search."\r\r\t^ target == no\r\t\tifTrue: [ \r\t\t\tJCodeNodeFound new\r\t\t\t\ttag: aNode;\r\t\t\t\tsignal ]\r\t\tifFalse: [ \r\t\t\tno := no + 1.\r\t\t\taNode acceptVisitor: self ]',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2558' ],		#self : OmReference [ '2559' ],		#time : DateAndTime [ '2018-01-14T19:02:41.956122-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'JProbesWriter class',				#isMetaSide : true			},			#name : #'analyse:',			#protocol : #'code manipulation',			#sourceCode : 'analyse: aCompiledMethod\r\t^ self new analyse: aCompiledMethod',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2559' ],		#self : OmReference [ '2560' ],		#time : DateAndTime [ '2018-01-14T19:02:41.957453-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'JProbesWriter class',				#isMetaSide : true			},			#name : #uninstall,			#protocol : #'code manipulation',			#sourceCode : 'uninstall\r\t"Go through the originals and reinstate them."\r\r\tJInstrumentedMethods reset',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2560' ],		#self : OmReference [ '2561' ],		#time : DateAndTime [ '2018-01-14T19:02:41.959135-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JProbesWriter,				#isMetaSide : false			},			#name : #'analyse:',			#protocol : #'code manipulation',			#sourceCode : 'analyse: aCompiledMethod\r\t"Instrument a method, store the original source. Only manipulates directly a compiled method."\r\r\t| aRBMethodNode aTracedCompiledMethod aClass source aMCMethodDefinition |\r\taClass := aCompiledMethod methodClass.\r\taMCMethodDefinition := aCompiledMethod asRingDefinition\r\t\tasMCMethodDefinition.\r\taClass isNil\r\t\tifTrue: [ ^ self ].\r\t(JInstrumentedMethods\r\t\tincludesClass: aClass name\r\t\tandSelector: aCompiledMethod selector)\r\t\tifTrue: [ ExampleBuilderMorph new alert: \'Method already instrumented.\'.\r\t\t\t^ self ].\r\tmclass := aClass.\r\taRBMethodNode := self visitNode: aCompiledMethod ast.\r\tSystemAnnouncer uniqueInstance\r\t\tsuspendAllWhile: [ aTracedCompiledMethod := aClass\r\t\t\t\tlookupSelector:\r\t\t\t\t\t(aClass\r\t\t\t\t\t\tcompile: aRBMethodNode formattedCode\r\t\t\t\t\t\tclassified: aCompiledMethod category\r\t\t\t\t\t\tnotifying: nil).\r\t\t\tself\r\t\t\t\tchangeLiteralRecorder: #JCollecteur\r\t\t\t\tto: JCollecteur recorder\r\t\t\t\tin: aTracedCompiledMethod.\r\t\t\tJInstrumentedMethods\r\t\t\t\tatClass: aClass name\r\t\t\t\tandSelector: aCompiledMethod selector\r\t\t\t\tput: aMCMethodDefinition ]',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2561' ],		#self : OmReference [ '2562' ],		#time : DateAndTime [ '2018-01-14T19:02:41.96032-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JProbesWriter,				#isMetaSide : false			},			#name : #'changeLiteralRecorder:to:in:',			#protocol : #'code manipulation',			#sourceCode : 'changeLiteralRecorder: aSymbolOrObject to: anObject in: aCompiledMethod\r\t"Change the relevant literal to another object in the method."\r\r\t"TODO: ask if this should really be done in Pharo, and how it should be done."\r\r\t"Self Answer: it has to be done. The literal is in the method, just need to find and replace it."\r\r\taCompiledMethod\r\t\tliteralAt: (aCompiledMethod indexOfLiteral: aSymbolOrObject)\r\t\tput: anObject',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2562' ],		#self : OmReference [ '2563' ],		#time : DateAndTime [ '2018-01-14T19:02:41.961657-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JProbesWriter,				#isMetaSide : false			},			#name : #collecteurLiteral,			#protocol : #private,			#sourceCode : 'collecteurLiteral\r\t^ RBLiteralValueNode value: #JCollecteur',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2563' ],		#self : OmReference [ '2564' ],		#time : DateAndTime [ '2018-01-14T19:02:41.96299-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JProbesWriter,				#isMetaSide : false			},			#name : #collecteurVariable,			#protocol : #private,			#sourceCode : 'collecteurVariable\r\t^ RBVariableNode named: \'JCollecteur\'',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2564' ],		#self : OmReference [ '2565' ],		#time : DateAndTime [ '2018-01-14T19:02:41.966356-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JProbesWriter,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialize-release,			#sourceCode : 'initialize\r\t"Initialize a newly created instance. This method must answer the receiver."\r\r\tsuper initialize.\r\tno := 0',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2565' ],		#self : OmReference [ '2566' ],		#time : DateAndTime [ '2018-01-14T19:02:41.967843-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JProbesWriter,				#isMetaSide : false			},			#name : #'visitArgumentNode:',			#protocol : #visiting,			#sourceCode : 'visitArgumentNode: each\r\t"Here to allow subclasses to detect arguments or temporaries."\r\r\tno := no + 1.\r\t^ self visitVariableNode: each',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2566' ],		#self : OmReference [ '2567' ],		#time : DateAndTime [ '2018-01-14T19:02:41.969225-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JProbesWriter,				#isMetaSide : false			},			#name : #'visitArgumentNodes:',			#protocol : #visiting,			#sourceCode : 'visitArgumentNodes: aNodeCollection\r\t^ aNodeCollection collect: [ :each | self visitArgumentNode: each ]',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2567' ],		#self : OmReference [ '2568' ],		#time : DateAndTime [ '2018-01-14T19:02:41.970575-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JProbesWriter,				#isMetaSide : false			},			#name : #'visitArrayNode:',			#protocol : #visiting,			#sourceCode : 'visitArrayNode: anArrayNode\r\t^ anArrayNode statements: (anArrayNode statements collect: [ :each | self visitNode: each ])',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2568' ],		#self : OmReference [ '2569' ],		#time : DateAndTime [ '2018-01-14T19:02:41.972009-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JProbesWriter,				#isMetaSide : false			},			#name : #'visitAssignmentNode:',			#protocol : #visiting,			#sourceCode : 'visitAssignmentNode: aNode\r\t| var2 val2 |\r\tvar2 := self visitNode: aNode variable.\r\tval2 := self visitNode: aNode value.\r\tval2 == aNode value\r\t\tifFalse: [ aNode variable: var2 ].\r\tvar2 == aNode\r\t\tifFalse: [ aNode value: val2 ].\r\t^ aNode',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2569' ],		#self : OmReference [ '2570' ],		#time : DateAndTime [ '2018-01-14T19:02:41.973519-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JProbesWriter,				#isMetaSide : false			},			#name : #'visitBlockNode:',			#protocol : #visiting,			#sourceCode : 'visitBlockNode: aNode\r\t| args body |\r\targs := self visitArgumentNodes: aNode arguments.\r\tbody := self visitNode: aNode body.\r\targs == aNode arguments\r\t\tifFalse: [ aNode arguments: args ].\r\tbody == aNode body\r\t\tifFalse: [ aNode statements: body ].\r\t^ aNode',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2570' ],		#self : OmReference [ '2571' ],		#time : DateAndTime [ '2018-01-14T19:02:41.97637-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JProbesWriter,				#isMetaSide : false			},			#name : #'visitCascadeNode:',			#protocol : #visiting,			#sourceCode : 'visitCascadeNode: aCascadeNode\r\taCascadeNode messages: (aCascadeNode messages collect: [ :message | self visitNode: message ]).\r\t^ aCascadeNode',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2571' ],		#self : OmReference [ '2572' ],		#time : DateAndTime [ '2018-01-14T19:02:41.977947-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JProbesWriter,				#isMetaSide : false			},			#name : #'visitLiteralArrayNode:',			#protocol : #visiting,			#sourceCode : 'visitLiteralArrayNode: aRBLiteralArrayNode\r\t^ aRBLiteralArrayNode contents: (aRBLiteralArrayNode contents collect: [ :each | self visitNode: each ])',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2572' ],		#self : OmReference [ '2573' ],		#time : DateAndTime [ '2018-01-14T19:02:41.979329-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JProbesWriter,				#isMetaSide : false			},			#name : #'visitLiteralNode:',			#protocol : #visiting,			#sourceCode : 'visitLiteralNode: aLiteralNode\r\t^ aLiteralNode',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2573' ],		#self : OmReference [ '2574' ],		#time : DateAndTime [ '2018-01-14T19:02:41.980875-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JProbesWriter,				#isMetaSide : false			},			#name : #'visitMessageNode:',			#protocol : #visiting,			#sourceCode : 'visitMessageNode: aMessageNode\r\t(aMessageNode isCascaded not or: [ aMessageNode isFirstCascaded ])\r\t\tifTrue: [ \r\t\t\t| rcv |\r\t\t\trcv := self visitNode: aMessageNode receiver.\r\t\t\trcv == aMessageNode receiver\r\t\t\t\tifFalse: [ aMessageNode receiver: rcv ] ].\r\taMessageNode arguments: (aMessageNode arguments collect: [ :each | self visitNode: each ]).\r\t^ aMessageNode',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2574' ],		#self : OmReference [ '2575' ],		#time : DateAndTime [ '2018-01-14T19:02:41.982579-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JProbesWriter,				#isMetaSide : false			},			#name : #'visitMethodNode:',			#protocol : #visiting,			#sourceCode : 'visitMethodNode: aMethodNode\r\taMethodNode arguments: (self visitArgumentNodes: aMethodNode arguments).\r\taMethodNode pragmas: (aMethodNode pragmas collect: [ :each | self visitNode: each ]).\r\taMethodNode body: (self visitNode: aMethodNode body).\r\t^ aMethodNode',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2575' ],		#self : OmReference [ '2576' ],		#time : DateAndTime [ '2018-01-14T19:02:41.984221-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JProbesWriter,				#isMetaSide : false			},			#name : #'visitNode:',			#protocol : #visiting,			#sourceCode : 'visitNode: aNode\r\t"When we do a node, we increase the counter so that we may identify it."\r\r\tno := no + 1.\r\t^ aNode acceptVisitor: self',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2576' ],		#self : OmReference [ '2577' ],		#time : DateAndTime [ '2018-01-14T19:02:41.985574-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JProbesWriter,				#isMetaSide : false			},			#name : #'visitPatternBlockNode:',			#protocol : #visiting,			#sourceCode : 'visitPatternBlockNode: aRBPatternBlockNode\r\taRBPatternBlockNode arguments: (self visitArgumentNodes: aRBPatternBlockNode arguments).\r\taRBPatternBlockNode body: (self visitNode: aRBPatternBlockNode body).\r\t^ aRBPatternBlockNode',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2577' ],		#self : OmReference [ '2578' ],		#time : DateAndTime [ '2018-01-14T19:02:41.988648-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JProbesWriter,				#isMetaSide : false			},			#name : #'visitPatternWrapperBlockNode:',			#protocol : #visiting,			#sourceCode : 'visitPatternWrapperBlockNode: aRBPatternWrapperBlockNode\r\taRBPatternWrapperBlockNode wrappedNode: (self visitNode: aRBPatternWrapperBlockNode wrappedNode).\r\taRBPatternWrapperBlockNode arguments: (self visitArgumentNodes: aRBPatternWrapperBlockNode arguments).\r\taRBPatternWrapperBlockNode body: (self visitNode: aRBPatternWrapperBlockNode body).\r\t^ aRBPatternWrapperBlockNode',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2578' ],		#self : OmReference [ '2579' ],		#time : DateAndTime [ '2018-01-14T19:02:41.990104-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JProbesWriter,				#isMetaSide : false			},			#name : #'visitPragmaNode:',			#protocol : #visiting,			#sourceCode : 'visitPragmaNode: aPragmaNode\r\taPragmaNode arguments: (aPragmaNode arguments collect: [ :each | self visitNode: each ]).\r\t^ aPragmaNode',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2579' ],		#self : OmReference [ '2580' ],		#time : DateAndTime [ '2018-01-14T19:02:41.991451-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JProbesWriter,				#isMetaSide : false			},			#name : #'visitReturnNode:',			#protocol : #visiting,			#sourceCode : 'visitReturnNode: aReturnNode\r\t| v |\r\tv := self visitNode: aReturnNode value.\r\taReturnNode value == v\r\t\tifFalse: [ aReturnNode value: v ].\r\t^ aReturnNode',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2580' ],		#self : OmReference [ '2581' ],		#time : DateAndTime [ '2018-01-14T19:02:41.992838-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JProbesWriter,				#isMetaSide : false			},			#name : #'visitSequenceNode:',			#protocol : #visiting,			#sourceCode : 'visitSequenceNode: aSequenceNode\r\taSequenceNode temporaries: (self visitArgumentNodes: aSequenceNode temporaries).\r\taSequenceNode statements: (aSequenceNode statements collect: [ :each | self visitNode: each ]).\r\t^ aSequenceNode',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2581' ],		#self : OmReference [ '2582' ],		#time : DateAndTime [ '2018-01-14T19:02:41.994661-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JThreadedProbesWriter,				#isMetaSide : false			},			#name : #'visitMessageNode:',			#protocol : #'visitor-double dispatching',			#sourceCode : 'visitMessageNode: aNode\r\t"trace the message send."\r\r\t| node rcvr2 args2 nodeId |\r\tnodeId := no.\r\trcvr2 := self visitNode: aNode receiver.\r\targs2 := self visitArgumentNodes: aNode arguments.\r\tnode := RBMessageNode receiver: rcvr2 selector: aNode selector arguments: args2.\r\t^ RBMessageNode new\r\t\treceiver: (RBBlockNode body: (RBSequenceNode statements: (Array with: node)))\r\t\tselector: #ensure:\r\t\targuments:\r\t\t\t{(RBBlockNode\r\t\t\t\tbody:\r\t\t\t\t\t(RBSequenceNode\r\t\t\t\t\t\tstatements:\r\t\t\t\t\t\t\t{(RBMessageNode\r\t\t\t\t\t\t\t\treceiver: (RBVariableNode named: \'ThreadedCollecteur\')\r\t\t\t\t\t\t\t\tselector: #record:node:\r\t\t\t\t\t\t\t\targuments:\r\t\t\t\t\t\t\t\t\t{(RBLiteralValueNode value: aNode selector).\r\t\t\t\t\t\t\t\t\t(RBLiteralValueNode value: nodeId)})}))}',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2582' ],		#self : OmReference [ '2583' ],		#time : DateAndTime [ '2018-01-14T19:02:41.995915-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JThreadedProbesWriter,				#isMetaSide : false			},			#name : #'visitMethodNode:',			#protocol : #'visitor-double dispatching',			#sourceCode : 'visitMethodNode: aNode\r\t| block2 nodeId |\r\tnodeId := no.\r\tblock2 := self visitNode: aNode body.\r\tblock2 statements\r\t\taddFirst:\r\t\t\t(RBMessageNode\r\t\t\t\treceiver: (RBVariableNode named: \'ThreadedCollecteur\')\r\t\t\t\tselector: #enter:selector:node:\r\t\t\t\targuments:\r\t\t\t\t\t(Array\r\t\t\t\t\t\twith: (RBVariableNode named: mclass name)\r\t\t\t\t\t\twith: (RBLiteralValueNode value: aNode selector)\r\t\t\t\t\t\twith: (RBLiteralValueNode value: nodeId))).\r\t^ aNode body: block2',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2583' ],		#self : OmReference [ '2584' ],		#time : DateAndTime [ '2018-01-14T19:02:41.999136-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JThreadedProbesWriter,				#isMetaSide : false			},			#name : #'visitReturnNode:',			#protocol : #'visitor-double dispatching',			#sourceCode : 'visitReturnNode: aNode\r\t| ensureNode receiverNode |\r\tensureNode := RBBlockNode\r\t\tbody:\r\t\t\t(RBSequenceNode new\r\t\t\t\tstatements:\r\t\t\t\t\t(Array\r\t\t\t\t\t\twith:\r\t\t\t\t\t\t\t(RBMessageNode new receiver: (RBVariableNode named: \'ThreadedCollecteur\') selector: #exitLevel arguments: #()))).\r\treceiverNode := RBBlockNode body: (RBSequenceNode statements: (Array with: (self visitNode: aNode value))).\r\t^ aNode value: (RBMessageNode receiver: receiverNode selector: #ensure: arguments: (Array with: ensureNode))',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2584' ],		#self : OmReference [ '2585' ],		#time : DateAndTime [ '2018-01-14T19:02:42.000925-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JVariableProbesWriter,				#isMetaSide : false			},			#name : #'visitAssignmentNode:',			#protocol : #visiting,			#sourceCode : 'visitAssignmentNode: aNode\r\t"Replace the assignment by a message node holding the assignment as one of the arguments."\r\r\t| var2 val2 nodeId |\r\tnodeId := no.\r\tvar2 := self visitNode: aNode variable.\r\tval2 := self visitNode: aNode value.\r\t^ RBMessageNode\r\t\treceiver: (RBLiteralValueNode value: #JCollecteur)\r\t\tselector: #assign:to:node:\r\t\targuments:\r\t\t\t(Array\r\t\t\t\twith:\r\t\t\t\t\t(aNode\r\t\t\t\t\t\tvariable: var2;\r\t\t\t\t\t\tvalue: val2)\r\t\t\t\twith: (RBLiteralValueNode value: var2 name)\r\t\t\t\twith: (RBLiteralValueNode value: nodeId))',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2585' ],		#self : OmReference [ '2586' ],		#time : DateAndTime [ '2018-01-14T19:02:42.002353-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JVariableProbesWriter,				#isMetaSide : false			},			#name : #'visitBlockNode:',			#protocol : #visiting,			#sourceCode : 'visitBlockNode: aNode \r\t"Don\'t know what args are, but I\'ll suppose they are variables. Or do I need to track variables that are read? Everywhere in the code?"\r\r\t| body args stats last nodeId |\r\tnodeId := no.\r\targs := self visitArgumentNodes: aNode arguments.\r\tbody := self visitNode: aNode body.\r\tstats := body statements asOrderedCollection.\r\targs isEmpty \r\t\tifFalse: \r\t\t\t[args reverseDo: \r\t\t\t\t\t[:a | \r\t\t\t\t\tstats addFirst: (RBMessageNode  \r\t\t\t\t\t\t\t\treceiver: (RBLiteralValueNode value: #JCollecteur)\r\t\t\t\t\t\t\t\tselector: #assign:to:node:\r\t\t\t\t\t\t\t\targuments: (Array \r\t\t\t\t\t\t\t\t\t\twith: a\r\t\t\t\t\t\t\t\t\t\twith: (RBLiteralValueNode value: a name)\r\t\t\t\t\t\t\t\t\t\twith: (RBLiteralValueNode value: nodeId)))]].\r\tstats addFirst: (RBMessageNode \r\t\t\t\treceiver: (RBLiteralValueNode value: #JCollecteur)\r\t\t\t\tselector: #enter:\r\t\t\t\targuments: (Array with: (RBLiteralValueNode value: nodeId))).\r\tlast := stats last.\r\t(last isKindOf: RBReturnNode)\r\t\tifFalse: \r\t\t\t[stats removeLast.\r\t\t\tstats add: (RBMessageNode \r\t\t\t\t\t\treceiver: (RBLiteralValueNode value: #JCollecteur)\r\t\t\t\t\t\tselector: #exit:\r\t\t\t\t\t\targuments: (Array with: last))].\r\tbody statements: stats.\r\taNode\r\t\targuments: args;\r\t\tbody: body.\r\t^ aNode',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2586' ],		#self : OmReference [ '2587' ],		#time : DateAndTime [ '2018-01-14T19:02:42.003952-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JVariableProbesWriter,				#isMetaSide : false			},			#name : #'visitMessageNode:',			#protocol : #visiting,			#sourceCode : 'visitMessageNode: aNode\r\t"Detect at: put: and record it via a new, specific collector message. Note that, to simplify the code, the effective at:put: is sent in the Collecteur instance and not in the original code."\r\r\t| receiver arguments nodeId |\r\tnodeId := no.\r\treceiver := self visitNode: aNode receiver.\r\targuments := aNode arguments collect: [ :e | self visitNode: e ].\r\t^ (aNode selector == #at:put:\r\t\tand: [ receiver isKindOf: RBVariableNode ])\r\t\tifTrue: [ RBMessageNode\r\t\t\t\treceiver: (RBLiteralValueNode value: #JCollecteur)\r\t\t\t\tselector: #assign:to:named:at:node:\r\t\t\t\targuments:\r\t\t\t\t\t{arguments last.\r\t\t\t\t\treceiver.\r\t\t\t\t\t(RBLiteralValueNode value: receiver name).\r\t\t\t\t\targuments first.\r\t\t\t\t\t(RBLiteralValueNode value: nodeId)} ]\r\t\tifFalse: [ RBMessageNode\r\t\t\t\treceiver: (RBLiteralValueNode value: #JCollecteur)\r\t\t\t\tselector: #record:node:value:\r\t\t\t\targuments:\r\t\t\t\t\t{(RBLiteralValueNode value: aNode selector).\r\t\t\t\t\t(RBLiteralValueNode value: nodeId).\r\t\t\t\t\t(aNode\r\t\t\t\t\t\treceiver: receiver;\r\t\t\t\t\t\targuments: arguments)} ]',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2587' ],		#self : OmReference [ '2588' ],		#time : DateAndTime [ '2018-01-14T19:02:42.005656-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JVariableProbesWriter,				#isMetaSide : false			},			#name : #'visitMethodNode:',			#protocol : #visiting,			#sourceCode : 'visitMethodNode: aNode\r\t"Add a probe to trace the entry into the method and the included block. Add a ^self at the end of the code and a probe in it if there isn\'t any yet (disregard cases of code returning allways before that point; we expect smalltalk to optimise that away)."\r\r\t| body stats nodeId args2 |\r\tnodeId := no.\r\targs2 := self visitArgumentNodes: aNode arguments.\r\tbody := self visitNode: aNode body.\r\tstats := body statements.\r\targs2 isEmpty\r\t\tifFalse: [ \r\t\t\targs2\r\t\t\t\treverseDo: [ :a | \r\t\t\t\t\tstats\r\t\t\t\t\t\taddFirst:\r\t\t\t\t\t\t\t(RBMessageNode\r\t\t\t\t\t\t\t\treceiver: (RBLiteralValueNode value: #JCollecteur)\r\t\t\t\t\t\t\t\tselector: #assign:to:node:\r\t\t\t\t\t\t\t\targuments:\r\t\t\t\t\t\t\t\t\t{a.\r\t\t\t\t\t\t\t\t\t(RBLiteralValueNode value: a name).\r\t\t\t\t\t\t\t\t\t(RBLiteralValueNode value: nodeId)}) ] ].\r\tstats\r\t\taddFirst:\r\t\t\t(RBMessageNode\r\t\t\t\treceiver: (RBLiteralValueNode value: #JCollecteur)\r\t\t\t\tselector: #enter:selector:node:\r\t\t\t\targuments:\r\t\t\t\t\t(Array\r\t\t\t\t\t\twith: (RBVariableNode named: \'self\')\r\t\t\t\t\t\twith: (RBLiteralValueNode value: aNode selector)\r\t\t\t\t\t\twith: (RBLiteralValueNode value: nodeId))).\r\t(stats last isKindOf: RBReturnNode)\r\t\tifFalse: [ \r\t\t\tstats\r\t\t\t\tadd:\r\t\t\t\t\t(RBReturnNode\r\t\t\t\t\t\tvalue:\r\t\t\t\t\t\t\t(RBMessageNode\r\t\t\t\t\t\t\t\treceiver: (RBLiteralValueNode value: #JCollecteur)\r\t\t\t\t\t\t\t\tselector: #return:\r\t\t\t\t\t\t\t\targuments: (Array with: (RBVariableNode named: \'self\')))) ].\r\taNode arguments: args2.\r\tbody statements: stats.\r\taNode body: body.\r\t^ aNode',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2588' ],		#self : OmReference [ '2589' ],		#time : DateAndTime [ '2018-01-14T19:02:42.007044-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JVariableProbesWriter,				#isMetaSide : false			},			#name : #'visitReturnNode:',			#protocol : #visiting,			#sourceCode : 'visitReturnNode: aNode\r\t| nodeId |\r\tnodeId := no.\r\t^ aNode\r\t\tvalue:\r\t\t\t(RBMessageNode\r\t\t\t\treceiver: (RBLiteralValueNode value: #JCollecteur)\r\t\t\t\tselector: #return:node:\r\t\t\t\targuments: (Array with: (self visitNode: aNode value) with: (RBLiteralValueNode value: nodeId)))',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2589' ],		#self : OmReference [ '2590' ],		#time : DateAndTime [ '2018-01-14T19:02:42.009888-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JVariableProbesWriter,				#isMetaSide : false			},			#name : #'visitSequenceNode:',			#protocol : #visiting,			#sourceCode : 'visitSequenceNode: aNode\r\t| tps2 nodeId stats |\r\tnodeId := no.\r\ttps2 := self visitArgumentNodes: aNode temporaries.\r\tstats := aNode statements collect: [ :s | self visitNode: s ].\r\ttps2 isEmpty\r\t\tifFalse: [ stats\r\t\t\t\taddFirst:\r\t\t\t\t\t(RBMessageNode\r\t\t\t\t\t\treceiver: (RBLiteralValueNode value: #JCollecteur)\r\t\t\t\t\t\tselector: #define:node:\r\t\t\t\t\t\targuments:\r\t\t\t\t\t\t\t{(RBLiteralValueNode\r\t\t\t\t\t\t\t\tvalue: (tps2 collect: [ :a | a name ]) asArray printString).\r\t\t\t\t\t\t\t(RBLiteralValueNode value: nodeId)}) ].\r\taNode statements: stats.\r\taNode temporaries: tps2.\r\t^ aNode',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2590' ],		#self : OmReference [ '2591' ],		#time : DateAndTime [ '2018-01-14T19:02:42.011508-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'JAbstractMethodAnnouncement class',				#isMetaSide : true			},			#name : #'onClass:andSelector:',			#protocol : #'instance creation',			#sourceCode : 'onClass: aClassName andSelector: aSymbolSelector\r\t^ self new\r\t\tmethodClass: aClassName;\r\t\tmethodSelector: aSymbolSelector',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2591' ],		#self : OmReference [ '2592' ],		#time : DateAndTime [ '2018-01-14T19:02:42.012744-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JAbstractMethodAnnouncement,				#isMetaSide : false			},			#name : #methodClass,			#protocol : #accessing,			#sourceCode : 'methodClass\r\t^ methodClass',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2592' ],		#self : OmReference [ '2593' ],		#time : DateAndTime [ '2018-01-14T19:02:42.01393-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JAbstractMethodAnnouncement,				#isMetaSide : false			},			#name : #'methodClass:',			#protocol : #accessing,			#sourceCode : 'methodClass: anObject\r\tmethodClass := anObject',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2593' ],		#self : OmReference [ '2594' ],		#time : DateAndTime [ '2018-01-14T19:02:42.015579-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JAbstractMethodAnnouncement,				#isMetaSide : false			},			#name : #methodSelector,			#protocol : #accessing,			#sourceCode : 'methodSelector\r\t^ methodSelector',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2594' ],		#self : OmReference [ '2595' ],		#time : DateAndTime [ '2018-01-14T19:02:42.016993-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JAbstractMethodAnnouncement,				#isMetaSide : false			},			#name : #'methodSelector:',			#protocol : #accessing,			#sourceCode : 'methodSelector: anObject\r\tmethodSelector := anObject',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2595' ],		#self : OmReference [ '2596' ],		#time : DateAndTime [ '2018-01-14T19:02:42.019215-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JTraceCommand,				#isMetaSide : false			},			#name : #execute,			#protocol : #execution,			#sourceCode : 'execute\r\t| aCompiledMethod methodClass methodSelector |\r\taCompiledMethod := requestor selectedNode item compiledMethod.\r\tmethodClass := aCompiledMethod methodClass name.\r\tmethodSelector := aCompiledMethod selector.\r\t(JInstrumentedMethods\r\t\tincludesClass: methodClass\r\t\tandSelector: methodSelector)\r\t\tifTrue: [ | additions |\r\t\t\tadditions := OrderedCollection new.\r\t\t\t(JInstrumentedMethods\r\t\t\t\tatClass: methodClass\r\t\t\t\tandSelector: methodSelector) addMethodAdditionTo: additions.\r\t\t\tadditions do: [ :each | each installMethod ].\r\t\t\tadditions do: [ :each | each notifyObservers ].\r\t\t\tJInstrumentedMethods\r\t\t\t\tremoveClass: methodClass\r\t\t\t\tandSelector: methodSelector.\r\t\t\tAltMethodNode removeMethodAt: methodClass and: methodSelector ]\r\t\tifFalse: [ JVariableProbesWriter analyse: aCompiledMethod ]',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2596' ],		#self : OmReference [ '2597' ],		#time : DateAndTime [ '2018-01-14T19:02:42.02209-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JTraceCommand,				#isMetaSide : false			},			#name : #icon,			#protocol : #accessing,			#sourceCode : 'icon\r\t^ nil',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2597' ],		#self : OmReference [ '2598' ],		#time : DateAndTime [ '2018-01-14T19:02:42.023706-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JTraceCommand,				#isMetaSide : false			},			#name : #isActive,			#protocol : #testing,			#sourceCode : 'isActive\r\t^ true',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2598' ],		#self : OmReference [ '2599' ],		#time : DateAndTime [ '2018-01-14T19:02:42.025018-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JTraceCommand,				#isMetaSide : false			},			#name : #isEnabled,			#protocol : #testing,			#sourceCode : 'isEnabled\r\t^ true',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2599' ],		#self : OmReference [ '2600' ],		#time : DateAndTime [ '2018-01-14T19:02:42.026357-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JTraceCommand,				#isMetaSide : false			},			#name : #label,			#protocol : #accessing,			#sourceCode : 'label\r\t| aMethod |\r\taMethod := requestor selectedNode item compiledMethod.\r\t(JInstrumentedMethods\r\t\tincludesClass: aMethod methodClass name\r\t\tandSelector: aMethod selector)\r\t\tifTrue: [ ^ \'Trace off\' ]\r\t\tifFalse: [ ^ \'Trace on\' ]',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2600' ],		#self : OmReference [ '2601' ],		#time : DateAndTime [ '2018-01-14T19:02:42.027636-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JTraceCommand,				#isMetaSide : false			},			#name : #shortcut,			#protocol : #accessing,			#sourceCode : 'shortcut\r\t^ nil',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2601' ],		#self : OmReference [ '2602' ],		#time : DateAndTime [ '2018-01-14T19:02:42.02919-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JTraceViewerItemNode,				#isMetaSide : false			},			#name : #asString,			#protocol : #printing,			#sourceCode : 'asString\r\t^ self item printString',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2602' ],		#self : OmReference [ '2603' ],		#time : DateAndTime [ '2018-01-14T19:02:42.030364-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JTraceViewerItemNode,				#isMetaSide : false			},			#name : #astNode,			#protocol : #accessing,			#sourceCode : 'astNode\r\t^ item nodeId isInteger\r\t\tifTrue: [ JCodeNodeFinder\r\t\t\t\tfind: item nodeId\r\t\t\t\tinSource: self sourceCode\r\t\t\t\tandClass: self styleClass ]\r\t\tifFalse: [ item nodeId ]',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2603' ],		#self : OmReference [ '2604' ],		#time : DateAndTime [ '2018-01-14T19:02:42.033603-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JTraceViewerItemNode,				#isMetaSide : false			},			#name : #'buildTextMenu:on:with:',			#protocol : #commands,			#sourceCode : 'buildTextMenu: aMenu on: aTarget with: aRequestor\r\t"Ok. Two steps: first, create the menu linked with the node. second, parse the method and create menu items linked to the selected node."\r\r\t| ast node t |\r\tt := false.\r\t((self pragmas: #textAreaCommand from: self class to: AltAbstractNode)\r\t\tsorted: [ :a :b | a methodSelector < b methodSelector ])\r\t\tdo: [ :p | \r\t\t\tt\r\t\t\t\tifTrue: [ aMenu addLine ]\r\t\t\t\tifFalse: [ t := true ].\r\t\t\t(((self perform: p methodSelector)\r\t\t\t\tcollect: [ :c | c asClassInEnvironment: Smalltalk globals ifAbsent: [  ] ])\r\t\t\t\treject: [ :c | c isNil ])\r\t\t\t\tdo: [ :c | (c on: aTarget for: aRequestor) addItemToMenu: aMenu ] ].\r\tast := RBParser\r\t\tparseMethod: aTarget text asString\r\t\tonError: [ :msg :pos | ^ self ].\r\tast doSemanticAnalysisIn: self methodClass.\r\t(node := ast bestNodeFor: aTarget selectionInterval) notNil\r\t\tifFalse: [ ^ self ].\r\taMenu\r\t\taddLine;\r\t\taddLine.\r\tnode altTextCommands\r\t\tdo: [ :c | \r\t\t\t(c asClass on: aTarget for: aRequestor node: node)\r\t\t\t\taddItemToMenu: aMenu ].\r\tnode canSelect\r\t\tifFalse: [ ^ self ].\r\taTarget textMorph paragraph secondarySelection: node textIntervals.\r\taTarget textMorph selectionChanged',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2604' ],		#self : OmReference [ '2605' ],		#time : DateAndTime [ '2018-01-14T19:02:42.035884-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JTraceViewerItemNode,				#isMetaSide : false			},			#name : #'buildTextShortcutsOn:for:',			#protocol : #commands,			#sourceCode : 'buildTextShortcutsOn: aKMDispatcher for: aRequestor\r\t"This is an attempt at handling shortcuts...."\r\r\t(self pragmas: #textAreaCommand from: self class to: AltTreeItemModel)\r\t\tdo: [ :e | \r\t\t\t(self perform: e methodSelector)\r\t\t\t\tdo: [ :c | \r\t\t\t\t\t| command |\r\t\t\t\t\tcommand := c asClass on: aRequestor textMorph for: aRequestor.\r\t\t\t\t\tcommand isEnabled\r\t\t\t\t\t\tifTrue: [ command buildShortcut: aKMDispatcher ] ] ]',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2605' ],		#self : OmReference [ '2606' ],		#time : DateAndTime [ '2018-01-14T19:02:42.037653-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JTraceViewerItemNode,				#isMetaSide : false			},			#name : #'buildTreeMenu:on:with:',			#protocol : #commands,			#sourceCode : 'buildTreeMenu: aMenu on: aTreeMorph with: aRequestor\r\t"The item-based stack menu."\r\r\t((self\r\t\tpragmas: #treeAreaCommand\r\t\tfrom: self class\r\t\tto: AltTreeItemModel)\r\t\tsorted: [ :a :b | a methodSelector < b methodSelector ])\r\t\tdo: [ :e | \r\t\t\t(self perform: e methodSelector)\r\t\t\t\tdo:\r\t\t\t\t\t[ :c | (c asClass on: aTreeMorph for: aRequestor) addItemToMenu: aMenu ] ]\r\t\tseparatedBy: [ aMenu addLine ].\r\t^ aMenu',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2606' ],		#self : OmReference [ '2607' ],		#time : DateAndTime [ '2018-01-14T19:02:42.039052-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JTraceViewerItemNode,				#isMetaSide : false			},			#name : #'buildTreeShortcutsOn:for:',			#protocol : #commands,			#sourceCode : 'buildTreeShortcutsOn: aKMDispatcher for: aRequestor\r\t"This is an attempt at handling shortcuts...."\r\r\t(self pragmas: #treeAreaCommand from: self class to: AltTreeItemModel)\r\t\tdo: [ :e | \r\t\t\t(self perform: e methodSelector)\r\t\t\t\tdo: [ :c | \r\t\t\t\t\t| command |\r\t\t\t\t\tcommand := c asClass on: aRequestor treeMorph for: aRequestor.\r\t\t\t\t\tcommand isEnabled\r\t\t\t\t\t\tifTrue: [ command buildShortcut: aKMDispatcher ] ] ]',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2607' ],		#self : OmReference [ '2608' ],		#time : DateAndTime [ '2018-01-14T19:02:42.040425-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JTraceViewerItemNode,				#isMetaSide : false			},			#name : #childrenItems,			#protocol : #accessing,			#sourceCode : 'childrenItems\r\t^ self item children ',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2608' ],		#self : OmReference [ '2609' ],		#time : DateAndTime [ '2018-01-14T19:02:42.041832-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JTraceViewerItemNode,				#isMetaSide : false			},			#name : #clipboardCommands,			#protocol : #commands,			#sourceCode : 'clipboardCommands\r\t<textAreaCommand>\r\t^ #(#AltCutTextCommand #AltCopyTextCommand #AltPasteTextCommand #AltSelectAllTextCommand)',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2609' ],		#self : OmReference [ '2610' ],		#time : DateAndTime [ '2018-01-14T19:02:42.045064-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JTraceViewerItemNode,				#isMetaSide : false			},			#name : #compiledMethod,			#protocol : #accessing,			#sourceCode : 'compiledMethod\r\t| a mclass mselector |\r\tmclass := self methodClass.\r\tmselector := self methodSelector.\r\ta := mclass lookupSelector: mselector.\r\ta isNil\r\t\tifTrue: [ ^ nil ].\r\t^ JInstrumentedMethods\r\t\tatClass: a methodClass\r\t\tandSelector: mselector\r\t\tifAbsent: [ a ]',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2610' ],		#self : OmReference [ '2611' ],		#time : DateAndTime [ '2018-01-14T19:02:42.046623-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JTraceViewerItemNode,				#isMetaSide : false			},			#name : #executeCommands,			#protocol : #commands,			#sourceCode : 'executeCommands\r\t<textAreaCommand>\r\t^ #(#AltDoItTextCommand #AltPrintItTextCommand #AltInspectItTextCommand #AltDebugItTextCommand #AltParenthesisTextCommand #AltSquareBracketsTextCommand #AltDoubleQuotesTextCommand #AltCurlyBracketsTextCommand)',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2611' ],		#self : OmReference [ '2612' ],		#time : DateAndTime [ '2018-01-14T19:02:42.047994-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JTraceViewerItemNode,				#isMetaSide : false			},			#name : #methodClass,			#protocol : #accessing,			#sourceCode : 'methodClass\r\t^ item isMethod\r\t\tifTrue: [ item mclass ]\r\t\tifFalse: [ parent ifNil: [  ] ifNotNil: [ parent methodClass ] ]',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2612' ],		#self : OmReference [ '2613' ],		#time : DateAndTime [ '2018-01-14T19:02:42.049338-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JTraceViewerItemNode,				#isMetaSide : false			},			#name : #methodSelector,			#protocol : #accessing,			#sourceCode : 'methodSelector\r\t^ item isMethod\r\t\tifTrue: [ item selector ]\r\t\tifFalse: [ parent ifNil: [  ] ifNotNil: [ parent methodSelector ] ]',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2613' ],		#self : OmReference [ '2614' ],		#time : DateAndTime [ '2018-01-14T19:02:42.05075-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JTraceViewerItemNode,				#isMetaSide : false			},			#name : #'pragmas:from:to:',			#protocol : #private,			#sourceCode : 'pragmas: aSymbol from: aClass to: aTarget\r\t"A safe way to find pragmas in a class hierarchy."\r\r\t| pragmas |\r\tpragmas := OrderedCollection new.\r\t(aClass allSelectorsBelow: aTarget superclass)\r\t\tdo: [ :selector | pragmas addAll: ((aClass lookupSelector: selector) pragmas select: [ :pragma | pragma key == aSymbol ]) ].\r\t^ pragmas',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2614' ],		#self : OmReference [ '2615' ],		#time : DateAndTime [ '2018-01-14T19:02:42.05256-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JTraceViewerItemNode,				#isMetaSide : false			},			#name : #rebuildContents,			#protocol : #updating,			#sourceCode : 'rebuildContents\r\t"Rebuild the contents, considering our item has changed, but try not to recreate everything."\r\r\t| oldContents |\r\toldContents := contents.\r\tself\r\t\tcontents:\r\t\t\t(self childrenItems\r\t\t\t\tcollect: [ :ci | \r\t\t\t\t\toldContents\r\t\t\t\t\t\tdetect: [ :oc | oc item = ci ]\r\t\t\t\t\t\tifNone: [ self childNodeFromItem: ci ] ]).\r\tself changed',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2615' ],		#self : OmReference [ '2616' ],		#time : DateAndTime [ '2018-01-14T19:02:42.055533-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JTraceViewerItemNode,				#isMetaSide : false			},			#name : #sourceCode,			#protocol : #accessing,			#sourceCode : 'sourceCode\r\t^ item isMethod\r\t\tifTrue: [ item methodSourceCode ]\r\t\tifFalse: [ parent ifNil: [ \'\' ] ifNotNil: [ parent sourceCode ] ]',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2616' ],		#self : OmReference [ '2617' ],		#time : DateAndTime [ '2018-01-14T19:02:42.057154-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JTraceViewerItemNode,				#isMetaSide : false			},			#name : #styleClass,			#protocol : #accessing,			#sourceCode : 'styleClass\r\t^ item isMethod\r\t\tifTrue: [ item mclass ]\r\t\tifFalse: [ parent ifNil: [  ] ifNotNil: [ parent styleClass ] ]',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2617' ],		#self : OmReference [ '2618' ],		#time : DateAndTime [ '2018-01-14T19:02:42.058511-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JTraceViewerItemNode,				#isMetaSide : false			},			#name : #treeAreaCommands,			#protocol : #commands,			#sourceCode : 'treeAreaCommands\r\t<treeAreaCommand>\r\t^ #(#AltSelectNextItem #AltSelectPreviousItem #AltSelectMoveDown #AltSelectMoveUp #AltInspectorInspect)',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2618' ],		#self : OmReference [ '2619' ],		#time : DateAndTime [ '2018-01-14T19:02:42.060806-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltMethodNode,				#isMetaSide : false			},			#name : #traceCommand,			#protocol : #'*Jejak',			#sourceCode : 'traceCommand\r\t<treeAreaCommand>\r\t^ #(#JTraceCommand)\r',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2619' ],		#self : OmReference [ '2620' ],		#time : DateAndTime [ '2018-01-14T19:02:42.062171-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'JTests class',				#isMetaSide : true			},			#name : #displayCleanTraceCArleast5,			#protocol : #examples,			#sourceCode : 'displayCleanTraceCArleast5\r\t"Test tracing on the array."\r\r\t"JTests displayCleanTraceCArleast5"\r\r\t<example>\r\t[ JCollecteur reset.\r\t#(#rleast: #reorder: #least:array2:)\r\t\tdo: [ :e | JVariableProbesWriter analyse: JExampleArray >> e ].\r\tself testCArleast5.\r\tJLoopArrange do: JCollecteur recorder elements first value.\r\tJMethodArrange do: JCollecteur recorder elements first value ]\r\t\tensure: [ JProbesWriter uninstall ].\r\tJTraceViewer open',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2620' ],		#self : OmReference [ '2621' ],		#time : DateAndTime [ '2018-01-14T19:02:42.06343-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'JTests class',				#isMetaSide : true			},			#name : #displayMLVariableTraceCArleast5,			#protocol : #examples,			#sourceCode : 'displayMLVariableTraceCArleast5\r\t"Test tracing on the array."\r\r\t"self displayMLVariableTraceCArleast5"\r\r\t"JCollecteur recorder initialize"\r\r\t<example>\r\t[ JCollecteur recorder reset.\r\t#(#rleast: #reorder: #least:array2:)\r\t\tdo: [ :e | JMLVariablesProbesWriter analyse: JExampleArray >> e ].\r\tself testCArleast5 ]\r\t\tensure: [ JMLAbstractProbesWriter uninstall ].\r\tJTraceViewer open',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2621' ],		#self : OmReference [ '2622' ],		#time : DateAndTime [ '2018-01-14T19:02:42.064964-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'JTests class',				#isMetaSide : true			},			#name : #displayMessageTraceCArleast5,			#protocol : #examples,			#sourceCode : 'displayMessageTraceCArleast5\r\t"Test tracing on the array."\r\r\t"JTests displayMessageTraceCArleast5"\r\r\t<example>\r\t[ JCollecteur reset.\r\t#(#rleast: #reorder: #least:array2:)\r\t\tdo: [ :e | JCFGProbesWriter analyse: JExampleArray >> e ].\r\tself testCArleast5 ]\r\t\tensure: [ JProbesWriter uninstall ].\r\tJTraceViewer open',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2622' ],		#self : OmReference [ '2623' ],		#time : DateAndTime [ '2018-01-14T19:02:42.067969-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'JTests class',				#isMetaSide : true			},			#name : #displayTraceCArleast5,			#protocol : #examples,			#sourceCode : 'displayTraceCArleast5\r\t"Test tracing on the array."\r\r\t"JTests displayTraceCArleast5"\r\r\t<example>\r\t[ JCollecteur reset.\r\t#(#rleast: #reorder: #least:array2:)\r\t\tdo: [ :e | JVariableProbesWriter analyse: JExampleArray >> e ].\r\tself testCArleast5 ]\r\t\tensure: [ JProbesWriter uninstall ].\r\tJTraceViewer open',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2623' ],		#self : OmReference [ '2624' ],		#time : DateAndTime [ '2018-01-14T19:02:42.07001-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'JTests class',				#isMetaSide : true			},			#name : #overheadTraceCArleast5,			#protocol : #profiling,			#sourceCode : 'overheadTraceCArleast5\r\t"Tracing overhead on the array least5 search."\r\r\t"JTests overheadTraceCArleast5"\r\r\t<script>\r\t| var r |\r\tvar := JExampleArray new: 31.\r\tr := Random new.\r\t1 to: var size do: [ :i | var at: i put: (r next * 15) rounded ].\r\tTimeProfiler onBlock: [ 10000 timesRepeat: [ var rleast: 5 ] ].\r\tJCollecteur recorder: JEmptyRecorder new.\r\t#(#rleast: #reorder: #least:array2:)\r\t\tdo: [ :e | JCFGProbesWriter analyse: JExampleArray >> e ].\r\tTimeProfiler\r\t\tonBlock: [ 10000\r\t\t\t\ttimesRepeat: [ var rleast: 5.\r\t\t\t\t\tJCollecteur recorder reset ] ].\r\tJProbesWriter uninstall.\r\tJCollecteur recorder: JRecorder new',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2624' ],		#self : OmReference [ '2625' ],		#time : DateAndTime [ '2018-01-14T19:02:42.071625-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'JTests class',				#isMetaSide : true			},			#name : #overheadTraceRecordingCArleast5,			#protocol : #profiling,			#sourceCode : 'overheadTraceRecordingCArleast5\r\t"Tracing overhead with events recording on the array least5 search."\r\r\t"JTests overheadTraceRecordingCArleast5"\r\r\t<script>\r\t| var r |\r\tvar := JExampleArray new: 31.\r\tr := Random new.\r\t1 to: var size do: [ :i | var at: i put: (r next * 15) rounded ].\r\tTimeProfiler onBlock: [ 10000 timesRepeat: [ var rleast: 5 ] ].\r\tJCollecteur recorder: JRecorder new.\r\t#(#rleast: #reorder: #least:array2:)\r\t\tdo: [ :e | JCFGProbesWriter analyse: JExampleArray >> e ].\r\tTimeProfiler\r\t\tonBlock: [ 10000\r\t\t\t\ttimesRepeat: [ var rleast: 5.\r\t\t\t\t\tJCollecteur recorder reset ] ].\r\tJProbesWriter uninstall.\r\tJCollecteur recorder: JRecorder new',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2625' ],		#self : OmReference [ '2626' ],		#time : DateAndTime [ '2018-01-14T19:02:42.073025-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'JTests class',				#isMetaSide : true			},			#name : #overheadTraceVar2CArleast5,			#protocol : #profiling,			#sourceCode : 'overheadTraceVar2CArleast5\r\t"Tracing overhead on the array least5 search."\r\r\t"JTests overheadTraceVar2CArleast5"\r\r\t<script>\r\t| var r |\r\tvar := JExampleArray new: 31.\r\tr := Random new.\r\t1 to: var size do: [ :i | var at: i put: (r next * 15) rounded ].\r\tTimeProfiler onBlock: [ 10000 timesRepeat: [ var rleast: 5 ] ].\r\tJCollecteur recorder: JEmptyRecorder new.\r\t#(#rleast: #reorder: #least:array2:)\r\t\tdo: [ :e | JCFGProbesWriterToVar analyse: JExampleArray >> e ].\r\tTimeProfiler\r\t\tonBlock: [ 10000\r\t\t\t\ttimesRepeat: [ var rleast: 5.\r\t\t\t\t\tJCollecteur recorder reset ] ].\r\tJProbesWriter uninstall.\r\tJCollecteur recorder: JRecorder new',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2626' ],		#self : OmReference [ '2627' ],		#time : DateAndTime [ '2018-01-14T19:02:42.074468-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'JTests class',				#isMetaSide : true			},			#name : #overheadTraceVarCArleast5,			#protocol : #profiling,			#sourceCode : 'overheadTraceVarCArleast5\r\t"Tracing overhead on the array least5 search."\r\r\t"JTests overheadTraceVarCArleast5"\r\r\t<script>\r\t| var r |\r\tvar := JExampleArray new: 31.\r\tr := Random new.\r\t1 to: var size do: [ :i | var at: i put: (r next * 15) rounded ].\r\tTimeProfiler onBlock: [ 10000 timesRepeat: [ var rleast: 5 ] ].\r\tJCollecteur recorder: JEmptyRecorder new.\r\t[ #(#rleast: #reorder: #least:array2:)\r\t\tdo: [ :e | JCFGProbesWriter analyse: JExampleArray >> e ].\r\tTimeProfiler onBlock: [ 10000 timesRepeat: [ var rleast: 5 ] ] ]\r\t\tensure: [ JProbesWriter uninstall ].\r\tJCollecteur recorder: JRecorder new',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2627' ],		#self : OmReference [ '2628' ],		#time : DateAndTime [ '2018-01-14T19:02:42.075887-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'JTests class',				#isMetaSide : true			},			#name : #testCArleast5,			#protocol : #examples,			#sourceCode : 'testCArleast5\r\t"Test the CA array rleast search."\r\r\t<example>\r\t| var r a v p |\r\tvar := JExampleArray new: 31.\r\tr := Random new.\r\t1 to: var size do: [ :i | var at: i put: (r next * 15) rounded ].\r\ta := var rleast: 5.\r\tv := a first.\r\tp := a last.\r\t1 to: v size do: [ :i | \r\t\ti + 1 to: v size do: [ :j | \r\t\t\tself assert: (v at: i) <= (v at: j).\r\t\t\t(v at: i) = (v at: j)\r\t\t\t\tifTrue: [ self assert: (p at: i) < (p at: j) ] ].\r\t\tself assert: (var at: (p at: i)) = (v at: i) ].\r\t1 to: var size - 1 do: [ :i | \r\t\t(var at: i) < v last\r\t\t\tifTrue: [ self assert: (p includes: i) ] ]',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2628' ],		#self : OmReference [ '2629' ],		#time : DateAndTime [ '2018-01-14T19:02:42.078877-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JTests,				#isMetaSide : false			},			#name : #tearDown,			#protocol : #resources,			#sourceCode : 'tearDown\r\tJProbesWriter uninstall',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2629' ],		#self : OmReference [ '2630' ],		#time : DateAndTime [ '2018-01-14T19:02:42.080322-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JTests,				#isMetaSide : false			},			#name : #testCArleast5,			#protocol : #testing,			#sourceCode : 'testCArleast5\r\t"Test the CA array rleast search."\r\r\t| var r a v p |\r\tvar := JExampleArray new: 31.\r\tr := Random new.\r\t1 to: var size do: [:i | var at: i put: (r next * 15) rounded].\r\ta := var rleast: 5.\r\tv := a first.\r\tp := a last.\r\t1 to: v size\r\t\tdo: \r\t\t\t[:i | \r\t\t\ti + 1 to: v size\r\t\t\t\tdo: \r\t\t\t\t\t[:j | \r\t\t\t\t\tself assert: (v at: i) <= (v at: j).\r\t\t\t\t\t(v at: i) = (v at: j) ifTrue: [self assert: (p at: i) < (p at: j)]].\r\t\t\tself assert: (var at: (p at: i)) = (v at: i)].\r\t1 to: var size - 1\r\t\tdo: [:i | (var at: i) < v last ifTrue: [self assert: (p includes: i)]].',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2630' ],		#self : OmReference [ '2631' ],		#time : DateAndTime [ '2018-01-14T19:02:42.081806-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JTests,				#isMetaSide : false			},			#name : #testErroneousMetalinks,			#protocol : #testing,			#sourceCode : 'testErroneousMetalinks\r\t"Demonstrate the need of #optionWeakAfter; without that option, we will get a compilation error trying to run the test, because of an incorrect way to add an #ensure: sequence for the #after MetaLink."\r\r\t| link node |\r\tnode := nil.\r\tlink := MetaLink new\r\t\tmetaObject: [ :n | node := n ];\r\t\tselector: #value:;\r\t\targuments: #(node);\r\t\tcontrol: #after.\r\tself assert: #(2 3) = (JExampleArray new: 5) erroneous.\r\t[ (JExampleArray >> #erroneous) ast body statements first value\r\t\targuments last arguments first statements last link: link.\r\tself should: [ (JExampleArray new: 5) erroneous ] raise: KeyNotFound ]\r\t\tensure: [ link uninstall ]',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2631' ],		#self : OmReference [ '2632' ],		#time : DateAndTime [ '2018-01-14T19:02:42.083302-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JTests,				#isMetaSide : false			},			#name : #testErroneousMetalinksWeakAfter,			#protocol : #testing,			#sourceCode : 'testErroneousMetalinksWeakAfter\r\t| link node |\r\tnode := nil.\r\tlink := MetaLink new\r\t\tmetaObject: [ :n | node := n ];\r\t\tselector: #value:;\r\t\targuments: #(node);\r\t\toption: #(+ optionWeakAfter);\r\t\tcontrol: #after.\r\tself assert: #(2 3) = (JExampleArray new: 5) erroneous.\r\t[ (JExampleArray >> #erroneous) ast body statements first value\r\t\targuments last arguments first statements last link: link.\r\tself assert: #(2 3) = (JExampleArray new: 5) erroneous.\r\tself assert: node notNil.\r\tself assert: (node parent parent isKindOf: RBBlockNode) ]\r\t\tensure: [ link uninstall ]',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2632' ],		#self : OmReference [ '2633' ],		#time : DateAndTime [ '2018-01-14T19:02:42.084811-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JTests,				#isMetaSide : false			},			#name : #testNodeFinder,			#protocol : #testing,			#sourceCode : 'testNodeFinder\r\t"Test finding a node in the AST."\r\r\t| n m |\r\tm := JExampleArray >> #rleast:.\r\tn := JCodeNodeFinder find: 54 in: m.\r\tself\r\t\tassert:\r\t\t\t(n source copyFrom: n sourceInterval first to: n sourceInterval last)\r\t\t\t\t= \'ml + 1\'',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2633' ],		#self : OmReference [ '2634' ],		#time : DateAndTime [ '2018-01-14T19:02:42.086614-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JTests,				#isMetaSide : false			},			#name : #testNodeFinder2,			#protocol : #testing,			#sourceCode : 'testNodeFinder2\r\t"Test finding a node in the AST."\r\r\t| n m |\r\tm := JExampleArray >> #rleast:.\r\tn := JCodeNodeFinder find: 10 in: m.\r\tself\r\t\tassert:\r\t\t\t(n source copyFrom: n sourceInterval first to: n sourceInterval last)\r\t\t\t\t= \'((self size + k - 1) / k) truncated\'',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2634' ],		#self : OmReference [ '2635' ],		#time : DateAndTime [ '2018-01-14T19:02:42.089546-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JTests,				#isMetaSide : false			},			#name : #testNodeFinder3,			#protocol : #testing,			#sourceCode : 'testNodeFinder3\r\t"Test finding a node in the AST."\r\r\t| n m |\r\tm := JExampleArray >> #rleast:.\r\tn := JCodeNodeFinder find: 22 in: m.\r\tself\r\t\tassert:\r\t\t\t(n source copyFrom: n sourceInterval first to: n sourceInterval last)\r\t\t\t\t= \'n == 1\'',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2635' ],		#self : OmReference [ '2636' ],		#time : DateAndTime [ '2018-01-14T19:02:42.091135-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JTests,				#isMetaSide : false			},			#name : #testTraceCArleast5,			#protocol : #testing,			#sourceCode : 'testTraceCArleast5\r\t"Test tracing on the array."\r\r\tJCollecteur recorder: JRecorder new.\r\t#(#rleast: #reorder: #least:array2:)\r\t\tdo: [ :e | JCFGProbesWriter analyse: JExampleArray >> e ].\r\tself testCArleast5.\r\tJProbesWriter uninstall.\r\tJCollecteur recorder reset',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2636' ],		#self : OmReference [ '2637' ],		#time : DateAndTime [ '2018-01-14T19:02:42.092544-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JTests,				#isMetaSide : false			},			#name : #testTraceVariableCArleast5,			#protocol : #testing,			#sourceCode : 'testTraceVariableCArleast5\r\t"Test tracing on the array."\r\r\tJCollecteur recorder: JRecorder new.\r\t#(#rleast: #reorder: #least:array2:)\r\t\tdo: [ :e | JVariableProbesWriter analyse: JExampleArray >> e ].\r\tself testCArleast5.\r\tJProbesWriter uninstall.\r\tJCollecteur recorder reset',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2637' ],		#self : OmReference [ '2638' ],		#time : DateAndTime [ '2018-01-14T19:02:42.093954-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JTests,				#isMetaSide : false			},			#name : #testTracerWriter,			#protocol : #testing,			#sourceCode : 'testTracerWriter\r\t"Test tracing on the array."\r\r\tJCFGProbesWriter analyse: JExampleArray >> #rleast:.\r\tJProbesWriter uninstall',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2638' ],		#self : OmReference [ '2639' ],		#time : DateAndTime [ '2018-01-14T19:02:42.095273-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JExampleArray,				#isMetaSide : false			},			#name : #erroneous,			#protocol : #actions,			#sourceCode : 'erroneous\r\t| r |\r\tr := #(1 2) at: 2 put: (#(1 2) collect: [ :p | p + 1 ]).\r\t^ r',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2639' ],		#self : OmReference [ '2640' ],		#time : DateAndTime [ '2018-01-14T19:02:42.096427-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JExampleArray,				#isMetaSide : false			},			#name : #erroneous2,			#protocol : #actions,			#sourceCode : 'erroneous2\r\t"This code looks a bit like the one I have an error with when adding a metalink to JExampleArray>>#erroneous... Looking at the IR, one can see where the error is: the MetaLink addition after the last instruction of the block forget to copy the :p argument in the [p+ 1] block and IR generation then fails."\r\r\t| r |\r\tr := #(1 2)\r\t\tat: 2\r\t\tput:\r\t\t\t(#(1 2)\r\t\t\t\tcollect: [ :p | \r\t\t\t\t\t[ p + 1 ]\r\t\t\t\t\t\tensure: [ JCollecteur value: 1 ] ]).\r\t^ r',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2640' ],		#self : OmReference [ '2641' ],		#time : DateAndTime [ '2018-01-14T19:02:42.097832-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JExampleArray,				#isMetaSide : false			},			#name : #'least:array2:',			#protocol : #actions,			#sourceCode : 'least: anArray1 array2: anArray2 \r\t"Sort the two arrays into one. May have one array smaller than the other. Arrays are sorted, so the algorithm is simplified."\r\r\t| sz v p i j k a1 a2 p1 p2 |\r\ta1 := anArray1 first.\r\tp1 := anArray1 last.\r\ta2 := anArray2 first.\r\tp2 := anArray2 last.\r\tsz := a1 size max: a2 size.\r\tv := Array new: sz.\r\tp := Array new: sz.\r\ti := 1.\r\tj := 1.\r\tk := 1.\r\t[k <= sz] whileTrue: \r\t\t\t[(i > a1 size or: [j <= a2 size and: [(a2 at: j) < (a1 at: i)]]) \r\t\t\t\tifTrue: \r\t\t\t\t\t[v at: k put: (a2 at: j).\r\t\t\t\t\tp at: k put: (p2 at: j).\r\t\t\t\t\tj := j + 1.\r\t\t\t\t\tk := k + 1]\r\t\t\t\tifFalse: \r\t\t\t\t\t[v at: k put: (a1 at: i).\r\t\t\t\t\tp at: k put: (p1 at: i).\r\t\t\t\t\tk := k + 1.\r\t\t\t\t\ti := i + 1]].\r\t^Array with: v with: p',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2641' ],		#self : OmReference [ '2642' ],		#time : DateAndTime [ '2018-01-14T19:02:42.101068-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JExampleArray,				#isMetaSide : false			},			#name : #'reorder:',			#protocol : #actions,			#sourceCode : 'reorder: anArray \r\t"Reorder all elements of this array in a new Array, recording the positions. This is a building block to be able to then do the sort of the five smallest values."\r\r\t| sz p v |\r\tsz := anArray size.\r\tv := Array new: sz.\r\tp := Array new: sz.\r\tv at: 1 put: (anArray at: 1).\r\tp at: 1 put: 1.\r\t2 to: sz\r\t\tdo: \r\t\t\t[:i | \r\t\t\t| valeur j |\r\t\t\tvaleur := anArray at: i.\r\t\t\tj := 1.\r\t\t\t[j < i] whileTrue: \r\t\t\t\t\t[valeur < (v at: j) \r\t\t\t\t\t\tifTrue: \r\t\t\t\t\t\t\t[i to: j + 1\r\t\t\t\t\t\t\t\tby: -1\r\t\t\t\t\t\t\t\tdo: \r\t\t\t\t\t\t\t\t\t[:k | \r\t\t\t\t\t\t\t\t\tv at: k put: (v at: k - 1).\r\t\t\t\t\t\t\t\t\tp at: k put: (p at: k - 1)].\r\t\t\t\t\t\t\tv at: j put: valeur.\r\t\t\t\t\t\t\tp at: j put: i.\r\t\t\t\t\t\t\tj := sz + 1]\r\t\t\t\t\t\tifFalse: [j := j + 1]].\r\t\t\tj = i \r\t\t\t\tifTrue: \r\t\t\t\t\t[v at: i put: valeur.\r\t\t\t\t\tp at: i put: i]].\r\t^Array with: v with: p',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2642' ],		#self : OmReference [ '2643' ],		#time : DateAndTime [ '2018-01-14T19:02:42.102635-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #JExampleArray,				#isMetaSide : false			},			#name : #'rleast:',			#protocol : #actions,			#sourceCode : 'rleast: k \r\t"Recursive least k elements on anArray. If the array is k in length or less, return it ordered. Else, divide."\r\r\t| n a1 a2 ml |\r\tn := ((self size + k - 1) / k) truncated.\r\tn == 1 ifTrue: [^self reorder: self].\r\tml := (n / 2) truncated * k.\r\ta1 := (self copyFrom: 1 to: ml) rleast: k.\r\ta2 := (self copyFrom: ml + 1 to: self size) rleast: k.\r\ta2 at: 2 put: (a2 last collect: [:p | p + ml]).\r\t^self least: a1 array2: a2',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2643' ],		#self : OmReference [ '2644' ],		#time : DateAndTime [ '2018-01-14T19:02:42.104321-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'JHelp class',				#isMetaSide : true			},			#name : #bookName,			#protocol : #accessing,			#sourceCode : 'bookName\r\t^ \'Jejak - A trace framework - Documentation\'',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2644' ],		#self : OmReference [ '2645' ],		#time : DateAndTime [ '2018-01-14T19:02:42.105813-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'JHelp class',				#isMetaSide : true			},			#name : #firstPage,			#protocol : #pages,			#sourceCode : 'firstPage\r\t^ HelpTopic\r\t\ttitle: \'The Jejak Trace framework - Overview\'\r\t\tcontents: \'INTRODUCTION\r\rDuring the VALMADEO project (a PRIR/Région Bretagne funded project directed by\rC. Dezan, <dezan@univ-brest.fr>), we needed a tool to study in details how some\ralgorithms (error correcting codes) could work without errors, but with degraded\rperformance. Execution and compilation would report no errors, but the performance\rof the error correcting coding and decoding would be several dB below the target.\rThe error correcting code was looping hundreds of times over each block of data,\rmaking step by step debugging unusable. Profiling, message tallies were too coarse\rto tell us anything. We needed a different tool.\r\rThe answer was this trace tool : a framework for injecting probes into methods, and\rrecord their execution. It can record an execution to the smallest detail (all calls, all\rvalues, all assignments), that over a long sequence (hundreds or thousands of calls),\rand let one navigate freely through the recorded trace along with the traced source\rcode. It is capable of tracing system, startup or display methods, without interruption\ror blocking the overall image, allowing for very fine non-intrusive system analysis.\r\rIt has been used for debugging turbo codes implementations, algorithm understanding\ron turbo codes, and memory behavior analysis for embedded systems design space\rexploration.\r\rIt was first implemented on VisualWorks 7.5 in 2007 by T. Goubier <thierry.goubier@gmail.com>,\rthen ported in 2012 to Pharo 1.4.\'',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2645' ],		#self : OmReference [ '2646' ],		#time : DateAndTime [ '2018-01-14T19:02:42.107165-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'JHelp class',				#isMetaSide : true			},			#name : #fourthPage,			#protocol : #pages,			#sourceCode : 'fourthPage\r\t^ HelpTopic\r\t\ttitle: \'The Jejak Trace Framework - Performance\'\r\t\tcontents: \'Performance and Overhead\r\r1- Profiling the trace overhead\r\rUntraced: 578ms\rTraced(var): 7448ms\rSlow down: 7448/578.0 = 12.885813148788927\r\rUntraced: 518ms\rTraced(literal): 6808ms\rSlow down: 6808/518.0 = 13.142857142857142\r\rThe literal version may even be slower overall, whereas the literal version is really fast in VisualWorks.\'',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2646' ],		#self : OmReference [ '2647' ],		#time : DateAndTime [ '2018-01-14T19:02:42.108538-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'JHelp class',				#isMetaSide : true			},			#name : #lastPage,			#protocol : #pages,			#sourceCode : 'lastPage\r\t^ HelpTopic\r\t\ttitle: \'The Jejak Trace framework - References\'\r\t\tcontents: \'REFERENCES\r\rT. Goubier, ValMadeo Project Report: The Trace and Dynamic Program Analysis Framework, August 27, 2007, UBO Technical Report.\r\rGoubier, T.; Dezan, C.; Pottier, B.; Jego, C.; , "Fine grain parallel decoding of turbo product codes: Algorithm and architecture," Turbo Codes and Related Topics, 2008 5th International Symposium on , vol., no., pp.90-95, 1-5 Sept. 2008. doi: 10.1109/TURBOCODING.2008.4658678\r\'',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2647' ],		#self : OmReference [ '2648' ],		#time : DateAndTime [ '2018-01-14T19:02:42.111486-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'JHelp class',				#isMetaSide : true			},			#name : #pages,			#protocol : #pages,			#sourceCode : 'pages\r\t^ #(#firstPage #secondPage #thirdPage #lastPage)',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2648' ],		#self : OmReference [ '2649' ],		#time : DateAndTime [ '2018-01-14T19:02:42.11326-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'JHelp class',				#isMetaSide : true			},			#name : #secondPage,			#protocol : #pages,			#sourceCode : 'secondPage\r\t^ HelpTopic\r\t\ttitle: \'The Jejak Trace framework -  User Manual\'\r\t\tcontents: \'User Manual\r\r1- GUI\r\rThe tracer gui is integrated under the Tools menu, at Jejak Trace Viewer.\r\rThe left pane shows the recorded event trace, the right pane is the source code\rlinked to an event selected in the right pane. Selecting an event on the left will\rdisplay the source code of the method which generated this event, and select the\rstatement of the event.\r\rThree buttons allows to handle the tracer behavior:\r- Erase Events : erase all recorded events.\r- Remove Probes: remove all probes from all traced methods, revert them to the original source.\r- Update: Update the list of events.\r\r2- Probes\r\rProbes are inserted by asking the tracer to analyse methods. This is done in the\rsystem browser, by selecting a method and the command Toggle Trace. Once\rthis is done, the method will generate events as soon as it is executed (typically\rby executing code in a workspace or a test case).\r\r3- Usual use\r\r- Choose a method (or a few methods) of interest.\r- Toggle trace on those methods through a system browser.\r- Run a few test cases.\r- Open or Update the Trace Viewer to see the trace.\r- Explore the trace.\r- Remove the probes, erase the events and redo.\r\r4- Example\r\r- Toggle Trace on VTExampleArray>>rleast:\r- Run test case VTTests>>testCArleast5\r- Open Trace Viewer and explore.\r- Remove Probes.\r- Erase events.\r\rexecute\r\t| method |\r\tmethod := self compiledMethod.\r\t(JInstrumentedMethods includesKey: (Array with: method methodClass with: method selector))\r\t\tifTrue: [ \r\t\t\tmethod methodClass\r\t\t\t\taddSelector: method selector\r\t\t\t\twithMethod: (JInstrumentedMethods at: (Array with: method methodClass with: method selector)) ]\r\t\tifFalse: [ JVariableProbesWriter analyse: method selector in: method methodClass ].\r\'',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2649' ],		#self : OmReference [ '2650' ],		#time : DateAndTime [ '2018-01-14T19:02:42.114633-05:00' ],		#trigger : OmReference [ '2294' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'JHelp class',				#isMetaSide : true			},			#name : #thirdPage,			#protocol : #pages,			#sourceCode : 'thirdPage\r\t^ HelpTopic\r\t\ttitle: \'The Jejak Trace framework - Framework\'\r\t\tcontents: \'Framework Guide\r\r1- Elements of the framework\r\r- JProbesWriter : writes probes in the AST of a method before recompilation.\r- JAbstractRecord : record classes for recording events.\r- JRecordVisiteur : classes for visiting a recorded event trace and changing it.\r- JViewer : the GUI.\r- JCollecteur : the singleton to link to a recording events object.\r- JRecorded : an object recording events.\r- JInstrumentedMethods : where all methods with probes are kept.\r- JCmdTrace : OmniBrowser integration.\r\r2- JProbesWriter\r\rThe core of the system. Requires a smalltalk parser and compiler to generate the AST for the method, as well as compiling a transformed AST. A simpler variant has less integration with the compiler, but let the probed code be visible.\'',			#stamp : ' 1/14/2018 19:02:23',			#package : #Jejak		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#time : DateAndTime [ '2018-01-14T19:02:42.389929-05:00' ],		#prior : OmReference [ '2650' ],		#self : OmReference [ '2651' ]	},	#content : EpMonticelloVersionsLoad {		#versionNames : OrderedCollection [			'Alt-Debugger-cypress.1'		]	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2651' ],		#self : OmReference [ '2652' ],		#time : DateAndTime [ '2018-01-14T19:02:42.712123-05:00' ],		#trigger : @3	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltDebugAcceptCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltDebugAcceptCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltDebugAcceptCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltDebugAcceptCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltDebugAcceptCommand,					#isMetaSide : false				},				#parent : @7,				#content : 'I am very similar to my other accept command, except that the target api for accepting is different',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I am very similar to my other accept command, except that the target api for accepting is different',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2652' ],		#self : OmReference [ '2653' ],		#time : DateAndTime [ '2018-01-14T19:02:42.713701-05:00' ],		#trigger : OmReference [ '2651' ]	},	#content : EpCategoryAddition {		#classCategoryName : #Alt-Debugger,		#affectedPackageName : #Alt-Debugger	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2653' ],		#self : OmReference [ '2654' ],		#time : DateAndTime [ '2018-01-14T19:02:42.86177-05:00' ],		#trigger : OmReference [ '2651' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltDebugAcceptCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Debugger\''			},			#name : #AltDebugAcceptCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltDebugAcceptCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltDebugAcceptCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltDebugAcceptCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'I am very similar to my other accept command, except that the target api for accepting is different',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Debugger,			#package : #Alt-Debugger,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2654' ],		#self : OmReference [ '2655' ],		#time : DateAndTime [ '2018-01-14T19:02:42.931745-05:00' ],		#trigger : OmReference [ '2651' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltDebugBrowseCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltDebugBrowseCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltDebugBrowseCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltDebugBrowseCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltDebugBrowseCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'I browse in a browser the current method in the context',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I browse in a browser the current method in the context',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2655' ],		#self : OmReference [ '2656' ],		#time : DateAndTime [ '2018-01-14T19:02:42.937986-05:00' ],		#trigger : OmReference [ '2651' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltCommand',				#traitCompositionSource : '{}',				#definitionSource : 'AltCommand subclass: #AltDebugBrowseCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Debugger\''			},			#name : #AltDebugBrowseCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltDebugBrowseCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'AltDebugBrowseCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltDebugBrowseCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'I browse in a browser the current method in the context',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Debugger,			#package : #Alt-Debugger,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2656' ],		#self : OmReference [ '2657' ],		#time : DateAndTime [ '2018-01-14T19:02:42.984242-05:00' ],		#trigger : OmReference [ '2651' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #AltDebugger\r\tinstanceVariableNames: \'textMorph inspector session stackMorph source stack window context extensions toolbar\'\r\tclassVariableNames: \'AlwaysOpenFullDebugger DoItFilterEnabled ErrorRecursion FilterCommonMessageSends FilterDictionary KCFilterEnabled LinkSelectorFilterEnabled LogDebuggerStackToFile NilSelectorsFilterEnabled\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltDebugger,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltDebugger,						#isMetaSide : false					},					#name : #textMorph,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltDebugger,						#isMetaSide : false					},					#name : #inspector,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltDebugger,						#isMetaSide : false					},					#name : #session,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltDebugger,						#isMetaSide : false					},					#name : #stackMorph,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltDebugger,						#isMetaSide : false					},					#name : #source,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltDebugger,						#isMetaSide : false					},					#name : #stack,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltDebugger,						#isMetaSide : false					},					#name : #window,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltDebugger,						#isMetaSide : false					},					#name : #context,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltDebugger,						#isMetaSide : false					},					#name : #extensions,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltDebugger,						#isMetaSide : false					},					#name : #toolbar,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltDebugger class\r\tinstanceVariableNames: \'\''				},				#name : #'AltDebugger class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltDebugger,					#isMetaSide : false				},				#parent : @8,				#content : 'I represent the GUI for a debugger.\r\rI am very similar to a system browser, for the fact that the items I have in my environment are context objects, and that part of my GUI is an inspector on some of the context objects. My left pane is a stack of contexts.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltDebugger,						#isMetaSide : false					},					#name : #AlwaysOpenFullDebugger,					#parent : @8				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltDebugger,						#isMetaSide : false					},					#name : #DoItFilterEnabled,					#parent : @8				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltDebugger,						#isMetaSide : false					},					#name : #ErrorRecursion,					#parent : @8				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltDebugger,						#isMetaSide : false					},					#name : #FilterCommonMessageSends,					#parent : @8				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltDebugger,						#isMetaSide : false					},					#name : #FilterDictionary,					#parent : @8				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltDebugger,						#isMetaSide : false					},					#name : #KCFilterEnabled,					#parent : @8				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltDebugger,						#isMetaSide : false					},					#name : #LinkSelectorFilterEnabled,					#parent : @8				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltDebugger,						#isMetaSide : false					},					#name : #LogDebuggerStackToFile,					#parent : @8				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltDebugger,						#isMetaSide : false					},					#name : #NilSelectorsFilterEnabled,					#parent : @8				}			],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I represent the GUI for a debugger.\r\rI am very similar to a system browser, for the fact that the items I have in my environment are context objects, and that part of my GUI is an inspector on some of the context objects. My left pane is a stack of contexts.',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2657' ],		#self : OmReference [ '2658' ],		#time : DateAndTime [ '2018-01-14T19:02:42.98924-05:00' ],		#trigger : OmReference [ '2651' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #AltDebugger\r\tinstanceVariableNames: \'textMorph inspector session stackMorph source stack window context extensions toolbar\'\r\tclassVariableNames: \'AlwaysOpenFullDebugger DoItFilterEnabled ErrorRecursion FilterCommonMessageSends FilterDictionary KCFilterEnabled LinkSelectorFilterEnabled LogDebuggerStackToFile NilSelectorsFilterEnabled\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Debugger\''			},			#name : #AltDebugger,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltDebugger,						#isMetaSide : false					},					#name : #textMorph,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltDebugger,						#isMetaSide : false					},					#name : #inspector,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltDebugger,						#isMetaSide : false					},					#name : #session,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltDebugger,						#isMetaSide : false					},					#name : #stackMorph,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltDebugger,						#isMetaSide : false					},					#name : #source,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltDebugger,						#isMetaSide : false					},					#name : #stack,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltDebugger,						#isMetaSide : false					},					#name : #window,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltDebugger,						#isMetaSide : false					},					#name : #context,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltDebugger,						#isMetaSide : false					},					#name : #extensions,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltDebugger,						#isMetaSide : false					},					#name : #toolbar,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltDebugger class\r\tinstanceVariableNames: \'\''				},				#name : #'AltDebugger class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltDebugger,					#isMetaSide : false				},				#parent : @8,				#content : 'I represent the GUI for a debugger.\r\rI am very similar to a system browser, for the fact that the items I have in my environment are context objects, and that part of my GUI is an inspector on some of the context objects. My left pane is a stack of contexts.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltDebugger,						#isMetaSide : false					},					#name : #AlwaysOpenFullDebugger,					#parent : @8				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltDebugger,						#isMetaSide : false					},					#name : #DoItFilterEnabled,					#parent : @8				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltDebugger,						#isMetaSide : false					},					#name : #ErrorRecursion,					#parent : @8				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltDebugger,						#isMetaSide : false					},					#name : #FilterCommonMessageSends,					#parent : @8				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltDebugger,						#isMetaSide : false					},					#name : #FilterDictionary,					#parent : @8				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltDebugger,						#isMetaSide : false					},					#name : #KCFilterEnabled,					#parent : @8				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltDebugger,						#isMetaSide : false					},					#name : #LinkSelectorFilterEnabled,					#parent : @8				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltDebugger,						#isMetaSide : false					},					#name : #LogDebuggerStackToFile,					#parent : @8				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltDebugger,						#isMetaSide : false					},					#name : #NilSelectorsFilterEnabled,					#parent : @8				}			],			#category : #Alt-Debugger,			#package : #Alt-Debugger,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2658' ],		#self : OmReference [ '2659' ],		#time : DateAndTime [ '2018-01-14T19:02:43.005212-05:00' ],		#trigger : OmReference [ '2651' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltTreeItemModel',				#traitCompositionSource : '{}',				#definitionSource : 'AltTreeItemModel subclass: #AltContextItemModel\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltContextItemModel,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltContextItemModel class\r\tinstanceVariableNames: \'\''				},				#name : #'AltContextItemModel class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltContextItemModel,					#isMetaSide : false				},				#parent : @8,				#content : 'I wrap a context object. I look like a code item',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I wrap a context object. I look like a code item',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2659' ],		#self : OmReference [ '2660' ],		#time : DateAndTime [ '2018-01-14T19:02:43.01282-05:00' ],		#trigger : OmReference [ '2651' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltTreeItemModel',				#traitCompositionSource : '{}',				#definitionSource : 'AltTreeItemModel subclass: #AltContextItemModel\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Debugger\''			},			#name : #AltContextItemModel,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltContextItemModel class\r\tinstanceVariableNames: \'\''				},				#name : #'AltContextItemModel class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltContextItemModel,					#isMetaSide : false				},				#parent : @8,				#content : 'I wrap a context object. I look like a code item',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Debugger,			#package : #Alt-Debugger,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2660' ],		#self : OmReference [ '2661' ],		#time : DateAndTime [ '2018-01-14T19:02:43.040848-05:00' ],		#trigger : OmReference [ '2651' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltContextItemModel',				#traitCompositionSource : '{}',				#definitionSource : 'AltContextItemModel subclass: #AltContextItemRootModel\r\tinstanceVariableNames: \'model\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #AltContextItemRootModel,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltContextItemRootModel,						#isMetaSide : false					},					#name : #model,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltContextItemRootModel class\r\tinstanceVariableNames: \'\''				},				#name : #'AltContextItemRootModel class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltContextItemRootModel,					#isMetaSide : false				},				#parent : @8,				#content : 'I am the root of the list of context items (the stack of a debug session)',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I am the root of the list of context items (the stack of a debug session)',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2661' ],		#self : OmReference [ '2662' ],		#time : DateAndTime [ '2018-01-14T19:02:43.046012-05:00' ],		#trigger : OmReference [ '2651' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'AltContextItemModel',				#traitCompositionSource : '{}',				#definitionSource : 'AltContextItemModel subclass: #AltContextItemRootModel\r\tinstanceVariableNames: \'model\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Debugger\''			},			#name : #AltContextItemRootModel,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltContextItemRootModel,						#isMetaSide : false					},					#name : #model,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltContextItemRootModel class\r\tinstanceVariableNames: \'\''				},				#name : #'AltContextItemRootModel class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltContextItemRootModel,					#isMetaSide : false				},				#parent : @8,				#content : 'I am the root of the list of context items (the stack of a debug session)',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Alt-Debugger,			#package : #Alt-Debugger,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2662' ],		#self : OmReference [ '2663' ],		#time : DateAndTime [ '2018-01-14T19:02:43.091407-05:00' ],		#trigger : OmReference [ '2651' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #AltDebugger\r\tinstanceVariableNames: \'textMorph inspector session stackMorph source stack window context extensions toolbar\'\r\tclassVariableNames: \'AlwaysOpenFullDebugger DoItFilterEnabled ErrorRecursion FilterCommonMessageSends FilterDictionary KCFilterEnabled LinkSelectorFilterEnabled LogDebuggerStackToFile NilSelectorsFilterEnabled\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Debugger\''			},			#name : #AltDebugger,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltDebugger,						#isMetaSide : false					},					#name : #textMorph,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltDebugger,						#isMetaSide : false					},					#name : #inspector,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltDebugger,						#isMetaSide : false					},					#name : #session,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltDebugger,						#isMetaSide : false					},					#name : #stackMorph,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltDebugger,						#isMetaSide : false					},					#name : #source,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltDebugger,						#isMetaSide : false					},					#name : #stack,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltDebugger,						#isMetaSide : false					},					#name : #window,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltDebugger,						#isMetaSide : false					},					#name : #context,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltDebugger,						#isMetaSide : false					},					#name : #extensions,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltDebugger,						#isMetaSide : false					},					#name : #toolbar,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltDebugger class\r\tinstanceVariableNames: \'\''				},				#name : #'AltDebugger class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltDebugger,					#isMetaSide : false				},				#parent : @8,				#content : 'I represent the GUI for a debugger.\r\rI am very similar to a system browser, for the fact that the items I have in my environment are context objects, and that part of my GUI is an inspector on some of the context objects. My left pane is a stack of contexts.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltDebugger,						#isMetaSide : false					},					#name : #AlwaysOpenFullDebugger,					#parent : @8				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltDebugger,						#isMetaSide : false					},					#name : #DoItFilterEnabled,					#parent : @8				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltDebugger,						#isMetaSide : false					},					#name : #ErrorRecursion,					#parent : @8				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltDebugger,						#isMetaSide : false					},					#name : #FilterCommonMessageSends,					#parent : @8				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltDebugger,						#isMetaSide : false					},					#name : #FilterDictionary,					#parent : @8				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltDebugger,						#isMetaSide : false					},					#name : #KCFilterEnabled,					#parent : @8				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltDebugger,						#isMetaSide : false					},					#name : #LinkSelectorFilterEnabled,					#parent : @8				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltDebugger,						#isMetaSide : false					},					#name : #LogDebuggerStackToFile,					#parent : @8				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltDebugger,						#isMetaSide : false					},					#name : #NilSelectorsFilterEnabled,					#parent : @8				}			],			#category : #Alt-Debugger,			#package : #Alt-Debugger,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #AltDebugger\r\tinstanceVariableNames: \'textMorph inspector session stackMorph source stack window context extensions toolbar\'\r\tclassVariableNames: \'AlwaysOpenFullDebugger DoItFilterEnabled ErrorRecursion FilterCommonMessageSends FilterDictionary KCFilterEnabled LinkSelectorFilterEnabled LogDebuggerStackToFile NilSelectorsFilterEnabled\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Alt-Debugger\''			},			#name : #AltDebugger,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltDebugger,						#isMetaSide : false					},					#name : #textMorph,					#parent : @60				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltDebugger,						#isMetaSide : false					},					#name : #inspector,					#parent : @60				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltDebugger,						#isMetaSide : false					},					#name : #session,					#parent : @60				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltDebugger,						#isMetaSide : false					},					#name : #stackMorph,					#parent : @60				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltDebugger,						#isMetaSide : false					},					#name : #source,					#parent : @60				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltDebugger,						#isMetaSide : false					},					#name : #stack,					#parent : @60				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltDebugger,						#isMetaSide : false					},					#name : #window,					#parent : @60				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltDebugger,						#isMetaSide : false					},					#name : #context,					#parent : @60				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltDebugger,						#isMetaSide : false					},					#name : #extensions,					#parent : @60				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltDebugger,						#isMetaSide : false					},					#name : #toolbar,					#parent : @60				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AltDebugger class\r\tinstanceVariableNames: \'\''				},				#name : #'AltDebugger class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @60			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AltDebugger,					#isMetaSide : false				},				#parent : @60,				#content : 'I represent the GUI for a debugger.\r\rI am very similar to a system browser, for the fact that the items I have in my environment are context objects, and that part of my GUI is an inspector on some of the context objects. My left pane is a stack of contexts.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltDebugger,						#isMetaSide : false					},					#name : #AlwaysOpenFullDebugger,					#parent : @60				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltDebugger,						#isMetaSide : false					},					#name : #DoItFilterEnabled,					#parent : @60				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltDebugger,						#isMetaSide : false					},					#name : #ErrorRecursion,					#parent : @60				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltDebugger,						#isMetaSide : false					},					#name : #FilterCommonMessageSends,					#parent : @60				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltDebugger,						#isMetaSide : false					},					#name : #FilterDictionary,					#parent : @60				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltDebugger,						#isMetaSide : false					},					#name : #KCFilterEnabled,					#parent : @60				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltDebugger,						#isMetaSide : false					},					#name : #LinkSelectorFilterEnabled,					#parent : @60				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltDebugger,						#isMetaSide : false					},					#name : #LogDebuggerStackToFile,					#parent : @60				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #AltDebugger,						#isMetaSide : false					},					#name : #NilSelectorsFilterEnabled,					#parent : @60				}			],			#category : #Alt-Debugger,			#package : #Alt-Debugger,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2663' ],		#self : OmReference [ '2664' ],		#time : DateAndTime [ '2018-01-14T19:02:43.531287-05:00' ],		#trigger : OmReference [ '2651' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltDebugAcceptCommand,				#isMetaSide : false			},			#name : #execute,			#protocol : #execution,			#sourceCode : 'execute\r\t"The execute may create an object or return us one."\r\r\t| result selection |\r\ttarget accept.\r\tselection := requestor selectedNode item.\r\tresult := requestor session\r\t\trecompileMethodTo: target text\r\t\tinContext: selection\r\t\tnotifying: target.\r\trequestor updateSession',			#stamp : ' 1/14/2018 19:02:24',			#package : #Alt-Debugger		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2664' ],		#self : OmReference [ '2665' ],		#time : DateAndTime [ '2018-01-14T19:02:43.546021-05:00' ],		#trigger : OmReference [ '2651' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltDebugAcceptCommand,				#isMetaSide : false			},			#name : #icon,			#protocol : #accessing,			#sourceCode : 'icon\r\t^ #smallOkIcon',			#stamp : ' 1/14/2018 19:02:24',			#package : #Alt-Debugger		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2665' ],		#self : OmReference [ '2666' ],		#time : DateAndTime [ '2018-01-14T19:02:43.548769-05:00' ],		#trigger : OmReference [ '2651' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltDebugAcceptCommand,				#isMetaSide : false			},			#name : #isActive,			#protocol : #testing,			#sourceCode : 'isActive\r\t^ true',			#stamp : ' 1/14/2018 19:02:24',			#package : #Alt-Debugger		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2666' ],		#self : OmReference [ '2667' ],		#time : DateAndTime [ '2018-01-14T19:02:43.553088-05:00' ],		#trigger : OmReference [ '2651' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltDebugAcceptCommand,				#isMetaSide : false			},			#name : #keystroke,			#protocol : #accessing,			#sourceCode : 'keystroke\r\t^ $s ctrl ',			#stamp : ' 1/14/2018 19:02:24',			#package : #Alt-Debugger		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2667' ],		#self : OmReference [ '2668' ],		#time : DateAndTime [ '2018-01-14T19:02:43.555276-05:00' ],		#trigger : OmReference [ '2651' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltDebugAcceptCommand,				#isMetaSide : false			},			#name : #label,			#protocol : #accessing,			#sourceCode : 'label\r\t^ \'Accept\'',			#stamp : ' 1/14/2018 19:02:24',			#package : #Alt-Debugger		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2668' ],		#self : OmReference [ '2669' ],		#time : DateAndTime [ '2018-01-14T19:02:43.557771-05:00' ],		#trigger : OmReference [ '2651' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltDebugBrowseCommand,				#isMetaSide : false			},			#name : #execute,			#protocol : #execution,			#sourceCode : 'execute\r\trequestor selectedItem item method browse',			#stamp : ' 1/14/2018 19:02:24',			#package : #Alt-Debugger		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2669' ],		#self : OmReference [ '2670' ],		#time : DateAndTime [ '2018-01-14T19:02:43.55938-05:00' ],		#trigger : OmReference [ '2651' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltDebugBrowseCommand,				#isMetaSide : false			},			#name : #isActive,			#protocol : #testing,			#sourceCode : 'isActive\r\t^ true',			#stamp : ' 1/14/2018 19:02:24',			#package : #Alt-Debugger		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2670' ],		#self : OmReference [ '2671' ],		#time : DateAndTime [ '2018-01-14T19:02:43.562356-05:00' ],		#trigger : OmReference [ '2651' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltDebugBrowseCommand,				#isMetaSide : false			},			#name : #isEnabled,			#protocol : #testing,			#sourceCode : 'isEnabled\r\t^ requestor selectedNode notNil',			#stamp : ' 1/14/2018 19:02:24',			#package : #Alt-Debugger		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2671' ],		#self : OmReference [ '2672' ],		#time : DateAndTime [ '2018-01-14T19:02:43.564172-05:00' ],		#trigger : OmReference [ '2651' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltDebugBrowseCommand,				#isMetaSide : false			},			#name : #label,			#protocol : #accessing,			#sourceCode : 'label\r\t^ \'Browse\'',			#stamp : ' 1/14/2018 19:02:24',			#package : #Alt-Debugger		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2672' ],		#self : OmReference [ '2673' ],		#time : DateAndTime [ '2018-01-14T19:02:43.566248-05:00' ],		#trigger : OmReference [ '2651' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltDebugger class',				#isMetaSide : true			},			#name : #'altDebuggerExtensions:',			#protocol : #examples,			#sourceCode : 'altDebuggerExtensions: anAltDebugger\r\t"This is a way to add buttons to a debugger, to extend it based on the receiver."\r\t\r\t"How does this works? Each time a context is selected, the receiver of the context\r\tis tested to see if it holds that method. If yes, the method is executed and the resulting\r\tmorphs are added to the GUI. When that context is deselected, the morphs are deleted."\r\t\r\t"Why don\'t I use a pragma for that? Because pragmas, used in that way, are the\r\tsame as testing for #respondsTo:. The only thing pragmas allow when used in that\r\tway is multi-package extensibility... pragmas aren\'t used anymore in the way\r\texpected by the pragmas creator."\r\t\r\t"Beware: any error there triggers an overall failure. I will try to find a way to encapsulate that into a better approach."\r\r\t| aButton |\r\taButton := PluggableButtonMorph\r\t\ton: anAltDebugger\r\t\tgetState: nil\r\t\taction: #browseReceiver.\r\taButton\r\t\thResizing: #spaceFill;\r\t\tvResizing: #shrinkWrap;\r\t\tlabel: \'Example of a custom Browse action\'.\r\t^ Array with: aButton\r',			#stamp : ' 1/14/2018 19:02:24',			#package : #Alt-Debugger		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2673' ],		#self : OmReference [ '2674' ],		#time : DateAndTime [ '2018-01-14T19:02:43.568833-05:00' ],		#trigger : OmReference [ '2651' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltDebugger class',				#isMetaSide : true			},			#name : #alwaysOpenFullDebugger,			#protocol : #settings,			#sourceCode : 'alwaysOpenFullDebugger\r\t^ AlwaysOpenFullDebugger ifNil: [AlwaysOpenFullDebugger := false]',			#stamp : ' 1/14/2018 19:02:24',			#package : #Alt-Debugger		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2674' ],		#self : OmReference [ '2675' ],		#time : DateAndTime [ '2018-01-14T19:02:43.571102-05:00' ],		#trigger : OmReference [ '2651' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltDebugger class',				#isMetaSide : true			},			#name : #'alwaysOpenFullDebugger:',			#protocol : #settings,			#sourceCode : 'alwaysOpenFullDebugger: aBoolean\r\tAlwaysOpenFullDebugger := aBoolean.',			#stamp : ' 1/14/2018 19:02:24',			#package : #Alt-Debugger		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2675' ],		#self : OmReference [ '2676' ],		#time : DateAndTime [ '2018-01-14T19:02:43.573099-05:00' ],		#trigger : OmReference [ '2651' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltDebugger class',				#isMetaSide : true			},			#name : #codeCallingCodeWithHalt,			#protocol : #examples,			#sourceCode : 'codeCallingCodeWithHalt\r\t<example>\r\t\r\t| x y |\r\tx := 2.\r\ty := self codeWithHalt.\r\tx := x + y.\r\t^ x',			#stamp : ' 1/14/2018 19:02:24',			#package : #Alt-Debugger		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2676' ],		#self : OmReference [ '2677' ],		#time : DateAndTime [ '2018-01-14T19:02:43.575001-05:00' ],		#trigger : OmReference [ '2651' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltDebugger class',				#isMetaSide : true			},			#name : #codeWithHalt,			#protocol : #examples,			#sourceCode : 'codeWithHalt\r\t<example>\r\t| x y |\r\tx := 1.\r\ty := 5.\r\tx := x + y.\r\tself halt.\r\ty := y + x + x.\r\t^ y',			#stamp : ' 1/14/2018 19:02:24',			#package : #Alt-Debugger		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2677' ],		#self : OmReference [ '2678' ],		#time : DateAndTime [ '2018-01-14T19:02:43.576638-05:00' ],		#trigger : OmReference [ '2651' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltDebugger class',				#isMetaSide : true			},			#name : #filterCommonMessageSends,			#protocol : #settings,			#sourceCode : 'filterCommonMessageSends\r\t^ FilterCommonMessageSends ifNil: [FilterCommonMessageSends := false]',			#stamp : ' 1/14/2018 19:02:24',			#package : #Alt-Debugger		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2678' ],		#self : OmReference [ '2679' ],		#time : DateAndTime [ '2018-01-14T19:02:43.578222-05:00' ],		#trigger : OmReference [ '2651' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltDebugger class',				#isMetaSide : true			},			#name : #'filterCommonMessageSends:',			#protocol : #settings,			#sourceCode : 'filterCommonMessageSends: aBoolean\r\tFilterCommonMessageSends := aBoolean',			#stamp : ' 1/14/2018 19:02:24',			#package : #Alt-Debugger		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2679' ],		#self : OmReference [ '2680' ],		#time : DateAndTime [ '2018-01-14T19:02:43.579813-05:00' ],		#trigger : OmReference [ '2651' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltDebugger class',				#isMetaSide : true			},			#name : #filterDoItSelectors,			#protocol : #settings,			#sourceCode : 'filterDoItSelectors\r\t^ DoItFilterEnabled ifNil:[ DoItFilterEnabled := false ]',			#stamp : ' 1/14/2018 19:02:24',			#package : #Alt-Debugger		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2680' ],		#self : OmReference [ '2681' ],		#time : DateAndTime [ '2018-01-14T19:02:43.58236-05:00' ],		#trigger : OmReference [ '2651' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltDebugger class',				#isMetaSide : true			},			#name : #'filterDoItSelectors:',			#protocol : #settings,			#sourceCode : 'filterDoItSelectors: aBoolean\r\tDoItFilterEnabled := aBoolean',			#stamp : ' 1/14/2018 19:02:24',			#package : #Alt-Debugger		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2681' ],		#self : OmReference [ '2682' ],		#time : DateAndTime [ '2018-01-14T19:02:43.58405-05:00' ],		#trigger : OmReference [ '2651' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltDebugger class',				#isMetaSide : true			},			#name : #filterKernelClasses,			#protocol : #settings,			#sourceCode : 'filterKernelClasses\r\t^ KCFilterEnabled ifNil:[ KCFilterEnabled := false ]',			#stamp : ' 1/14/2018 19:02:24',			#package : #Alt-Debugger		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2682' ],		#self : OmReference [ '2683' ],		#time : DateAndTime [ '2018-01-14T19:02:43.585634-05:00' ],		#trigger : OmReference [ '2651' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltDebugger class',				#isMetaSide : true			},			#name : #'filterKernelClasses:',			#protocol : #settings,			#sourceCode : 'filterKernelClasses: aBoolean\r\tKCFilterEnabled := aBoolean',			#stamp : ' 1/14/2018 19:02:24',			#package : #Alt-Debugger		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2683' ],		#self : OmReference [ '2684' ],		#time : DateAndTime [ '2018-01-14T19:02:43.587737-05:00' ],		#trigger : OmReference [ '2651' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltDebugger class',				#isMetaSide : true			},			#name : #filterLinkSelectors,			#protocol : #settings,			#sourceCode : 'filterLinkSelectors\r  \t^ LinkSelectorFilterEnabled ifNil:[ LinkSelectorFilterEnabled := false ]',			#stamp : ' 1/14/2018 19:02:24',			#package : #Alt-Debugger		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2684' ],		#self : OmReference [ '2685' ],		#time : DateAndTime [ '2018-01-14T19:02:43.58964-05:00' ],		#trigger : OmReference [ '2651' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltDebugger class',				#isMetaSide : true			},			#name : #'filterLinkSelectors:',			#protocol : #settings,			#sourceCode : 'filterLinkSelectors: aBoolean\r\tLinkSelectorFilterEnabled := aBoolean',			#stamp : ' 1/14/2018 19:02:24',			#package : #Alt-Debugger		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2685' ],		#self : OmReference [ '2686' ],		#time : DateAndTime [ '2018-01-14T19:02:43.591315-05:00' ],		#trigger : OmReference [ '2651' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltDebugger class',				#isMetaSide : true			},			#name : #filterNilSelectors,			#protocol : #settings,			#sourceCode : 'filterNilSelectors\r  \t^ NilSelectorsFilterEnabled ifNil:[ NilSelectorsFilterEnabled := false ]',			#stamp : ' 1/14/2018 19:02:24',			#package : #Alt-Debugger		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2686' ],		#self : OmReference [ '2687' ],		#time : DateAndTime [ '2018-01-14T19:02:43.593907-05:00' ],		#trigger : OmReference [ '2651' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltDebugger class',				#isMetaSide : true			},			#name : #'filterNilSelectors:',			#protocol : #settings,			#sourceCode : 'filterNilSelectors: aBoolean\r\tNilSelectorsFilterEnabled := aBoolean',			#stamp : ' 1/14/2018 19:02:24',			#package : #Alt-Debugger		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2687' ],		#self : OmReference [ '2688' ],		#time : DateAndTime [ '2018-01-14T19:02:43.595659-05:00' ],		#trigger : OmReference [ '2651' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltDebugger class',				#isMetaSide : true			},			#name : #initialize,			#protocol : #initialize-release,			#sourceCode : 'initialize\r\tself register',			#stamp : ' 1/14/2018 19:02:24',			#package : #Alt-Debugger		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2688' ],		#self : OmReference [ '2689' ],		#time : DateAndTime [ '2018-01-14T19:02:43.59743-05:00' ],		#trigger : OmReference [ '2651' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltDebugger class',				#isMetaSide : true			},			#name : #logDebuggerStackToFile,			#protocol : #settings,			#sourceCode : 'logDebuggerStackToFile\r\t^ LogDebuggerStackToFile ifNil: [LogDebuggerStackToFile := true]',			#stamp : ' 1/14/2018 19:02:24',			#package : #Alt-Debugger		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2689' ],		#self : OmReference [ '2690' ],		#time : DateAndTime [ '2018-01-14T19:02:43.599061-05:00' ],		#trigger : OmReference [ '2651' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltDebugger class',				#isMetaSide : true			},			#name : #'logDebuggerStackToFile:',			#protocol : #settings,			#sourceCode : 'logDebuggerStackToFile: aBoolean\r\t LogDebuggerStackToFile := aBoolean',			#stamp : ' 1/14/2018 19:02:24',			#package : #Alt-Debugger		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2690' ],		#self : OmReference [ '2691' ],		#time : DateAndTime [ '2018-01-14T19:02:43.600707-05:00' ],		#trigger : OmReference [ '2651' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltDebugger class',				#isMetaSide : true			},			#name : #nothing,			#protocol : #examples,			#sourceCode : 'nothing\r\tself inform: \'Nothing\'',			#stamp : ' 1/14/2018 19:02:24',			#package : #Alt-Debugger		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2691' ],		#self : OmReference [ '2692' ],		#time : DateAndTime [ '2018-01-14T19:02:43.602291-05:00' ],		#trigger : OmReference [ '2651' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltDebugger class',				#isMetaSide : true			},			#name : #'on:',			#protocol : #'instance creation',			#sourceCode : 'on: aDebugSession\r\t^ self new\r\t\tsession: aDebugSession;\r\t\tyourself',			#stamp : ' 1/14/2018 19:02:24',			#package : #Alt-Debugger		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2692' ],		#self : OmReference [ '2693' ],		#time : DateAndTime [ '2018-01-14T19:02:43.603919-05:00' ],		#trigger : OmReference [ '2651' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltDebugger class',				#isMetaSide : true			},			#name : #'openOn:withFullView:',			#protocol : #'instance creation',			#sourceCode : 'openOn: aDebugSession withFullView: aBool\r\tself openOn: aDebugSession withFullView: aBool andNotification: nil',			#stamp : ' 1/14/2018 19:02:24',			#package : #Alt-Debugger		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2693' ],		#self : OmReference [ '2694' ],		#time : DateAndTime [ '2018-01-14T19:02:43.606975-05:00' ],		#trigger : OmReference [ '2651' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltDebugger class',				#isMetaSide : true			},			#name : #'openOn:withFullView:andNotification:',			#protocol : #'instance creation',			#sourceCode : 'openOn: aDebugSession withFullView: aBool andNotification: aString\r\t| debugger |\r\tdebugger := self on: aDebugSession.\r\t"aBool | self alwaysOpenFullDebugger\r\t\tifTrue: [ debugger open ]\r\t\tifFalse: [ debugger openWithNotification: aString ]"\r\tdebugger open',			#stamp : ' 1/14/2018 19:02:24',			#package : #Alt-Debugger		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2694' ],		#self : OmReference [ '2695' ],		#time : DateAndTime [ '2018-01-14T19:02:43.608857-05:00' ],		#trigger : OmReference [ '2651' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltDebugger class',				#isMetaSide : true			},			#name : #'openOnEnvironment:',			#protocol : #'system browser',			#sourceCode : 'openOnEnvironment: aRBEnvironment\r\t^ AltBrowser openOnEnvironment: aRBEnvironment',			#stamp : ' 1/14/2018 19:02:24',			#package : #Alt-Debugger		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2695' ],		#self : OmReference [ '2696' ],		#time : DateAndTime [ '2018-01-14T19:02:43.610609-05:00' ],		#trigger : OmReference [ '2651' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltDebugger class',				#isMetaSide : true			},			#name : #register,			#protocol : #initialize-release,			#sourceCode : 'register\r\t"Add ourselves to registry. See [Smalltalk tools]"\r\t<script>\r\r\tSmalltalk tools register: self as: #debugger',			#stamp : ' 1/14/2018 19:02:24',			#package : #Alt-Debugger		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2696' ],		#self : OmReference [ '2697' ],		#time : DateAndTime [ '2018-01-14T19:02:43.612262-05:00' ],		#trigger : OmReference [ '2651' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltDebugger class',				#isMetaSide : true			},			#name : #stackWidgetClass,			#protocol : #settings,			#sourceCode : 'stackWidgetClass\r\t"Perfectly ugly, stupid API where the settings force a specific type of tools, where the implementation is for the tool to be generic."\r\r\t^ self',			#stamp : ' 1/14/2018 19:02:24',			#package : #Alt-Debugger		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2697' ],		#self : OmReference [ '2698' ],		#time : DateAndTime [ '2018-01-14T19:02:43.613959-05:00' ],		#trigger : OmReference [ '2651' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltDebugger class',				#isMetaSide : true			},			#name : #taskbarIconName,			#protocol : #icons,			#sourceCode : 'taskbarIconName\r\r\t^#smallDebugIcon',			#stamp : ' 1/14/2018 19:02:24',			#package : #Alt-Debugger		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2698' ],		#self : OmReference [ '2699' ],		#time : DateAndTime [ '2018-01-14T19:02:43.615785-05:00' ],		#trigger : OmReference [ '2651' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltDebugger,				#isMetaSide : false			},			#name : #browseReceiver,			#protocol : #actions,			#sourceCode : 'browseReceiver\r\tself selectedItem item receiver browse',			#stamp : ' 1/14/2018 19:02:24',			#package : #Alt-Debugger		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2699' ],		#self : OmReference [ '2700' ],		#time : DateAndTime [ '2018-01-14T19:02:43.618129-05:00' ],		#trigger : OmReference [ '2651' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltDebugger,				#isMetaSide : false			},			#name : #'buildStackMenu:',			#protocol : #shortcuts,			#sourceCode : 'buildStackMenu: aMenu\r\t"The default stack menu."\r\r\tself selectedItem buildStackMenu: aMenu on: stackMorph for: self.\r\t^ aMenu',			#stamp : ' 1/14/2018 19:02:24',			#package : #Alt-Debugger		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2700' ],		#self : OmReference [ '2701' ],		#time : DateAndTime [ '2018-01-14T19:02:43.619896-05:00' ],		#trigger : OmReference [ '2651' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltDebugger,				#isMetaSide : false			},			#name : #'buildStackShortcutsOn:with:',			#protocol : #shortcuts,			#sourceCode : 'buildStackShortcutsOn: aKMDispatcher with: aRequestor\r\t"This is an attempt at handling shortcuts..."\r\r\tself selectedItem\r\t\tifNotNil: [ :s | s buildStackShortcutsOn: aKMDispatcher with: aRequestor ]',			#stamp : ' 1/14/2018 19:02:24',			#package : #Alt-Debugger		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2701' ],		#self : OmReference [ '2702' ],		#time : DateAndTime [ '2018-01-14T19:02:43.622064-05:00' ],		#trigger : OmReference [ '2651' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltDebugger,				#isMetaSide : false			},			#name : #'buildTextMenu:',			#protocol : #shortcuts,			#sourceCode : 'buildTextMenu: aMenu\r\tself selectedItem notNil\r\t\tifTrue: [ self selectedItem buildTextMenu: aMenu on: textMorph with: self ].\r\t^ aMenu',			#stamp : ' 1/14/2018 19:02:24',			#package : #Alt-Debugger		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2702' ],		#self : OmReference [ '2703' ],		#time : DateAndTime [ '2018-01-14T19:02:43.623883-05:00' ],		#trigger : OmReference [ '2651' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltDebugger,				#isMetaSide : false			},			#name : #'buildTextShortcutsOn:with:',			#protocol : #shortcuts,			#sourceCode : 'buildTextShortcutsOn: aKMDispatcher with: aRequestor\r\t"This is an attempt at handling shortcuts... Which works, with the help of a custom KMDispatcher."\r\r\tself selectedItem notNil\r\t\tifTrue: [ self selectedItem\r\t\t\t\tbuildTextShortcutsOn: aKMDispatcher\r\t\t\t\twith: aRequestor ]',			#stamp : ' 1/14/2018 19:02:24',			#package : #Alt-Debugger		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2703' ],		#self : OmReference [ '2704' ],		#time : DateAndTime [ '2018-01-14T19:02:43.625875-05:00' ],		#trigger : OmReference [ '2651' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltDebugger,				#isMetaSide : false			},			#name : #buttons,			#protocol : #'user interface',			#sourceCode : 'buttons\r\t"Create the command buttons as required. Maybe plug it into the command framework later."\r\t\r\t| aDebuggerProceedButton aDebuggerRestartButton aDebuggerIntoButton aDebuggerOverButton aDebuggerThroughButton aDebuggerRunToHereButton aDebuggerWhereIsButton |\r\taDebuggerProceedButton := self pluggableButtonDo: #proceed named: \'Proceed\'.\r\taDebuggerRestartButton := self pluggableButtonDo: #restart named: \'Restart\'.\r\taDebuggerIntoButton := self pluggableButtonDo: #into named: \'Into\'.\t\r\taDebuggerOverButton := self pluggableButtonDo: #over named: \'Over\'.\r\taDebuggerThroughButton := self pluggableButtonDo: #through named: \'Through\'.\r\taDebuggerRunToHereButton := self pluggableButtonDo: #runToHere named: \'Run to here\'.\t\r\taDebuggerWhereIsButton := self pluggableButtonDo: #whereIs named: \'Where is?\'.\t\r\t^ (toolbar := AlignmentMorph newRow\r\t\t\t\tvResizing: #shrinkWrap;\r\t\t\t\thResizing: #spaceFill;\r\t\t\t\tlayoutInset: 0;\r\t\t\t\taddMorph: aDebuggerWhereIsButton;\r\t\t\t\taddMorph: aDebuggerRunToHereButton;\r\t\t\t\taddMorph: aDebuggerThroughButton;\r\t\t\t\taddMorph: aDebuggerOverButton;\r\t\t\t\taddMorph: aDebuggerIntoButton;\r\t\t\t\taddMorph: aDebuggerRestartButton;\r\t\t\t\taddMorph: aDebuggerProceedButton;\r\t\t\t\tyourself)',			#stamp : ' 1/14/2018 19:02:24',			#package : #Alt-Debugger		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2704' ],		#self : OmReference [ '2705' ],		#time : DateAndTime [ '2018-01-14T19:02:43.627488-05:00' ],		#trigger : OmReference [ '2651' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltDebugger,				#isMetaSide : false			},			#name : #context,			#protocol : #accessing,			#sourceCode : 'context\r\t^ context',			#stamp : ' 1/14/2018 19:02:24',			#package : #Alt-Debugger		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2705' ],		#self : OmReference [ '2706' ],		#time : DateAndTime [ '2018-01-14T19:02:43.629407-05:00' ],		#trigger : OmReference [ '2651' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltDebugger,				#isMetaSide : false			},			#name : #currentContext,			#protocol : #selection,			#sourceCode : 'currentContext\r\t^ self selectedItem item',			#stamp : ' 1/14/2018 19:02:24',			#package : #Alt-Debugger		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2706' ],		#self : OmReference [ '2707' ],		#time : DateAndTime [ '2018-01-14T19:02:43.632009-05:00' ],		#trigger : OmReference [ '2651' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltDebugger,				#isMetaSide : false			},			#name : #delete,			#protocol : #initialization,			#sourceCode : 'delete\r\tself release',			#stamp : ' 1/14/2018 19:02:24',			#package : #Alt-Debugger		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2707' ],		#self : OmReference [ '2708' ],		#time : DateAndTime [ '2018-01-14T19:02:43.633887-05:00' ],		#trigger : OmReference [ '2651' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltDebugger,				#isMetaSide : false			},			#name : #extensions,			#protocol : #accessing,			#sourceCode : 'extensions\r\t^ extensions ifNil: [ extensions := #() ]',			#stamp : ' 1/14/2018 19:02:24',			#package : #Alt-Debugger		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2708' ],		#self : OmReference [ '2709' ],		#time : DateAndTime [ '2018-01-14T19:02:43.635595-05:00' ],		#trigger : OmReference [ '2651' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltDebugger,				#isMetaSide : false			},			#name : #inspector,			#protocol : #'user interface',			#sourceCode : 'inspector\r\t^ inspector\r\t\tifNil: [ inspector := AltInspector directOn: self selectedNode item ]',			#stamp : ' 1/14/2018 19:02:24',			#package : #Alt-Debugger		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2709' ],		#self : OmReference [ '2710' ],		#time : DateAndTime [ '2018-01-14T19:02:43.637359-05:00' ],		#trigger : OmReference [ '2651' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltDebugger,				#isMetaSide : false			},			#name : #inspectorMorph,			#protocol : #'user interface',			#sourceCode : 'inspectorMorph\r\t^ self inspector groupMorph\r\t\tvResizing: #shrinkWrap;\r\t\tyourself',			#stamp : ' 1/14/2018 19:02:24',			#package : #Alt-Debugger		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2710' ],		#self : OmReference [ '2711' ],		#time : DateAndTime [ '2018-01-14T19:02:43.639463-05:00' ],		#trigger : OmReference [ '2651' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltDebugger,				#isMetaSide : false			},			#name : #into,			#protocol : #actions,			#sourceCode : 'into\r\tself session stepInto: self currentContext.\r\tself updateSession',			#stamp : ' 1/14/2018 19:02:24',			#package : #Alt-Debugger		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2711' ],		#self : OmReference [ '2712' ],		#time : DateAndTime [ '2018-01-14T19:02:43.641611-05:00' ],		#trigger : OmReference [ '2651' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltDebugger,				#isMetaSide : false			},			#name : #open,			#protocol : #'user interface',			#sourceCode : 'open\r\t"Open the window, as simple as that. Still missing the inspector part."\r\r\t| pane subPane right |\r\tpane := AlignmentMorph newColumn\r\t\thResizing: #spaceFill;\r\t\tvResizing: #spaceFill;\r\t\tcellPositioning: #leftCenter;\r\t\tcolor: Color transparent;\r\t\tlayoutInset: 0;\r\t\tyourself.\r\tsubPane := Morph new\r\t\thResizing: #spaceFill;\r\t\tvResizing: #spaceFill;\r\t\tfillStyle: Color transparent;\r\t\tchangeProportionalLayout;\r\t\tyourself.\t"non pane color tracking"\r\tpane addMorph: subPane.\r\tpane addMorph: self buttons.\r\tright := Morph new\r\t\thResizing: #spaceFill;\r\t\tvResizing: #spaceFill;\r\t\tlayoutInset: 0;\r\t\tchangeProportionalLayout;\r\t\tcolor: Color transparent;\r\t\tyourself.\t"non pane color tracking"\r\twindow := Smalltalk ui theme\r\t\tnewWindowIn: World\r\t\tfor: self\r\t\ttitle: self title.\r\twindow\r\t\taddMorph: pane\r\t\tfullFrame:\r\t\t\t(AltLayoutFrame\r\t\t\t\tfractions: (0 @ 0 corner: 1 @ 1)\r\t\t\t\ttopLeftOffsets: 0 @ 0\r\t\t\t\tbottomRightOffsets: 0 @ 0).\r\tright\r\t\taddMorph: self inspectorMorph\r\t\tfullFrame:\r\t\t\t(AltLayoutFrame\r\t\t\t\tfractions: (0 @ 1 corner: 1 @ 1)\r\t\t\t\ttopLeftOffsets: 0 @ -198\r\t\t\t\tbottomRightOffsets: 0 @ 0).\r\tright\r\t\taddMorph: self textMorph\r\t\tfullFrame:\r\t\t\t(AltLayoutFrame\r\t\t\t\tfractions: (0 @ 0 corner: 1 @ 1)\r\t\t\t\ttopLeftOffsets: 0 @ 0\r\t\t\t\tbottomRightOffsets: 0 @ -201).\r\tself stackMorph\r\t\ton: #keyStroke\r\t\tsend: #startSearch:for:\r\t\tto: AltKeyboardSearchInTree.\r\tsubPane\r\t\taddMorph: self stackMorph\r\t\tfullFrame:\r\t\t\t(AltLayoutFrame\r\t\t\t\tfractions: (0.0 @ 0.0 corner: 0.3 @ 1.0)\r\t\t\t\ttopLeftOffsets: 1 @ 0\r\t\t\t\tbottomRightOffsets: -1 @ 0).\r\tsubPane\r\t\taddMorph: right\r\t\tfullFrame:\r\t\t\t(AltLayoutFrame\r\t\t\t\tfractions: (0.3 @ 0.0 corner: 1.0 @ 1.0)\r\t\t\t\ttopLeftOffsets: 1 @ 1\r\t\t\t\tbottomRightOffsets: -1 @ 0).\r\tsubPane\r\t\taddMorph:\r\t\t\t(ProportionalSplitterMorph new\r\t\t\t\tlayoutFrame:\r\t\t\t\t\t(AltLayoutFrame\r\t\t\t\t\t\tfractions: (0.3 @ 0.0 corner: 0.3 @ 1.0)\r\t\t\t\t\t\ttopLeftOffsets: -1 @ 0\r\t\t\t\t\t\tbottomRightOffsets: 1 @ 0);\r\t\t\t\taddLeftOrTop: self stackMorph;\r\t\t\t\taddRightOrBottom: self textMorph).\r\twindow minimumExtent: 200 @ 300.\r\twindow announcer when: WindowClosed send: #release to: self.\r\twindow open.\r\tself\r\t\tupdateStackKeymap;\r\t\tupdateTextKeymap;\r\t\tupdateSelection.\r\tself stackMorph takeKeyboardFocus',			#stamp : ' 1/14/2018 19:02:24',			#package : #Alt-Debugger		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2712' ],		#self : OmReference [ '2713' ],		#time : DateAndTime [ '2018-01-14T19:02:43.644299-05:00' ],		#trigger : OmReference [ '2651' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltDebugger,				#isMetaSide : false			},			#name : #over,			#protocol : #actions,			#sourceCode : 'over\r\tself session stepOver: self currentContext.\r\tself updateSession',			#stamp : ' 1/14/2018 19:02:24',			#package : #Alt-Debugger		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2713' ],		#self : OmReference [ '2714' ],		#time : DateAndTime [ '2018-01-14T19:02:43.646141-05:00' ],		#trigger : OmReference [ '2651' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltDebugger,				#isMetaSide : false			},			#name : #'pluggableButtonDo:named:',			#protocol : #private,			#sourceCode : 'pluggableButtonDo: aSymbol named: aString\r\t| aButton |\r\taButton := PluggableButtonMorph\r\t\ton: self\r\t\tgetState: nil\r\t\taction: aSymbol.\r\taButton\r\t\thResizing: #spaceFill;\r\t\tvResizing: #shrinkWrap;\r\t\tlabel: aString.\r\t^ aButton',			#stamp : ' 1/14/2018 19:02:24',			#package : #Alt-Debugger		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2714' ],		#self : OmReference [ '2715' ],		#time : DateAndTime [ '2018-01-14T19:02:43.647865-05:00' ],		#trigger : OmReference [ '2651' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltDebugger,				#isMetaSide : false			},			#name : #proceed,			#protocol : #actions,			#sourceCode : 'proceed\r\tself session\r\t\tresume;\r\t\tclear.\r\twindow close',			#stamp : ' 1/14/2018 19:02:24',			#package : #Alt-Debugger		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2715' ],		#self : OmReference [ '2716' ],		#time : DateAndTime [ '2018-01-14T19:02:43.649515-05:00' ],		#trigger : OmReference [ '2651' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltDebugger,				#isMetaSide : false			},			#name : #rbEnvironment,			#protocol : #accessing,			#sourceCode : 'rbEnvironment\r\t^ RBBrowserEnvironment new',			#stamp : ' 1/14/2018 19:02:24',			#package : #Alt-Debugger		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2716' ],		#self : OmReference [ '2717' ],		#time : DateAndTime [ '2018-01-14T19:02:43.651298-05:00' ],		#trigger : OmReference [ '2651' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltDebugger,				#isMetaSide : false			},			#name : #'recompileMethodTo:inContext:notifying:',			#protocol : #actions,			#sourceCode : 'recompileMethodTo: aString inContext: aContext notifying: aNotifyer\r\t^ aContext\r\t\tifNil: [ false ]\r\t\tifNotNil: [ self session\r\t\t\t\trecompileMethodTo: aString\r\t\t\t\tinContext: aContext\r\t\t\t\tnotifying: aNotifyer ]',			#stamp : ' 1/14/2018 19:02:24',			#package : #Alt-Debugger		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2717' ],		#self : OmReference [ '2718' ],		#time : DateAndTime [ '2018-01-14T19:02:43.653069-05:00' ],		#trigger : OmReference [ '2651' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltDebugger,				#isMetaSide : false			},			#name : #release,			#protocol : #initialization,			#sourceCode : 'release\r\tstack ifNotNil: [ stack announcer unsubscribe: self ].\r\twindow ifNotNil: [ window announcer unsubscribe: self ].\r\tstackMorph ifNotNil: [ stackMorph release ].\r\tinspector ifNotNil: [ inspector release ].\r\tEditorFindReplaceDialogWindow initialize.\r\tself terminate.\r\tsuper release',			#stamp : ' 1/14/2018 19:02:24',			#package : #Alt-Debugger		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2718' ],		#self : OmReference [ '2719' ],		#time : DateAndTime [ '2018-01-14T19:02:43.654831-05:00' ],		#trigger : OmReference [ '2651' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltDebugger,				#isMetaSide : false			},			#name : #restart,			#protocol : #actions,			#sourceCode : 'restart\r\tself session restart: self currentContext.\r\tself updateSession',			#stamp : ' 1/14/2018 19:02:24',			#package : #Alt-Debugger		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2719' ],		#self : OmReference [ '2720' ],		#time : DateAndTime [ '2018-01-14T19:02:43.657533-05:00' ],		#trigger : OmReference [ '2651' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltDebugger,				#isMetaSide : false			},			#name : #runToHere,			#protocol : #actions,			#sourceCode : 'runToHere\r\t"Still has to implement this."\r\r\tself session\r\t\trunToSelection: textMorph trueSelectionInterval\r\t\tinContext: self currentContext.\r\tself whereIs.\r\tself updateSelection',			#stamp : ' 1/14/2018 19:02:24',			#package : #Alt-Debugger		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2720' ],		#self : OmReference [ '2721' ],		#time : DateAndTime [ '2018-01-14T19:02:43.659439-05:00' ],		#trigger : OmReference [ '2651' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltDebugger,				#isMetaSide : false			},			#name : #selectInterruptedContext,			#protocol : #selection,			#sourceCode : 'selectInterruptedContext\r\tself session interruptedContext\r\t\tin: [ :ic | \r\t\t\tself stack contents\r\t\t\t\tdo: [ :e | \r\t\t\t\t\te item = ic\r\t\t\t\t\t\tifTrue: [ ^ e select ] ] ]',			#stamp : ' 1/14/2018 19:02:24',			#package : #Alt-Debugger		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2721' ],		#self : OmReference [ '2722' ],		#time : DateAndTime [ '2018-01-14T19:02:43.661215-05:00' ],		#trigger : OmReference [ '2651' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltDebugger,				#isMetaSide : false			},			#name : #selectedItem,			#protocol : #selection,			#sourceCode : 'selectedItem\r\t"Return the currently selected item."\r\r\t^ self stack selectedItem',			#stamp : ' 1/14/2018 19:02:24',			#package : #Alt-Debugger		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2722' ],		#self : OmReference [ '2723' ],		#time : DateAndTime [ '2018-01-14T19:02:43.663751-05:00' ],		#trigger : OmReference [ '2651' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltDebugger,				#isMetaSide : false			},			#name : #selectedNode,			#protocol : #selection,			#sourceCode : 'selectedNode\r\t"Return the currently selected item."\r\r\t^ self stack selectedItem',			#stamp : ' 1/14/2018 19:02:24',			#package : #Alt-Debugger		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2723' ],		#self : OmReference [ '2724' ],		#time : DateAndTime [ '2018-01-14T19:02:43.665679-05:00' ],		#trigger : OmReference [ '2651' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltDebugger,				#isMetaSide : false			},			#name : #session,			#protocol : #accessing,			#sourceCode : 'session\r\t^ session',			#stamp : ' 1/14/2018 19:02:24',			#package : #Alt-Debugger		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2724' ],		#self : OmReference [ '2725' ],		#time : DateAndTime [ '2018-01-14T19:02:43.667286-05:00' ],		#trigger : OmReference [ '2651' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltDebugger,				#isMetaSide : false			},			#name : #'session:',			#protocol : #accessing,			#sourceCode : 'session: anObject\r\tsession := anObject',			#stamp : ' 1/14/2018 19:02:24',			#package : #Alt-Debugger		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2725' ],		#self : OmReference [ '2726' ],		#time : DateAndTime [ '2018-01-14T19:02:43.669903-05:00' ],		#trigger : OmReference [ '2651' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltDebugger,				#isMetaSide : false			},			#name : #source,			#protocol : #accessing,			#sourceCode : 'source\r\t^ source isNil\r\t\tifTrue: [ \r\t\t\tsource := AltBrowserCodeModel new.\r\t\t\tsource browser: self ]\r\t\tifFalse: [ source ]',			#stamp : ' 1/14/2018 19:02:24',			#package : #Alt-Debugger		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2726' ],		#self : OmReference [ '2727' ],		#time : DateAndTime [ '2018-01-14T19:02:43.671972-05:00' ],		#trigger : OmReference [ '2651' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltDebugger,				#isMetaSide : false			},			#name : #stack,			#protocol : #accessing,			#sourceCode : 'stack\r\t^ stack\r\t\tifNil: [ stack := AltContextItemRootModel new.\r\t\t\tstack model: self.\r\t\t\tstack announcer\r\t\t\t\twhen: AltSelectionChanged send: #updateSelection to: self;\r\t\t\t\twhen: AltListChanged send: #updateSelection to: self.\r\t\t\tstack\r\t\t\t\tcontents:\r\t\t\t\t\t(self session stack\r\t\t\t\t\t\tcollect: [ :e | AltContextItemModel on: e parent: stack ]).\r\t\t\tstack contents first select.\r\t\t\tstack ]',			#stamp : ' 1/14/2018 19:02:24',			#package : #Alt-Debugger		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2727' ],		#self : OmReference [ '2728' ],		#time : DateAndTime [ '2018-01-14T19:02:43.673726-05:00' ],		#trigger : OmReference [ '2651' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltDebugger,				#isMetaSide : false			},			#name : #stackMorph,			#protocol : #'user interface',			#sourceCode : 'stackMorph\r\t^ stackMorph\r\t\tifNil: [ stackMorph := AltListMorph new\r\t\t\t\tmodel: self stack;\r\t\t\t\tyourself ]',			#stamp : ' 1/14/2018 19:02:24',			#package : #Alt-Debugger		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2728' ],		#self : OmReference [ '2729' ],		#time : DateAndTime [ '2018-01-14T19:02:43.67545-05:00' ],		#trigger : OmReference [ '2651' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltDebugger,				#isMetaSide : false			},			#name : #terminate,			#protocol : #actions,			#sourceCode : 'terminate\r\t"call a session terminate: to be done when the window is closed."\r\r\tself session terminate',			#stamp : ' 1/14/2018 19:02:24',			#package : #Alt-Debugger		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2729' ],		#self : OmReference [ '2730' ],		#time : DateAndTime [ '2018-01-14T19:02:43.677289-05:00' ],		#trigger : OmReference [ '2651' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltDebugger,				#isMetaSide : false			},			#name : #textMorph,			#protocol : #'user interface',			#sourceCode : 'textMorph\r\t^ textMorph\r\t\tifNil: [ PluggableTextMorph stylingClass isNil\r\t\t\t\tifTrue: [ PluggableTextMorph stylingClass: SHTextStylerST80 ].\r\t\t\ttextMorph := (AltPluggableTextMorph\r\t\t\t\ton: self source\r\t\t\t\ttext: #contents\r\t\t\t\taccept: #contents:\r\t\t\t\treadSelection: nil\r\t\t\t\tmenu: #buildTextMenu:)\r\t\t\t\tfont: StandardFonts codeFont;\r\t\t\t\thResizing: #spaceFill;\r\t\t\t\tvResizing: #spaceFill;\r\t\t\t\tyourself ]',			#stamp : ' 1/14/2018 19:02:24',			#package : #Alt-Debugger		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2730' ],		#self : OmReference [ '2731' ],		#time : DateAndTime [ '2018-01-14T19:02:43.679336-05:00' ],		#trigger : OmReference [ '2651' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltDebugger,				#isMetaSide : false			},			#name : #through,			#protocol : #actions,			#sourceCode : 'through\r\tself session stepThrough: self currentContext.\r\tself updateSession',			#stamp : ' 1/14/2018 19:02:24',			#package : #Alt-Debugger		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2731' ],		#self : OmReference [ '2732' ],		#time : DateAndTime [ '2018-01-14T19:02:43.681165-05:00' ],		#trigger : OmReference [ '2651' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltDebugger,				#isMetaSide : false			},			#name : #title,			#protocol : #accessing,			#sourceCode : 'title\r\t^ \'Debug: \' , session name',			#stamp : ' 1/14/2018 19:02:24',			#package : #Alt-Debugger		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2732' ],		#self : OmReference [ '2733' ],		#time : DateAndTime [ '2018-01-14T19:02:43.684237-05:00' ],		#trigger : OmReference [ '2651' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltDebugger,				#isMetaSide : false			},			#name : #updateSelection,			#protocol : #selection,			#sourceCode : 'updateSelection\r\t"Update from the model."\r\r\t| modelSelection |\r\tmodelSelection := self selectedItem.\r\tself extensions do: [ :e | e delete ].\r\textensions := nil.\r\tself updateTextKeymap.\r\tself updateStackKeymap.\r\tmodelSelection isNil\r\t\tifTrue: [ textMorph ifNotNil: [ :t | t classOrMetaClass: nil ] ]\r\t\tifFalse: [ textMorph\r\t\t\t\tifNotNil: [ :t | t classOrMetaClass: modelSelection styleClass ].\r\t\t\tself source aboutToStyle: true.\r\t\t\tself source contents: modelSelection sourceCode.\r\t\t\t(modelSelection item receiver respondsTo: #altDebuggerExtensions:)\r\t\t\t\tifTrue: [ extensions := modelSelection item receiver\r\t\t\t\t\t\taltDebuggerExtensions: self.\r\t\t\t\t\tself extensions do: [ :e | toolbar addMorphBack: e ] ].\r\t\t\t(self session selectedCodeRangeForContext: modelSelection item)\r\t\t\t\tin: [ :s | \r\t\t\t\t\ttextMorph\r\t\t\t\t\t\tifNotNil: [ :t | \r\t\t\t\t\t\t\tt selectFrom: s first to: s last.\r\t\t\t\t\t\t\tt scrollSelectionIntoView ] ].\r\t\t\tself inspector object item host: modelSelection item.\r\t\t\tself inspector object watch ]',			#stamp : ' 1/14/2018 19:02:24',			#package : #Alt-Debugger		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2733' ],		#self : OmReference [ '2734' ],		#time : DateAndTime [ '2018-01-14T19:02:43.686139-05:00' ],		#trigger : OmReference [ '2651' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltDebugger,				#isMetaSide : false			},			#name : #updateSession,			#protocol : #selection,			#sourceCode : 'updateSession\r\t"Update when the session changes."\r\r\tstack\r\t\tifNotNil: [ stack\r\t\t\t\tcontents:\r\t\t\t\t\t(self session stack\r\t\t\t\t\t\tcollect: [ :e | AltContextItemModel on: e parent: stack ]).\r\t\t\tstack changed.\r\t\t\tself selectInterruptedContext.\r\t\t\tself updateSelection ]',			#stamp : ' 1/14/2018 19:02:24',			#package : #Alt-Debugger		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2734' ],		#self : OmReference [ '2735' ],		#time : DateAndTime [ '2018-01-14T19:02:43.687967-05:00' ],		#trigger : OmReference [ '2651' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltDebugger,				#isMetaSide : false			},			#name : #updateStackKeymap,			#protocol : #shortcuts,			#sourceCode : 'updateStackKeymap\r\t"Update the stack keymap."\r\r\t"Don\'t forget to update the tree."\r\r\tstackMorph ifNil: [ ^ self ].\r\tself stackMorph kmDispatcher\r\t\treset;\r\t\tattachCategory: #MorphFocusNavigation;\r\t\tattachCategory: #MorphFocusCtrlNavigation.\r\tself buildStackShortcutsOn: self stackMorph kmDispatcher with: self',			#stamp : ' 1/14/2018 19:02:24',			#package : #Alt-Debugger		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2735' ],		#self : OmReference [ '2736' ],		#time : DateAndTime [ '2018-01-14T19:02:43.69023-05:00' ],		#trigger : OmReference [ '2651' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltDebugger,				#isMetaSide : false			},			#name : #updateTextKeymap,			#protocol : #shortcuts,			#sourceCode : 'updateTextKeymap\r\t"Update the text keymap. Reset the dispatcher and make it an AltKMDispatcher if needed."\r\r\ttextMorph ifNil: [ ^ self ].\r\t(textMorph kmDispatcher isKindOf: AltKMDispatcher)\r\t\tifFalse: [ textMorph\r\t\t\t\tsetProperty: #kmDispatcher\r\t\t\t\ttoValue: (AltKMDispatcher target: textMorph) ].\r\t(textMorph textMorph kmDispatcher isKindOf: AltKMDispatcher)\r\t\tifFalse: [ textMorph textMorph\r\t\t\t\tsetProperty: #kmDispatcher\r\t\t\t\ttoValue: (AltKMDispatcher target: textMorph textMorph) ].\r\t{textMorph kmDispatcher.\r\ttextMorph textMorph kmDispatcher}\r\t\tdo: [ :aKMDispatcher | \r\t\t\taKMDispatcher reset.\r\t\t\taKMDispatcher attachCategory: #MorphFocusCtrlNavigation.\r\t\t\tself buildTextShortcutsOn: aKMDispatcher with: self ]',			#stamp : ' 1/14/2018 19:02:24',			#package : #Alt-Debugger		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2736' ],		#self : OmReference [ '2737' ],		#time : DateAndTime [ '2018-01-14T19:02:43.692463-05:00' ],		#trigger : OmReference [ '2651' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltDebugger,				#isMetaSide : false			},			#name : #whereIs,			#protocol : #actions,			#sourceCode : 'whereIs\r\t(self session selectedCodeRangeForContext: self selectedItem item)\r\t\tin: [ :s | \r\t\t\ttextMorph\r\t\t\t\tifNotNil: [ :t | \r\t\t\t\t\tt selectFrom: s first to: s last.\r\t\t\t\t\tt scrollSelectionIntoView.\r\t\t\t\t\tt changed ] ]',			#stamp : ' 1/14/2018 19:02:24',			#package : #Alt-Debugger		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2737' ],		#self : OmReference [ '2738' ],		#time : DateAndTime [ '2018-01-14T19:02:43.694356-05:00' ],		#trigger : OmReference [ '2651' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AltContextItemModel class',				#isMetaSide : true			},			#name : #'on:parent:',			#protocol : #'instance creation',			#sourceCode : 'on: anItem parent: anAltContextItemModelOrNil\r\t^ (self on: anItem) parent: anAltContextItemModelOrNil',			#stamp : ' 1/14/2018 19:02:24',			#package : #Alt-Debugger		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2738' ],		#self : OmReference [ '2739' ],		#time : DateAndTime [ '2018-01-14T19:02:43.697411-05:00' ],		#trigger : OmReference [ '2651' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltContextItemModel,				#isMetaSide : false			},			#name : #asMorph,			#protocol : #'user interface',			#sourceCode : 'asMorph\r\t^ self asStringMorph',			#stamp : ' 1/14/2018 19:02:24',			#package : #Alt-Debugger		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2739' ],		#self : OmReference [ '2740' ],		#time : DateAndTime [ '2018-01-14T19:02:43.699038-05:00' ],		#trigger : OmReference [ '2651' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltContextItemModel,				#isMetaSide : false			},			#name : #asString,			#protocol : #printing,			#sourceCode : 'asString\r\t| method classLocation receiverClass |\r\tmethod := item home method.\r\tclassLocation := method methodClass.\r\treceiverClass := item receiver class.\r\r\t"If the receiver is differen from the implementor, show the original method implementor"\r\tclassLocation := classLocation = receiverClass\r\t\tifTrue: [ classLocation name ]\r\t\tifFalse: [ receiverClass name , \'(\' , classLocation name , \')\' ].\r\titem isBlockContext\r\t\tifTrue: [ classLocation := \'[...] in \' , classLocation ].\r\t^ classLocation , \'>>\' , method selector asString',			#stamp : ' 1/14/2018 19:02:24',			#package : #Alt-Debugger		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2740' ],		#self : OmReference [ '2741' ],		#time : DateAndTime [ '2018-01-14T19:02:43.700775-05:00' ],		#trigger : OmReference [ '2651' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltContextItemModel,				#isMetaSide : false			},			#name : #'buildMenu:',			#protocol : #menu,			#sourceCode : 'buildMenu: aMenu\r\t^ self\r\t\tbuildStackMenu: aMenu\r\t\ton: self model stackMorph\r\t\twith: self model',			#stamp : ' 1/14/2018 19:02:24',			#package : #Alt-Debugger		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2741' ],		#self : OmReference [ '2742' ],		#time : DateAndTime [ '2018-01-14T19:02:43.702573-05:00' ],		#trigger : OmReference [ '2651' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltContextItemModel,				#isMetaSide : false			},			#name : #'buildStackMenu:on:with:',			#protocol : #commands,			#sourceCode : 'buildStackMenu: aMenu on: aStackMorph with: aRequestor\r\t"The item-based stack menu."\r\r\t((self\r\t\tpragmas: #stackAreaCommand\r\t\tfrom: self class\r\t\tto: AltContextItemModel)\r\t\tsorted: [ :a :b | a methodSelector < b methodSelector ])\r\t\tdo: [ :e | \r\t\t\t(self perform: e methodSelector)\r\t\t\t\tdo:\r\t\t\t\t\t[ :c | (c asClass on: aStackMorph for: aRequestor) addItemToMenu: aMenu ] ]\r\t\tseparatedBy: [ aMenu addLine ].\r\t^ aMenu',			#stamp : ' 1/14/2018 19:02:24',			#package : #Alt-Debugger		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2742' ],		#self : OmReference [ '2743' ],		#time : DateAndTime [ '2018-01-14T19:02:43.704315-05:00' ],		#trigger : OmReference [ '2651' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltContextItemModel,				#isMetaSide : false			},			#name : #'buildStackShortcutsOn:with:',			#protocol : #commands,			#sourceCode : 'buildStackShortcutsOn: aKMDispatcher with: aRequestor\r\t"This is an attempt at handling shortcuts...."\r\r\t(self\r\t\tpragmas: #stackAreaCommand\r\t\tfrom: self class\r\t\tto: AltContextItemModel)\r\t\tdo: [ :e | \r\t\t\t(self perform: e methodSelector)\r\t\t\t\tdo: [ :c | \r\t\t\t\t\t| command |\r\t\t\t\t\tcommand := c asClass on: aRequestor stackMorph for: aRequestor.\r\t\t\t\t\tcommand isEnabled\r\t\t\t\t\t\tifTrue: [ command buildShortcut: aKMDispatcher ] ] ]',			#stamp : ' 1/14/2018 19:02:24',			#package : #Alt-Debugger		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2743' ],		#self : OmReference [ '2744' ],		#time : DateAndTime [ '2018-01-14T19:02:43.706377-05:00' ],		#trigger : OmReference [ '2651' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltContextItemModel,				#isMetaSide : false			},			#name : #'buildTextMenu:on:with:',			#protocol : #commands,			#sourceCode : 'buildTextMenu: aMenu on: aTarget with: aRequestor\r\t"Ok. Two steps: first, create the menu linked with the node. second, parse the method and create menu items linked to the selected node."\r\r\t| ast node t |\r\tt := false.\r\t((self\r\t\tpragmas: #textAreaCommand\r\t\tfrom: self class\r\t\tto: AltTreeItemModel)\r\t\tsorted: [ :a :b | a methodSelector < b methodSelector ])\r\t\tdo: [ :p | \r\t\t\tt\r\t\t\t\tifTrue: [ aMenu addLine ]\r\t\t\t\tifFalse: [ t := true ].\r\t\t\t(((self perform: p methodSelector)\r\t\t\t\tcollect: [ :c | c asClassInEnvironment: Smalltalk globals ifAbsent: [  ] ])\r\t\t\t\treject: [ :c | c isNil ])\r\t\t\t\tdo: [ :c | (c on: aTarget for: aRequestor) addItemToMenu: aMenu ] ].\r\tast := item method ast.\r\t(node := ast bestNodeFor: aTarget selectionInterval) notNil\r\t\tifFalse: [ ^ self ].\r\taMenu\r\t\taddLine;\r\t\taddLine.\r\tnode altTextCommands\r\t\tdo: [ :c | \r\t\t\t(c asClass on: aTarget for: aRequestor node: node)\r\t\t\t\taddItemToMenu: aMenu ].\r\tnode canSelect\r\t\tifFalse: [ ^ self ].\r\taTarget textMorph paragraph secondarySelection: node textIntervals.\r\taTarget textMorph selectionChanged',			#stamp : ' 1/14/2018 19:02:24',			#package : #Alt-Debugger		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2744' ],		#self : OmReference [ '2745' ],		#time : DateAndTime [ '2018-01-14T19:02:43.709185-05:00' ],		#trigger : OmReference [ '2651' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltContextItemModel,				#isMetaSide : false			},			#name : #'buildTextShortcutsOn:with:',			#protocol : #commands,			#sourceCode : 'buildTextShortcutsOn: aKMDispatcher with: aRequestor\r\t"This is an attempt at handling shortcuts...."\r\r\t(self pragmas: #textAreaCommand from: self class to: AltTreeItemModel)\r\t\tdo: [ :e | \r\t\t\t(self perform: e methodSelector)\r\t\t\t\tdo: [ :c | \r\t\t\t\t\t| command |\r\t\t\t\t\tcommand := c asClass on: aRequestor textMorph for: aRequestor.\r\t\t\t\t\tcommand isEnabled\r\t\t\t\t\t\tifTrue: [ command buildShortcut: aKMDispatcher ] ] ]',			#stamp : ' 1/14/2018 19:02:24',			#package : #Alt-Debugger		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2745' ],		#self : OmReference [ '2746' ],		#time : DateAndTime [ '2018-01-14T19:02:43.710992-05:00' ],		#trigger : OmReference [ '2651' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltContextItemModel,				#isMetaSide : false			},			#name : #'childNodeFromItem:',			#protocol : #accessing,			#sourceCode : 'childNodeFromItem: anItem\r\t"Customization point: change this to set a different item model subclass."\r\r\t^ AltContextItemModel on: anItem',			#stamp : ' 1/14/2018 19:02:24',			#package : #Alt-Debugger		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2746' ],		#self : OmReference [ '2747' ],		#time : DateAndTime [ '2018-01-14T19:02:43.712969-05:00' ],		#trigger : OmReference [ '2651' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltContextItemModel,				#isMetaSide : false			},			#name : #clipboardCommands,			#protocol : #commands,			#sourceCode : 'clipboardCommands\r\t<textAreaCommand>\r\t^ #(#AltCutTextCommand #AltCopyTextCommand #AltPasteTextCommand #AltSelectAllTextCommand)',			#stamp : ' 1/14/2018 19:02:24',			#package : #Alt-Debugger		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2747' ],		#self : OmReference [ '2748' ],		#time : DateAndTime [ '2018-01-14T19:02:43.715174-05:00' ],		#trigger : OmReference [ '2651' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltContextItemModel,				#isMetaSide : false			},			#name : #couldExpand,			#protocol : #testing,			#sourceCode : 'couldExpand\r\t^ false',			#stamp : ' 1/14/2018 19:02:24',			#package : #Alt-Debugger		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2748' ],		#self : OmReference [ '2749' ],		#time : DateAndTime [ '2018-01-14T19:02:43.716971-05:00' ],		#trigger : OmReference [ '2651' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltContextItemModel,				#isMetaSide : false			},			#name : #doItContext,			#protocol : #accessing,			#sourceCode : 'doItContext\r\t^ item',			#stamp : ' 1/14/2018 19:02:24',			#package : #Alt-Debugger		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2749' ],		#self : OmReference [ '2750' ],		#time : DateAndTime [ '2018-01-14T19:02:43.718672-05:00' ],		#trigger : OmReference [ '2651' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltContextItemModel,				#isMetaSide : false			},			#name : #doItReceiver,			#protocol : #accessing,			#sourceCode : 'doItReceiver\r\t^ item home receiver',			#stamp : ' 1/14/2018 19:02:24',			#package : #Alt-Debugger		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2750' ],		#self : OmReference [ '2751' ],		#time : DateAndTime [ '2018-01-14T19:02:43.720343-05:00' ],		#trigger : OmReference [ '2651' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltContextItemModel,				#isMetaSide : false			},			#name : #'doubleClickIn:',			#protocol : #actions,			#sourceCode : 'doubleClickIn: anAltListMorph\r\t^ self item method browse',			#stamp : ' 1/14/2018 19:02:24',			#package : #Alt-Debugger		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2751' ],		#self : OmReference [ '2752' ],		#time : DateAndTime [ '2018-01-14T19:02:43.72317-05:00' ],		#trigger : OmReference [ '2651' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltContextItemModel,				#isMetaSide : false			},			#name : #executeCommands,			#protocol : #commands,			#sourceCode : 'executeCommands\r\t<textAreaCommand>\r\t^ #(#AltDoItTextCommand #AltPrintItTextCommand #AltInspectItTextCommand #AltDebugItTextCommand #AltParenthesisTextCommand #AltSquareBracketsTextCommand #AltDoubleQuotesTextCommand #AltCurlyBracketsTextCommand #AltRBFormatCommand)',			#stamp : ' 1/14/2018 19:02:24',			#package : #Alt-Debugger		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2752' ],		#self : OmReference [ '2753' ],		#time : DateAndTime [ '2018-01-14T19:02:43.724965-05:00' ],		#trigger : OmReference [ '2651' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltContextItemModel,				#isMetaSide : false			},			#name : #model,			#protocol : #accessing,			#sourceCode : 'model\r\t^ parent model',			#stamp : ' 1/14/2018 19:02:24',			#package : #Alt-Debugger		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2753' ],		#self : OmReference [ '2754' ],		#time : DateAndTime [ '2018-01-14T19:02:43.726752-05:00' ],		#trigger : OmReference [ '2651' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltContextItemModel,				#isMetaSide : false			},			#name : #'pragmas:from:to:',			#protocol : #private,			#sourceCode : 'pragmas: aSymbol from: aClass to: aTarget\r\t"A safe way to find pragmas in a class hierarchy."\r\r\t| pragmas |\r\tpragmas := OrderedCollection new.\r\t(aClass allSelectorsBelow: aTarget superclass)\r\t\tdo: [ :selector | pragmas addAll: ((aClass lookupSelector: selector) pragmas select: [ :pragma | pragma key == aSymbol ]) ].\r\t^ pragmas',			#stamp : ' 1/14/2018 19:02:24',			#package : #Alt-Debugger		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2754' ],		#self : OmReference [ '2755' ],		#time : DateAndTime [ '2018-01-14T19:02:43.728494-05:00' ],		#trigger : OmReference [ '2651' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltContextItemModel,				#isMetaSide : false			},			#name : #saveCommands,			#protocol : #commands,			#sourceCode : 'saveCommands\r\t<textAreaCommand>\r\t^ #(#AltDebugAcceptCommand #AltCancelTextCommand)',			#stamp : ' 1/14/2018 19:02:24',			#package : #Alt-Debugger		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2755' ],		#self : OmReference [ '2756' ],		#time : DateAndTime [ '2018-01-14T19:02:43.73044-05:00' ],		#trigger : OmReference [ '2651' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltContextItemModel,				#isMetaSide : false			},			#name : #sourceClass,			#protocol : #accessing,			#sourceCode : 'sourceClass\r\t^ item home receiver class',			#stamp : ' 1/14/2018 19:02:24',			#package : #Alt-Debugger		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2756' ],		#self : OmReference [ '2757' ],		#time : DateAndTime [ '2018-01-14T19:02:43.732516-05:00' ],		#trigger : OmReference [ '2651' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltContextItemModel,				#isMetaSide : false			},			#name : #sourceCode,			#protocol : #accessing,			#sourceCode : 'sourceCode\r\t^ item sourceCode',			#stamp : ' 1/14/2018 19:02:24',			#package : #Alt-Debugger		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2757' ],		#self : OmReference [ '2758' ],		#time : DateAndTime [ '2018-01-14T19:02:43.735257-05:00' ],		#trigger : OmReference [ '2651' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltContextItemModel,				#isMetaSide : false			},			#name : #stackAreaCommands,			#protocol : #commands,			#sourceCode : 'stackAreaCommands\r\t<stackAreaCommand>\r\t^ #(#AltSelectNextItem #AltSelectPreviousItem #AltSelectMoveDown #AltSelectMoveUp #AltDebugBrowseCommand)',			#stamp : ' 1/14/2018 19:02:24',			#package : #Alt-Debugger		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2758' ],		#self : OmReference [ '2759' ],		#time : DateAndTime [ '2018-01-14T19:02:43.737121-05:00' ],		#trigger : OmReference [ '2651' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltContextItemModel,				#isMetaSide : false			},			#name : #styleClass,			#protocol : #accessing,			#sourceCode : 'styleClass\r\t^ self sourceClass',			#stamp : ' 1/14/2018 19:02:24',			#package : #Alt-Debugger		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2759' ],		#self : OmReference [ '2760' ],		#time : DateAndTime [ '2018-01-14T19:02:43.738845-05:00' ],		#trigger : OmReference [ '2651' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltContextItemModel,				#isMetaSide : false			},			#name : #undoCommands,			#protocol : #commands,			#sourceCode : 'undoCommands\r\t<textAreaCommand>\r\t^ #(#AltUndoTextCommand #AltRedoTextCommand)',			#stamp : ' 1/14/2018 19:02:24',			#package : #Alt-Debugger		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2760' ],		#self : OmReference [ '2761' ],		#time : DateAndTime [ '2018-01-14T19:02:43.740644-05:00' ],		#trigger : OmReference [ '2651' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltContextItemRootModel,				#isMetaSide : false			},			#name : #model,			#protocol : #accessing,			#sourceCode : 'model\r\t^ model',			#stamp : ' 1/14/2018 19:02:24',			#package : #Alt-Debugger		}	}}OmEntry {	#tags : {		#author : 'francoisrousseau',		#prior : OmReference [ '2761' ],		#self : OmReference [ '2762' ],		#time : DateAndTime [ '2018-01-14T19:02:43.742208-05:00' ],		#trigger : OmReference [ '2651' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AltContextItemRootModel,				#isMetaSide : false			},			#name : #'model:',			#protocol : #accessing,			#sourceCode : 'model: anObject\r\tmodel := anObject',			#stamp : ' 1/14/2018 19:02:24',			#package : #Alt-Debugger		}	}}